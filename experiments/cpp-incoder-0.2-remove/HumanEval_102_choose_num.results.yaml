language: cpp
name: HumanEval_102_choose_num
results:
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x <= y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n\
    \        } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (y) {\n        long temp = 0;\n        long div\
    \ = 1;\n        while (x % div) {\n            div *= 2;\n        }\n        if\
    \ (y % div) {\n            temp = y;\n            y = div;\n        }\n      \
    \  ans = max(ans, temp);\n        y /= 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu82zrpvt.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpu82zrpvt.cpp:24:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   24 |         ans = max(ans,\
    \ temp);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu82zrpvt.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660098747
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (y) {\n        long mid = y / 2;\n        if (mid\
    \ * 2 > y) {\n            y = mid;\n        } else {\n            x = mid;\n \
    \       }\n    }\n    if (x > ans) {\n        ans = x;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x != mid && y !=\
    \ mid) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            ans = mid;\n  \
    \          break;\n        } else if (x % 2 == 0 && y % 2 != 0) {\n          \
    \  y = mid - 1;\n        } else if (x % 2 != 0 && y % 2 == 0) {\n            x\
    \ = mid + 1;\n        } else {\n            x = mid - 1;\n            y = mid\
    \ + 1;\n        }\n        mid = (x + y) / 2;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpje0du65y: /tmp/tmpje0du65y.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            break;\n    \
    \    }\n        if (mid > y) {\n            y = mid;\n        } else {\n     \
    \       x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpshe3cdlv: /tmp/tmpshe3cdlv.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ your code goes here\n    long ans = -1;\n    if (x >= y) {\n        long mid\
    \ = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n        if (ans == -1)\
    \ {\n            ans = mid;\n        }\n    } else {\n        long mid = y + (x\
    \ - y) / 2;\n        ans = choose_num(x, mid);\n        if (ans == -1) {\n   \
    \         ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+1 < y) {\n        if (x%2 == 0) {\n       \
    \     ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpstl7wzru: /tmp/tmpstl7wzru.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n \
    \       ans = mid;\n    } else {\n        if (mid < x && mid < y) {\n        \
    \    ans = mid;\n        } else if (mid > x && mid > y) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvr6zycvo: /tmp/tmpvr6zycvo.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        if (mid < y) {\n            x = mid + 1;\n        } else {\n        \
    \    y = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp31rddth: /tmp/tmpp31rddth.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        return -1;\n    }\n    long ans = x;\n    while (ans < y)\
    \ {\n        ans += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp30fci4dc: /tmp/tmp30fci4dc.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x >= y) {\n        ans = x;\n\
    \    }\n    else {\n        ans = y;\n    }\n    while (ans % 2 == 0) {\n    \
    \    ans /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_hxa2_b6: /tmp/tmp_hxa2_b6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    long\
    \ left = (x > mid) ? x : mid;\n    long right = (y > mid) ? y : mid;\n    long\
    \ diff = right - left;\n    long sum = 0;\n    long count = 0;\n    while(diff\
    \ > 0) {\n        sum += diff;\n        count++;\n        diff /= 2;\n    }\n\
    \    while(count > 0) {\n        sum += count;\n        count--;\n    }\n    if(sum\
    \ % 2 == 0) {\n        ans = mid;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5y6cwbgx: /tmp/tmp5y6cwbgx.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x % 2 == 0 && y % 2 == 0) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    if (x == y) {\n        ans\
    \ = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzpsf64x0: /tmp/tmpzpsf64x0.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    long\
    \ left_num = choose_num(x, mid);\n    long right_num = choose_num(mid, y);\n \
    \   if (left_num == -1 && right_num == -1) {\n        return -1;\n    }\n    if\
    \ (left_num == -1) {\n        return right_num;\n    }\n    if (right_num == -1)\
    \ {\n        return left_num;\n    }\n    if (left_num > right_num) {\n      \
    \  ans = left_num;\n    } else {\n        ans = right_num;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    // If x is less than or equal to y, then x must be even.\n\
    \    if (x <= y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpju7l88jz: /tmp/tmpju7l88jz.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        if (mid > y) {\n            y = mid;\n        } else {\n            x\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpajkzeunb: /tmp/tmpajkzeunb.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        if (mid > y) {\n            y = mid;\n        } else {\n            x\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpajkzeunb: /tmp/tmpajkzeunb.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid * mid <= y) {\n            x = mid + 1;\n        } else {\n      \
    \      y = mid;\n        }\n    }\n    if (y > ans) {\n        ans = y;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098752
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n    \
    \    } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpool2qhv4: /tmp/tmpool2qhv4.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    long ans = -1;\n    while (x != 0) {\n        long temp = x % 10;\n     \
    \   x /= 10;\n        if (temp % 2 == 0 && temp > ans) {\n            ans = temp;\n\
    \        }\n    }\n    while (y != 0) {\n        long temp = y % 10;\n       \
    \ y /= 10;\n        if (temp % 2 == 0 && temp > ans) {\n            ans = temp;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxh2uw3av: /tmp/tmpxh2uw3av.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long m = 1;\n    long n = y;\n    long k;\n    while (m <= n)\
    \ {\n        k = m + (n - m) / 2;\n        if (x % k == 0 && y % k == 0) {\n \
    \           ans = k;\n            break;\n        }\n        if (x % k == 0) {\n\
    \            m = k + 1;\n        }\n        else {\n            n = k;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098753
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        swap(x, y);\n    }\n    // If x is even,\
    \ return y\n    if (x % 2 == 0) {\n        ans = y;\n    }\n    // If y is even,\
    \ return x\n    if (y % 2 == 0) {\n        ans = x;\n    }\n    // If x is odd,\
    \ return y + 1\n    if (x % 2 == 1) {\n        ans = y + 1;\n    }\n    // If\
    \ y is odd, return x + 1\n    if (y % 2 == 1) {\n        ans = x + 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvenvi4ox.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpvenvi4ox.cpp:10:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   10 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpvenvi4ox.cpp:10:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpvenvi4ox.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvenvi4ox.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvenvi4ox.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpvenvi4ox.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (y) {\n        if (y & 1) {\n            ans =\
    \ y;\n            break;\n        }\n        y >>= 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpf3gev5up: /tmp/tmpf3gev5up.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x <= y) {\n        long mid = (x + y) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            break;\n    \
    \    }\n        if (mid > y) {\n            y = mid;\n        } else {\n     \
    \       x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpaqpzor20: /tmp/tmpaqpzor20.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans != -1) {\n            ans = max(ans,\
    \ choose_num(x, mid));\n        }\n    } else {\n        long mid = y + (x - y)\
    \ / 2;\n        ans = choose_num(x, mid);\n        if (ans != -1) {\n        \
    \    ans = max(ans, choose_num(y, mid));\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd17sgv00.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpd17sgv00.cpp:13:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |             ans =\
    \ max(ans, choose_num(x, mid));\n      |                   ^~~\n      |      \
    \             std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd17sgv00.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpd17sgv00.cpp:19:19: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   19 |             ans = max(ans, choose_num(y, mid));\n      |            \
    \       ^~~\n      |                   std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd17sgv00.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long m = x;\n    long n = y;\n\
    \    long temp;\n    while(m <= n) {\n        temp = m;\n        m = n+1;\n  \
    \      n = temp;\n    }\n    while(m > n) {\n        temp = m;\n        m = n+1;\n\
    \        n = temp;\n    }\n    while(m > 1) {\n        if(m % 2 == 0) {\n    \
    \        ans = m;\n            m = m/2;\n        }\n        else {\n         \
    \   m = m/2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp__i8aua6: /tmp/tmp__i8aua6.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x > y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    while (y) {\n        long\
    \ temp = y;\n        y = x % y;\n        x = temp;\n    }\n    if (x == y) {\n\
    \        ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_9pk6ic5: /tmp/tmp_9pk6ic5.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (y) {\n        long temp = y;\n        y = x %\
    \ y;\n        x = temp;\n    }\n    if (x > ans) {\n        ans = x;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp32t35euc: /tmp/tmp32t35euc.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    assert(x >= 0 && y >= 0);\n    if (x > y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    while (x < y) {\n      \
    \  if (x % 2 == 0 && y % 2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        ++x;\n        ++y;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098752
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long temp = 0;\n    long limit = y;\n\
    \    long i = x;\n    long remainder = 0;\n    while(i <= limit) {\n        remainder\
    \ = i % 2;\n        temp = i;\n        i = i / 2;\n        if(remainder == 0 &&\
    \ temp > ans) {\n            ans = temp;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098753
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = x + (y-x)/2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n    \
    \    } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = mid;\n        }\n        else {\n           \
    \ ans = choose_num(x, mid);\n        }\n    }\n    else {\n        long mid =\
    \ (y + x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n        }\n\
    \        else {\n            ans = choose_num(mid, y);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa14sromg: /tmp/tmpa14sromg.cpp:32: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= y && mid <= y) {\n    \
    \    ans = mid;\n    } else if (x <= y && mid >= y) {\n        ans = x;\n    }\
    \ else if (x >= y && mid >= y) {\n        ans = y;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpi5h17ft0: /tmp/tmpi5h17ft0.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        if (mid < y) {\n            y = mid;\n        }\n        else {\n   \
    \         x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9nmsoyoz: /tmp/tmp9nmsoyoz.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n\
    \    } else if (y <= mid) {\n        ans = y;\n    } else {\n        long left_num\
    \ = choose_num(x, mid - 1);\n        long right_num = choose_num(mid + 1, y);\n\
    \        if (left_num == -1 && right_num == -1) {\n            ans = mid;\n  \
    \      } else {\n            if (left_num == -1) {\n                ans = right_num;\n\
    \            } else {\n                ans = left_num;\n            }\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpios_6zya: /tmp/tmpios_6zya.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n  \
    \      } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8lvdf5o1: /tmp/tmp8lvdf5o1.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n \
    \       ans = mid;\n    } else {\n        ans = choose_num(x, mid);\n        if\
    \ (ans == -1) {\n            ans = choose_num(mid + 1, y);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx86l2_k8: /tmp/tmpx86l2_k8.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    if\
    \ (x <= mid) {\n        ans = x;\n    } else if (y <= mid) {\n        ans = y;\n\
    \    } else {\n        ans = choose_num(mid, y);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpg30wajdt: /tmp/tmpg30wajdt.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    while (x<y) {\n        long\
    \ mid = x + (y-x)/2;\n        if (mid % 2 == 0) {\n            ans = mid;\n  \
    \          break;\n        }\n        if (mid > y) {\n            y = mid;\n \
    \       } else {\n            x = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1mmickls: /tmp/tmp1mmickls.cpp:32: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+y <= y) {\n        if (x%2 == 0) {\n      \
    \      x = x + y;\n            ans = x;\n        }\n        else {\n         \
    \   y = y + x;\n            ans = y;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzbqcgv_o: /tmp/tmpzbqcgv_o.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    // If x is smaller than y, then x must be even.\n   \
    \ if (x < y) {\n        ans = x;\n    } else {\n        // If x is larger than\
    \ y, then x must be odd.\n        ans = y;\n    }\n    while (ans % 2 == 0) {\n\
    \        ans /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqgj_8_7t: /tmp/tmpqgj_8_7t.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    long\
    \ left_num = x - mid;\n    long right_num = y - mid;\n    long left_even = left_num\
    \ / 2;\n    long right_even = right_num / 2;\n    if (left_even % 2 == 0 && right_even\
    \ % 2 == 0) {\n        ans = mid;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpc2skvy_j: /tmp/tmpc2skvy_j.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        } else {\n            ans\
    \ = choose_num(mid, y);\n        }\n    } else {\n        long mid = y + (x -\
    \ y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n        } else\
    \ {\n            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= y) {\n        if (mid %\
    \ 2 == 0) {\n            ans = mid;\n        }\n    } else {\n        if (mid\
    \ % 2 == 1) {\n            ans = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpogtquh83: /tmp/tmpogtquh83.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x <= y) {\n        long mid = (x + y) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            break;\n    \
    \    }\n        if (mid > y) {\n            y = mid;\n        } else {\n     \
    \       x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpaqpzor20: /tmp/tmpaqpzor20.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n        }\
    \ else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp191qgxoq: /tmp/tmp191qgxoq.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgsxyqyr7: /tmp/tmpgsxyqyr7.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098749
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    while(x\
    \ >= mid && y >= mid) {\n        if(x % 2 == 0 && y % 2 == 0) {\n            ans\
    \ = mid;\n            break;\n        }\n        else if(x % 2 == 0 && y % 2 !=\
    \ 0) {\n            y = y - 1;\n        }\n        else if(x % 2 != 0 && y % 2\
    \ == 0) {\n            x = x - 1;\n        }\n        else {\n            x =\
    \ x - 1;\n            y = y - 1;\n        }\n        mid = (x + y) / 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpls9kjoch: /tmp/tmpls9kjoch.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    // x must be smaller than y\n    if (x == 0 || y == 0)\
    \ {\n        return -1;\n    }\n    // x must be even\n    if (x % 2 == 0) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // y must\
    \ be even\n    if (y % 2 == 0) {\n        long temp = y;\n        x = y;\n   \
    \     y = temp;\n    }\n    // x must be smaller than y\n    if (x == 0 || y ==\
    \ 0) {\n        return -1;\n    }\n    // x must be even\n    if (x % 2 == 0)\
    \ {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    //\
    \ y must be even\n    if (y % 2 == 0) {\n        long temp = y;\n        x = y;\n\
    \        y = temp;\n    }\n    // x must be smaller than y\n    if (x == 0 ||\
    \ y == 0) {\n        return -1;\n    }\n    // x must be even\n    if (x % 2 ==\
    \ 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ // y must be even\n    if (y % 2 == 0) {\n        long temp = y;\n        x\
    \ = y;\n        y = temp;\n    }\n    // x must be smaller than y\n    if (x ==\
    \ 0 || y == 0) {\n        return -1;\n    }\n    // x must be even\n    if (x\
    \ % 2 == 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n   \
    \ }\n    // y must be even\n    if (y % 2 == 0) {\n        long temp = y;\n  \
    \      x = y;\n        y = temp;\n    }\n    // x must be smaller than y\n   \
    \ if (x == 0 || y == 0) {\n        return -1;\n    }\n    // x must be even\n\
    \    if (x % 2 == 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // y must be even\n    if (y % 2 == 0) {\n        long temp = y;\n\
    \        x = y;\n        y = temp;\n    }\n    // x must be smaller than y\n \
    \   if (x == 0 || y == 0) {\n        return -1;\n    }\n    // x must be even\n\
    \    if (x % 2 == 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // y must be even\n    if (y % 2 == 0) {\n        long temp = y;\n\
    \        x = y;\n        y = temp;\n    }\n    // x must be smaller than y\n \
    \   if (x == 0 || y == 0) {\n        return -1;\n    }\n    // x must be even\n\
    \    if (x % 2 == 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // y must be even\n    if (y % 2 == 0) {\n        long temp = y;\n\
    \        x = y;\n        y = temp;\n    }\n    // x must be smaller than y\n \
    \   if (x == 0 || y == 0) {\n        return -1;\n    }\n    // x \n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjn_38s2t: /tmp/tmpjn_38s2t.cpp:134: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+y != 0) {\n        if ((x % 2) == 0) {\n  \
    \          x = x / 2;\n        } else {\n            y = y / 2;\n        }\n \
    \   }\n    if (x == y) {\n        ans = x;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098754
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    while(x\
    \ <= y) {\n        if(x == mid) {\n            ans = mid;\n            break;\n\
    \        }\n        else if(y == mid) {\n            ans = mid;\n            break;\n\
    \        }\n        else if(x % 2 == 0 && y % 2 == 0) {\n            ans = mid;\n\
    \            break;\n        }\n        else if(x % 2 == 1 && y % 2 == 1) {\n\
    \            ans = mid;\n            break;\n        }\n        else if(x % 2\
    \ == 1 && y % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        else if(x % 2 == 0 && y % 2 == 1) {\n            ans = mid;\n       \
    \     break;\n        }\n        else if(x % 2 == 0 && y % 2 == 0) {\n       \
    \     ans = mid;\n            break;\n        }\n        else if(x % 2 == 1 &&\
    \ y % 2 == 1) {\n            ans = mid;\n            break;\n        }\n     \
    \   else if(x % 2 == 1 && y % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        else if(x % 2 == 0 && y % 2 == 1) {\n            ans = mid;\n\
    \            break;\n        }\n        else if(x % 2 == 0 && y % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if(x % 2\
    \ == 1 && y % 2 == 1) {\n            ans = mid;\n            break;\n        }\n\
    \        else if(x % 2 == 1 && y % 2 == 0) {\n            ans = mid;\n       \
    \     break;\n        }\n        else if(x % 2 == 0 && y % 2 == 1) {\n       \
    \     ans = mid;\n            break;\n        }\n        else if(x % 2 == 0 &&\
    \ y % 2 == 0) {\n            ans = mid;\n            break;\n        }\n     \
    \   else if(x % 2 == 1 && y % 2 == 1) {\n            ans = mid;\n            break;\n\
    \        }\n        else if(x % 2 == 1 && y % 2 == 0) {\n            ans = mid;\n\
    \            break;\n        }\n        else if(x % 2 == 0 && y % 2 == 1) {\n\
    \            ans = mid;\n            break;\n        }\n        else if(x % 2\
    \ == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        else if(x % 2 == 1 && y % 2 == 1) {\n            ans = mid;\n       \
    \     break;\n        }\n        else if(x % 2 == 1 && y % 2 == 0) {\n       \
    \     ans = mid;\n            break;\n        }\n        else if(x % 2 == 0 &&\
    \ y % 2 == 1) {\n            ans = mid;\n            break;\n        }\n     \
    \   else if(x % 2 == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        else if(x % 2 == 1 && y % 2 == 1) {\n            \n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptq1c364q.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmptq1c364q.cpp:107:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  107 | int main() {\n      |     \
    \       ^\n/tmp/tmptq1c364q.cpp:117:1: error: expected \u2018}\u2019 at end of\
    \ input\n  117 | }\n      | ^\n/tmp/tmptq1c364q.cpp:11:19: note: to match this\
    \ \u2018{\u2019\n   11 |     while(x <= y) {\n      |                   ^\n/tmp/tmptq1c364q.cpp:117:1:\
    \ error: expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmptq1c364q.cpp:7:33:\
    \ note: to match this \u2018{\u2019\n    7 | long choose_num(long x, long y) {\n\
    \      |                                 ^\n/tmp/tmptq1c364q.cpp:117:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  117 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660098749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgsxyqyr7: /tmp/tmpgsxyqyr7.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpakhbvz8u: /tmp/tmpakhbvz8u.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x) {\n        long temp = x % 2;\n        x /=\
    \ 2;\n        if (temp) {\n            ans = y;\n            y = temp;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_k9g5m13: /tmp/tmp_k9g5m13.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n    \
    \    }\n        else {\n            y = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbf4qs0hx: /tmp/tmpbf4qs0hx.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        ans =\
    \ choose_num(mid, y);\n        if (ans == -1) {\n            ans = choose_num(x,\
    \ mid);\n        }\n    } else {\n        long mid = (x + y) / 2;\n        ans\
    \ = choose_num(x, mid);\n        if (ans == -1) {\n            ans = choose_num(y,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid%2 == 0) {\n            ans = mid;\n            break;\n        }\n \
    \       if (mid%2 == 1) {\n            y = mid;\n        }\n        else {\n \
    \           x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpiqfmsqkq: /tmp/tmpiqfmsqkq.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    long\
    \ sum = 0;\n    long count = 0;\n    while (x <= y) {\n        if (mid % 2 ==\
    \ 0) {\n            sum += mid;\n            count++;\n        }\n        mid\
    \ = (mid + x) / 2;\n        x++;\n    }\n    if (count == 1) {\n        ans =\
    \ sum;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0id0ivej: /tmp/tmp0id0ivej.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long m = 1;\n    long n = y;\n    long k;\n    long t;\n    long\
    \ ans1 = 0;\n    long ans2 = 0;\n    long ans3 = 0;\n    long ans4 = 0;\n    long\
    \ ans5 = 0;\n    long ans6 = 0;\n    long ans7 = 0;\n    long ans8 = 0;\n    long\
    \ ans9 = 0;\n    long ans10 = 0;\n    long ans11 = 0;\n    long ans12 = 0;\n \
    \   long ans13 = 0;\n    long ans14 = 0;\n    long ans15 = 0;\n    long ans16\
    \ = 0;\n    long ans17 = 0;\n    long ans18 = 0;\n    long ans19 = 0;\n    long\
    \ ans20 = 0;\n    long ansp = 0;\n    long ansp1 = 0;\n    long ansp2 = 0;\n \
    \   long ansp3 = 0;\n    long ansp4 = 0;\n    long ansp5 = 0;\n    long ansp6\
    \ = 0;\n    long ansp7 = 0;\n    long ansp8 = 0;\n    long ansp9 = 0;\n    long\
    \ ansp10 = 0;\n    long ansp11 = 0;\n    long ansp12 = 0;\n    long ansp13 = 0;\n\
    \    long ansp14 = 0;\n    long ansp15 = 0;\n    long ansp16 = 0;\n    long ansp17\
    \ = 0;\n    long ansp18 = 0;\n    long ansp19 = 0;\n    long ansp20 = 0;\n   \
    \ long ansp21 = 0;\n    long ansp22 = 0;\n    long ansp23 = 0;\n    long ansp24\
    \ = 0;\n    long ansp25 = 0;\n    long ansp26 = 0;\n    long ansp27 = 0;\n   \
    \ long ansp28 = 0;\n    long ansp29 = 0;\n    long ansp30 = 0;\n    long ansp31\
    \ = 0;\n    long ansp32 = 0;\n    long ansp33 = 0;\n    long ansp34 = 0;\n   \
    \ long ansp35 = 0;\n    long ansp36 = 0;\n    long ansp37 = 0;\n    long ansp38\
    \ = 0;\n    long ansp39 = 0;\n    long ansp40 = 0;\n    long ansp41 = 0;\n   \
    \ long ansp42 = 0;\n    long ansp43 = 0;\n    long ansp44 = 0;\n    long ansp45\
    \ = 0;\n    long ansp46 = 0;\n    long ansp47 = 0;\n    long ansp48 = 0;\n   \
    \ long ansp49 = 0;\n    long ansp50 = 0;\n    long ansp51 = 0;\n    long ansp52\
    \ = 0;\n    long ansp53\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rd_hd3u.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp7rd_hd3u.cpp:87:1: error: expected initializer before \u2018\
    }\u2019 token\n   87 | }\n      | ^\n/tmp/tmp7rd_hd3u.cpp:87:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660098749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n    \
    \    if (mid % 2 == 0) {\n            ans = mid;\n            break;\n       \
    \ }\n        mid = (x + y) / 2;\n        x++;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_s5sz2ur: /tmp/tmp_s5sz2ur.cpp:28: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans\
    \ = mid;\n    } else {\n        if (x <= mid) {\n            ans = choose_num(mid,\
    \ y);\n        } else {\n            ans = choose_num(x, mid);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0p6lgugy: /tmp/tmp0p6lgugy.cpp:24: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n        }\
    \ else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp191qgxoq: /tmp/tmp191qgxoq.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    // If x is less than or equal to y, then x must be even.\n\
    \    if (x <= y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // If x is equal to or greater than y, then x must be odd.\n    if\
    \ (x == y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    // If x is odd, then x must be even.\n    if (x % 2 == 0) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    // If y is odd, then\
    \ y must be even.\n    if (y % 2 == 0) {\n        long temp = y;\n        x =\
    \ y;\n        y = temp;\n    }\n    // If x is even, then y must be odd.\n   \
    \ if (x % 2 == 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // If y is even, then x must be odd.\n    if (y % 2 == 0) {\n    \
    \    long temp = y;\n        x = y;\n        y = temp;\n    }\n    // If x is\
    \ greater than y, then x must be even.\n    if (x > y) {\n        long temp =\
    \ x;\n        x = y;\n        y = temp;\n    }\n    // If y is greater than x,\
    \ then y must be even.\n    if (y > x) {\n        long temp = y;\n        x =\
    \ y;\n        y = temp;\n    }\n    // If x is greater than y, then x must be\
    \ odd.\n    if (x > y) {\n        long temp = x;\n        x = y;\n        y =\
    \ temp;\n    }\n    // If y is greater than x, then y must be odd.\n    if (y\
    \ > x) {\n        long temp = y;\n        x = y;\n        y = temp;\n    }\n \
    \   // If x is less than or equal to y, then x must be even.\n    if (x <= y)\
    \ {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    //\
    \ If x is equal to or greater than y, then x must be odd.\n    if (x == y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x\
    \ is odd, then x must be even.\n    if (x % 2 == 0) {\n        long temp = x;\n\
    \        x = y;\n        y = temp;\n    }\n    // If y is odd, then y must be\
    \ even.\n    if (y % 2 == 0) {\n        long temp = y;\n        x = y;\n     \
    \   y = temp;\n    }\n    // If x is even, then y must be odd.\n    if (x % 2\
    \ == 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    // If y is even, then x must be odd.\n    if (y % 2 == 0) {\n        long\
    \ temp = y;\n        x = \n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwr347u6o.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpwr347u6o.cpp:108:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  108 | }\n      | ^\n/tmp/tmpwr347u6o.cpp:109:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  109 | int main() {\n      |            ^\n/tmp/tmpwr347u6o.cpp:119:1: error:\
    \ expected \u2018}\u2019 at end of input\n  119 | }\n      | ^\n/tmp/tmpwr347u6o.cpp:7:33:\
    \ note: to match this \u2018{\u2019\n    7 | long choose_num(long x, long y) {\n\
    \      |                                 ^\n/tmp/tmpwr347u6o.cpp:119:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  119 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n        if\
    \ (mid%2 == 0) {\n            ans = mid;\n            break;\n        }\n    \
    \    if (mid%2 != 0) {\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4d1ej9y8: /tmp/tmp4d1ej9y8.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    assert(x >= 0 && y >= 0);\n    if (x <= y) {\n        long mid\
    \ = (x + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n      \
    \  }\n        else {\n            ans = choose_num(mid, y);\n        }\n    }\n\
    \    else {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n  \
    \          ans = mid;\n        }\n        else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpt1_ij9z3: /tmp/tmpt1_ij9z3.cpp:33: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098751
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n      \
    \      ans = choose_num(mid, y);\n        }\n    }\n    else {\n        long mid\
    \ = y + (x - y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n  \
    \      }\n        else {\n            ans = choose_num(x, mid);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid\
    \ % 2 == 0) {\n        ans = mid;\n    } else {\n        if (mid < x && mid <\
    \ y) {\n            ans = mid;\n        } else if (mid > x && mid > y) {\n   \
    \         ans = mid;\n        } else {\n            ans = -1;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpuvc_hvfl: /tmp/tmpuvc_hvfl.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        ans =\
    \ choose_num(mid, y);\n        if (ans == -1) {\n            ans = choose_num(x,\
    \ mid);\n        }\n    } else {\n        long mid = (x + y) / 2;\n        ans\
    \ = choose_num(x, mid);\n        if (ans == -1) {\n            ans = choose_num(y,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098750
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x<y) {\n        long mid = x + (y-x)/2;\n    \
    \    if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n     \
    \   } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098755
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    assert(x >= 0 && y >= 0);\n    if (x <= y) {\n        long mid\
    \ = x + (y - x) / 2;\n        if (mid * mid <= x) {\n            ans = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpsiu_cpts: /tmp/tmpsiu_cpts.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x != 0) {\n        long temp2 = x;\n        x\
    \ = y % x;\n        y = temp2;\n    }\n    if (y != 0) {\n        ans = y;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpct5b0am8: /tmp/tmpct5b0am8.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans\
    \ = mid;\n    } else {\n        if (x > mid) {\n            ans = choose_num(x,\
    \ mid);\n        } else {\n            ans = choose_num(mid, y);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpn5xjmeqz: /tmp/tmpn5xjmeqz.cpp:24: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x != mid && y !=\
    \ mid) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            ans = mid;\n  \
    \          break;\n        }\n        if (x % 2 == 0) {\n            y = mid;\n\
    \        }\n        else {\n            x = mid;\n        }\n        mid = (x\
    \ + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpj15unm3x: /tmp/tmpj15unm3x.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    if\
    \ (mid % 2 == 0) {\n        ans = mid;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp3p1ftv_: /tmp/tmpp3p1ftv_.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n\
    \    } else if (y <= mid) {\n        ans = y;\n    } else {\n        ans = mid;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl8926jew: /tmp/tmpl8926jew.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = x + (y-x)/2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  }\n        x = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdbkew5x2: /tmp/tmpdbkew5x2.cpp:27: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (y) {\n        long temp = 0;\n        long t\
    \ = y;\n        while (t % 2 == 0) {\n            t = t / 2;\n            temp\
    \ = temp * 2 + 1;\n        }\n        if (temp >= x && temp <= y) {\n        \
    \    ans = temp;\n            break;\n        }\n        y = y - 1;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5gh2ltji: /tmp/tmp5gh2ltji.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (y) {\n        if (x % 2 == 0) {\n           \
    \ ans = y;\n            break;\n        }\n        y /= 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpez_uigyw: /tmp/tmpez_uigyw.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    // If x is smaller than y, then x must be even.\n   \
    \ if (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n  \
    \  }\n    // If x is equal to y, then x must be even.\n    if (x == y) {\n   \
    \     long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x is\
    \ greater than y, then x must be odd.\n    if (x > y) {\n        long temp = x;\n\
    \        x = y;\n        y = temp;\n    }\n    // If x is greater than y, then\
    \ x must be odd.\n    if (x == y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    // If x is smaller than y, then x must be odd.\n\
    \    if (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // If x is smaller than y, then x must be odd.\n    if (x == y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x\
    \ is greater than y, then x must be even.\n    if (x > y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    // If x is greater than\
    \ y, then x must be even.\n    if (x == y) {\n        long temp = x;\n       \
    \ x = y;\n        y = temp;\n    }\n    // If x is smaller than y, then x must\
    \ be even.\n    if (x < y) {\n        long temp = x;\n        x = y;\n       \
    \ y = temp;\n    }\n    // If x is smaller than y, then x must be even.\n    if\
    \ (x == y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    // If x is greater than y, then x must be odd.\n    if (x > y) {\n      \
    \  long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x is greater\
    \ than y, then x must be odd.\n    if (x == y) {\n        long temp = x;\n   \
    \     x = y;\n        y = temp;\n    }\n    // If x is smaller than y, then x\
    \ must be odd.\n    if (x < y) {\n        long temp = x;\n        x = y;\n   \
    \     y = temp;\n    }\n    // If x is smaller than y, then x must be odd.\n \
    \   if (x == y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // If x is greater than y, then x must be even.\n    if (x > y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x\
    \ is greater than y, then x must be even.\n    if (x == y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    // If x is smaller than\
    \ y, then x \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbxhx0w4p: /tmp/tmpbxhx0w4p.cpp:114: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long m = 1;\n    long n = y;\n    long k = x;\n    long temp;\n\
    \    long i;\n    long j;\n    long temp2;\n    long temp3;\n    long temp4;\n\
    \    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long\
    \ temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n\
    \    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long\
    \ temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n\
    \    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long\
    \ temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n\
    \    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long\
    \ temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n\
    \    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long\
    \ temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n\
    \    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long\
    \ temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n\
    \    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long\
    \ temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n\
    \    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long\
    \ temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n\
    \    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long\
    \ temp81;\n    long temp82;\n    long temp83;\n    long temp84\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i0qfnfh.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp8i0qfnfh.cpp:98:1: error: expected initializer before \u2018\
    }\u2019 token\n   98 | }\n      | ^\n/tmp/tmp8i0qfnfh.cpp:98:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        if (mid > y) {\n            y = mid;\n        } else {\n            x\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1llfkyf4: /tmp/tmp1llfkyf4.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098751
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    if (x <= y) {\n        long mid =\
    \ x + (y - x) / 2;\n        if (mid * mid <= x) {\n            ans = mid;\n  \
    \      } else {\n            ans = choose_num(mid, y);\n        }\n    } else\
    \ {\n        long mid = x + (y - x) / 2;\n        if (mid * mid <= y) {\n    \
    \        ans = mid;\n        } else {\n            ans = choose_num(x, mid);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long temp;\n    long mid = (x + y)\
    \ / 2;\n    long a = x;\n    long b = y;\n    long c = mid;\n    while (a < b)\
    \ {\n        temp = a;\n        a = b;\n        b = temp;\n    }\n    while (a\
    \ > b) {\n        temp = a;\n        a = b;\n        b = temp;\n    }\n    while\
    \ (a > c) {\n        temp = a;\n        a = c;\n        c = temp;\n    }\n   \
    \ while (a < c) {\n        temp = a;\n        a = c;\n        c = temp;\n    }\n\
    \    ans = a;\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_tjogklc: /tmp/tmp_tjogklc.cpp:40: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    while (x%2 == 0 && y%2 ==\
    \ 0) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x%2 == 0) {\n        ans = x;\n    }\n    if (y%2 == 0) {\n        ans =\
    \ y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpywswx9qi: /tmp/tmpywswx9qi.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y) / 2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n\
    \        } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpc7wc6qgm: /tmp/tmpc7wc6qgm.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n      \
    \      ans = choose_num(mid, y);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7qes107s: /tmp/tmp7qes107s.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n  \
    \      } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8lvdf5o1: /tmp/tmp8lvdf5o1.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    assert(x >= 0 && y >= 0);\n    if (x == y) {\n        return\
    \ ans;\n    }\n    if (x < y) {\n        long temp = x;\n        x = y;\n    \
    \    y = temp;\n    }\n    long mid = (x + y) / 2;\n    long left_num = choose_num(x,\
    \ mid);\n    long right_num = choose_num(mid, y);\n    if (left_num == -1 && right_num\
    \ == -1) {\n        return -1;\n    }\n    if (left_num == -1) {\n        return\
    \ right_num;\n    }\n    if (right_num == -1) {\n        return left_num;\n  \
    \  }\n    if (left_num * 2 == right_num) {\n        return left_num;\n    }\n\
    \    return left_num * 2 + right_num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x+1 < y) {\n        if ((x % 2) == 0) {\n    \
    \        ans = x;\n            break;\n        }\n        ans = x+1;\n       \
    \ x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfmv00c4_: /tmp/tmpfmv00c4_.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x != y) {\n        if (x % 2 == 0 && y % 2 ==\
    \ 0) {\n            ans = x;\n            break;\n        }\n        if (x % 2\
    \ == 0 && y % 2 != 0) {\n            ans = y;\n            break;\n        }\n\
    \        if (x % 2 != 0 && y % 2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        if (x % 2 != 0 && y % 2 != 0) {\n            ans = y;\n  \
    \          break;\n        }\n        x /= 2;\n        y /= 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmnsikem3: /tmp/tmpmnsikem3.cpp:38: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x != mid && y !=\
    \ mid && mid % 2 == 0) {\n        if (x <= mid) {\n            x = mid + 1;\n\
    \        } else {\n            y = mid - 1;\n        }\n        mid = (x + y)\
    \ / 2;\n    }\n    if (x == mid && y == mid) {\n        ans = mid;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp57mvy28j: /tmp/tmp57mvy28j.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid%2 == 0) {\n            ans = mid;\n            break;\n        }\n \
    \       if (mid%2 == 1) {\n            y = mid;\n        }\n        else {\n \
    \           x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpiqfmsqkq: /tmp/tmpiqfmsqkq.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x != y) {\n        if ((x & 1) == 0) {\n    \
    \        ans = x;\n            break;\n        }\n        x >>= 1;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa7ypc884: /tmp/tmpa7ypc884.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long m = 1;\n    long n = y;\n    long k;\n    while (m <= n)\
    \ {\n        k = m + (n - m) / 2;\n        if (k % 2 == 0) {\n            ans\
    \ = k;\n            break;\n        }\n        m = k + 1;\n        n = y;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpperwo6ji: /tmp/tmpperwo6ji.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n           \
    \ ans = x;\n            break;\n        }\n        x++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa0x7lw_v: /tmp/tmpa0x7lw_v.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n    \
    \    if (mid % 2 == 0) {\n            ans = mid;\n            break;\n       \
    \ }\n        mid = (x + y) / 2;\n        x++;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_s5sz2ur: /tmp/tmp_s5sz2ur.cpp:28: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = mid;\n        }\n        else {\n           \
    \ ans = choose_num(x, mid);\n        }\n    }\n    else {\n        long mid =\
    \ (y + x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n        }\n\
    \        else {\n            ans = choose_num(mid, y);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa14sromg: /tmp/tmpa14sromg.cpp:32: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n            x = mid+1;\n        }\n\
    \        else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_9dqx1fh: /tmp/tmp_9dqx1fh.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    long\
    \ l1 = (x % 2 == 0) ? x : x + 1;\n    long l2 = (y % 2 == 0) ? y : y + 1;\n  \
    \  long l3 = mid * 2;\n    long l4 = l3 - l1;\n    long l5 = l4 * 2;\n    long\
    \ l6 = l5 - l1;\n    long l7 = l6 * 2;\n    long l8 = l7 - l1;\n    long l9 =\
    \ l8 * 2;\n    long l10 = l9 - l1;\n    long l11 = l10 * 2;\n    long l12 = l11\
    \ - l1;\n    long l13 = l12 * 2;\n    long l14 = l13 - l1;\n    long l15 = l14\
    \ * 2;\n    long l16 = l15 - l1;\n    long l17 = l16 * 2;\n    long l18 = l17\
    \ - l1;\n    long l19 = l18 * 2;\n    long l20 = l19 - l1;\n    long l21 = l20\
    \ * 2;\n    long l22 = l21 - l1;\n    long l23 = l22 * 2;\n    long l24 = l23\
    \ - l1;\n    long l25 = l24 * 2;\n    long l26 = l25 - l1;\n    long l27 = l26\
    \ * 2;\n    long l28 = l27 - l1;\n    long l29 = l28 * 2;\n    long l30 = l29\
    \ - l1;\n    long l31 = l30 * 2;\n    long l32 = l31 - l1;\n    long l33 = l32\
    \ * 2;\n    long l34 = l33 - l1;\n    long l35 = l34 * 2;\n    long l36 = l35\
    \ - l1;\n    long l37 = l36 * 2;\n    long l38 = l37 - l1;\n    long l39 = l38\
    \ * 2;\n    long l40 = l39 - l1;\n    long l41 = l40 * 2;\n    long l42 = l41\
    \ - l1;\n    long l43 = l42 * 2;\n    long l44 = l43 - l1;\n    long l45 = l44\
    \ * 2;\n    long l46 = l45 - l1;\n    long l47 = l46 * 2;\n    long l48 = l47\
    \ - l1;\n\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp90sy7vgl: /tmp/tmp90sy7vgl.cpp:63: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    assert(x >= 0 && y >= 0);\n    if (x > y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    while (x) {\n        long\
    \ mid = x >> 1;\n        if (mid > y) {\n            y = mid;\n        } else\
    \ {\n            x = mid + 1;\n        }\n    }\n    ans = y;\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n \
    \       ans = mid;\n    } else {\n        if (mid < x) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqlvn2l8r: /tmp/tmpqlvn2l8r.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long x_even = (x % 2 == 0);\n    long y_even = (y % 2 == 0);\n\
    \    if (x_even && y_even) {\n        long x_odd = (x % 2 == 1);\n        long\
    \ y_odd = (y % 2 == 1);\n        if (x_odd && y_odd) {\n            long x_even\
    \ = (x % 2 == 0);\n            long y_even = (y % 2 == 0);\n            if (x_even\
    \ && y_even) {\n                long x_odd = (x % 2 == 1);\n                long\
    \ y_odd = (y % 2 == 1);\n                if (x_odd && y_odd) {\n             \
    \       long x_even = (x % 2 == 0);\n                    long y_even = (y % 2\
    \ == 0);\n                    if (x_even && y_even) {\n                      \
    \  long x_odd = (x % 2 == 1);\n                        long y_odd = (y % 2 ==\
    \ 1);\n                        if (x_odd && y_odd) {\n                       \
    \     long x_even = (x % 2 == 0);\n                            long y_even = (y\
    \ % 2 == 0);\n                            if (x_even && y_even) {\n          \
    \                      long x_odd = (x % 2 == 1);\n                          \
    \      long y_odd = (y % 2 == 1);\n                                if (x_odd &&\
    \ y_odd) {\n                                    ans = x;\n                   \
    \             }\n                            }\n                        }\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxajjc6_m: /tmp/tmpxajjc6_m.cpp:46: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x != 0) {\n        long temp = 0;\n        if\
    \ (x % 2 == 0) {\n            temp = x;\n            x = x / 2;\n        } else\
    \ {\n            x = x / 2;\n        }\n        if (y % 2 == 0) {\n          \
    \  y = y;\n        } else {\n            y = y + 1;\n        }\n        if (temp\
    \ > ans) {\n            ans = temp;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2ofc21j6: /tmp/tmp2ofc21j6.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n    \
    \    } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmps_y7smmb: /tmp/tmps_y7smmb.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid > y) {\n            mid = y;\n        }\n        if (mid < x) {\n     \
    \       mid = x;\n        }\n        ans = mid;\n    } else {\n        long mid\
    \ = y + (x - y) / 2;\n        if (mid > x) {\n            mid = x;\n        }\n\
    \        if (mid < y) {\n            mid = y;\n        }\n        ans = mid;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7q7k0yyh: /tmp/tmp7q7k0yyh.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y) {\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            break;\n    \
    \    }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx4rdw7rm: /tmp/tmpx4rdw7rm.cpp:27: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid\
    \ % 2 == 0) {\n        ans = mid;\n    } else {\n        if (mid < x && mid <\
    \ y) {\n            ans = mid;\n        } else if (mid > x && mid > y) {\n   \
    \         ans = mid;\n        } else {\n            ans = -1;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvurxvmkq: /tmp/tmpvurxvmkq.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (y) {\n        if (y & 1) {\n            ans =\
    \ y;\n            break;\n        }\n        y >>= 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpf3gev5up: /tmp/tmpf3gev5up.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    long mid = (x + y) / 2;\n    if\
    \ (x <= mid) {\n        ans = x;\n    } else if (mid <= y) {\n        ans = mid;\n\
    \    } else {\n        ans = y;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvhgiul0k: /tmp/tmpvhgiul0k.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    long ans = -1;\n    long max_num = (long) INT_MAX;\n    while (x <= y) {\n\
    \        if ((x & 1) == 0) {\n            ans = x;\n            break;\n     \
    \   }\n        max_num = x;\n        x++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpi_xacx5y: /tmp/tmpi_xacx5y.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n\
    \        } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyopu72g8: /tmp/tmpyopu72g8.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppuajmnk1: /tmp/tmppuajmnk1.cpp:27: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans\
    \ = mid;\n    } else {\n        if (x > y) {\n            ans = choose_num(x,\
    \ mid);\n        } else {\n            ans = choose_num(mid, y);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxtd2zcza: /tmp/tmpxtd2zcza.cpp:24: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = x + (y-x)/2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n    \
    \    }\n        else {\n            y = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098757
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y) {\n \
    \       if ((x % 2) == 0) {\n            ans = x;\n            break;\n      \
    \  }\n        mid = x + (y - x) / 2;\n        x = mid - 1;\n        y = mid +\
    \ 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp3zeiljf: /tmp/tmpp3zeiljf.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = x + (y-x)/2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  }\n        if (mid > y) {\n            y = mid;\n        } else {\n       \
    \     x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfpgc6f0x: /tmp/tmpfpgc6f0x.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    long mid = (x + y) / 2;\n\
    \    if (mid % 2 == 0) {\n        ans = mid;\n    } else {\n        while (x !=\
    \ mid) {\n            if (mid % 2 == 0) {\n                mid = mid/2;\n    \
    \            ans = mid;\n                break;\n            } else {\n      \
    \          mid = mid / 2;\n                ans = mid;\n            }\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7jy3qq0m: /tmp/tmp7jy3qq0m.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        ans =\
    \ choose_num(x, mid);\n        if (ans == -1) {\n            ans = choose_num(mid,\
    \ y);\n        }\n    } else {\n        long mid = (x + y) / 2;\n        ans =\
    \ choose_num(mid, y);\n        if (ans == -1) {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    } else {\n        long mid = (y + x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        } else {\n            ans\
    \ = choose_num(mid, y);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzmgpzfu0: /tmp/tmpzmgpzfu0.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n  \
    \      }\n        else {\n            y = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpirgcfb_o: /tmp/tmpirgcfb_o.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgsxyqyr7: /tmp/tmpgsxyqyr7.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x <= y) {\n        if ((x & 1) == 0) {\n    \
    \        ans = x;\n            break;\n        }\n        x <<= 1;\n        x\
    \ &= (x | 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeuhqg9qb: /tmp/tmpeuhqg9qb.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    long\
    \ left_num = x;\n    long right_num = y;\n    long left_even = 1;\n    long right_even\
    \ = 1;\n    while (left_num < mid) {\n        left_num += left_even;\n       \
    \ left_even *= 2;\n    }\n    while (right_num < mid) {\n        right_num +=\
    \ right_even;\n        right_even *= 2;\n    }\n    if (left_num == mid) {\n \
    \       ans = mid;\n    } else if (right_num == mid) {\n        ans = mid;\n \
    \   } else {\n        ans = left_num;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptbwslfns: /tmp/tmptbwslfns.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n            ans\
    \ = x;\n            break;\n        }\n        x++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp28x1c006: /tmp/tmp28x1c006.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0 && y%2 == 0) {\n\
    \            ans = x;\n            break;\n        }\n        x++;\n        y++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098758
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long m = 1;\n    long n = 1;\n   \
    \ long k = 0;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = x;\n    long y = y;\n    long z = y;\n    long a = x;\n   \
    \ long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n    long f =\
    \ y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long j = y;\n   \
    \ long k = x;\n    long l = y;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = x;\n    long s = y;\n   \
    \ long t = x;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ x;\n    long y = y;\n    long z = y;\n    long a = x;\n    long b = y;\n   \
    \ long c = x;\n    long d = y;\n    long e = x;\n    long f = y;\n    long g =\
    \ x;\n    long h = y;\n    long i = x;\n    long j = y;\n    long k = x;\n   \
    \ long l = y;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = x;\n    long s = y;\n    long t = x;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = x;\n    long y =\
    \ y;\n    long z = y;\n    long a = x;\n    long b = y;\n    long c = x;\n   \
    \ long d = y;\n    long e = x;\n    long f = y;\n    long g = x;\n    long h =\
    \ y;\n    long i = x;\n    long j = y;\n    long k = x;\n    long l = y;\n   \
    \ long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q =\
    \ 1;\n    long r = x;\n    long s = y;\n    long t = x;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = x;\n    long y = y;\n    long z =\
    \ y;\n    long a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n   \
    \ long e = x;\n    long f = y;\n    long g = x;\n    long h = y;\n    long i =\
    \ x;\n    long j = y;\n    long k = x;\n    long l = y;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7m27kh80.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp7m27kh80.cpp:17:10: error: declaration of \u2018long int\
    \ x\u2019 shadows a parameter\n   17 |     long x = x;\n      |          ^\n/tmp/tmp7m27kh80.cpp:18:10:\
    \ error: declaration of \u2018long int y\u2019 shadows a parameter\n   18 |  \
    \   long y = y;\n      |          ^\n/tmp/tmp7m27kh80.cpp:30:10: error: redeclaration\
    \ of \u2018long int k\u2019\n   30 |     long k = x;\n      |          ^\n/tmp/tmp7m27kh80.cpp:12:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   12 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp7m27kh80.cpp:32:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   32 |     long m = 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:10:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   10 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:33:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   33 |     long n = 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:11:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   11 |     long n =\
    \ 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:39:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   39 |     long t = x;\n      |          ^\n/tmp/tmp7m27kh80.cpp:13:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   13 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:40:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   40 |     long u = 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:14:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   14 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:41:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   41 |     long v = 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:15:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   15 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:42:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   42 |     long w = 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:16:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   16 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmp7m27kh80.cpp:43:10: error: redeclaration of\
    \ \u2018long int x\u2019\n   43 |     long x = "
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x) {\n        long temp = 0;\n        while (x\
    \ % 2 == 0) {\n            x /= 2;\n            ++temp;\n        }\n        if\
    \ (temp > ans) {\n            ans = temp;\n        }\n        x /= 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphtsn213e: /tmp/tmphtsn213e.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long m = 1;\n    long n = y;\n    long k;\n    long t;\n    long\
    \ ans1 = 0;\n    long ans2 = 0;\n    long ans3 = 0;\n    long ans4 = 0;\n    long\
    \ ans5 = 0;\n    long ans6 = 0;\n    long ans7 = 0;\n    long ans8 = 0;\n    long\
    \ ans9 = 0;\n    long ans10 = 0;\n    long ans11 = 0;\n    long ans12 = 0;\n \
    \   long ans13 = 0;\n    long ans14 = 0;\n    long ans15 = 0;\n    long ans16\
    \ = 0;\n    long ans17 = 0;\n    long ans18 = 0;\n    long ans19 = 0;\n    long\
    \ ans20 = 0;\n    long ansp = 0;\n    long ansp1 = 0;\n    long ansp2 = 0;\n \
    \   long ansp3 = 0;\n    long ansp4 = 0;\n    long ansp5 = 0;\n    long ansp6\
    \ = 0;\n    long ansp7 = 0;\n    long ansp8 = 0;\n    long ansp9 = 0;\n    long\
    \ ansp10 = 0;\n    long ansp11 = 0;\n    long ansp12 = 0;\n    long ansp13 = 0;\n\
    \    long ansp14 = 0;\n    long ansp15 = 0;\n    long ansp16 = 0;\n    long ansp17\
    \ = 0;\n    long ansp18 = 0;\n    long ansp19 = 0;\n    long ansp20 = 0;\n   \
    \ long ansp21 = 0;\n    long ansp22 = 0;\n    long ansp23 = 0;\n    long ansp24\
    \ = 0;\n    long ansp25 = 0;\n    long ansp26 = 0;\n    long ansp27 = 0;\n   \
    \ long ansp28 = 0;\n    long ansp29 = 0;\n    long ansp30 = 0;\n    long ansp31\
    \ = 0;\n    long ansp32 = 0;\n    long ansp33 = 0;\n    long ansp34 = 0;\n   \
    \ long ansp35 = 0;\n    long ansp36 = 0;\n    long ansp37 = 0;\n    long ansp38\
    \ = 0;\n    long ansp39 = 0;\n    long ansp40 = 0;\n    long ansp41 = 0;\n   \
    \ long ansp42 = 0;\n    long ansp43 = 0;\n    long ansp44 = 0;\n    long ansp45\
    \ = 0;\n    long ansp46 = 0;\n    long ansp47 = 0;\n    long ansp48 = 0;\n   \
    \ long ansp49 = 0;\n    long ansp50 = 0;\n    long ansp51 = 0;\n    long ansp52\
    \ = 0;\n    long ansp53\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rd_hd3u.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp7rd_hd3u.cpp:87:1: error: expected initializer before \u2018\
    }\u2019 token\n   87 | }\n      | ^\n/tmp/tmp7rd_hd3u.cpp:87:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660098749
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        return -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid\
    \ % 2 == 0) {\n        return mid;\n    }\n    if (mid % 3 == 0) {\n        return\
    \ mid / 3;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmputlx2sg1: /tmp/tmputlx2sg1.cpp:24: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        mid = (mid + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppuajmnk1: /tmp/tmppuajmnk1.cpp:27: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid % 2 == 0) {\n            ans = mid;\n            x = mid+1;\n      \
    \  }\n        else {\n            y = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd60m7p46: /tmp/tmpd60m7p46.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long m = 1;\n    long n = y;\n    long k = 0;\n    long temp\
    \ = 0;\n    long ans2 = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long\
    \ temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n\
    \    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11\
    \ = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n   \
    \ long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18\
    \ = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n   \
    \ long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25\
    \ = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n   \
    \ long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32\
    \ = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n   \
    \ long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39\
    \ = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n   \
    \ long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46\
    \ = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n   \
    \ long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53\
    \ = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n   \
    \ long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60\
    \ = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n   \
    \ long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67\
    \ = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n   \
    \ long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74\
    \ = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n   \
    \ long temp78 = 0;\n    long temp79 = 0;\n    long temp80 = 0;\n    long temp81\
    \ = 0;\n    long temp82\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp96d47j_v.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp96d47j_v.cpp:95:1: error: expected initializer before \u2018\
    }\u2019 token\n   95 | }\n      | ^\n/tmp/tmp96d47j_v.cpp:95:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n      \
    \      ans = x;\n            break;\n        }\n        x += 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpq9_9povi: /tmp/tmpq9_9povi.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid\
    \ % 2 == 0) {\n        ans = mid;\n    } else {\n        if (mid > x) {\n    \
    \        ans = mid;\n        } else {\n            ans = y;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwl47kco2: /tmp/tmpwl47kco2.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            x = mid + 1;\n\
    \        } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyopu72g8: /tmp/tmpyopu72g8.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            break;\n    \
    \    }\n        if (mid > y) {\n            y = mid;\n        } else {\n     \
    \       x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpshe3cdlv: /tmp/tmpshe3cdlv.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1)\n            ans = choose_num(x,\
    \ mid);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpz82dbsdl: /tmp/tmpz82dbsdl.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098754
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long temp;\n    temp = x;\n    while (temp <= y) {\n        if\
    \ (temp % 2 == 0) {\n            ans = temp;\n            break;\n        }\n\
    \        temp++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd7lz49uc: /tmp/tmpd7lz49uc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x) {\n        ans = (x&1) ? (ans + y) : y;\n\
    \        x >>= 1;\n        y >>= 1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd5_o4a12: /tmp/tmpd5_o4a12.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= y) {\n        ans = mid;\n\
    \    } else if (x > y) {\n        ans = choose_num(mid, y);\n    } else {\n  \
    \      ans = choose_num(x, mid);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpz1tb6a6z: /tmp/tmpz1tb6a6z.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098754
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        mid = (x + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x+1 < y) {\n        if (x%2 == 0) {\n        \
    \    ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptjfi2q_g: /tmp/tmptjfi2q_g.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= y) {\n        ans = mid;\n\
    \    } else {\n        ans = y;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpicfmfpd7: /tmp/tmpicfmfpd7.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n       \
    \     ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpof6s0dq5: /tmp/tmpof6s0dq5.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+1 < y) {\n        if (x%2 == 0) {\n       \
    \     ans = x;\n            break;\n        }\n        x += 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2wxrshtn: /tmp/tmp2wxrshtn.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+y <= y) {\n        if (x%2 == 0) {\n      \
    \      ans = x;\n            break;\n        }\n        ans = y;\n        y +=\
    \ 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpoe0iznag: /tmp/tmpoe0iznag.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n        }\
    \ else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp191qgxoq: /tmp/tmp191qgxoq.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    while\
    \ (x <= y) {\n        if (mid % 2 == 0) {\n            ans = mid;\n          \
    \  break;\n        }\n        mid = (x + y) / 2;\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmph4_cnl36: /tmp/tmph4_cnl36.cpp:25: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        if\
    \ (mid % 2 == 0) {\n            ans = mid;\n        } else {\n            ans\
    \ = choose_num(mid, y);\n        }\n    } else {\n        long mid = y + (x -\
    \ y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n        } else\
    \ {\n            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    long mid = x + (y - x) /\
    \ 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n            ans = mid;\n\
    \            break;\n        }\n        mid++;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpucf8de5m: /tmp/tmpucf8de5m.cpp:28: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n    \
    \    if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n     \
    \   } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3behrv2u: /tmp/tmp3behrv2u.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    // If x is smaller than y, then x must be even.\n   \
    \ if (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n  \
    \  }\n    // If x is equal to y, then x must be even.\n    if (x == y) {\n   \
    \     long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x is\
    \ greater than y, then x must be odd.\n    if (x > y) {\n        long temp = x;\n\
    \        x = y;\n        y = temp;\n    }\n    // If x is smaller than y, then\
    \ x must be odd.\n    if (x < y) {\n        long temp = x;\n        x = y;\n \
    \       y = temp;\n    }\n    // If x is equal to y, then x must be odd.\n   \
    \ if (x == y) {\n        long temp = x;\n        x = y;\n        y = temp;\n \
    \   }\n    // If x is greater than y, then x must be even.\n    if (x > y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x\
    \ is smaller than y, then x must be even.\n    if (x < y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    // If x is equal to y, then\
    \ x must be even.\n    if (x == y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    // If x is greater than y, then x must be odd.\n\
    \    if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // If x is smaller than y, then x must be odd.\n    if (x < y) {\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x\
    \ is equal to y, then x must be odd.\n    if (x == y) {\n        long temp = x;\n\
    \        x = y;\n        y = temp;\n    }\n    // If x is greater than y, then\
    \ x must be even.\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    // If x is smaller than y, then x must be even.\n\
    \    if (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    // If x is equal to y, then x must be even.\n    if (x == y) {\n \
    \       long temp = x;\n        x = y;\n        y = temp;\n    }\n    // If x\
    \ is greater than y, then x must be odd.\n    if (x > y) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    // If x is smaller than\
    \ y, then x must be odd.\n    if (x < y) {\n        long temp = x;\n        x\
    \ = y;\n        y = temp;\n    }\n    // If x is equal to y, then x \n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxr6qokg_: /tmp/tmpxr6qokg_.cpp:114: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x <= y) {\n        if (x%2 == 0 && y%2 == 0)\
    \ {\n            ans = x;\n            break;\n        }\n        x += 2;\n  \
    \      y += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098760
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = (x + y) / 2;\n    long left_num = choose_num(x,\
    \ mid);\n    long right_num = choose_num(mid, y);\n    if (left_num == -1 && right_num\
    \ == -1) {\n        return -1;\n    }\n    if (left_num == -1) {\n        return\
    \ right_num;\n    }\n    if (right_num == -1) {\n        return left_num;\n  \
    \  }\n    if (left_num > right_num) {\n        ans = left_num;\n    } else {\n\
    \        ans = right_num;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x != 0) {\n        if (x % 2 == 0) {\n      \
    \      ans = x;\n            break;\n        }\n        x /= 2;\n    }\n    while\
    \ (y != 0) {\n        if (y % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4litru9i: /tmp/tmp4litru9i.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    long ans = -1;\n    long temp = 0;\n    while (x != y) {\n        temp =\
    \ x % y;\n        if (temp == 0) {\n            ans = temp;\n            break;\n\
    \        }\n        ans = temp;\n        temp = y;\n        y = temp;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+1 < y) {\n        long mid = x + (y-x)/2;\n\
    \        if (mid % 2 == 0) {\n            ans = mid;\n            x = mid;\n \
    \       } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvfa_2em7: /tmp/tmpvfa_2em7.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x % 2 == 0) {\n        x /= 2;\n    }\n    while\
    \ (y % 2 == 0) {\n        y /= 2;\n    }\n    while (x <= y) {\n        if (x\
    \ % 2 == 0) {\n            ans = x;\n            break;\n        }\n        x\
    \ /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0awkwovf: /tmp/tmp0awkwovf.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    long mid = (x + y) / 2;\n    while (x <= y) {\n     \
    \   if ((x % 2) == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        mid = (mid + x) / 2;\n        x++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpskki7avb: /tmp/tmpskki7avb.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n        }\
    \ else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp191qgxoq: /tmp/tmp191qgxoq.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x <= y) {\n        if ((x % 2) == 0) {\n     \
    \       ans = x;\n            break;\n        }\n        x += 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8aas99r_: /tmp/tmp8aas99r_.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n           \
    \ ans = x;\n            break;\n        }\n        x++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa0x7lw_v: /tmp/tmpa0x7lw_v.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x >= y) {\n        ans = x;\n\
    \    } else {\n        ans = y;\n    }\n    while (ans % 2 == 0) {\n        ans\
    \ = ans / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnj6npcr0: /tmp/tmpnj6npcr0.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long m = 1;\n    long n = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long t = x;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = x;\n    long y = y;\n    long z = y;\n    long a = x;\n    long b = y;\n\
    \    long c = x;\n    long d = y;\n    long e = x;\n    long f = y;\n    long\
    \ g = x;\n    long h = y;\n    long i = x;\n    long j = y;\n    long k = x;\n\
    \    long l = y;\n    long m = 1;\n    long n = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long t = x;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = x;\n    long y = y;\n    long z = y;\n    long a = x;\n    long\
    \ b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n    long f = y;\n\
    \    long g = x;\n    long h = y;\n    long i = x;\n    long j = y;\n    long\
    \ k = x;\n    long l = y;\n    long m = 1;\n    long n = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long t = x;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = x;\n    long y = y;\n    long z = y;\n    long a = x;\n\
    \    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n    long\
    \ f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long j = y;\n\
    \    long k = x;\n    long l = y;\n    long m = 1;\n    long n = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long t = x;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = x;\n    long y = y;\n    long z = y;\n    long\
    \ a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n\
    \    long f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long\
    \ j = y;\n    long k = x;\n    long l = y;\n    long m = 1;\n    long n = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long t = x;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = x;\n    \n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi1wr8und.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpi1wr8und.cpp:17:10: error: declaration of \u2018long int\
    \ x\u2019 shadows a parameter\n   17 |     long x = x;\n      |          ^\n/tmp/tmpi1wr8und.cpp:18:10:\
    \ error: declaration of \u2018long int y\u2019 shadows a parameter\n   18 |  \
    \   long y = y;\n      |          ^\n/tmp/tmpi1wr8und.cpp:32:10: error: redeclaration\
    \ of \u2018long int m\u2019\n   32 |     long m = 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:9:10:\
    \ note: \u2018long int m\u2019 previously declared here\n    9 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:33:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   33 |     long n = 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:10:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   10 |     long n =\
    \ 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:34:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   34 |     long q = 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:11:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   11 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:35:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   35 |     long r = 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:12:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   12 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpi1wr8und.cpp:36:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   36 |     long t = x;\n      |          ^\n/tmp/tmpi1wr8und.cpp:13:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   13 |     long t =\
    \ x;\n      |          ^\n/tmp/tmpi1wr8und.cpp:37:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   37 |     long u = 0;\n      |          ^\n/tmp/tmpi1wr8und.cpp:14:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   14 |     long u =\
    \ 0;\n      |          ^\n/tmp/tmpi1wr8und.cpp:38:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   38 |     long v = 0;\n      |          ^\n/tmp/tmpi1wr8und.cpp:15:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   15 |     long v =\
    \ 0;\n      |          ^\n/tmp/tmpi1wr8und.cpp:39:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   39 |     long w = 0"
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n       \
    \ if (mid % 2 == 0) {\n            ans = mid;\n            x = mid+1;\n      \
    \  } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpo0n87aik: /tmp/tmpo0n87aik.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        long mid = (x + y)/2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n            break;\n        }\n\
    \        if (mid > y) {\n            y = mid;\n        } else {\n            x\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1llfkyf4: /tmp/tmp1llfkyf4.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098751
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        ans =\
    \ choose_num(x, mid);\n        if (ans == -1)\n            ans = choose_num(mid,\
    \ y);\n    } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid,\
    \ y);\n        if (ans == -1)\n            ans = choose_num(x, mid);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n           \
    \ ans = x;\n            break;\n        }\n        x++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa0x7lw_v: /tmp/tmpa0x7lw_v.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        ans =\
    \ choose_num(mid, y);\n        if (ans == -1) {\n            ans = choose_num(x,\
    \ mid);\n        }\n    } else {\n        long mid = (x + y) / 2;\n        ans\
    \ = choose_num(x, mid);\n        if (ans == -1) {\n            ans = choose_num(y,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = mid;\n        }\n        else {\n           \
    \ ans = choose_num(x, mid);\n        }\n    }\n    else {\n        long mid =\
    \ (y + x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n        }\n\
    \        else {\n            ans = choose_num(mid, y);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa14sromg: /tmp/tmpa14sromg.cpp:32: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        if (mid\
    \ % 2 == 0) {\n            ans = mid;\n        }\n        else {\n           \
    \ ans = choose_num(x, mid);\n        }\n    }\n    else {\n        long mid =\
    \ (y + x) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n        }\n\
    \        else {\n            ans = choose_num(mid, y);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa14sromg: /tmp/tmpa14sromg.cpp:32: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098748
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n        ans\
    \ = choose_num(mid, y);\n        if (ans == -1) {\n            ans = mid;\n  \
    \      }\n    } else {\n        long mid = y + (x - y) / 2;\n        ans = choose_num(x,\
    \ mid);\n        if (ans == -1) {\n            ans = mid;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x % 2 == 0 && y % 2 == 0) {\n        long temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    if (x == y) {\n        ans\
    \ = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_7d5aa0h: /tmp/tmp_7d5aa0h.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n      \
    \  y = temp;\n    }\n    while (x+1 < y) {\n        if ((x % 2) == 0) {\n    \
    \        ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpc29zlh2j: /tmp/tmpc29zlh2j.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+1 < y) {\n        long mid = (x+y)/2;\n   \
    \     if (mid%2 == 0) {\n            ans = mid;\n            x = mid+1;\n    \
    \    } else {\n            y = mid;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2tey9_lg: /tmp/tmp2tey9_lg.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x != y) {\n        if (x % 2 == 0 && y % 2 ==\
    \ 0) {\n            ans = x;\n            break;\n        }\n        if (x % 2\
    \ != 0 && y % 2 != 0) {\n            ans = -1;\n            break;\n        }\n\
    \        long temp = x;\n        x = y;\n        y = temp;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098760
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n        ans =\
    \ choose_num(mid, y);\n        if (ans == -1) {\n            ans = choose_num(x,\
    \ mid);\n        }\n    } else {\n        long mid = (x + y) / 2;\n        ans\
    \ = choose_num(x, mid);\n        if (ans == -1) {\n            ans = choose_num(y,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0);\n    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid\
    \ % 2 == 0) {\n        ans = mid;\n    } else {\n        if (x <= mid) {\n   \
    \         ans = x;\n        } else {\n            ans = y;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpz6k2jjb3: /tmp/tmpz6k2jjb3.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x < y) {\n        long mid = (x + y) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n            break;\n    \
    \    }\n        if (mid > y) {\n            y = mid;\n        } else {\n     \
    \       x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpshe3cdlv: /tmp/tmpshe3cdlv.cpp:31: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x+y != 0) {\n        if ((x & 1) == 0) {\n  \
    \          ans = x;\n            break;\n        }\n        x >>= 1;\n       \
    \ y >>= 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmiy5lxi9: /tmp/tmpmiy5lxi9.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n     \
    \   y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n           \
    \ ans = x;\n            break;\n        }\n        x++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa0x7lw_v: /tmp/tmpa0x7lw_v.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long ans = -1;\n    if (x >= y) {\n        long mid\
    \ = (x + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9zf8rn4l: /tmp/tmp9zf8rn4l.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans\
    \ = mid;\n    } else {\n        if (x > y) {\n            ans = choose_num(x,\
    \ mid);\n        } else {\n            ans = choose_num(mid, y);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxtd2zcza: /tmp/tmpxtd2zcza.cpp:24: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098753
