language: cpp
name: HumanEval_117_select_words
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u'){\n\
    \            v.push_back(s[i]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwelvlct.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmprwelvlct.cpp:16:29: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   16 |             v.push_back(s[i]);\n      |                            \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmprwelvlct.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    std::vector<std::string> temp;\n\
    \    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            temp.push_back(c);\n    \n    for(auto &c: temp)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: temp)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            select_words(s, n,\
    \ res);\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptngsbl48.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmptngsbl48.cpp:17:29: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   17 |             temp.push_back(c);\n      | \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmptngsbl48.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpndms1s30: /tmp/tmpndms1s30.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   long cnt = 0;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n  \
    \  if(cnt != n) {\n        return res;\n    }\n    for(auto &c: s) {\n       \
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n           \
    \ cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n    }\n \
    \   for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt != n) {\n \
    \       return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n\
    \    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n \
    \   }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt != n)\
    \ {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n      \
    \  }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt !=\
    \ n) {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n   \
    \     }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || \n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvq7j459w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpvq7j459w.cpp:94:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   94 | }\n      | ^\n\
    /tmp/tmpvq7j459w.cpp:93:23: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   93 |         if(c == 'a' ||\n      |           ~           ^\n   \
    \   |                       )\n   94 | }\n      | ~                      \n/tmp/tmpvq7j459w.cpp:94:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   94 | }\n \
    \     | ^\n/tmp/tmpvq7j459w.cpp:95:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   95 | int main() {\n      |            ^\n\
    /tmp/tmpvq7j459w.cpp:104:1: error: expected \u2018}\u2019 at end of input\n  104\
    \ | }\n      | ^\n/tmp/tmpvq7j459w.cpp:9:62: note: to match this \u2018{\u2019\
    \n    9 | std::vector<std::string> select_words(std::string s, long n) {\n   \
    \   |                                                              ^\n/tmp/tmpvq7j459w.cpp:104:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  104 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpndms1s30: /tmp/tmpndms1s30.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(\"\");\n    if (s.empty()) {\n        return v;\n    }\n    \n \
    \   long start = 0;\n    long end = 0;\n    long count = 0;\n    \n    for (long\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a') {\n            start =\
    \ i;\n        }\n        if (s[i] == 'z') {\n            end = i;\n        }\n\
    \        if (s[i] == 'A') {\n            start = i;\n        }\n        if (s[i]\
    \ == 'Z') {\n            end = i;\n        }\n    }\n    \n    for (long i = start;\
    \ i <= end; i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n \
    \   }\n    \n    if (count == n) {\n        v.push_back(s.substr(start, end -\
    \ start + 1));\n    }\n    \n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdhdyewc7: /tmp/tmpdhdyewc7.cpp:49: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n\
    \                break;\n            else if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n                res.push_back(s.substr(i,\
    \ 1));\n                i = i + 1;\n                break;\n            }\n  \
    \      }\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmphgldmj_g: /tmp/tmphgldmj_g.cpp:31: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpre8siqg7: /tmp/tmpre8siqg7.cpp:21: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(\"\");\n    if (s.empty()) {\n        return v;\n    }\n    \n \
    \   long start = 0;\n    long end = 0;\n    long count = 0;\n    \n    for (long\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n            if\
    \ (count == n) {\n                v.push_back(s.substr(start, i - start));\n \
    \               start = i + 1;\n                count = 0;\n            }\n  \
    \      }\n    }\n    v.push_back(s.substr(start, s.length() - start));\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpz6xolfwj: /tmp/tmpz6xolfwj.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    \n    for(long i = 0; i <= s.size(); i++) {\n        if(s.at(i)\
    \ == ' ') {\n            v.push_back(s.substr(0, i));\n            v.push_back(s.substr(i+1));\n\
    \            break;\n        }\n    }\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpvzw90ohu: /tmp/tmpvzw90ohu.cpp:25: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   long count = 0;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\
    \    if(count == n) {\n        res.push_back(\"a\");\n        res.push_back(\"\
    e\");\n        res.push_back(\"i\");\n        res.push_back(\"o\");\n        res.push_back(\"\
    u\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp69253v5x: /tmp/tmp69253v5x.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(\"\");\n    if (s.empty()) {\n        return v;\n    }\n    \n \
    \   long count = 0;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n  \
    \  }\n    \n    if (count != n) {\n        return v;\n    }\n    \n    for (auto\
    \ &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(\"\");\n        }\n    }\n    \n    return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp4adwaqx2: /tmp/tmp4adwaqx2.cpp:37: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ res;\n    std::string temp;\n    long count = 0;\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            count++;\n        }\n    }\n    if(count == n)\
    \ {\n        for(long i = 0; i < s.size(); i++) {\n            if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n           \
    \     res.push_back(s.substr(i, i + 1));\n            }\n        }\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp8osp4dni: /tmp/tmp8osp4dni.cpp:30: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n    v.push_back(\"\
    ab\");\n    v.push_back(\"abc\");\n    v.push_back(\"abcd\");\n    v.push_back(\"\
    abcde\");\n    v.push_back(\"abcdef\");\n    v.push_back(\"abcdefg\");\n    v.push_back(\"\
    abcdefgh\");\n    v.push_back(\"abcdefghi\");\n    v.push_back(\"abcdefghij\"\
    );\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"abcdefghijkl\");\n  \
    \  v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\");\n   \
    \ v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\");\n\
    \    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiwgxjql.cpp:49:17: warning: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^\n/tmp/tmpqiwgxjql.cpp:49:17: error: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiwgxjql.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmpqiwgxjql.cpp:50:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmpqiwgxjql.cpp:50:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    long count = 0;\n\
    \    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    if (count\
    \ != n) {\n        return res;\n    }\n    \n    std::string word = \"\";\n  \
    \  for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n    }\n    \n    for (char\
    \ c : word) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            res.push_back(word);\n        }\n    }\n    \n    return\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdtysd9z2: /tmp/tmpdtysd9z2.cpp:43: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(\"\");\n    if (s.empty())\n        return v;\n    \n    long start\
    \ = 0;\n    long end = 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n \
    \       if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u')\n            start = i;\n        if (s[i] == 'y' || s[i] == 'o' || s[i]\
    \ == 'u')\n            end = i;\n    }\n    \n    if (end - start == n)\n    \
    \    v.push_back(s.substr(start, end - start));\n    \n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp20d7swke: /tmp/tmp20d7swke.cpp:32: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // your code goes here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    for(long i = 0; i < s.length(); i++){\n     \
    \   if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n\
    \            v.push_back(s.substr(i, 1));\n        }\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp5o2cv1t8: /tmp/tmp5o2cv1t8.cpp:22: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    \n    for(auto &c: s) {\n        if(c != ' ') {\n            v.push_back(c);\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == ' ') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'y') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'o') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'r') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 't') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'h') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'n') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'd') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'c') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'm') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'f') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'p') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 's') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'y') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'k') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'e') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    \n}\nint main() {\n \
    \   auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkl00z4_3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpkl00z4_3.cpp:15:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   15 |             v.push_back(c);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl00z4_3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ if(s.empty())\n        return v;\n    \n    for(auto &c: s)\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \     v.push_back(s);\n    \n    for(auto &c: s)\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n    \n\
    \    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           \
    \ v.push_back(s);\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n    \n  \
    \  for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \     v.push_back(s);\n    \n    for(auto &c: s)\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n    \n\
    \    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph2irum_6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmph2irum_6.cpp:69:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   69 | }\n      | ^\n\
    /tmp/tmph2irum_6.cpp:69:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::string word;\n    long count = 0;\n    for(char c: s) {\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n\
    \            count++;\n        }\n    }\n    if(count == n) {\n        for(char\
    \ c: s) {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y') {\n                v.push_back(word);\n                word\
    \ = \"\";\n            }\n            else {\n                word += c;\n   \
    \         }\n        }\n        v.push_back(word);\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpomfdx23e: /tmp/tmpomfdx23e.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n    v.push_back(\"\
    ab\");\n    v.push_back(\"abc\");\n    v.push_back(\"abcd\");\n    v.push_back(\"\
    abcde\");\n    v.push_back(\"abcdef\");\n    v.push_back(\"abcdefg\");\n    v.push_back(\"\
    abcdefgh\");\n    v.push_back(\"abcdefghi\");\n    v.push_back(\"abcdefghij\"\
    );\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"abcdefghijkl\");\n  \
    \  v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\");\n   \
    \ v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\");\n\
    \    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiwgxjql.cpp:49:17: warning: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^\n/tmp/tmpqiwgxjql.cpp:49:17: error: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiwgxjql.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmpqiwgxjql.cpp:50:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmpqiwgxjql.cpp:50:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    for(auto &c: s) {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(\"\"\
    );\n        }\n        else if(c == 'b' || c == 'c' || c == 'd' || c == 'f' ||\
    \ c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c ==\
    \ 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v'\
    \ || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            v.push_back(\"\
    \");\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            v.push_back(\"\");\n        }\n        else if(c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J'\
    \ || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c\
    \ == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y'\
    \ || c == 'Z') {\n            v.push_back(\"\");\n        }\n        else if(c\
    \ == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6'\
    \ || c == '7' || c == '8' || c == '9') {\n            v.push_back(\"\");\n   \
    \     }\n        else {\n            v.push_back(c);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe2tkvc5g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpe2tkvc5g.cpp:30:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   30 |             v.push_back(c);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpe2tkvc5g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpprh48m4b: /tmp/tmpprh48m4b.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpby2lm01k: /tmp/tmpby2lm01k.cpp:14: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    long start = 0;\n\
    \    long end = 0;\n    long count = 0;\n    \n    for (long i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            start = i;\n            count++;\n        }\n\
    \        if (s[i] == 'y' || s[i] == 'o' || s[i] == 'u') {\n            end = i;\n\
    \            count++;\n        }\n        if (count == n) {\n            res.push_back(s.substr(start,\
    \ end - start + 1));\n            count = 0;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpbmk8d35q: /tmp/tmpbmk8d35q.cpp:37: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty()) return res;\n    \n    long cnt = 0;\n    for(char c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') cnt++;\n\
    \    }\n    \n    if(cnt < n) return res;\n    \n    for(char c: s) {\n      \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  if(cnt - 1 < n) res.push_back(\"a\");\n            if(cnt - 2 < n) res.push_back(\"\
    e\");\n            if(cnt - 3 < n) res.push_back(\"i\");\n            if(cnt -\
    \ 4 < n) res.push_back(\"o\");\n            if(cnt - 5 < n) res.push_back(\"u\"\
    );\n            cnt -= 6;\n        }\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpn4uzeyxk: /tmp/tmpn4uzeyxk.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n\
    \                break;\n            else if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n                res.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxkddxjvi: /tmp/tmpxkddxjvi.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    // Your code goes\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp21cf1us4: /tmp/tmp21cf1us4.cpp:21: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpndms1s30: /tmp/tmpndms1s30.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = 0;\n    long count = 0;\n    \n    while(end < s.size()) {\n        end =\
    \ s.find_first_of(\"aeiouy\", start, end);\n        if(end == std::string::npos)\n\
    \            break;\n        \n        start = end;\n        end = s.find_first_of(\"\
    aeiouy\", start, end);\n        if(end == std::string::npos)\n            break;\n\
    \        \n        ++count;\n    }\n    \n    if(count == n)\n        res.push_back(s.substr(start,\
    \ end));\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpbrchka08: /tmp/tmpbrchka08.cpp:38: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpvxyptn3n: /tmp/tmpvxyptn3n.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    std::vector<std::string> temp;\n\
    \    for(long i=0; i<s.length(); i++) {\n        long count = 0;\n        for(char\
    \ c: s) {\n            if(c == s[i]) {\n                count++;\n           \
    \ }\n        }\n        if(count == n) {\n            temp.push_back(s.substr(i,\
    \ 1));\n        }\n    }\n    \n    for(auto it: temp) {\n        res.push_back(it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpyju6logr: /tmp/tmpyju6logr.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ if(s.empty())\n        return v;\n    \n    for(long i = 0; i < s.size(); i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n    \
    \            break;\n            else if(s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n            else\
    \ if(s[i] == 'y' || s[i] == 'a')\n                continue;\n            else\
    \ if(s[i] == 'o' || s[i] == 'u')\n                continue;\n            else\
    \ if(s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n                continue;\n \
    \           else if(s[i] == 'y' || s[i] == 'o' || s[i] == 'u')\n             \
    \   continue;\n            else if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'a')\n                continue;\n            else if(s[i] == 'y' ||\
    \ s[i] == 'a')\n                continue;\n            else if(s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n    \
    \        else if(s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n\
    \            else if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n\
    \                continue;\n            else if(s[i] == 'y' || s[i] == 'o' ||\
    \ s[i] == 'u')\n                continue;\n            else if(s[i] == 'o' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n                continue;\n    \
    \        else if(s[i] == 'y' || s[i] == 'a')\n                continue;\n    \
    \        else if(s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n \
    \               continue;\n            else if(s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u')\n                continue;\n            else if(s[i] == 'o' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'a')\n                continue;\n         \
    \   else if(s[i] == 'y' || s[i] == 'o' || s[i] == 'u')\n                continue;\n\
    \            else if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n\
    \                continue;\n            else if(s[i] == 'y' || s[i] == 'a')\n\
    \                continue;\n            else if(s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u')\n                continue;\n            else if(s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n         \
    \   else if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n      \
    \          continue;\n            else if(s[i] == 'y' || s[i] == 'o' || s[i] ==\
    \ 'u')\n                continue;\n            else if(s[i] == 'o' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'a')\n                continue;\n            else\
    \ if(s[i] == 'y' || s[i] == 'a')\n                continue;\n            else\
    \ if(s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvv86ijcn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpvv86ijcn.cpp:68:70: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n   68 |             else\
    \ if(s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\n      |              \
    \      ~                                                 ^\n      |          \
    \                                                            )\n   69 | }\n  \
    \    | ~                                                                     \n\
    /tmp/tmpvv86ijcn.cpp:69:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   69 | }\n      | ^\n/tmp/tmpvv86ijcn.cpp:70:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   70 | int main() {\n     \
    \ |            ^\n/tmp/tmpvv86ijcn.cpp:79:1: error: expected \u2018}\u2019 at\
    \ end of input\n   79 | }\n      | ^\n/tmp/tmpvv86ijcn.cpp:14:40: note: to match\
    \ this \u2018{\u2019\n   14 |     for(long i = 0; i < s.size(); i++) {\n     \
    \ |                                        ^\n/tmp/tmpvv86ijcn.cpp:79:1: error:\
    \ expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmpvv86ijcn.cpp:9:62:\
    \ note: to match this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpvv86ijcn.cpp:79:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   79 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    std::vector<std::string> words;\n\
    \    for(char c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y' || c == 'o')\n            words.push_back(c);\n    \n \
    \   for(auto &w: words)\n        if(w.size() == n)\n            res.push_back(w);\n\
    \    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_g4arja.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpr_g4arja.cpp:17:30: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   17 |             words.push_back(c);\n      |\
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpr_g4arja.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       pu"
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    // Your code here\n\
    \    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpifh271ih: /tmp/tmpifh271ih.cpp:21: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n\
    \                break;\n            else if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n                res.push_back(s.substr(i,\
    \ 1));\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpivz51_xv: /tmp/tmpivz51_xv.cpp:26: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdk4xox22: /tmp/tmpdk4xox22.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // your code goes here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp82aeqrs5: /tmp/tmp82aeqrs5.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    std::vector<std::string> words;\n\
    \    \n    for(char c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            words.push_back(c);\n    \n    for(auto &w: words)\n\
    \        if(n == 0)\n            res.push_back(w);\n        else\n           \
    \ select_words(w, n-1);\n    \n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo41gvsxv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpo41gvsxv.cpp:18:30: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   18 |             words.push_back(c);\n      |\
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpo41gvsxv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       pu"
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    long start = 0;\n\
    \    long end = 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a') {\n            start = i;\n        }\n        if (s[i] == 'z')\
    \ {\n            end = i;\n        }\n    }\n    \n    long mid = start + (end\
    \ - start) / 2;\n    \n    long count = 0;\n    \n    for (long i = mid; i < s.size();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   \n    if (count == n) {\n        res.push_back(s.substr(start, end - start\
    \ + 1));\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpo9avgg1t: /tmp/tmpo9avgg1t.cpp:45: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(n ==\
    \ 1)\n                res.push_back(c);\n            else\n                res.push_back(\"\
    aeiou\");\n        else\n            if(n == 1)\n                res.push_back(c);\n\
    \            else\n                res.push_back(\"bcdfghjklmnpqrstvwxyz\");\n\
    \    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxrapym7o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpxrapym7o.cpp:17:32: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   17 |                 res.push_back(c);\n     \
    \ |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpxrapym7o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |     "
  stdout: ''
  timestamp: 1659977254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    std::vector<std::string> words;\n\
    \    \n    // Split s into words\n    for(auto &c: s)\n        if(c == ' ' ||\
    \ c == '\\t' || c == '\\n')\n            words.push_back(c);\n    \n    // Sort\
    \ the words\n    std::sort(words.begin(), words.end());\n    \n    // Filter the\
    \ words by counting consonants\n    for(auto &c: words)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            words.erase(std::remove(words.begin(),\
    \ words.end(), c), words.end());\n    \n    // Add the words that contains exactly\
    \ n consonants\n    for(auto &c: words)\n        if(c == n)\n            res.push_back(c);\n\
    \    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp43ppcq4y.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp43ppcq4y.cpp:19:30: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   19 |             words.push_back(c);\n      |\
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp43ppcq4y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       pu"
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    long count = 0;\n    for (auto &c: s) {\n   \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \      count++;\n        }\n    }\n    if (count == n) {\n        v.push_back(s);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmppd4o3rqy: /tmp/tmppd4o3rqy.cpp:26: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpndms1s30: /tmp/tmpndms1s30.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    long start = 0;\n\
    \    long end = 0;\n    long count = 0;\n    \n    for (long i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'a') {\n            start = i;\n        }\n    \
    \    if (s[i] == 'z') {\n            end = i;\n        }\n        if (s[i] ==\
    \ 'a' || s[i] == 'z') {\n            count++;\n        }\n    }\n    \n    if\
    \ (n == count) {\n        for (long i = start; i <= end; i++) {\n            res.push_back(s.substr(start,\
    \ end - start));\n        }\n    }\n    \n    return res;\n}\nint main() {\n \
    \   auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp3b8o5tyf: /tmp/tmp3b8o5tyf.cpp:41: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(n ==\
    \ 1)\n                res.push_back(c);\n            else\n                res.push_back(c+c);\n\
    \    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_0r8fymb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp_0r8fymb.cpp:17:32: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   17 |                 res.push_back(c);\n     \
    \ |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_0r8fymb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |     "
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ for(long i = 0; i < s.length(); i++) {\n        for(long j = 0; j < n; j++)\
    \ {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(i, 1));\n\
    \                break;\n            }\n            else if(s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp48pk1zed: /tmp/tmp48pk1zed.cpp:27: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977255
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    for(long i = 0; i < s.length(); i++) {\n   \
    \     if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\
    \ {\n            v.push_back(s.substr(0, i));\n            v.push_back(s.substr(i,\
    \ s.length()));\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmptk_vbv9y: /tmp/tmptk_vbv9y.cpp:23: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpndms1s30: /tmp/tmpndms1s30.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> result;\n\
    \    \n    // Your code goes here\n    \n    return result;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsc2bjfek: /tmp/tmpsc2bjfek.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    std::vector<std::string> words;\n\
    \    \n    // Split s into words\n    for(auto &w : s)\n        words.push_back(w);\n\
    \    \n    // Sort the words\n    std::sort(words.begin(), words.end());\n   \
    \ \n    // Count the number of consonants\n    long num_consonants = 0;\n    for(auto\
    \ &w : words)\n        num_consonants += w.size();\n    \n    // If there are\
    \ enough consonants, return them\n    if(num_consonants >= n)\n        return\
    \ words;\n    \n    // Otherwise, return an empty list\n    return res;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6k08z_t_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp6k08z_t_.cpp:18:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   18 |         words.push_back(w);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp6k08z_t_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  stdout: ''
  timestamp: 1659977256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpby2lm01k: /tmp/tmpby2lm01k.cpp:14: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    std::string word;\n\
    \    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    \n  \
    \  if (word.size() == n) {\n        res.push_back(word);\n    }\n    \n    for\
    \ (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            word += c;\n        }\n    }\n    \n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         word += c;\n        }\n    }\n    \n    if (word.size() == n) {\n  \
    \      res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word\
    \ += c;\n        }\n    }\n    \n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n \
    \   \n    if (word.size() == n) {\n        res.push_back(word);\n    }\n    \n\
    \    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    \n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         word += c;\n        }\n    }\n    \n    if (word.size() == n) {\n  \
    \      res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word\
    \ += c;\n        }\n    }\n    \n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n \
    \   \n\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpf52l0luh: /tmp/tmpf52l0luh.cpp:107: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i'\
    \ || i == 'o' || i == 'u')\n        {\n            v.push_back(i);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2rgjprqc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp2rgjprqc.cpp:16:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   16 |             v.push_back(i);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2rgjprqc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  stdout: ''
  timestamp: 1659977256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   long count = 0;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\
    \    if(count == n) {\n        res.push_back(\"a\");\n        res.push_back(\"\
    e\");\n        res.push_back(\"i\");\n        res.push_back(\"o\");\n        res.push_back(\"\
    u\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp69253v5x: /tmp/tmp69253v5x.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // TODO: Write your code here\n    \n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp7wl3kya5: /tmp/tmp7wl3kya5.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n    v.push_back(\"\
    ab\");\n    v.push_back(\"abc\");\n    v.push_back(\"abcd\");\n    v.push_back(\"\
    abcde\");\n    v.push_back(\"abcdef\");\n    v.push_back(\"abcdefg\");\n    v.push_back(\"\
    abcdefgh\");\n    v.push_back(\"abcdefghi\");\n    v.push_back(\"abcdefghij\"\
    );\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"abcdefghijkl\");\n  \
    \  v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\");\n   \
    \ v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\");\n\
    \    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiwgxjql.cpp:49:17: warning: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^\n/tmp/tmpqiwgxjql.cpp:49:17: error: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiwgxjql.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmpqiwgxjql.cpp:50:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmpqiwgxjql.cpp:50:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpmrd343gd: /tmp/tmpmrd343gd.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty())\n        return res;\n    \n    std::string word = \"\";\n\
    \    \n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n  \
    \      }\n        else if (c == 'y') {\n            word += c;\n        }\n  \
    \      else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n\
    \            word += c;\n        }\n        else if (c == 'y') {\n           \
    \ word += c;\n        }\n        else if (c == 'o' || c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n  \
    \      }\n        else if (c == 'y') {\n            word += c;\n        }\n  \
    \      else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n\
    \            word += c;\n        }\n        else if (c == 'y') {\n           \
    \ word += c;\n        }\n        else if (c == 'o' || c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n  \
    \      }\n        else if (c == 'y') {\n            word += c;\n        }\n  \
    \      else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n\
    \            word += c;\n        }\n        else if (c == 'y') {\n           \
    \ word += c;\n        }\n        else if (c == 'o' || c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n  \
    \      }\n        else if (c == 'y') {\n            word += c;\n        }\n  \
    \      else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp331vmes9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp331vmes9.cpp:86:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   86\
    \ | int main() {\n      |            ^\n/tmp/tmp331vmes9.cpp:95:1: error: expected\
    \ \u2018}\u2019 at end of input\n   95 | }\n      | ^\n/tmp/tmp331vmes9.cpp:16:22:\
    \ note: to match this \u2018{\u2019\n   16 |     for (auto c : s) {\n      | \
    \                     ^\n/tmp/tmp331vmes9.cpp:95:1: error: expected \u2018}\u2019\
    \ at end of input\n   95 | }\n      | ^\n/tmp/tmp331vmes9.cpp:9:62: note: to match\
    \ this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmp331vmes9.cpp:95:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   95 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        long count = 0;\n        for(long j = 0; j < s.size(); j++)\
    \ {\n            if(s[i] == s[j])\n                count++;\n        }\n     \
    \   if(count == n)\n            res.push_back(s.substr(0, i));\n    }\n    \n\
    \    return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmphoqi_pj9: /tmp/tmphoqi_pj9.cpp:29: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ res;\n    long cnt = 0;\n    for (auto &c : s) {\n        if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n\
    \    }\n    if (cnt == n) {\n        res.push_back(\"a\");\n        res.push_back(\"\
    e\");\n        res.push_back(\"i\");\n        res.push_back(\"o\");\n        res.push_back(\"\
    u\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp7698xx3e: /tmp/tmp7698xx3e.cpp:29: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsunwwubh: /tmp/tmpsunwwubh.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Your code goes here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpgpb3tzmi: /tmp/tmpgpb3tzmi.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> result;\n\
    \    \n    // Write your code here\n    \n    return result;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp0wqeg6rr: /tmp/tmp0wqeg6rr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"\
    aeiou\");\n            else\n                res.push_back(c);\n    \n    for(auto\
    \ &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              res.push_back(\"aeiou\");\n            else\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(\"aeiou\");\n            else\n\
    \                res.push_back(c);\n    \n    for(auto &c: s)\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"\
    aeiou\");\n            else\n                res.push_back(c);\n    \n    for(auto\
    \ &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              res.push_back(\"aeiou\");\n            else\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(\"aeiou\");\n            else\n\
    \                res.push_back(c);\n    \n    for(auto &c: s)\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"\
    aeiou\");\n            else\n                res.push_back(c);\n    \n    for(auto\
    \ &c: s)\n\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmcwvfuea.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpmcwvfuea.cpp:19:32: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   19 |                 res.push_back(c);\n     \
    \ |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpmcwvfuea.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |     "
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> result;\n\
    \    // Write your code here\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpoldavjgu: /tmp/tmpoldavjgu.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n\
    \                break;\n            else if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n         \
    \   else\n                res.push_back(s.substr(i, 1));\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsqfbpt4v: /tmp/tmpsqfbpt4v.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ // Your code here\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp_lx4mdvq: /tmp/tmp_lx4mdvq.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = i; j < s.size(); j++) {\n            if(s[i] ==\
    \ s[j] && s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] !=\
    \ 'u' && s[i] != 'A' && s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U')\
    \ {\n                res.push_back(s.substr(i, j));\n                i = j;\n\
    \                break;\n            }\n        }\n    }\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpqehwgyxh: /tmp/tmpqehwgyxh.cpp:29: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    std::string word = \"\";\n \
    \   for(char c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n            word += c;\n    \n    for(long i = 0; i < word.length();\
    \ i++)\n        if(n == word.at(i))\n            res.push_back(word);\n    \n\
    \    return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpywtj7mx9: /tmp/tmpywtj7mx9.cpp:27: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i=0; i<s.length();\
    \ i++) {\n        for(long j=0; j<s.length(); j++) {\n            if(s[i] == s[j])\
    \ {\n                res.push_back(s.substr(i, j+1));\n                i = j;\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpo2nrpnpj: /tmp/tmpo2nrpnpj.cpp:26: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    long cur = 0;\n  \
    \  \n    for (auto &c: s) {\n        if (cur == n) {\n            res.push_back(std::string(&c,\
    \ 1));\n        }\n        cur++;\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmph8q9fj1b: /tmp/tmph8q9fj1b.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ for(long i = 0; i < s.size(); i++) {\n        v.push_back(s.substr(i, 1));\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp89dj7cby: /tmp/tmp89dj7cby.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> result;\n\
    \    if (s.empty()) {\n        return result;\n    }\n    \n    long start = 0;\n\
    \    long end = s.size();\n    \n    while (start < end) {\n        long mid =\
    \ (start + end) / 2;\n        \n        if (mid > end - n) {\n            end\
    \ = mid;\n        } else {\n            start = mid + 1;\n        }\n        \n\
    \        if (s[mid] != 'a' && s[mid] != 'e' && s[mid] != 'i' && s[mid] != 'o'\
    \ && s[mid] != 'u') {\n            result.push_back(s.substr(start, mid - start));\n\
    \        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpm8qqpe5h: /tmp/tmpm8qqpe5h.cpp:36: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n\
    \                res.emplace_back(s.substr(0, i));\n            else if(s[i] ==\
    \ 'a')\n                res.emplace_back(s.substr(0, i) + s.substr(i + 1, i +\
    \ 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n\
    \            else if(s[i] == 'e')\n                res.emplace_back(s.substr(0,\
    \ i) + s.substr(i + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3)\
    \ + s.substr(i + 4, i + 4));\n            else if(s[i] == 'i')\n             \
    \   res.emplace_back(s.substr(0, i) + s.substr(i + 1, i + 1) + s.substr(i + 2,\
    \ i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n            else\
    \ if(s[i] == 'o')\n                res.emplace_back(s.substr(0, i) + s.substr(i\
    \ + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i +\
    \ 4, i + 4));\n            else if(s[i] == 'u')\n                res.emplace_back(s.substr(0,\
    \ i) + s.substr(i + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3)\
    \ + s.substr(i + 4, i + 4));\n            else if(s[i] == 'y')\n             \
    \   res.emplace_back(s.substr(0, i) + s.substr(i + 1, i + 1) + s.substr(i + 2,\
    \ i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n            else\
    \ if(s[i] == 'h')\n                res.emplace_back(s.substr(0, i) + s.substr(i\
    \ + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i +\
    \ 4, i + 4));\n            else if(s[i] == 't')\n                res.emplace_back(s.substr(0,\
    \ i) + s.substr(i + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3)\
    \ + s.substr(i + 4, i + 4));\n            else if(s[i] == 's')\n             \
    \   res.emplace_back(s.substr(0, i) + s.substr(i + 1, i + 1) + s.substr(i + 2,\
    \ i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n            else\
    \ if(s[i] == 'r')\n                res.emplace_back(s.substr(0, i) + s.substr(i\
    \ + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i +\
    \ 4, i + 4));\n            else if(s[i] == 'n')\n                res.emplace_back(s.substr(0,\
    \ i) + \n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23c6ft9n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp23c6ft9n.cpp:40:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   40 | }\n      | ^\n\
    /tmp/tmp23c6ft9n.cpp:41:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   41 | int main() {\n      |            ^\n/tmp/tmp23c6ft9n.cpp:50:1:\
    \ error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmp23c6ft9n.cpp:14:40:\
    \ note: to match this \u2018{\u2019\n   14 |     for(long i = 0; i < s.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp23c6ft9n.cpp:50:1:\
    \ error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmp23c6ft9n.cpp:9:62:\
    \ note: to match this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmp23c6ft9n.cpp:50:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   50 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // your code goes here\n    std::vector<std::string>\
    \ res;\n    long start = 0;\n    long end = 0;\n    long count = 0;\n    long\
    \ index = 0;\n    while(index < s.size()) {\n        if(s[index] == ' ') {\n \
    \           end = index;\n            while(end < s.size() && s[end] == ' ') {\n\
    \                end++;\n            }\n            if(end - start == n) {\n \
    \               res.push_back(s.substr(start, end - start));\n               \
    \ start = end;\n                count = 0;\n            }\n        }\n       \
    \ index++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp1g1y74ef: /tmp/tmp1g1y74ef.cpp:34: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n\n}\nint main() {\n    auto candidate = select_words;\n  \
    \  assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9mu89zjm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp9mu89zjm.cpp:16:28: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   16 |             res.push_back(c);\n      |  \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9mu89zjm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_b"
  stdout: ''
  timestamp: 1659977258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // code here\n}\nint main() {\n \
    \   auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpix6mnnja: /tmp/tmpix6mnnja.cpp:14: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpprh48m4b: /tmp/tmpprh48m4b.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ // Write your code here\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpnbhy1oe_: /tmp/tmpnbhy1oe_.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    std::vector<std::string>\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n    \n    for (auto &c : s) {\n\
    \        if (c == ' ') {\n            \n        }\n        else if (vowels.find(c)\
    \ == vowels.end()) {\n            \n        }\n        else {\n            \n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf014g52l.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpf014g52l.cpp:21:25: error:\
    \ \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member\
    \ named \u2018find\u2019\n   21 |         else if (vowels.find(c) == vowels.end())\
    \ {\n      |                         ^~~~\n"
  stdout: ''
  timestamp: 1659977258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ // Write your code here\n    \n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp3q8_q7f2: /tmp/tmp3q8_q7f2.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpndms1s30: /tmp/tmpndms1s30.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(\"\");\n    if (s.empty()) return v;\n    \n    long count = 0;\n\
    \    for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            v.push_back(\"\");\n            count++;\n \
    \       } else if (c == 'y') {\n            v.push_back(\"i\");\n            count++;\n\
    \        } else if (c == 'o') {\n            v.push_back(\"e\");\n           \
    \ count++;\n        } else if (c == 'h') {\n            v.push_back(\"a\");\n\
    \            count++;\n        } else if (c == 'r') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'l') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'd') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 's') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 't') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'k') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'p') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'f') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'b') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'm') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'v') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'w') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'c') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'h') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'n') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'x') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'q') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'j') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'u') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'z') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'x') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'y') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'k') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 's') {\n            v.push_back(\"\
    a\");\n            count++;\n\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6v7tj1f1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp6v7tj1f1.cpp:102:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  102\
    \ | int main() {\n      |            ^\n/tmp/tmp6v7tj1f1.cpp:111:1: error: expected\
    \ \u2018}\u2019 at end of input\n  111 | }\n      | ^\n/tmp/tmp6v7tj1f1.cpp:15:22:\
    \ note: to match this \u2018{\u2019\n   15 |     for (auto &c: s) {\n      | \
    \                     ^\n/tmp/tmp6v7tj1f1.cpp:111:1: error: expected \u2018}\u2019\
    \ at end of input\n  111 | }\n      | ^\n/tmp/tmp6v7tj1f1.cpp:9:62: note: to match\
    \ this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmp6v7tj1f1.cpp:111:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  111 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            res.push_back(c);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps_xy5z4f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmps_xy5z4f.cpp:13:28: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   13 |             res.push_back(c);\n      |  \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmps_xy5z4f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_b"
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   for(auto &c: s) {\n        if(std::count(c.begin(), c.end(), 'a') > n || std::count(c.begin(),\
    \ c.end(), 'e') > n || std::count(c.begin(), c.end(), 'i') > n || std::count(c.begin(),\
    \ c.end(), 'o') > n || std::count(c.begin(), c.end(), 'u') > n) {\n          \
    \  res.push_back(c);\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgnshge6m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpgnshge6m.cpp:12:25: error:\
    \ request for member \u2018begin\u2019 in \u2018c\u2019, which is of non-class\
    \ type \u2018char\u2019\n   12 |         if(std::count(c.begin(), c.end(), 'a')\
    \ > n || std::count(c.begin(), c.end(), 'e') > n || std::count(c.begin(), c.end(),\
    \ 'i') > n || std::count(c.begin(), c.end(), 'o') > n || std::count(c.begin(),\
    \ c.end(), 'u') > n) {\n      |                         ^~~~~\n/tmp/tmpgnshge6m.cpp:12:36:\
    \ error: request for member \u2018end\u2019 in \u2018c\u2019, which is of non-class\
    \ type \u2018char\u2019\n   12 |         if(std::count(c.begin(), c.end(), 'a')\
    \ > n || std::count(c.begin(), c.end(), 'e') > n || std::count(c.begin(), c.end(),\
    \ 'i') > n || std::count(c.begin(), c.end(), 'o') > n || std::count(c.begin(),\
    \ c.end(), 'u') > n) {\n      |                                    ^~~\n/tmp/tmpgnshge6m.cpp:12:68:\
    \ error: request for member \u2018begin\u2019 in \u2018c\u2019, which is of non-class\
    \ type \u2018char\u2019\n   12 |         if(std::count(c.begin(), c.end(), 'a')\
    \ > n || std::count(c.begin(), c.end(), 'e') > n || std::count(c.begin(), c.end(),\
    \ 'i') > n || std::count(c.begin(), c.end(), 'o') > n || std::count(c.begin(),\
    \ c.end(), 'u') > n) {\n      |                                              \
    \                      ^~~~~\n/tmp/tmpgnshge6m.cpp:12:79: error: request for member\
    \ \u2018end\u2019 in \u2018c\u2019, which is of non-class type \u2018char\u2019\
    \n   12 |         if(std::count(c.begin(), c.end(), 'a') > n || std::count(c.begin(),\
    \ c.end(), 'e') > n || std::count(c.begin(), c.end(), 'i') > n || std::count(c.begin(),\
    \ c.end(), 'o') > n || std::count(c.begin(), c.end(), 'u') > n) {\n      |   \
    \                                                                            ^~~\n\
    /tmp/tmpgnshge6m.cpp:12:111: error: request for member \u2018begin\u2019 in \u2018\
    c\u2019, which is of non-class type \u2018char\u2019\n   12 |         if(std::count(c.begin(),\
    \ c.end(), 'a') > n || std::count(c.begin(), c.end(), 'e') > n || std::count(c.begin(),\
    \ c.end(), 'i') > n || std::count(c.begin(), c.end(), 'o') > n || std::count(c.begin(),\
    \ c.end("
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    // Your code here\n\
    \    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpifh271ih: /tmp/tmpifh271ih.cpp:21: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpby2lm01k: /tmp/tmpby2lm01k.cpp:14: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = s.size();\n    long mid = (start + end)/2;\n    \n    while(start < end) {\n\
    \        while(s[start] == ' ' || s[start] == '\\0')\n            start++;\n \
    \       \n        while(s[end] == ' ' || s[end] == '\\0')\n            end--;\n\
    \        \n        if(end - start == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[end] == ' ' || s[end] == '\\0')\n\
    \            end--;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[start] == ' ' || s[start] == '\\0')\n\
    \            start++;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[end] == ' ' || s[end] == '\\0')\n\
    \            end--;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[start] == ' ' || s[start] == '\\0')\n\
    \            start++;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == \n}\nint main() {\n \
    \   auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8621hnu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmps8621hnu.cpp:92:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   92 | }\n      | ^\n\
    /tmp/tmps8621hnu.cpp:91:26: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   91 |         if(mid - start ==\n      |           ~              ^\n\
    \      |                          )\n   92 | }\n      | ~                    \
    \     \n/tmp/tmps8621hnu.cpp:92:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   92 | }\n      | ^\n/tmp/tmps8621hnu.cpp:93:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   93 | int main() {\n     \
    \ |            ^\n/tmp/tmps8621hnu.cpp:102:1: error: expected \u2018}\u2019 at\
    \ end of input\n  102 | }\n      | ^\n/tmp/tmps8621hnu.cpp:9:62: note: to match\
    \ this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmps8621hnu.cpp:102:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  102 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.length();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n\
    \                break;\n            else if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n         \
    \   else\n                res.push_back(s.substr(i, 1));\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpqgzoo7n_: /tmp/tmpqgzoo7n_.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n    \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            \
    \    res.push_back(\"a\");\n            else\n                res.push_back(\"\
    e\");\n        else\n            if(c == 'b' || c == 'c' || c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v'\
    \ || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n                res.push_back(\"\
    b\");\n            else\n                res.push_back(\"c\");\n    \n    for(auto\
    \ &c: s)\n        if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g'\
    \ || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c\
    \ == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w'\
    \ || c == 'x' || c == 'y' || c == 'z')\n            if(c == 'b' || c == 'c' ||\
    \ c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c ==\
    \ 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n \
    \               res.push_back(\"b\");\n            else\n                res.push_back(\"\
    c\");\n    \n    for(auto &c: s)\n        if(c == 'c' || c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v'\
    \ || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n            if(c == 'c' ||\
    \ c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || \n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsnq_pvu0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpsnq_pvu0.cpp:37:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   37 | }\n      | ^\n\
    /tmp/tmpsnq_pvu0.cpp:36:99: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   36 |             if(c == 'c' || c == 'd' || c == 'f' || c == 'g' ||\
    \ c == 'h' || c == 'j' || c == 'k' ||\n      |               ~               \
    \                                                                    ^\n     \
    \ |                                                                          \
    \                         )\n   37 | }\n      | ~                            \
    \                                                                      \n/tmp/tmpsnq_pvu0.cpp:37:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   37 | }\n \
    \     | ^\n/tmp/tmpsnq_pvu0.cpp:37:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   37 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977259
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    long start = 0;\n\
    \    long end = s.size();\n    long mid = start + (end - start) / 2;\n    \n \
    \   while (start < end) {\n        long count = 0;\n        \n        while (start\
    \ < end && s[start] == s[mid]) {\n            ++start;\n            ++count;\n\
    \        }\n        \n        if (count == n) {\n            res.push_back(s.substr(start,\
    \ mid - start));\n            start = mid + 1;\n        }\n        \n        while\
    \ (start < end && s[end] == s[mid]) {\n            --end;\n            ++count;\n\
    \        }\n        \n        if (count == n) {\n            res.push_back(s.substr(start,\
    \ end - start));\n            end = mid - 1;\n        }\n        \n        mid\
    \ = start + (end - start) / 2;\n    }\n    \n    return res;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977264
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpmrd343gd: /tmp/tmpmrd343gd.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                res.push_back(\"aeiou\");\n            }\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n \
    \               res.push_back(\"aeiou\");\n            }\n        }\n        if(c\
    \ == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j'\
    \ || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c\
    \ == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y'\
    \ || c == 'z') {\n            if(c == 'b' || c == 'c' || c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v'\
    \ || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n                res.push_back(\"\
    bcdfghjklmnpqrstvwxyz\");\n            }\n            if(c == 'b' || c == 'c'\
    \ || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c\
    \ == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n\
    \                res.push_back(\"bcdfghjklmnpqrstvwxyz\");\n            }\n  \
    \      }\n        if(c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h'\
    \ || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z') {\n            if(c == 'c' || c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || \n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7izypfpu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp7izypfpu.cpp:30:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   30 | }\n      | ^\n\
    /tmp/tmp7izypfpu.cpp:29:99: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   29 |             if(c == 'c' || c == 'd' || c == 'f' || c == 'g' ||\
    \ c == 'h' || c == 'j' || c == 'k' ||\n      |               ~               \
    \                                                                    ^\n     \
    \ |                                                                          \
    \                         )\n   30 | }\n      | ~                            \
    \                                                                      \n/tmp/tmp7izypfpu.cpp:30:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   30 | }\n \
    \     | ^\n/tmp/tmp7izypfpu.cpp:31:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   31 | int main() {\n      |            ^\n\
    /tmp/tmp7izypfpu.cpp:40:1: error: expected \u2018}\u2019 at end of input\n   40\
    \ | }\n      | ^\n/tmp/tmp7izypfpu.cpp:11:21: note: to match this \u2018{\u2019\
    \n   11 |     for(auto &c: s) {\n      |                     ^\n/tmp/tmp7izypfpu.cpp:40:1:\
    \ error: expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmp7izypfpu.cpp:9:62:\
    \ note: to match this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmp7izypfpu.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   40 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpby2lm01k: /tmp/tmpby2lm01k.cpp:14: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // Your code here\n    \n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpdk4xox22: /tmp/tmpdk4xox22.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpprh48m4b: /tmp/tmpprh48m4b.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // TODO: Write your code here\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmppz3fs19n: /tmp/tmppz3fs19n.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> result;\n\
    \    \n    // Write your code here\n    \n    return result;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp0wqeg6rr: /tmp/tmp0wqeg6rr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = 0;\n    long count = 0;\n    \n    while(end < s.size()) {\n        while(end\
    \ < s.size() && s[end] != '\\0')\n            end++;\n        \n        if(end\
    \ >= s.size())\n            break;\n        \n        while(start < end && s[start]\
    \ != '\\0')\n            start++;\n        \n        if(start >= end)\n      \
    \      break;\n        \n        while(count < n && s[start] == s[end])\n    \
    \        count++;\n        \n        if(count == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        start = end;\n        end++;\n        count++;\n\
    \    }\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp38skj7jf: /tmp/tmp38skj7jf.cpp:46: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // Write your code here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpprh48m4b: /tmp/tmpprh48m4b.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i=0; i<s.length();\
    \ i++) {\n        for(long j=0; j<s.length(); j++) {\n            if(s[i]==s[j]\
    \ && s[i]!=' ' && s[j]!=' ') {\n                if(n==1) {\n                 \
    \   res.push_back(s.substr(i,1));\n                }\n                else {\n\
    \                    if(n>1) {\n                        res.push_back(s.substr(i,1));\n\
    \                        res.push_back(s.substr(j,1));\n                    }\n\
    \                    else {\n                        res.push_back(s.substr(i,1));\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp3fohur63: /tmp/tmp3fohur63.cpp:36: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    for(long i = 0; i < s.length(); i++) {\n   \
    \     if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y') {\n            v.push_back(s.substr(0, i));\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpunbg1lhr: /tmp/tmpunbg1lhr.cpp:22: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ if(s.empty())\n        return v;\n    \n    for(long i = 0; i < s.length();\
    \ i++) {\n        for(long j = i; j < s.length(); j++) {\n            if(s[j]\
    \ == ' ') {\n                v.push_back(s.substr(i, j));\n                i =\
    \ j + 1;\n                break;\n            }\n        }\n    }\n    \n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpjhyw2t9r: /tmp/tmpjhyw2t9r.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpmrd343gd: /tmp/tmpmrd343gd.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   long cnt = 0;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n  \
    \  if(cnt != n) {\n        return res;\n    }\n    for(auto &c: s) {\n       \
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n           \
    \ cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n    }\n \
    \   for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt != n) {\n \
    \       return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n\
    \    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n \
    \   }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt != n)\
    \ {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n      \
    \  }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt !=\
    \ n) {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n   \
    \     }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || \n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvq7j459w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpvq7j459w.cpp:94:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   94 | }\n      | ^\n\
    /tmp/tmpvq7j459w.cpp:93:23: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   93 |         if(c == 'a' ||\n      |           ~           ^\n   \
    \   |                       )\n   94 | }\n      | ~                      \n/tmp/tmpvq7j459w.cpp:94:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   94 | }\n \
    \     | ^\n/tmp/tmpvq7j459w.cpp:95:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   95 | int main() {\n      |            ^\n\
    /tmp/tmpvq7j459w.cpp:104:1: error: expected \u2018}\u2019 at end of input\n  104\
    \ | }\n      | ^\n/tmp/tmpvq7j459w.cpp:9:62: note: to match this \u2018{\u2019\
    \n    9 | std::vector<std::string> select_words(std::string s, long n) {\n   \
    \   |                                                              ^\n/tmp/tmpvq7j459w.cpp:104:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  104 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"\
    a\");\n            else\n                res.push_back(\"e\");\n        else\n\
    \            if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c\
    \ == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p'\
    \ || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c\
    \ == 'x' || c == 'y' || c == 'z')\n                res.push_back(\"b\");\n   \
    \         else\n                res.push_back(\"c\");\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpv8o62tho: /tmp/tmpv8o62tho.cpp:30: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ for(auto &c: s) {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') {\n            v.push_back(c);\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsozlqbln.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpsozlqbln.cpp:13:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   13 |             v.push_back(c);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpsozlqbln.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ for(long i = 0; i < s.length(); i++) {\n        v.push_back(s.substr(i, 1));\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpljg86azp: /tmp/tmpljg86azp.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ res;\n    \n    for(int i=0;i<s.size();i++){\n        if(s[i]=='a' || s[i]=='e'\
    \ || s[i]=='i' || s[i]=='o' || s[i]=='u'){\n            if(i+n<s.size()){\n  \
    \              res.push_back(s.substr(i,n));\n            }\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp47su3aev: /tmp/tmp47su3aev.cpp:24: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n\
    \                break;\n            else if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n         \
    \   else\n                res.push_back(s.substr(i, 1));\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpsqfbpt4v: /tmp/tmpsqfbpt4v.cpp:28: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = s.size();\n    \n    while(start < end) {\n        long mid = (start + end)\
    \ / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] == 'i' ||\
    \ s[mid] == 'o' || s[mid] == 'u') {\n            end = mid;\n        } else {\n\
    \            start = mid + 1;\n        }\n    }\n    \n    while(start < s.size())\
    \ {\n        long mid = (start + end) / 2;\n        \n        if(s[mid] == 'a'\
    \ || s[mid] == 'e' || s[mid] == 'i' || s[mid] == 'o' || s[mid] == 'u') {\n   \
    \         end = mid;\n        } else {\n            start = mid + 1;\n       \
    \ }\n    }\n    \n    while(start < s.size()) {\n        long mid = (start + end)\
    \ / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] == 'i' ||\
    \ s[mid] == 'o' || s[mid] == 'u') {\n            end = mid;\n        } else {\n\
    \            start = mid + 1;\n        }\n    }\n    \n    while(start < s.size())\
    \ {\n        long mid = (start + end) / 2;\n        \n        if(s[mid] == 'a'\
    \ || s[mid] == 'e' || s[mid] == 'i' || s[mid] == 'o' || s[mid] == 'u') {\n   \
    \         end = mid;\n        } else {\n            start = mid + 1;\n       \
    \ }\n    }\n    \n    while(start < s.size()) {\n        long mid = (start + end)\
    \ / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] == 'i' ||\
    \ s[mid] == 'o' || s[mid] == 'u') {\n            end = mid;\n        } else {\n\
    \            start = mid + 1;\n        }\n    }\n    \n    while(start < s.size())\
    \ {\n        long mid = (start + end) / 2;\n        \n        if(s[mid] == 'a'\
    \ || s[mid] == 'e' || s[mid] == 'i' || s[mid] == 'o' || s[mid] == 'u') {\n   \
    \         end = mid;\n        } else {\n            start = mid + 1;\n       \
    \ }\n    }\n    \n    while(start < s.size()) {\n        long mid = (start + end)\
    \ / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] == 'i' ||\
    \ s[mid] == 'o' || s[mid] == 'u') {\n            end = mid;\n        } else {\n\
    \            start = mid + 1;\n        }\n    }\n    \n    while(start < s.size())\
    \ {\n        long mid = (start + end) / 2;\n        \n        if(s[mid] == 'a'\
    \ || s[mid] == 'e' || s[mid] == 'i' || s[mid\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjlrol0sc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpjlrol0sc.cpp:90:68: error:\
    \ expected \u2018]\u2019 before \u2018}\u2019 token\n   90 |         if(s[mid]\
    \ == 'a' || s[mid] == 'e' || s[mid] == 'i' || s[mid\n      |                 \
    \                                                   ^\n      |               \
    \                                                     ]\n   91 | }\n      | ~\
    \                                                                   \n/tmp/tmpjlrol0sc.cpp:90:68:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   90 |         if(s[mid]\
    \ == 'a' || s[mid] == 'e' || s[mid] == 'i' || s[mid\n      |           ~     \
    \                                                   ^\n      |               \
    \                                                     )\n   91 | }\n      | ~\
    \                                                                   \n/tmp/tmpjlrol0sc.cpp:91:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   91 | }\n \
    \     | ^\n/tmp/tmpjlrol0sc.cpp:92:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   92 | int main() {\n      |            ^\n\
    /tmp/tmpjlrol0sc.cpp:101:1: error: expected \u2018}\u2019 at end of input\n  101\
    \ | }\n      | ^\n/tmp/tmpjlrol0sc.cpp:9:62: note: to match this \u2018{\u2019\
    \n    9 | std::vector<std::string> select_words(std::string s, long n) {\n   \
    \   |                                                              ^\n/tmp/tmpjlrol0sc.cpp:101:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  101 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659977260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ if (s.empty())\n        return v;\n    \n    long start = 0;\n    long end =\
    \ 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n        if (s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            if (end - start == n) {\n                v.push_back(s.substr(start,\
    \ end - start));\n                start = i + 1;\n                end = i + 1;\n\
    \            }\n        }\n        else if (s[i] == 'y') {\n            if (end\
    \ - start == n) {\n                v.push_back(s.substr(start, end - start));\n\
    \                start = i + 1;\n                end = i + 1;\n            }\n\
    \        }\n        else if (s[i] == 'e') {\n            if (end - start == n)\
    \ {\n                v.push_back(s.substr(start, end - start));\n            \
    \    start = i + 1;\n                end = i + 1;\n            }\n        }\n\
    \        else if (s[i] == 'o') {\n            if (end - start == n) {\n      \
    \          v.push_back(s.substr(start, end - start));\n                start =\
    \ i + 1;\n                end = i + 1;\n            }\n        }\n        else\
    \ if (s[i] == 'i') {\n            if (end - start == n) {\n                v.push_back(s.substr(start,\
    \ end - start));\n                start = i + 1;\n                end = i + 1;\n\
    \            }\n        }\n        else if (s[i] == 'u') {\n            if (end\
    \ - start == n) {\n                v.push_back(s.substr(start, end - start));\n\
    \                start = i + 1;\n                end = i + 1;\n            }\n\
    \        }\n        else if (s[i] == 'a') {\n            if (end - start == n)\
    \ {\n                v.push_back(s.substr(start, end - start));\n            \
    \    start = i + 1;\n                end = i + 1;\n            }\n        }\n\
    \        else if (s[i] == 'y') {\n            if (end - start == n) {\n      \
    \          v.push_back(s.substr(start, end - start));\n                start =\
    \ i + 1;\n                end = i + 1;\n            }\n        }\n        else\
    \ if (s[i] == 's') {\n            if (end - start == n) {\n                v.push_back(s.substr(start,\
    \ end - start));\n                start = i + 1;\n                end = i + 1;\n\
    \            }\n        }\n        else if (s[i] == 't') {\n            if (end\
    \ - start == n) {\n                v.push_back(s.substr(start, end - start));\n\
    \                start = i + 1;\n                end = i + 1;\n            }\n\
    \        }\n        else if (s[i] == 'h') {\n            if (end - start == n)\
    \ {\n                v.push_back(s.substr(start, end - start));\n            \
    \    start = i + 1;\n                end = i + 1;\n            }\n        }\n\
    \        else if (s[i] == 'c') {\n            if (end - start == n) {\n      \
    \          v.push_back(s.substr(start, end - start));\n                start =\
    \ i + 1;\n                end = i + 1;\n            }\n        }\n        else\
    \ if (s[i] == 'k') {\n            if (end - start == n) {\n                v.push_back(s.substr(start,\
    \ end - start));\n                start = i + 1;\n\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyu4_czwo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpyu4_czwo.cpp:108:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  108\
    \ | int main() {\n      |            ^\n/tmp/tmpyu4_czwo.cpp:117:1: error: expected\
    \ \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpyu4_czwo.cpp:102:31:\
    \ note: to match this \u2018{\u2019\n  102 |         else if (s[i] == 'k') {\n\
    \      |                               ^\n/tmp/tmpyu4_czwo.cpp:117:1: error: expected\
    \ \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpyu4_czwo.cpp:17:41:\
    \ note: to match this \u2018{\u2019\n   17 |     for (long i = 0; i < s.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpyu4_czwo.cpp:117:1:\
    \ error: expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpyu4_czwo.cpp:9:62:\
    \ note: to match this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpyu4_czwo.cpp:117:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  117 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659977260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    for(auto &c: s) {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(\"\"\
    );\n        }\n        if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c ==\
    \ 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            v.push_back(\"\"\
    );\n        }\n        if(c == 'p' || c == 'q' || c == 'r' || c == 't' || c ==\
    \ 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            v.push_back(\"\
    \");\n        }\n        if(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c\
    \ == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k'\
    \ || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c\
    \ == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z') {\n            v.push_back(\"\");\n        }\n    \
    \    if(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' ||\
    \ c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c ==\
    \ 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c\
    \ == 'z') {\n            v.push_back(\"\");\n        }\n        if(c == 'a' ||\
    \ c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c ==\
    \ 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c\
    \ == 'u' || c == 'v' || c == 'w' || c == 'x' || \n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe_jv1kpe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpe_jv1kpe.cpp:30:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   30 | }\n      | ^\n\
    /tmp/tmpe_jv1kpe.cpp:29:299: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   29 |         if(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c\
    \ == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k'\
    \ || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c\
    \ == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x'\
    \ ||\n      |           ~                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       ^\n      |                                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            )\n   30 | }\n      | ~                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             \n/tmp/tmpe_jv1kpe.cpp:30:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   30 | }\n      | ^\n/tmp/tmpe_jv1kpe.cpp:31:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   31 | int main() {\n      |            ^\n/tmp/tmpe_jv1kpe.cpp:40:1: error:\
    \ expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpe_jv1kpe.cpp:9:62:\
    \ note: to match this \u2018{\u2019\n    9 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpe_j"
  stdout: ''
  timestamp: 1659977260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> result;\n\
    \    // Write your code here\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpoldavjgu: /tmp/tmpoldavjgu.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(\"\");\n    if (s.empty()) return v;\n    \n    long start = 0;\n\
    \    long end = 0;\n    long count = 0;\n    \n    for (long i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            v.push_back(s.substr(start, i - start));\n  \
    \          start = i + 1;\n            end = i;\n            count++;\n      \
    \  }\n    }\n    \n    if (count == n) v.push_back(s.substr(start, s.size() -\
    \ start));\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp8xvc4fzz: /tmp/tmp8xvc4fzz.cpp:33: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    \n    for(long i = 0; i < s.size(); i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(0,\
    \ i));\n                break;\n            }\n            else if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n           \
    \     v.push_back(s.substr(0, i));\n                break;\n            }\n  \
    \      }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp3je8bl9t: /tmp/tmp3je8bl9t.cpp:29: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i'\
    \ || i == 'o' || i == 'u' || i == 'A' || i == 'E' || i == 'I' || i == 'O' || i\
    \ == 'U')\n        {\n            v.push_back(i);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0i1_m1bm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp0i1_m1bm.cpp:16:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   16 |             v.push_back(i);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp0i1_m1bm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    long start = 0;\n\
    \    long end = s.size();\n    \n    while (start < end) {\n        long mid =\
    \ (start + end) / 2;\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index = s.find_first_not_of(s.begin() +\
    \ mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_2 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_3 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_4 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_5 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_6 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_7 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_8 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_9 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_10 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_11 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_12 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_13 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_14 = s.find_first_not_\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf90nu7yd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpf90nu7yd.cpp:22:76: error:\
    \ no matching function for call to \u2018std::__cxx11::basic_string<char>::find_first_not_of(__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   22 |         long consonant_index = s.find_first_not_of(s.begin() + mid,\
    \ s.end());\n      |                                                         \
    \                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf90nu7yd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2669:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2669 |       find_first_not_of(const basic_string&\
    \ __str, size_type __pos = 0) const\n      |       ^~~~~~~~~~~~~~~~~\n/sha"
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u')\n            continue;\n        \n        for(long j = i; j\
    \ < s.length(); j++) {\n            if(s[j] == 'a' || s[j] == 'e' || s[j] == 'i'\
    \ || s[j] == 'o' || s[j] == 'u')\n                continue;\n            \n  \
    \          if(s[j] == s[i]) {\n                res.push_back(s.substr(i, j));\n\
    \                i = j + 1;\n                \n                if(res.size() ==\
    \ n)\n                    break;\n            }\n        }\n    }\n    \n    return\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpglsfbbqt: /tmp/tmpglsfbbqt.cpp:36: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i'\
    \ || i == 'o' || i == 'u')\n        {\n            v.push_back(i);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2rgjprqc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp2rgjprqc.cpp:16:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   16 |             v.push_back(i);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2rgjprqc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  stdout: ''
  timestamp: 1659977256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Write your code here\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpkhfobj5e: /tmp/tmpkhfobj5e.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   long cnt = 0;\n    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n         \
    \   cnt--;\n        }\n    }\n    for(auto &c : s) {\n        if(c != ' ' && c\
    \ != '-') {\n            cnt++;\n        }\n    }\n    if(cnt != n) {\n      \
    \  return res;\n    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-')\
    \ {\n            cnt--;\n        }\n    }\n    for(auto &c : s) {\n        if(c\
    \ != ' ' && c != '-') {\n            cnt++;\n        }\n    }\n    if(cnt != n)\
    \ {\n        return res;\n    }\n    for(auto &c : s) {\n        if(c != ' ' &&\
    \ c != '-') {\n            cnt--;\n        }\n    }\n    for(auto &c : s) {\n\
    \        if(c != ' ' && c != '-') {\n            cnt++;\n        }\n    }\n  \
    \  if(cnt != n) {\n        return res;\n    }\n    for(auto &c : s) {\n      \
    \  if(c != ' ' && c != '-') {\n            cnt--;\n        }\n    }\n    for(auto\
    \ &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt++;\n        }\n\
    \    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c : s) {\n\
    \        if(c != ' ' && c != '-') {\n            cnt--;\n        }\n    }\n  \
    \  for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt++;\n\
    \        }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto\
    \ &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt--;\n        }\n\
    \    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n         \
    \   cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n    }\n\
    \    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt--;\n\
    \        }\n    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_psm_g_.cpp:112:29: warning: missing terminating ' character\n\
    \  112 |         if(c != ' ' && c != '-\n      |                             ^\n\
    /tmp/tmpm_psm_g_.cpp:112:29: error: missing terminating ' character\n  112 | \
    \        if(c != ' ' && c != '-\n      |                             ^~\n/tmp/tmpm_psm_g_.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmpm_psm_g_.cpp:113:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  113 | }\n      | ^\n/tmp/tmpm_psm_g_.cpp:112:28:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  112 |         if(c\
    \ != ' ' && c != '-\n      |           ~                ^\n      |           \
    \                 )\n  113 | }\n      | ~                           \n/tmp/tmpm_psm_g_.cpp:113:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  113 | }\n \
    \     | ^\n/tmp/tmpm_psm_g_.cpp:114:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  114 | int main() {\n      |            ^\n\
    /tmp/tmpm_psm_g_.cpp:123:1: error: expected \u2018}\u2019 at end of input\n  123\
    \ | }\n      | ^\n/tmp/tmpm_psm_g_.cpp:9:62: note: to match this \u2018{\u2019\
    \n    9 | std::vector<std::string> select_words(std::string s, long n) {\n   \
    \   |                                                              ^\n/tmp/tmpm_psm_g_.cpp:123:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  123 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if (s.empty()) {\n        return res;\n    }\n    \n    // Your code goes\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp21cf1us4: /tmp/tmp21cf1us4.cpp:21: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = s.size();\n    long mid = end / 2;\n    \n    while(start < end) {\n     \
    \   while(start < mid && s[start] != s[mid])\n            start++;\n        \n\
    \        while(end > mid && s[end] != s[mid])\n            end--;\n        \n\
    \        if(end - start == n)\n            res.push_back(s.substr(start, end -\
    \ start));\n        \n        mid = (end - start) / 2;\n    }\n    \n    return\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpa3iu6n4h: /tmp/tmpa3iu6n4h.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = 0;\n    \n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            start = i;\n        }\n        if(s[i] == 'n') {\n          \
    \  end = i;\n            break;\n        }\n    }\n    \n    if(end == s.size())\n\
    \        end = s.size() - 1;\n    \n    for(long i = start; i <= end; i++) {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') {\n            if(n == 1)\n                res.push_back(s.substr(start,\
    \ i - start + 1));\n            else\n                res.push_back(s.substr(start,\
    \ i - start + 1));\n            \n            start = i + 1;\n        }\n    }\n\
    \    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxbf40z2z: /tmp/tmpxbf40z2z.cpp:45: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // your code here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    for(auto &c: s)\n    {\n        if(isalpha(c))\n\
    \        {\n            temp = temp + c;\n        }\n    }\n    for(auto &c: temp)\n\
    \    {\n        if(isalpha(c))\n        {\n            v.push_back(temp);\n  \
    \          temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n  \
    \      if(isalpha(c))\n        {\n            v.push_back(temp);\n           \
    \ temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n\
    \        {\n            v.push_back(temp);\n            temp.clear();\n      \
    \  }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n\
    \            v.push_back(temp);\n            temp.clear();\n        }\n    }\n\
    \    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n          \
    \  v.push_back(temp);\n            temp.clear();\n        }\n    }\n    for(auto\
    \ &c: temp)\n    {\n        if(isalpha(c))\n        {\n            v.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n\
    \        if(isalpha(c))\n        {\n            v.push_back(temp);\n         \
    \   temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n\
    \        {\n            v.push_back(temp);\n            temp.clear();\n      \
    \  }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n\
    \            v.push_back(temp);\n            temp.clear();\n        }\n    }\n\
    \    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n          \
    \  v.push_back(temp);\n            temp.clear();\n        }\n    }\n    for(auto\
    \ &c: temp)\n    {\n        if(isalpha(c))\n        {\n            v.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n\
    \        if(isalpha(c))\n        {\n            v.push_back(temp);\n         \
    \   temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n\
    \        {\n            v.push_back(temp);\n            temp.clear();\n      \
    \  }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n\
    \            v.push_back(temp);\n            temp.clear();\n        }\n    }\n\
    \    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n          \
    \  v.push_back(temp);\n            temp.clear();\n        }\n    }\n    for(auto\
    \ &c: temp)\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6n0eaipf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp6n0eaipf.cpp:141:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  141 | }\n      | ^\n\
    /tmp/tmp6n0eaipf.cpp:141:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   // Your code here\n    return res;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpcj3wsixn: /tmp/tmpcj3wsixn.cpp:16: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ res;\n    std::string temp;\n    long count = 0;\n    for(auto &c: s){\n   \
    \     if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n        \
    \    count++;\n        }\n    }\n    if(count == n){\n        for(auto &c: s){\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n \
    \               res.push_back(temp);\n                temp = \"\";\n         \
    \       count = 0;\n            }\n            else{\n                temp +=\
    \ c;\n            }\n        }\n        res.push_back(temp);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmphbylra42: /tmp/tmphbylra42.cpp:36: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n    v.push_back(\"\
    ab\");\n    v.push_back(\"abc\");\n    v.push_back(\"abcd\");\n    v.push_back(\"\
    abcde\");\n    v.push_back(\"abcdef\");\n    v.push_back(\"abcdefg\");\n    v.push_back(\"\
    abcdefgh\");\n    v.push_back(\"abcdefghi\");\n    v.push_back(\"abcdefghij\"\
    );\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"abcdefghijkl\");\n  \
    \  v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\");\n   \
    \ v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\");\n\
    \    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiwgxjql.cpp:49:17: warning: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^\n/tmp/tmpqiwgxjql.cpp:49:17: error: missing terminating \" character\n\
    \   49 |     v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\n      |       \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqiwgxjql.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmpqiwgxjql.cpp:50:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmpqiwgxjql.cpp:50:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp155tmgdr: /tmp/tmp155tmgdr.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ \n    // Your code goes here\n    \n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmp_22mmi8t: /tmp/tmp_22mmi8t.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code goes here\n    \n    return res;\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpndms1s30: /tmp/tmpndms1s30.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    long count = 0;\n    for(char c : s){\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n          \
    \  count++;\n        }\n    }\n    if(count == n){\n        for(char c : s){\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n \
    \               v.push_back(temp);\n                temp = \"\";\n           \
    \ }\n            else{\n                temp += c;\n            }\n        }\n\
    \        v.push_back(temp);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpj4mpizu2: /tmp/tmpj4mpizu2.cpp:35: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpxnctv4ec: /tmp/tmpxnctv4ec.cpp:18: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977252
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> res;\n \
    \   if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = 0;\n    long count = 0;\n    \n    while(end < s.size()) {\n        while(s[end]\
    \ != '\\0' && s[end] != '\\1' && s[end] != '\\2' && s[end] != '\\3' && s[end]\
    \ != '\\4' && s[end] != '\\5' && s[end] != '\\6' && s[end] != '\\7' && s[end]\
    \ != '\\8' && s[end] != '\\9') {\n            end++;\n        }\n        \n  \
    \      if(s[end] == '\\0')\n            break;\n        \n        while(s[end]\
    \ != '\\0' && s[end] != '\\1' && s[end] != '\\2' && s[end] != '\\3' && s[end]\
    \ != '\\4' && s[end] != '\\5' && s[end] != '\\6' && s[end] != '\\7' && s[end]\
    \ != '\\8' && s[end] != '\\9') {\n            end++;\n        }\n        \n  \
    \      if(s[end] == '\\0')\n            break;\n        \n        if(s[end] ==\
    \ '\\0' && s[end+1] == '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] != '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] == '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] != '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] == '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] != '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] == '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] != '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] == '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] != '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] == '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] != '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] == '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] != '\\0')\n            count++;\n        \n        if(s[end]\
    \ == '\\0' && s[end+1] == '\\0')\n            count++;\n        \n\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjsi5keu.cpp:19:169: warning: unknown escape sequence: '\\8'\n\
    \   19 |         while(s[end] != '\\0' && s[end] != '\\1' && s[end] != '\\2' &&\
    \ s[end] != '\\3' && s[end] != '\\4' && s[end] != '\\5' && s[end] != '\\6' &&\
    \ s[end] != '\\7' && s[end] != '\\8' && s[end] != '\\9') {\n      |          \
    \                                                                            \
    \                                                                            \
    \       ^~~~\n/tmp/tmpcjsi5keu.cpp:19:187: warning: unknown escape sequence: '\\\
    9'\n   19 |         while(s[end] != '\\0' && s[end] != '\\1' && s[end] != '\\\
    2' && s[end] != '\\3' && s[end] != '\\4' && s[end] != '\\5' && s[end] != '\\6'\
    \ && s[end] != '\\7' && s[end] != '\\8' && s[end] != '\\9') {\n      |       \
    \                                                                            \
    \                                                                            \
    \                            ^~~~\n/tmp/tmpcjsi5keu.cpp:26:169: warning: unknown\
    \ escape sequence: '\\8'\n   26 |         while(s[end] != '\\0' && s[end] != '\\\
    1' && s[end] != '\\2' && s[end] != '\\3' && s[end] != '\\4' && s[end] != '\\5'\
    \ && s[end] != '\\6' && s[end] != '\\7' && s[end] != '\\8' && s[end] != '\\9')\
    \ {\n      |                                                                 \
    \                                                                            \
    \                            ^~~~\n/tmp/tmpcjsi5keu.cpp:26:187: warning: unknown\
    \ escape sequence: '\\9'\n   26 |         while(s[end] != '\\0' && s[end] != '\\\
    1' && s[end] != '\\2' && s[end] != '\\3' && s[end] != '\\4' && s[end] != '\\5'\
    \ && s[end] != '\\6' && s[end] != '\\7' && s[end] != '\\8' && s[end] != '\\9')\
    \ {\n      |                                                                 \
    \                                                                            \
    \                                              ^~~~\n/tmp/tmpcjsi5keu.cpp: In\
    \ function \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmpcjsi5keu.cpp:80:12: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 "
  stdout: ''
  timestamp: 1659977261
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n    v.push_back(\"\
    b\");\n    v.push_back(\"c\");\n    v.push_back(\"d\");\n    v.push_back(\"e\"\
    );\n    v.push_back(\"f\");\n    v.push_back(\"g\");\n    v.push_back(\"h\");\n\
    \    v.push_back(\"i\");\n    v.push_back(\"j\");\n    v.push_back(\"k\");\n \
    \   v.push_back(\"l\");\n    v.push_back(\"m\");\n    v.push_back(\"n\");\n  \
    \  v.push_back(\"o\");\n    v.push_back(\"p\");\n    v.push_back(\"q\");\n   \
    \ v.push_back(\"r\");\n    v.push_back(\"s\");\n    v.push_back(\"t\");\n    v.push_back(\"\
    u\");\n    v.push_back(\"v\");\n    v.push_back(\"w\");\n    v.push_back(\"x\"\
    );\n    v.push_back(\"y\");\n    v.push_back(\"z\");\n    v.push_back(\"A\");\n\
    \    v.push_back(\"B\");\n    v.push_back(\"C\");\n    v.push_back(\"D\");\n \
    \   v.push_back(\"E\");\n    v.push_back(\"F\");\n    v.push_back(\"G\");\n  \
    \  v.push_back(\"H\");\n    v.push_back(\"I\");\n    v.push_back(\"J\");\n   \
    \ v.push_back(\"K\");\n    v.push_back(\"L\");\n    v.push_back(\"M\");\n    v.push_back(\"\
    N\");\n    v.push_back(\"O\");\n    v.push_back(\"P\");\n    v.push_back(\"Q\"\
    );\n    v.push_back(\"R\");\n    v.push_back(\"S\");\n    v.push_back(\"T\");\n\
    \    v.push_back(\"U\");\n    v.push_back(\"V\");\n    v.push_back(\"W\");\n \
    \   v.push_back(\"X\");\n    v.push_back(\"Y\");\n    v.push_back(\"Z\");\n  \
    \  v.push_back(\"0\");\n    v.push_back(\"1\");\n    v.push_back(\"2\");\n   \
    \ v.push_back(\"3\");\n    v.push_back(\"4\");\n    v.push_back(\"5\");\n    v.push_back(\"\
    6\");\n    v.push_back(\"7\");\n    v.push_back(\"8\");\n    v.push_back(\"9\"\
    );\n    v.push_back(\"!\");\n    v.push_back(\"?\");\n    v.push_back(\",\");\n\
    \    v.push_back(\";\");\n    v.push_back(\":\");\n    v.push_back(\";\");\n \
    \   v.push_back(\"(\");\n    v.push_back(\")\");\n    v.push_back(\"{\");\n  \
    \  v.push_back(\"\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqfk1qinb.cpp:84:17: warning: missing terminating \" character\n\
    \   84 |     v.push_back(\"\n      |                 ^\n/tmp/tmpqfk1qinb.cpp:84:17:\
    \ error: missing terminating \" character\n/tmp/tmpqfk1qinb.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > select_words(std::string, long\
    \ int)\u2019:\n/tmp/tmpqfk1qinb.cpp:85:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   85 | }\n      | ^\n/tmp/tmpqfk1qinb.cpp:85:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpgelpg_mj: /tmp/tmpgelpg_mj.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\nstd::vector<std::string>\
    \ select_words(std::string s, long n) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: Exception
  stderr: 'tmpgelpg_mj: /tmp/tmpgelpg_mj.cpp:17: int main(): Assertion `candidate(("Mary
    had a little lamb"), (4)) == (std::vector<std::string>({(std::string)"little"}))''
    failed.

    '
  stdout: ''
  timestamp: 1659977261
