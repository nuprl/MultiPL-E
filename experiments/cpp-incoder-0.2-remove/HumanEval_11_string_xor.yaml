name: HumanEval_11_string_xor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and\
  \ b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return\
  \ result also as a string.\nstd::string string_xor(std::string a, std::string b)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
  111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\"\
  )) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n\
  }\n"
completions: ["    std::string result;\n    for (int i = 0; i < a.size(); i++) {\n\
    \        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int x = a[i] - b[i] + carry;\n        carry = x >> 31;\n        result +=\
    \ std::to_string(x);\n    }\n    if (carry != 0) result += std::to_string(carry);\n\
    \    return result;", "    std::string result;\n    int n = a.size();\n    int\
    \ m = b.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n\
    \        if (a[i] != '1' && b[j] != '1') {\n            result += a[i];\n    \
    \        i++;\n        } else if (a[i] != '0' && b[j] != '0') {\n            result\
    \ += b[j];\n            j++;\n        } else {\n            result += a[i] ^ b[j];\n\
    \            i++;\n            j++;\n        }\n    }\n    return result;", " \
    \   std::string result;\n    int carry = 0;\n    for (int i = 0; i < a.size();\
    \ i++) {\n        int x = a[i] - '0';\n        int y = b[i] - '0';\n        int\
    \ z = x + y + carry;\n        carry = z / 10;\n        z = z % 10;\n        result[i]\
    \ = '0' + z;\n    }\n    if (carry != 0)\n        result[result.size() - 1] =\
    \ '1' + carry;\n    return result;", "    std::string result;\n    int n = a.size();\n\
    \    int m = b.size();\n    int k = n >= m ? n : m;\n    for (int i = 0; i < k;\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    for(int i\
    \ = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;", "    std::string\
    \ result;\n    int size = a.size();\n    int size_of_b = b.size();\n    int size_of_a\
    \ = a.size();\n    for (int i = 0; i < size; i++) {\n        if (b[i] == '1')\
    \ {\n            result += a[i];\n        }\n    }\n    for (int i = 0; i < size_of_b;\
    \ i++) {\n        if (a[i] == '1') {\n            result += b[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;",
  "    std::string ans = \"\";\n    for (int i = 0; i < a.size(); i++) {\n       \
    \ ans += (std::to_string(std::bitset<8>(a[i]) ^ std::bitset<8>(b[i])));\n    }\n\
    \    return ans;", "    std::string result;\n    int size = a.size();\n    int\
    \ size_of_a = a.size();\n    int size_of_b = b.size();\n    int size_of_result\
    \ = size;\n    for (int i = 0; i < size; i++) {\n        result[i] = a[i] ^ b[i];\n\
    \    }\n    return result;", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < a.size(); i++) {\n        ans += (std::to_string(a[i]) ^ std::to_string(b[i]));\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    int n = a.size();\n\
    \    int m = b.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j\
    \ < m) {\n        ans += a[i] ^ b[j];\n        i++;\n        j++;\n    }\n   \
    \ return ans;", "    std::string result;\n    int carry = 0;\n    for (int i =\
    \ 0; i < a.length(); i++) {\n        int sum = a[i] - b[i] + carry;\n        carry\
    \ = sum / 2;\n        sum += carry % 2;\n        result.append(1, sum % 2);\n\
    \    }\n    if (carry != 0)\n        result.append(1, carry);\n    return result;",
  "    std::string result;\n    int n = a.size();\n    int m = b.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(a[i]\
    \ != b[j]) {\n                result += a[i];\n            }\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    int n = a.size();\n\
    \    int m = b.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j\
    \ < m) {\n        if (a[i] != b[j]) {\n            result += (a[i] ^ b[j]);\n\
    \        }\n        i++;\n        j++;\n    }\n    while (i < n) {\n        result\
    \ += (a[i] ^ 0);\n        i++;\n    }\n    while (j < m) {\n        result +=\
    \ (b[j] ^ 0);\n        j++;\n    }\n    return result;", "    std::string result;\n\
    \    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int x =\
    \ a[i] - b[i] + carry;\n        carry = x >> 1;\n        result += std::to_string(x);\n\
    \    }\n    if (carry != 0)\n        result += std::to_string(carry);\n    return\
    \ result;", "    std::string ans = \"\";\n    int n = a.size();\n    int m = b.size();\n\
    \    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (a[i]\
    \ != b[j]) {\n            ans += '0';\n        } else {\n            ans += '1';\n\
    \        }\n        i++;\n        j++;\n    }\n    return ans;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n\
    \    }\n    return result;", "    std::string result;\n    for(int i = 0; i <\
    \ a.size(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result;\n\
    \    for(int i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n   \
    \ }\n    return result;", "    std::string result;\n    int size = a.size();\n\
    \    int size_of_a = a.size();\n    int size_of_b = b.size();\n    int size_of_result\
    \ = size;\n    for (int i = 0; i < size; i++) {\n        result += a[i] ^ b[i];\n\
    \    }\n    return result;", "    std::string ans = \"\";\n    for (int i = 0;\
    \ i < a.size(); i++) {\n        ans += (std::to_string(a[i]) ^ std::to_string(b[i]));\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        res += a[i] ^ b[i];\n    }\n    return res;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    int size =\
    \ a.size();\n    int size2 = b.size();\n    int i;\n    for (i = 0; i < size;\
    \ i++) {\n        result[i] = a[i] ^ b[i];\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    int len1 =\
    \ a.length();\n    int len2 = b.length();\n    int len3 = len1 + len2;\n    char\
    \ temp[len3];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i <\
    \ len1 && j < len2) {\n        temp[k] = a[i] - '0';\n        i++;\n        temp[k]\
    \ = b[j] - '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n \
    \       temp[k] = a[i] - '0';\n        i++;\n        k++;\n    }\n    while (j\
    \ < len2) {\n        temp[k] = b[j] - '0';\n        j++;\n        k++;\n    }\n\
    \    while (i < len1) {\n        temp[k] = '0';\n        i++;\n        k++;\n\
    \    }\n    while (j < len2) {\n        temp[k] = '0';\n        j++;\n       \
    \ k++;\n    }\n    while (i < len1) {\n        temp[k] = '0';\n        i++;\n\
    \        k++;\n    }\n    while (j < len2) {\n        temp[k] = '0';\n       \
    \ j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k] = '0';\n\
    \        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k] =\
    \ '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k]\
    \ = '0';\n        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k]\
    \ = '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k]\
    \ = '0';\n        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k]\
    \ = '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k]\
    \ = '0';\n        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k]\
    \ = '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k]\
    \ = '0';\n        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k]\
    \ = '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k]\
    \ = '0';\n        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k]\
    \ = '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k]\
    \ = '0';\n        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k]\
    \ = '0';\n        j++;\n        k++;\n    }\n    while (i < len1) {\n        temp[k]\
    \ = '0';\n        i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k]\
    \ = '0';\n        j++;", "    std::string ans = \"\";\n    for (int i = 0; i <\
    \ a.size(); i++) {\n        ans += (std::to_string(std::bitset<8>(a[i]) ^ std::bitset<8>(b[i])));\n\
    \    }\n    return ans;", "    std::string result;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    for(int i\
    \ = 0; i < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return\
    \ result;", "    std::string result;\n    for(int i = 0; i < a.size(); i++) {\n\
    \        result += a[i] ^ b[i];\n    }\n    return result;", "    std::string\
    \ result;\n    int size = a.size() + b.size();\n    std::vector<int> v(size);\n\
    \    int pos = 0;\n    for (auto &c : a) {\n        v[pos++] = c;\n    }\n   \
    \ for (auto &c : b) {\n        v[pos++] = c;\n    }\n    for (auto &c : v) {\n\
    \        result += std::to_string(c);\n    }\n    return result;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int val = a[i] - b[i] - carry;\n        if (val > 9) {\n            result\
    \ += val;\n            carry = 1;\n        } else {\n            result += val;\n\
    \            carry = 0;\n        }\n    }\n    if (carry != 0) {\n        result\
    \ += carry;\n    }\n    return result;", "    std::string result = \"\";\n   \
    \ int len1 = a.length();\n    int len2 = b.length();\n    int i = 0;\n    int\
    \ j = 0;\n    while (i < len1 && j < len2) {\n        if (a[i] != b[j]) {\n  \
    \          result += a[i];\n            i++;\n            j++;\n        } else\
    \ {\n            i++;\n            j++;\n        }\n    }\n    while (i < len1)\
    \ {\n        result += a[i];\n        i++;\n    }\n    while (j < len2) {\n  \
    \      result += b[j];\n        j++;\n    }\n    return result;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int x = a[i] - b[i] - carry;\n        carry = x >> 31;\n        result +=\
    \ (char)(x & 7);\n    }\n    if (carry != 0) result += (char) carry;\n    return\
    \ result;", "    std::string result;\n    for(int i = 0; i < a.size(); i++) {\n\
    \        result += a[i] ^ b[i];\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    int size =\
    \ a.size();\n    int size_of_a = a.size();\n    int size_of_b = b.size();\n  \
    \  int size_of_result = size;\n    for (int i = 0; i < size; i++) {\n        result[i]\
    \ = a[i] ^ b[i];\n    }\n    return result;", "    std::string result;\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return\
    \ result;", "    std::string result;\n    int size = a.size() + b.size();\n  \
    \  std::vector<int> v(size);\n    int pos = 0;\n    for (auto c : a) {\n     \
    \   v[pos++] = c - '0';\n    }\n    for (auto c : b) {\n        v[pos++] = c -\
    \ '0';\n    }\n    for (auto i = 0; i < size; i++) {\n        result += std::to_string(v[i])\
    \ + '0';\n    }\n    return result;", "    std::string result;\n    int carry\
    \ = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int val = a[i] - b[i]\
    \ - carry;\n        carry = val / 2;\n        val = val % 2;\n        result.append(1,\
    \ val);\n    }\n    if (carry != 0) {\n        result.append(1, carry);\n    }\n\
    \    return result;", "    std::string result;\n    int len1 = a.length();\n \
    \   int len2 = b.length();\n    int len3 = len1 + len2;\n    std::string temp;\n\
    \    temp.resize(len3);\n    int i = 0;\n    int j = 0;\n    while (i < len1 &&\
    \ j < len2) {\n        temp[i] = a[i] ^ b[j];\n        i++;\n        j++;\n  \
    \  }\n    while (i < len1) {\n        temp[i] = a[i];\n        i++;\n    }\n \
    \   while (j < len2) {\n        temp[i] = b[j];\n        j++;\n    }\n    result.assign(temp.begin(),\
    \ temp.end());\n    return result;", "    std::string result;\n    int size =\
    \ a.size();\n    int size_of_a = a.size();\n    int size_of_b = b.size();\n  \
    \  int size_of_result = size_of_a ^ size_of_b;\n    for (int i = 0; i < size_of_result;\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int x = a[i] - b[i] + carry;\n        carry = x >> 1;\n        result +=\
    \ (char) x;\n    }\n    if (carry != 0) {\n        result += (char) carry;\n \
    \   }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ a.size(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result;\n\
    \    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n \
    \   }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < a.size(); i++) {\n        result += std::bitset<8>(a[i]) ^ std::bitset<8>(b[i]);\n\
    \    }\n    return result;", "    std::string result;\n    int size = a.size();\n\
    \    int size_of_a = a.size();\n    int size_of_b = b.size();\n    int size_of_result\
    \ = size;\n    for (int i = 0; i < size; i++) {\n        int sum = 0;\n      \
    \  for (int j = 0; j < size_of_a; j++) {\n            sum += a[j] ^ b[j];\n  \
    \      }\n        result[i] = sum % 2;\n    }\n    return result;", "    std::string\
    \ result;\n    int size = a.size();\n    int size2 = b.size();\n    int size3\
    \ = size + size2;\n    std::vector<int> v1(size);\n    std::vector<int> v2(size2);\n\
    \    std::vector<int> v3(size3);\n    for (int i = 0; i < size; i++) {\n     \
    \   v1[i] = a[i] - '0';\n    }\n    for (int i = 0; i < size2; i++) {\n      \
    \  v2[i] = b[i] - '0';\n    }\n    for (int i = 0; i < size3; i++) {\n       \
    \ v3[i] = v1[i] ^ v2[i];\n    }\n    for (int i = 0; i < size3; i++) {\n     \
    \   result += std::to_string(v3[i]) + '0';\n    }\n    return result;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int x = a[i] - b[i] - carry;\n        carry = x >> 1;\n        result +=\
    \ to_string(x);\n    }\n    if (carry != 0) {\n        result += to_string(carry);\n\
    \    }\n    return result;", "    std::string result;\n    int carry = 0;\n  \
    \  for (int i = 0; i < a.size(); i++) {\n        int x = a[i] - '0';\n       \
    \ int y = b[i] - '0';\n        int z = x + y + carry;\n        carry = z / 10;\n\
    \        z = z % 10;\n        result[i] = '0' + z;\n    }\n    if (carry != 0)\
    \ {\n        result[a.size()] = '1' + carry;\n    }\n    return result;", "  \
    \  std::string result;\n    for(int i = 0; i < a.size(); i++) {\n        result\
    \ += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result;\n  \
    \  int size = a.size();\n    int i;\n    for (i = 0; i < size; i++) {\n      \
    \  result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result;\n\
    \    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int x =\
    \ a[i] - '0';\n        int y = b[i] - '0';\n        int z = x + y + carry;\n \
    \       carry = z / 10;\n        z = z % 10;\n        result[i] = '0' + z;\n \
    \   }\n    if (carry != 0) {\n        result[a.size()] = '1' + carry;\n    }\n\
    \    return result;", "    std::string result;\n    int carry = 0;\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        int x = a[i] - '0';\n        int y = b[i]\
    \ - '0';\n        int z = x + y + carry;\n        carry = z >> 2;\n        result\
    \ += (z % 10) + '0';\n    }\n    if (carry != 0)\n        result += carry + '0';\n\
    \    return result;", "    std::string result;\n    int n = a.size();\n    int\
    \ m = b.size();\n    int k = n;\n    int l = m;\n    int i = 0;\n    int j = 0;\n\
    \    while (i < n && j < m) {\n        if (a[i] != b[j]) {\n            result\
    \ += a[i++];\n        } else {\n            result += b[j++];\n        }\n   \
    \ }\n    while (i < n) {\n        result += a[i++];\n    }\n    while (j < m)\
    \ {\n        result += b[j++];\n    }\n    return result;", "    std::string result;\n\
    \    for(int i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n   \
    \ }\n    return result;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ a.size(); i++) {\n        ans += (std::bitset<8>(a[i]) ^ std::bitset<8>(b[i]))\
    \ ? \"1\" : \"0\";\n    }\n    return ans;", "    std::string ans = \"\";\n  \
    \  int n = a.size();\n    int m = b.size();\n    for(int i = 0; i < n; i++) {\n\
    \        ans += a[i] ^ b[i];\n    }\n    return ans;", "    std::string result;\n\
    \    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n \
    \   }\n    return result;", "    std::string result;\n    int n = a.size();\n\
    \    int m = b.size();\n    int m = std::max(m, n);\n    for (int i = 0; i < m;\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        ans += (std::to_string(a[i])\
    \ ^ std::to_string(b[i]));\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n\
    \    int j = 0;\n    while (i < lena && j < lenb) {\n        int k = a[i] - '0';\n\
    \        int l = b[j] - '0';\n        ans += (k ^ l);\n        i += 1;\n     \
    \   j += 1;\n    }\n    while (i < lena) {\n        int k = a[i] - '0';\n    \
    \    ans += k;\n        i += 1;\n    }\n    while (j < lenb) {\n        int l\
    \ = b[j] - '0';\n        ans += l;\n        j += 1;\n    }\n    return ans;",
  "    std::string result;\n    int size = a.size();\n    int size_of_a = a.size();\n\
    \    int size_of_b = b.size();\n    int size_of_result = size;\n    int i = 0;\n\
    \    int j = 0;\n    while (i < size_of_a && j < size_of_b) {\n        if (a[i]\
    \ != '1' && b[j] != '1') {\n            result += a[i];\n            i++;\n  \
    \      } else if (a[i] != '0' && b[j] != '0') {\n            result += b[j];\n\
    \            j++;\n        } else {\n            result += a[i];\n           \
    \ i++;\n            j++;\n        }\n    }\n    while (i < size_of_a) {\n    \
    \    result += a[i];\n        i++;\n    }\n    while (j < size_of_b) {\n     \
    \   result += b[j];\n        j++;\n    }\n    return result;", "    std::string\
    \ result;\n    int size = a.size();\n    int size_b = b.size();\n    int i = 0;\n\
    \    int j = 0;\n    while (i < size && j < size_b) {\n        if (a[i] != '1'\
    \ && b[j] != '1') {\n            result += a[i];\n            i++;\n        }\
    \ else if (a[i] != '0' && b[j] != '0') {\n            result += b[j];\n      \
    \      j++;\n        } else {\n            result += a[i];\n            i++;\n\
    \            j++;\n        }\n    }\n    while (i < size) {\n        result +=\
    \ a[i];\n        i++;\n    }\n    while (j < size_b) {\n        result += b[j];\n\
    \        j++;\n    }\n    return result;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        ans += (std::to_string(a[i]) ^ std::to_string(b[i]));\n\
    \    }\n    return ans;", "    std::string result;\n    int size = a.size();\n\
    \    int size2 = b.size();\n    int i = 0;\n    int j = 0;\n    while (i < size\
    \ && j < size2) {\n        if (a[i] != b[j]) {\n            result += a[i];\n\
    \            i++;\n        } else {\n            result += b[j];\n           \
    \ j++;\n        }\n    }\n    while (i < size) {\n        result += a[i];\n  \
    \      i++;\n    }\n    while (j < size2) {\n        result += b[j];\n       \
    \ j++;\n    }\n    return result;", "    std::string result;\n    int len1 = a.length();\n\
    \    int len2 = b.length();\n    int len3 = len1 + len2;\n    std::string temp;\n\
    \    temp.resize(len3);\n    for (int i = 0; i < len3; i++) {\n        temp[i]\
    \ = a[i] ^ b[i];\n    }\n    result = temp;\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    for(int i\
    \ = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < a.size();\
    \ i++) {\n        result += std::bitset<8>(a[i]) ^ std::bitset<8>(b[i]);\n   \
    \ }\n    return result;", "    std::string result;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        ans += (std::to_string(a[i])\
    \ ^ std::to_string(b[i]));\n    }\n    return ans;", "    std::string result =\
    \ \"\";\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n      \
    \  int x = a[i] - '0';\n        int y = b[i] - '0';\n        int z = x + y + carry;\n\
    \        carry = z / 10;\n        z = z % 10;\n        result += z + '0';\n  \
    \  }\n    if (carry != 0) {\n        result += carry + '0';\n    }\n    return\
    \ result;", "    std::string ans = \"\";\n    for (int i = 0; i < a.size(); i++)\
    \ {\n        ans += (std::to_string(std::bitset<8>(a[i]) ^ std::bitset<8>(b[i])));\n\
    \    }\n    return ans;", "    std::string result;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    int n = a.size();\n\
    \    int m = b.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j\
    \ < m) {\n        if (a[i] != '0' && a[i] != '1') break;\n        if (b[j] !=\
    \ '0' && b[j] != '1') break;\n        result += a[i++] - '0';\n        result\
    \ += b[j++] - '0';\n    }\n    while (i < n) {\n        result += a[i++] - '0';\n\
    \    }\n    while (j < m) {\n        result += b[j++] - '0';\n    }\n    return\
    \ result;", "    std::string res;\n    int lena = a.length();\n    int lenb =\
    \ b.length();\n    int maxlen = max(lena, lenb);\n    for (int i = 0; i < maxlen;\
    \ i++) {\n        if (a[i] != '1' && b[i] != '1') {\n            res += '0';\n\
    \        } else {\n            res += '1';\n        }\n    }\n    return res;",
  "    std::string result;\n    int carry = 0;\n    for (int i = 0; i < a.size();\
    \ i++) {\n        int x = a[i] - b[i] + carry;\n        carry = x >> 1;\n    \
    \    result.append(1, (x & 1) ? \"1\" : \"0\");\n    }\n    if (carry != 0)\n\
    \        result.append(1, (1 & carry) ? \"1\" : \"0\");\n    return result;",
  "    std::string ans = \"\";\n    int n = a.size();\n    int m = b.size();\n   \
    \ int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        int k = a[i]\
    \ - '0';\n        int l = b[j] - '0';\n        ans += (k ^ l);\n        i++;\n\
    \        j++;\n    }\n    while (i < n) {\n        int k = a[i] - '0';\n     \
    \   ans += k;\n        i++;\n    }\n    while (j < m) {\n        int l = b[j]\
    \ - '0';\n        ans += l;\n        j++;\n    }\n    return ans;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    int size =\
    \ a.size();\n    int size2 = b.size();\n    int i;\n    int j;\n    int k;\n \
    \   for (i = 0; i < size; i++) {\n        result.append(1, a[i]);\n    }\n   \
    \ for (j = 0; j < size2; j++) {\n        result.append(1, b[j]);\n    }\n    for\
    \ (i = 0; i < size; i++) {\n        result.append(1, a[i]);\n    }\n    for (j\
    \ = 0; j < size2; j++) {\n        result.append(1, b[j]);\n    }\n    for (i =\
    \ 0; i < size; i++) {\n        result.append(1, a[i]);\n    }\n    for (j = 0;\
    \ j < size2; j++) {\n        result.append(1, b[j]);\n    }\n    for (i = 0; i\
    \ < size; i++) {\n        result.append(1, a[i]);\n    }\n    for (j = 0; j <\
    \ size2; j++) {\n        result.append(1, b[j]);\n    }\n    for (i = 0; i < size;\
    \ i++) {\n        result.append(1, a[i]);\n    }\n    for (j = 0; j < size2; j++)\
    \ {\n        result.append(1, b[j]);\n    }\n    for (i = 0; i < size; i++) {\n\
    \        result.append(1, a[i]);\n    }\n    for (j = 0; j < size2; j++) {\n \
    \       result.append(1, b[j]);\n    }\n    for (i = 0; i < size; i++) {\n   \
    \     result.append(1, a[i]);\n    }\n    for (j = 0; j < size2; j++) {\n    \
    \    result.append(1, b[j]);\n    }\n    for (i = 0; i < size; i++) {\n      \
    \  result.append(1, a[i]);\n    }\n    for (j = 0; j < size2; j++) {\n       \
    \ result.append(1, b[j]);\n    }\n    for (i = 0; i < size; i++) {\n        result.append(1,\
    \ a[i]);\n    }\n    for (j = 0; j < size2; j++) {\n        result.append(1, b[j]);\n\
    \    }\n    for (i = 0; i < size; i++) {\n        result.append(1, a[i]);\n  \
    \  }\n    for (j = 0; j < size2; j++) {\n        result.append(1, b[j]);\n   \
    \ }\n    for (i = 0; i < size; i++) {\n        result.append(1, a[i]);\n    }\n\
    \    for (j = 0; j < size2; j++) {\n        result.append(1, b[j]);\n    }\n \
    \   for (i = 0; i < size; i++) {\n        result.append(1, a[i]);\n    }\n   \
    \ for (j = 0; j < size2; j++) {\n        result.append(1, b[j]);\n    }\n    for\
    \ (i = 0; i < size; i++) {\n        result.append(1, a[i]);\n    }\n    for (j\
    \ = 0; j < size2; j++) {\n        result.append(1, b[j]);\n    }\n    for (i =\
    \ 0; i < size; i++) {\n        result.append(1, a[i]);\n    }\n    for (j = 0;\
    \ j < size2; j++) {\n        result.append(1, b[j]);\n    }\n    for (i = 0; i\
    \ < size; i++) {\n        result.append(1, a[i]);\n    }\n    for (j = 0; j <\
    \ size2; j++) {\n        result.append(1, b[j]);\n    }\n    for (i = 0; i < size;\
    \ i++) {\n        result.append(1, a[i]);\n    }\n    for (j = 0; j < size2; j++)\
    \ {\n        result.append(1, b[j]);\n    }\n    for (i = 0; i < size; i++) {\n\
    \        result.append(1, a[i]);\n    }\n    for (j = 0; j < size2; j++) {\n \
    \       result.append(1, b[j]);\n    }\n    for (i = 0; i < size; i++) {\n   \
    \     result.append(1, a", "    std::string result;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n\
    \        int val = a[i] - b[i] + carry;\n        carry = val / 2;\n        val\
    \ = val % 2;\n        result += val;\n    }\n    if (carry != 0) {\n        result\
    \ += carry;\n    }\n    return result;", "    std::string result;\n    int size\
    \ = a.size();\n    int size_of_a = a.size() / 2;\n    int size_of_b = b.size()\
    \ / 2;\n    int size_of_result = a.size() / 2;\n    for (int i = 0; i < size_of_a;\
    \ i++) {\n        result[i] = a[i] ^ b[size_of_b + i];\n    }\n    for (int i\
    \ = size_of_a; i < size_of_a + size_of_b; i++) {\n        result[i] = a[i] ^ b[size_of_result\
    \ + i];\n    }\n    for (int i = size_of_a + size_of_b; i < size; i++) {\n   \
    \     result[i] = a[i] ^ b[size_of_result + i];\n    }\n    return result;", " \
    \   std::string result;\n    for(int i = 0; i < a.size(); i++) {\n        result\
    \ += a[i] ^ b[i];\n    }\n    return result;", "    std::string result;\n    int\
    \ n = a.size();\n    int m = b.size();\n    int k = n / m;\n    int remain = n\
    \ % m;\n    for (int i = 0; i < k; i++) {\n        result += (a[i] ^ b[i]);\n\
    \    }\n    for (int i = 0; i < remain; i++) {\n        result += (a[i] ^ b[n\
    \ - 1 - i]);\n    }\n    return result;", "    std::string result;\n    int carry\
    \ = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int val = a[i] - b[i]\
    \ + carry;\n        carry = val / 2;\n        val = val % 2;\n        result.push_back(val);\n\
    \    }\n    if (carry != 0) {\n        result.push_back(carry);\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < a.size(); i++) {\n\
    \        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int k = n >= m ?\
    \ n : m;\n    for (int i = 0; i < k; i++) {\n        result += a[i] ^ b[i];\n\
    \    }\n    return result;", "    std::string result;\n    int size = a.size();\n\
    \    int size_of_a = a.size();\n    int size_of_b = b.size();\n    int size_of_result\
    \ = size;\n    for (int i = 0; i < size; i++) {\n        if (size_of_a > size_of_b)\
    \ {\n            result += a[i];\n            size_of_a--;\n        } else {\n\
    \            result += b[i];\n            size_of_b--;\n        }\n    }\n   \
    \ return result;", "    std::string ans = \"\";\n    for(int i = 0; i < a.size();\
    \ i++) {\n        ans += (std::to_string(a[i]) ^ std::to_string(b[i]));\n    }\n\
    \    return ans;", "    std::string result;\n    int n = a.size();\n    int m\
    \ = b.size();\n    int k = n;\n    int i = 0;\n    int j = 0;\n    while (i <\
    \ n && j < m) {\n        if (a[i] != '1' && b[j] != '1') {\n            result\
    \ += a[i];\n            i++;\n        } else if (a[i] != '0' && b[j] != '0') {\n\
    \            result += b[j];\n            j++;\n        } else {\n           \
    \ result += a[i] ^ b[j];\n            i++;\n            j++;\n        }\n    }\n\
    \    while (i < n) {\n        result += a[i];\n        i++;\n    }\n    while\
    \ (j < m) {\n        result += b[j];\n        j++;\n    }\n    return result;",
  "    std::string result;\n    int n = a.size();\n    int m = b.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;",
  "    std::string result;\n    int size = a.size();\n    int size2 = b.size();\n\
    \    for (int i = 0; i < size; i++) {\n        result += (a[i] ^ b[i]);\n    }\n\
    \    return result;", "    std::string result;\n    int len1 = a.length();\n \
    \   int len2 = b.length();\n    int maxlen = max(len1, len2);\n    for (int i\
    \ = 0; i < maxlen; i++) {\n        char c = a[i] ^ b[i];\n        result.push_back(c);\n\
    \    }\n    return result;", "    std::string result;\n    for(int i = 0; i <\
    \ a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;",
  "    std::string result;\n    int size = a.size();\n    for (int i = 0; i < size;\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    for(int i\
    \ = 0; i < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return\
    \ result;", "    std::string ans = \"\";\n    int n = a.size();\n    int m = b.size();\n\
    \    for (int i = 0; i < n; i++) {\n        ans += a[i] ^ b[i];\n    }\n    return\
    \ ans;", "    std::string result;\n    for(int i = 0; i < a.size(); i++) {\n \
    \       result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    int n = a.size();\n\
    \    int m = b.size();\n    int m = m % n;\n    for (int i = 0; i < m; i++) {\n\
    \        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int x = a[i] - b[i] - carry;\n        carry = x >> 31;\n        result +=\
    \ std::to_string(x);\n    }\n    if (carry != 0) result += std::to_string(carry);\n\
    \    return result;", "    std::string ans = \"\";\n    int carry = 0;\n    for\
    \ (int i = 0; i < a.size(); i++) {\n        int x = a[i] - b[i] + carry;\n   \
    \     ans += (x % 2) + '0';\n        carry = x / 2;\n    }\n    if (carry != 0)\n\
    \        ans += '1';\n    return ans;", "    std::string ans = \"\";\n    int\
    \ n = a.size();\n    int m = b.size();\n    int i, j;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < m; j++) {\n            ans += (std::to_string(int(a[i])\
    \ ^ int(b[j])) + \"\");\n        }\n    }\n    return ans;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int x = a[i] - b[i] + carry;\n        carry = x >> 1;\n        result +=\
    \ (char) x;\n    }\n    if (carry != 0)\n        result += (char) carry;\n   \
    \ return result;", "    std::string result;\n    int carry = 0;\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        int x = a[i] - '0';\n        int y = b[i]\
    \ - '0';\n        int z = x + y + carry;\n        carry = z >> 2;\n        result\
    \ += ((z & 3) == 3 ? '1' : '0');\n    }\n    if (carry != 0) {\n        result\
    \ += '1';\n    }\n    return result;", "    std::string result;\n    int size\
    \ = a.size();\n    int size1 = b.size();\n    int size2 = size - size1;\n    int\
    \ size3 = size1 + size2;\n    std::string temp;\n    temp.resize(size3);\n   \
    \ for (int i = 0; i < size1; i++) {\n        temp[i] = a[i];\n    }\n    for (int\
    \ i = 0; i < size2; i++) {\n        temp[i + size1] = b[i];\n    }\n    for (int\
    \ i = 0; i < size3; i++) {\n        result[i] = temp[i];\n    }\n    return result;",
  "    std::string ans = \"\";\n    int n = a.size();\n    int m = b.size();\n   \
    \ for (int i = 0; i < n; i++) {\n        ans += (std::bitset<8>(a[i]) ^ std::bitset<8>(b[i])).to_string();\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (int i = 0; i\
    \ < a.size(); i++) {\n        ans += a[i] ^ b[i];\n    }\n    return ans;", " \
    \   std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        result\
    \ += a[i] ^ b[i];\n    }\n    return result;", "    std::string result;\n    int\
    \ carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int x = a[i] -\
    \ b[i] + carry;\n        carry = x >> 1;\n        result += std::to_string(x);\n\
    \    }\n    if (carry != 0)\n        result += std::to_string(carry);\n    return\
    \ result;", "    std::string result;\n    int n = a.size();\n    int m = b.size();\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n    \
    \        if(a[i] != b[j]) {\n                result += a[i];\n            }\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return\
    \ result;", "    std::string result;\n    int n = a.size();\n    int m = b.size();\n\
    \    int k = n / m;\n    int remainder = n % m;\n    for (int i = 0; i < k; i++)\
    \ {\n        result += (a[i] ^ b[i]);\n    }\n    if (remainder > 0) {\n     \
    \   result += a[n - remainder];\n    }\n    return result;", "    std::string\
    \ res;\n    int size = a.size();\n    int i = 0;\n    while (i < size) {\n   \
    \     int j = i + 1;\n        while (j < size) {\n            int k = j + 1;\n\
    \            while (k < size) {\n                char c = a[i];\n            \
    \    a[i] = a[j];\n                a[j] = c;\n                c = b[k];\n    \
    \            b[k] = b[j];\n                b[j] = c;\n                k = k +\
    \ 1;\n            }\n            j = j + 1;\n        }\n        i = i + 1;\n \
    \   }\n    return res;", "    std::string result;\n    int carry = 0;\n    for\
    \ (int i = 0; i < a.size(); i++) {\n        char c = a[i] - '0';\n        char\
    \ d = b[i] - '0';\n        char e = c + d;\n        char f = e - carry + 10;\n\
    \        carry = f / 10;\n        result += to_string(f%10);\n    }\n    if (carry\
    \ != 0) {\n        result += to_string(carry);\n    }\n    return result;", " \
    \   std::string result;\n    int n = a.size();\n    int m = b.size();\n    int\
    \ k = n / m;\n    int remainder = n % m;\n    for (int i = 0; i < k; i++) {\n\
    \        result += (a[i] ^ b[i]);\n    }\n    if (remainder > 0) {\n        result\
    \ += a[n - remainder];\n    }\n    return result;", "    std::string result;\n\
    \    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int x =\
    \ a[i] - b[i] - carry;\n        carry = x >> 31;\n        result += ((x & 7) ==\
    \ 0) ? \"1\" : \"0\";\n    }\n    if (carry != 0) result += ((carry & 7) == 0)\
    \ ? \"1\" : \"0\";\n    return result;", "    std::string result;\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    int carry = 0;\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        char c = a[i];\n        char d = b[i];\n\
    \        result += (c^d)+(carry?'0':'');\n        carry = (c^d)>>1;\n    }\n \
    \   return result;", "    std::string result;\n    int size = a.size();\n    int\
    \ size_of_b = b.size();\n    for (int i = 0; i < size; i++) {\n        result\
    \ += (a[i] ^ b[i % size_of_b]);\n    }\n    return result;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int max_len = max(m,\
    \ n);\n    for (int i = 0; i < max_len; i++) {\n        if (i < n) {\n       \
    \     result += a[i];\n        }\n        if (i < m) {\n            result +=\
    \ b[i];\n        }\n    }\n    return result;", "    std::string result;\n   \
    \ int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int x = a[i]\
    \ - b[i] + carry;\n        carry = x >> 1;\n        result += to_string(x);\n\
    \    }\n    if (carry != 0) {\n        result += to_string(carry);\n    }\n  \
    \  return result;", "    std::string result;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (auto &c : a) {\n        result += std::bitset<8>(c).to_ulong()\
    \ ^ std::bitset<8>(b).to_ulong();\n    }\n    return result;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int k = n / m;\n\
    \    int remainder = n % m;\n    for (int i = 0; i < k; i++) {\n        result\
    \ += (a[i] ^ b[i]);\n    }\n    if (remainder > 0) {\n        result += a[n -\
    \ remainder];\n    }\n    return result;", "    std::string result;\n    int n\
    \ = a.size();\n    int m = b.size();\n    for(int i = 0; i < n; i++) {\n     \
    \   for(int j = 0; j < m; j++) {\n            if(a[i] != b[j]) {\n           \
    \     result += a[i];\n            }\n        }\n    }\n    return result;", " \
    \   std::string result;\n    int carry = 0;\n    for (int i = 0; i < a.size();\
    \ i++) {\n        int val = a[i] - b[i] + carry;\n        carry = val / 2;\n \
    \       val = val % 2;\n        result.append(1, val);\n    }\n    if (carry !=\
    \ 0)\n        result.append(1, carry);\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string result;\n    int carry\
    \ = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int val = a[i] - b[i]\
    \ + carry;\n        carry = val / 2;\n        val = val % 2;\n        result.append(1,\
    \ val);\n    }\n    if (carry != 0) {\n        result.append(1, carry);\n    }\n\
    \    return result;", "    std::string result;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ ans = \"\";\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n\
    \        int x = a[i] - '0';\n        int y = b[i] - '0';\n        int z = x +\
    \ y + carry;\n        ans += (z & 1) + '0';\n        carry = (z >> 1);\n    }\n\
    \    for (int i = 0; i < a.size(); i++) {\n        int x = a[i] - '0';\n     \
    \   int y = b[i] - '0';\n        int z = x + y + carry;\n        ans += (z & 1)\
    \ + '0';\n        carry = (z >> 1);\n    }\n    return ans;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int k = n / m;\n\
    \    int l = n % m;\n    for (int i = 0; i < k; i++) {\n        for (int j = 0;\
    \ j < l; j++) {\n            result += a[i * m + j] ^ b[i * m + j];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    int carry = 0;\n  \
    \  for (int i = 0; i < a.size(); i++) {\n        int x = a[i] - b[i] + carry;\n\
    \        carry = x >> 1;\n        result += to_string(x);\n    }\n    if (carry\
    \ != 0)\n        result += to_string(carry);\n    return result;", "    std::string\
    \ result;\n    int len1 = a.length();\n    int len2 = b.length();\n    int carry\
    \ = 0;\n    for (int i = 0; i < len1; i++) {\n        int sum = (int)a[i] ^ (int)b[i]\
    \ ^ carry;\n        carry = sum / 2;\n        sum += sum % 2;\n        result.append(1,\
    \ sum % 2);\n    }\n    if (carry != 0)\n        result.append(1, carry);\n  \
    \  return result;", "    std::string result = \"\";\n    int carry = 0;\n    for\
    \ (int i = 0; i < a.size(); i++) {\n        int x = a[i] - b[i] + carry;\n   \
    \     carry = x >> 1;\n        result += std::to_string(x);\n    }\n    if (carry\
    \ != 0) {\n        result += std::to_string(carry);\n    }\n    return result;",
  "    std::string ans = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        ans\
    \ += (std::to_string(int(a[i])) ^ std::to_string(int(b[i])));\n    }\n    return\
    \ ans;", "    std::string result;\n    int carry = 0;\n    for (int i = 0; i <\
    \ a.size(); i++) {\n        int x = a[i] - b[i] - carry;\n        carry = x >>\
    \ 1;\n        result += (char) x;\n    }\n    if (carry != 0)\n        result\
    \ += (char) carry;\n    return result;", "    std::string result;\n    int carry\
    \ = 0;\n    for (int i = 0; i < a.length(); i++) {\n        int x = a[i] - b[i]\
    \ - carry;\n        carry = x >> 1;\n        result += to_string(x);\n    }\n\
    \    if (carry != 0) {\n        result += to_string(carry);\n    }\n    return\
    \ result;", "    std::string result;\n    int n = a.size();\n    int m = b.size();\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n    \
    \        if(a[i] != b[j]) {\n                result += a[i];\n            }\n\
    \        }\n    }\n    return result;", "    std::string ans = \"\";\n    int\
    \ n = a.size();\n    int m = b.size();\n    for (int i = 0; i < n; i++) {\n  \
    \      ans += a[i] ^ b[i];\n    }\n    return ans;", "    std::string result;\n\
    \    int size = a.size();\n    for (int i = 0; i < size; i++) {\n        result\
    \ += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    int size = a.size();\n    for (int i = 0; i < size; i++) {\n        result\
    \ += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result;\n  \
    \  for(int i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n\
    \    return result;", "    std::string result;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int k = n / m;\n\
    \    int remainder = n % m;\n    for (int i = 0; i < k; i++) {\n        result\
    \ += a[i] ^ b[i];\n    }\n    if (remainder > 0) {\n        result += a[n - 1]^b[n\
    \ - 1];\n    }\n    return result;", "    std::string result;\n    int size =\
    \ a.size();\n    int size2 = b.size();\n    int size3 = size + size2;\n    std::string\
    \ temp;\n    std::string temp2;\n    for(int i = 0; i < size3; i++) {\n      \
    \  temp.push_back(a[i]);\n        temp2.push_back(b[i]);\n    }\n    for(int i\
    \ = 0; i < size3; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n\
    \    }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(a[i]);\n \
    \       temp2.push_back(b[i]);\n    }\n    for(int i = 0; i < size; i++) {\n \
    \       temp.push_back(0);\n        temp2.push_back(0);\n    }\n    for(int i\
    \ = 0; i < size; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n\
    \    }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n    \
    \    temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n       \
    \ temp.push_back(0);\n        temp2.push_back(0);\n    }\n    for(int i = 0; i\
    \ < size; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n  \
    \  }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n      \
    \  temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n\
    \        temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n   \
    \     temp.push_back(0);\n        temp2.push_back(0);\n    }\n    for(int i =\
    \ 0; i < size; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n\
    \    }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n    \
    \    temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n       \
    \ temp.push_back(0);\n        temp2.push_back(0);\n    }\n    for(int i = 0; i\
    \ < size; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n  \
    \  }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n      \
    \  temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n\
    \        temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n   \
    \     temp.push_back(0);\n        temp2.push_back(0);\n    }\n    for(int i =\
    \ 0; i < size; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n\
    \    }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n    \
    \    temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n       \
    \ temp.push_back(0);\n        temp2.push_back(0);\n    }\n    for(int i = 0; i\
    \ < size; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n  \
    \  }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n      \
    \  temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n        temp.push_back(0);\n\
    \        temp2.push_back(0);\n    }\n    for(int i = 0; i < size; i++) {\n   \
    \     temp.push_back(0);\n        temp2.push_back(0);\n    }\n    for(int i =\
    \ 0; i < size; i++) {\n        temp.push_back(0);\n        temp2.push_back(0);\n\
    \    }\n    for(int i = 0; i < size", "    std::string result;\n    int carry\
    \ = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int x = a[i] - b[i]\
    \ + carry;\n        carry = x >> 31;\n        result += std::to_string(x);\n \
    \   }\n    if (carry != 0)\n        result += std::to_string(carry);\n    return\
    \ result;", "    std::string result;\n    int size = a.size();\n    int size_of_a\
    \ = a.size();\n    int size_of_b = b.size();\n    int size_of_result = size;\n\
    \    for (int i = 0; i < size; i++) {\n        if (size_of_a > size_of_b) {\n\
    \            result += a[i];\n            size_of_result -= 1;\n            size_of_a\
    \ -= 1;\n        } else if (size_of_b > size_of_a) {\n            result += b[i];\n\
    \            size_of_result -= 1;\n            size_of_b -= 1;\n        } else\
    \ {\n            result += a[i] ^ b[i];\n            size_of_result -= 1;\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    int size =\
    \ a.size();\n    int size_of_b = b.size();\n    int size_of_a = a.size();\n  \
    \  int size_of_result = size_of_a ^ size_of_b;\n    for(int i = 0; i < size_of_result;\
    \ i++) {\n        char c = a[i] ^ b[i];\n        result += c;\n    }\n    return\
    \ result;", "    std::string result;\n    int size = a.size();\n    int size_of_b\
    \ = b.size();\n    int size_of_a = a.size();\n    int i = 0;\n    int j = 0;\n\
    \    while (i < size_of_a) {\n        result[j++] = a[i++];\n    }\n    while\
    \ (j < size_of_b) {\n        result[j++] = b[j++];\n    }\n    return result;",
  "    std::string result;\n    int carry = 0;\n    for (int i = 0; i < a.size();\
    \ i++) {\n        int val = a[i] - b[i] + carry;\n        carry = val / 2;\n \
    \       val = val % 2;\n        result.append(1, val);\n    }\n    if (carry !=\
    \ 0) {\n        result.append(1, carry);\n    }\n    return result;", "    std::string\
    \ result;\n    int size = a.size();\n    int index = 0;\n    while (index < size)\
    \ {\n        result += a[index] ^ b[index];\n        index++;\n    }\n    return\
    \ result;", "    std::string result;\n    for(int i = 0; i < a.size(); i++) {\n\
    \        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string ans = \"\";\n    int n\
    \ = a.size();\n    int m = b.size();\n    for (int i = 0; i < n; i++) {\n    \
    \    ans += (std::to_string(std::bitset<8>(a[i]) ^ std::bitset<8>(b[i])));\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    int size = a.size();\n\
    \    int size2 = b.size();\n    int i;\n    int j;\n    for (i = 0; i < size;\
    \ i++) {\n        for (j = 0; j < size2; j++) {\n            ans += (std::tolower(a[i])\
    \ ^ std::tolower(b[j]));\n        }\n    }\n    return ans;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int m = m % n;\n\
    \    for (int i = 0; i < m; i++) {\n        result += a[n-i-1] ^ b[i];\n    }\n\
    \    return result;", "    std::string result;\n    int carry = 0;\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        int val = a[i] - b[i] + carry;\n      \
    \  carry = val / 2;\n        val = val % 2;\n        result.append(1, val);\n\
    \    }\n    if (carry != 0) {\n        result.append(1, carry);\n    }\n    return\
    \ result;", "    std::string ans = \"\";\n    int size = a.size();\n    int size2\
    \ = b.size();\n    int i = 0;\n    int j = 0;\n    while (i < size && j < size2)\
    \ {\n        ans += (std::to_string(int(b[j]) ^ int(a[i])));\n        i++;\n \
    \       j++;\n    }\n    return ans;", "    std::string result;\n    int carry\
    \ = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int x = a[i] - b[i]\
    \ + carry;\n        carry = x >> 1;\n        result += (char) x;\n    }\n    if\
    \ (carry != 0)\n        result += (char) carry;\n    return result;", "    std::string\
    \ result;\n    for(int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string ans = \"\";\n    int n\
    \ = a.size();\n    int m = b.size();\n    for (int i = 0; i < n; i++) {\n    \
    \    ans += a[i] ^ b[i];\n    }\n    return ans;", "    std::string result;\n\
    \    int size = a.size();\n    int size_of_a = a.size();\n    int size_of_b =\
    \ b.size();\n    int size_of_result = size;\n    int i = 0;\n    int j = 0;\n\
    \    while (i < size_of_a && j < size_of_b) {\n        if (a[i] != b[j]) {\n \
    \           result += a[i];\n            i++;\n            j++;\n        } else\
    \ {\n            i++;\n            j++;\n        }\n    }\n    while (i < size_of_a)\
    \ {\n        result += a[i];\n        i++;\n    }\n    while (j < size_of_b) {\n\
    \        result += b[j];\n        j++;\n    }\n    return result;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int k = n / m;\n\
    \    int remain = n % m;\n    for (int i = 0; i < k; i++) {\n        result +=\
    \ (a[i] ^ b[i]);\n    }\n    for (int i = 0; i < remain; i++) {\n        result\
    \ += (a[i] ^ b[n - 1 - i]);\n    }\n    return result;", "    std::string result;\n\
    \    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int val\
    \ = a[i] - b[i] + carry;\n        carry = val >> 1;\n        result.append(1,\
    \ (val & 1) ? '1' : '0');\n    }\n    if (carry != 0) result.append(1, carry);\n\
    \    return result;", "    std::string result;\n    int size = a.size();\n   \
    \ for (int i = 0; i < size; i++) {\n        result += (a[i] ^ b[i]);\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < a.size();\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result;\n    int n = a.size();\n    int m = b.size();\n    int k = n / m;\n\
    \    int remainder = n % m;\n    for (int i = 0; i < k; i++) {\n        result\
    \ += a[i] ^ b[i];\n    }\n    if (remainder > 0) {\n        result += a[n - remainder]\
    \ ^ b[n - remainder];\n    }\n    return result;", "    std::string result;\n\
    \    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        char c\
    \ = a[i] - '0';\n        char d = b[i] - '0';\n        int x = c ^ d;\n      \
    \  carry = x >> 1;\n        result += to_string(carry);\n    }\n    if (carry\
    \ != 0) {\n        result += to_string(carry);\n    }\n    return result;", " \
    \   std::string result;\n    for(int i = 0; i < a.size(); i++) {\n        result\
    \ += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result;\n  \
    \  int n = a.size();\n    int m = b.size();\n    int max_len = std::max(m, n);\n\
    \    for (int i = 0; i < max_len; i++) {\n        char c = a[i];\n        char\
    \ d = b[i];\n        result += std::to_string((c ^ d) + 1);\n    }\n    return\
    \ result;", "    std::string result;\n    int len1 = a.length();\n    int len2\
    \ = b.length();\n    int len3 = len1 + len2;\n    char temp[len3];\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len1 && j < len2) {\n \
    \       temp[k] = a[i];\n        i++;\n        temp[k] = b[j];\n        j++;\n\
    \        k++;\n    }\n    while (i < len1) {\n        temp[k] = a[i];\n      \
    \  i++;\n        k++;\n    }\n    while (j < len2) {\n        temp[k] = b[j];\n\
    \        j++;\n        k++;\n    }\n    for (int l = 0; l < len3; l++) {\n   \
    \     result[k] = temp[l];\n        k++;\n    }\n    return result;", "    std::string\
    \ result;\n    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    int val = a[i] - b[i] + carry;\n        carry = val >> 1;\n        result\
    \ += std::to_string(val);\n    }\n    if (carry != 0) {\n        result += std::to_string(carry);\n\
    \    }\n    return result;", "    std::string result;\n    int size = a.size();\n\
    \    int size_of_a = a.length();\n    int size_of_b = b.length();\n    int size_of_result\
    \ = size_of_a + size_of_b;\n    std::string temp;\n    for (int i = 0; i < size_of_result;\
    \ i++) {\n        temp = temp + std::to_string(a[i] ^ b[i]);\n    }\n    result\
    \ = temp;\n    return result;", "    std::string result;\n    for(int i = 0; i\
    \ < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;",
  "    std::string result;\n    for(int i = 0; i < a.size(); i++) {\n        result\
    \ += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n  \
    \  }\n    return result;", "    std::string result;\n    int n = a.size();\n \
    \   int m = b.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = 0;\
    \ j < m; j++) {\n            if(a[i] != b[j]) {\n                result += a[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    int carry = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int val\
    \ = a[i] - b[i] + carry;\n        carry = val / 2;\n        val = val % 2;\n \
    \       result.append(1, val);\n    }\n    if (carry != 0)\n        result.append(1,\
    \ carry);\n    return result;", "    std::string result;\n    for(int i = 0; i\
    \ < a.size(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;",
  "    std::string result = \"\";\n    for (auto i = 0; i < a.size(); i++) {\n   \
    \     result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        ans += (std::to_string(a[i])\
    \ ^ std::to_string(b[i]));\n    }\n    return ans;", "    std::string result =\
    \ \"\";\n    for(int i = 0; i < a.size(); i++) {\n        result += std::bitset<8>(a[i])\
    \ ^ std::bitset<8>(b[i]);\n    }\n    return result;", "    std::string result;\n\
    \    int size = a.size();\n    int size_of_b = b.size();\n    int size_of_a =\
    \ a.size();\n    for (int i = 0; i < size; i++) {\n        result += a[i] ^ b[i\
    \ % size_of_b];\n    }\n    return result;", "    std::string result;\n    int\
    \ size = a.size();\n    int size2 = b.size();\n    int i;\n    for (i = 0; i <\
    \ size; i++) {\n        result.append(1, a[i]);\n    }\n    for (i = 0; i < size2;\
    \ i++) {\n        result.append(1, b[i]);\n    }\n    return result;", "    std::string\
    \ res;\n    int n = a.size();\n    int m = b.size();\n    int k = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n         \
    \   if (a[i] != '0' && b[j] != '0') {\n                res += a[i] ^ b[j];\n \
    \               k++;\n            }\n        }\n    }\n    return res;", "   \
    \ std::string result;\n    int size = a.size();\n    int size2 = b.size();\n \
    \   for(int i = 0; i < size; i++) {\n        result += a[i] ^ b[i];\n    }\n \
    \   return result;", "    std::string result;\n    int n = a.size();\n    int\
    \ m = b.size();\n    int max_size = std::max(m, n);\n    for (int i = 0; i < max_size;\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        result += a[i]\
    \ ^ b[i];\n    }\n    return result;", "    std::string result = \"\";\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        result += std::to_string(a[i] ^ b[i]);\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
