language: cpp
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    return number\
    \ - decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtj723gu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdtj723gu.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdtj723gu.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    integer_part = floorf(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part = floor(number);\n    float decimal_part =\
    \ number - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = number - floor(number);\n    decimal_part = floor(number);\n\
    \    remainder = number - floor(number);\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = (int) number;\n    float decimal_part = number\
    \ - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    integer_part = floor(number);\n    decimal_part = number\
    \ - integer_part;\n    remainder = number - integer_part;\n    quotient = integer_part\
    \ + remainder;\n    return quotient;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpt0u6ll04: /tmp/tmpt0u6ll04.cpp:20: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float remainder;\n    int integer_part;\n    float decimal_part;\n\
    \    float temp;\n    temp = number;\n    integer_part = floor(temp);\n    temp\
    \ = temp - integer_part;\n    decimal_part = temp;\n    remainder = temp - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086359
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - integer_part;\n\
    \    float decimal_part_remainder;\n    float decimal_part_remainder_magnitude;\n\
    \    float decimal_part_remainder_magnitude2;\n    float decimal_part_remainder_magnitude3;\n\
    \    float decimal_part_remainder_magnitude4;\n    float decimal_part_remainder_magnitude5;\n\
    \    float decimal_part_remainder_magnitude6;\n    float decimal_part_remainder_magnitude7;\n\
    \    float decimal_part_remainder_magnitude8;\n    float decimal_part_remainder_magnitude9;\n\
    \    float decimal_part_remainder_magnitude10;\n    float decimal_part_remainder_magnitude11;\n\
    \    float decimal_part_remainder_magnitude12;\n    float decimal_part_remainder_magnitude13;\n\
    \    float decimal_part_remainder_magnitude14;\n    float decimal_part_remainder_magnitude15;\n\
    \    float decimal_part_remainder_magnitude16;\n    float decimal_part_remainder_magnitude17;\n\
    \    float decimal_part_remainder_magnitude18;\n    float decimal_part_remainder_magnitude19;\n\
    \    float decimal_part_remainder_magnitude20;\n    float decimal_part_remainder_magnitude21;\n\
    \    float decimal_part_remainder_magnitude22;\n    float decimal_part_remainder_magnitude23;\n\
    \    float decimal_part_remainder_magnitude24;\n    float decimal_part_remainder_magnitude25;\n\
    \    float decimal_part_remainder_magnitude26;\n    float decimal_part_remainder_magnitude27;\n\
    \    float decimal_part_remainder_magnitude28;\n    float decimal_part_remainder_magnitude29;\n\
    \    float decimal_part_remainder_magnitude30;\n    float decimal_part_remainder_magnitude31;\n\
    \    float decimal_part_remainder_magnitude32;\n    float decimal_part_remainder_magnitude33;\n\
    \    float decimal_part_remainder_magnitude34;\n    float decimal_part_remainder_magnitude35;\n\
    \    float decimal_part_remainder_magnitude36;\n    float decimal_part_remainder_magnitude37;\n\
    \    float decimal_part_remainder_magnitude38;\n    float decimal_part_remainder_magnitude39;\n\
    \    float decimal_part_remainder_magnitude40;\n    float decimal_part_remainder_magnitude41;\n\
    \    float decimal_part_remainder_magnitude42;\n    float decimal_part_remainder_magnitude43;\n\
    \    float decimal_part_remainder_magnitude44;\n    float decimal_part_remainder_magnitude45;\n\
    \    float decimal_part_remainder_magnitude46;\n    float decimal_part_remainder_magnitude47;\n\
    \    float decimal_part_remainder_magnitude48;\n    float decimal_part_remainder_magnitude49;\n\
    \    float decimal_part_remainder_magnitude50;\n    float decimal_part_remainder_magnitude\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgs8w6lza.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpgs8w6lza.cpp:62:1: error: expected initializer before \u2018}\u2019\
    \ token\n   62 | }\n      | ^\n/tmp/tmpgs8w6lza.cpp:62:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = floor(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part = number - floor(number);\n\
    \    decimal_part = fmod(number, 1.0f);\n    integer_part = floor(number);\n \
    \   return decimal_part + integer_part;\n}\nint main() {\n    auto candidate =\
    \ truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpvc3tafvh: /tmp/tmpvc3tafvh.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086359
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimal = number % 1;\n    float integer = number - decimal;\n\
    \    return integer;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxdtzso6t.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpxdtzso6t.cpp:8:28: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n    8 |     float decimal\
    \ = number % 1;\n      |                     ~~~~~~ ^ ~\n      |             \
    \        |        |\n      |                     float    int\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float remainder_temp;\n    float temp2;\n    float temp3;\n\
    \    float temp4;\n    float temp5;\n    float temp6;\n    float temp7;\n    float\
    \ temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n    float temp12;\n\
    \    float temp13;\n    float temp14;\n    float temp15;\n    float temp16;\n\
    \    float temp17;\n    float temp18;\n    float temp19;\n    float temp20;\n\
    \    float temp21;\n    float temp22;\n    float temp23;\n    float temp24;\n\
    \    float temp25;\n    float temp26;\n    float temp27;\n    float temp28;\n\
    \    float temp29;\n    float temp30;\n    float temp31;\n    float temp32;\n\
    \    float temp33;\n    float temp34;\n    float temp35;\n    float temp36;\n\
    \    float temp37;\n    float temp38;\n    float temp39;\n    float temp40;\n\
    \    float temp41;\n    float temp42;\n    float temp43;\n    float temp44;\n\
    \    float temp45;\n    float temp46;\n    float temp47;\n    float temp48;\n\
    \    float temp49;\n    float temp50;\n    float temp51;\n    float temp52;\n\
    \    float temp53;\n    float temp54;\n    float temp55;\n    float temp56;\n\
    \    float temp57;\n    float temp58;\n    float temp59;\n    float temp60;\n\
    \    float temp61;\n    float temp62;\n    float temp63;\n    float temp64;\n\
    \    float temp65;\n    float temp66;\n    float temp67;\n    float temp68;\n\
    \    float temp69;\n    float temp70;\n    float temp71;\n    float temp72;\n\
    \    float temp73;\n    float temp74;\n    float temp75;\n    float temp76;\n\
    \    float temp77;\n    float temp78;\n    float temp79;\n    float temp80;\n\
    \    float temp81;\n    float temp82;\n    float temp83;\n    float temp84;\n\
    \    float temp\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hhtiiyw.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp9hhtiiyw.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmp9hhtiiyw.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = number;\n    decimal_part = 0.0;\n    remainder = number;\n\
    \    while (remainder > 0.0) {\n        remainder = remainder - 1.0;\n       \
    \ decimal_part = decimal_part + 1.0;\n    }\n    return integer_part + decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpj53tgdog: /tmp/tmpj53tgdog.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = number;\n    while (decimal_part >= 1) {\n        decimal_part /= 10;\n  \
    \      remainder *= 10;\n    }\n    return remainder;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpxgkwq0vz: /tmp/tmpxgkwq0vz.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = number;\n    do {\n        remainder = remainder / 10;\n        int_part =\
    \ int_part * 10 + remainder;\n        decimal_part = decimal_part * 10 + remainder\
    \ - int_part * 10;\n    } while (int_part < decimal_part);\n    return decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpku_32uwg: /tmp/tmpku_32uwg.cpp:23: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = floor(number);\n    decimal_part = number - int_part;\n    remainder\
    \ = number - int_part;\n    return remainder;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floor(number);\n\
    \    integer_part = floor(number);\n    decimal_part = decimal_part * pow(10,\
    \ (floor(log10(number)) + 1));\n    return decimal_part;\n}\nint main() {\n  \
    \  auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpdqiomjgj: /tmp/tmpdqiomjgj.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = number;\n    decimal_part = 0.0;\n    remainder = number;\n\
    \    do {\n        integer_part = integer_part / 10.0;\n        remainder = remainder\
    \ - integer_part * 10.0;\n        decimal_part = decimal_part + remainder;\n \
    \   } while (remainder > 0.0);\n    return decimal_part;\n}\nint main() {\n  \
    \  auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmp999dkhvd: /tmp/tmp999dkhvd.cpp:23: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    return number\
    \ - decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtj723gu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdtj723gu.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdtj723gu.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.0;\n    float\
    \ remainder = 0.0;\n    float quotient = 0.0;\n    float quotient_remainder =\
    \ 0.0;\n    float quotient_quotient = 0.0;\n    float quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpms3lt_xi.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpms3lt_xi.cpp:20:11: error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   20 |     float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:21:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   21 |     float quotient_quotient_quotient_quotient_quotient = 0.0;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:22:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   22 |     float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:23:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   23 |     float quotient_quotient_quotient_quotient_quotient = 0.0;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:24:11:\
    \ error: red"
  stdout: ''
  timestamp: 1660086359
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float integer_part_temp;\n    float decimal_part_temp;\n\
    \    float remainder_temp;\n    float quotient_temp;\n    float integer_part_temp2;\n\
    \    float decimal_part_temp2;\n    float remainder_temp2;\n    float quotient_temp2;\n\
    \    float integer_part_temp3;\n    float decimal_part_temp3;\n    float remainder_temp3;\n\
    \    float quotient_temp3;\n    float integer_part_temp4;\n    float decimal_part_temp4;\n\
    \    float remainder_temp4;\n    float quotient_temp4;\n    float integer_part_temp5;\n\
    \    float decimal_part_temp5;\n    float remainder_temp5;\n    float quotient_temp5;\n\
    \    float integer_part_temp6;\n    float decimal_part_temp6;\n    float remainder_temp6;\n\
    \    float quotient_temp6;\n    float integer_part_temp7;\n    float decimal_part_temp7;\n\
    \    float remainder_temp7;\n    float quotient_temp7;\n    float integer_part_temp8;\n\
    \    float decimal_part_temp8;\n    float remainder_temp8;\n    float quotient_temp8;\n\
    \    float integer_part_temp9;\n    float decimal_part_temp9;\n    float remainder_temp9;\n\
    \    float quotient_temp9;\n    float integer_part_temp10;\n    float decimal_part_temp10;\n\
    \    float remainder_temp10;\n    float quotient_temp10;\n    float integer_part_temp11;\n\
    \    float decimal_part_temp11;\n    float remainder_temp11;\n    float quotient_temp11;\n\
    \    float integer_part_temp12;\n    float decimal_part_temp12;\n    float remainder_temp12;\n\
    \    float quotient_temp12;\n    float integer_part_temp13;\n    float decimal_part_temp13;\n\
    \    float remainder_temp13;\n    float quotient_temp13;\n    float integer_part_temp14;\n\
    \    float decimal_part_temp14;\n    float remainder_temp14;\n    float quotient_temp14;\n\
    \    float integer_part_temp15;\n    float decimal_part_temp15;\n    float remainder_temp15;\n\
    \    float quotient_temp15;\n    float integer_part_temp16;\n    float decimal_part_temp16;\n\
    \    float remainder_temp16;\n    float quotient_temp16;\n    float integer_part_temp17;\n\
    \    float decimal_part_temp17;\n    float remainder_temp17;\n    float quotient_temp17;\n\
    \    float integer_part_temp18;\n    float decimal_part_\n}\nint main() {\n  \
    \  auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfoarp9sz.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpfoarp9sz.cpp:82:1: error: expected initializer before \u2018}\u2019\
    \ token\n   82 | }\n      | ^\n/tmp/tmpfoarp9sz.cpp:82:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.0;\n    float\
    \ remainder = 0.0;\n    float quotient = 0.0;\n    float quotient_remainder =\
    \ 0.0;\n    float quotient_quotient = 0.0;\n    float quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient = 0.0;\n    float quotient_quotient_remainder_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_remainder_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient = 0.0;\n\
    \    float quotient_quotient_quotient_remainder_quotient_quotient_quotient = 0.0;\n\
    \    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_quotient_\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf93lvr7k.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpf93lvr7k.cpp:22:11: error: redeclaration of \u2018float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient\u2019\
    \n   22 |     float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf93lvr7k.cpp:21:11: note: \u2018float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient\u2019\
    \ previously declared here\n   21 |     float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf93lvr7k.cpp:24:11: error: redeclaration of \u2018float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient\u2019\
    \n   24 |     float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf93lvr7k.cpp:23:11: note: \u2018float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient\u2019\
    \ previously declared here\n   23 |     float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf93lvr7k.cpp:26:11: error: redeclaration of \u2018float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient\u2019\
    \n   26 |     float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf93lvr7k.cpp:25:11: note: \u2018float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_quotient_quotient\u2019\
    \ previously declared here\n   25 |     float quotient_quotient_quotient_remainder_quotient_quotient_quotient_quotient_q"
  stdout: ''
  timestamp: 1660086361
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = (int) number;\n    float decimal_part = number\
    \ - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    int decimal_places = 1;\n    int decimal_digits;\n    temp\
    \ = number;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    remainder = temp - integer_part - decimal_part;\n    temp = integer_part\
    \ + remainder;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmphaloqby9: /tmp/tmphaloqby9.cpp:89: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    int_part = number;\n\
    \    decimal_part = number - int_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2yeckqg: /tmp/tmpn2yeckqg.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpz31vag_k: /tmp/tmpz31vag_k.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number-integer_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number * 10 - integer_part * 10;\n    return remainder / decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpvh6ml605: /tmp/tmpvh6ml605.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number * 10 - integer_part * 10;\n    return remainder / decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpvh6ml605: /tmp/tmpvh6ml605.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float quotient_part;\n    float remainder_part;\n  \
    \  float quotient_part_1;\n    float quotient_part_2;\n    float quotient_part_3;\n\
    \    float quotient_part_4;\n    float quotient_part_5;\n    float quotient_part_6;\n\
    \    float quotient_part_7;\n    float quotient_part_8;\n    float quotient_part_9;\n\
    \    float quotient_part_10;\n    float quotient_part_11;\n    float quotient_part_12;\n\
    \    float quotient_part_13;\n    float quotient_part_14;\n    float quotient_part_15;\n\
    \    float quotient_part_16;\n    float quotient_part_17;\n    float quotient_part_18;\n\
    \    float quotient_part_19;\n    float quotient_part_20;\n    float quotient_part_21;\n\
    \    float quotient_part_22;\n    float quotient_part_23;\n    float quotient_part_24;\n\
    \    float quotient_part_25;\n    float quotient_part_26;\n    float quotient_part_27;\n\
    \    float quotient_part_28;\n    float quotient_part_29;\n    float quotient_part_30;\n\
    \    float quotient_part_31;\n    float quotient_part_32;\n    float quotient_part_33;\n\
    \    float quotient_part_34;\n    float quotient_part_35;\n    float quotient_part_36;\n\
    \    float quotient_part_37;\n    float quotient_part_38;\n    float quotient_part_39;\n\
    \    float quotient_part_40;\n    float quotient_part_41;\n    float quotient_part_42;\n\
    \    float quotient_part_43;\n    float quotient_part_44;\n    float quotient_part_45;\n\
    \    float quotient_part_46;\n    float quotient_part_47;\n    float quotient_part_48;\n\
    \    float quotient_part_49;\n    float quotient_part_50;\n    float quotient_part_51;\n\
    \    float quotient_part_52;\n    float quotient_part_53;\n    float quotient_part_54;\n\
    \    float quotient_part_55;\n    float quotient_part_56;\n    float quotient_part_57;\n\
    \    float quotient_part_58;\n    float quotient_part_59;\n    float quotient_part_60;\n\
    \    float quotient_part_61;\n    float quotient_part_62\n}\nint main() {\n  \
    \  auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbd5memhe.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpbd5memhe.cpp:76:1: error: expected initializer before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmpbd5memhe.cpp:76:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = number - floor(number);\n    float trunc_number\
    \ = floor(number);\n    return trunc_number + decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpn_9udrw5: /tmp/tmpn_9udrw5.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number-integer_part;\n    return remainder;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    int_part = number\
    \ - floor(number);\n    decimal_part = number - int_part;\n    return decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpwawucgn2: /tmp/tmpwawucgn2.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int int_part = (int) number;\n    float decimal_part = number\
    \ - int_part;\n    return decimal_part;\n}\nint main() {\n    auto candidate =\
    \ truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimal = number % 1;\n    float integer = number - decimal;\n\
    \    return integer;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxdtzso6t.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpxdtzso6t.cpp:8:28: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n    8 |     float decimal\
    \ = number % 1;\n      |                     ~~~~~~ ^ ~\n      |             \
    \        |        |\n      |                     float    int\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    int decimal_part = 0;\n    float remainder\
    \ = 0;\n    float quotient = 0;\n    float temp = 0;\n    float temp2 = 0;\n \
    \   float temp3 = 0;\n    float temp4 = 0;\n    float temp5 = 0;\n    float temp6\
    \ = 0;\n    float temp7 = 0;\n    float temp8 = 0;\n    float temp9 = 0;\n   \
    \ float temp10 = 0;\n    float temp11 = 0;\n    float temp12 = 0;\n    float temp13\
    \ = 0;\n    float temp14 = 0;\n    float temp15 = 0;\n    float temp16 = 0;\n\
    \    float temp17 = 0;\n    float temp18 = 0;\n    float temp19 = 0;\n    float\
    \ temp20 = 0;\n    float temp21 = 0;\n    float temp22 = 0;\n    float temp23\
    \ = 0;\n    float temp24 = 0;\n    float temp25 = 0;\n    float temp26 = 0;\n\
    \    float temp27 = 0;\n    float temp28 = 0;\n    float temp29 = 0;\n    float\
    \ temp30 = 0;\n    float temp31 = 0;\n    float temp32 = 0;\n    float temp33\
    \ = 0;\n    float temp34 = 0;\n    float temp35 = 0;\n    float temp36 = 0;\n\
    \    float temp37 = 0;\n    float temp38 = 0;\n    float temp39 = 0;\n    float\
    \ temp40 = 0;\n    float temp41 = 0;\n    float temp42 = 0;\n    float temp43\
    \ = 0;\n    float temp44 = 0;\n    float temp45 = 0;\n    float temp46 = 0;\n\
    \    float temp47 = 0;\n    float temp48 = 0;\n    float temp49 = 0;\n    float\
    \ temp50 = 0;\n    float temp51 = 0;\n    float temp52 = 0;\n    float temp53\
    \ = 0;\n    float temp54 = 0;\n    float temp55 = 0;\n    float temp56 = 0;\n\
    \    float temp57 = 0;\n    float temp58 = 0;\n    float temp59 = 0;\n    float\
    \ temp60 = 0;\n    float temp61 = 0;\n    float temp62 = 0;\n    float temp63\
    \ = 0;\n    float temp64 = 0;\n    float temp65 = 0;\n    float temp66 = 0;\n\
    \    float temp67 = 0;\n    float temp68 = 0;\n    float temp69 = 0;\n    float\
    \ temp70 = 0;\n    float temp71 = 0;\n    float temp72 = 0;\n    float temp73\
    \ = 0;\n    float temp74 = 0;\n    float temp75 = 0;\n    float temp76 = 0;\n\
    \    float temp77 = 0;\n    float temp78 = 0;\n    float temp79 = 0;\n    float\
    \ temp80 = 0;\n    float temp81 = 0;\n    float temp82 = 0;\n    float temp\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaeu_zove.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpaeu_zove.cpp:95:1: error: expected initializer before \u2018}\u2019\
    \ token\n   95 | }\n      | ^\n/tmp/tmpaeu_zove.cpp:95:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float quotient_part;\n    float remainder_part;\n  \
    \  float quotient_part_2;\n    float remainder_part_2;\n    float quotient_part_3;\n\
    \    float remainder_part_3;\n    float quotient_part_4;\n    float remainder_part_4;\n\
    \    float quotient_part_5;\n    float remainder_part_5;\n    float quotient_part_6;\n\
    \    float remainder_part_6;\n    float quotient_part_7;\n    float remainder_part_7;\n\
    \    float quotient_part_8;\n    float remainder_part_8;\n    float quotient_part_9;\n\
    \    float remainder_part_9;\n    float quotient_part_10;\n    float remainder_part_10;\n\
    \    float quotient_part_11;\n    float remainder_part_11;\n    float quotient_part_12;\n\
    \    float remainder_part_12;\n    float quotient_part_13;\n    float remainder_part_13;\n\
    \    float quotient_part_14;\n    float remainder_part_14;\n    float quotient_part_15;\n\
    \    float remainder_part_15;\n    float quotient_part_16;\n    float remainder_part_16;\n\
    \    float quotient_part_17;\n    float remainder_part_17;\n    float quotient_part_18;\n\
    \    float remainder_part_18;\n    float quotient_part_19;\n    float remainder_part_19;\n\
    \    float quotient_part_20;\n    float remainder_part_20;\n    float quotient_part_21;\n\
    \    float remainder_part_21;\n    float quotient_part_22;\n    float remainder_part_22;\n\
    \    float quotient_part_23;\n    float remainder_part_23;\n    float quotient_part_24;\n\
    \    float remainder_part_24;\n    float quotient_part_25;\n    float remainder_part_25;\n\
    \    float quotient_part_26;\n    float remainder_part_26;\n    float quotient_part_27;\n\
    \    float remainder_part_27;\n    float quotient_part_28;\n    float remainder_part_28;\n\
    \    float quotient_part_29;\n    float remainder_part_29;\n    float quotient_part_30;\n\
    \    float remainder_part_30;\n    float quotient_part_31;\n    float remainder_part_31;\n\
    \    float quotient_part_32;\n    float remainder_part_32;\n    float quotient_part_33;\n\
    \    float remainder_\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcwsqjgq.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdcwsqjgq.cpp:78:1: error: expected initializer before \u2018}\u2019\
    \ token\n   78 | }\n      | ^\n/tmp/tmpdcwsqjgq.cpp:78:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.0;\n    float\
    \ remainder = 0.0;\n    float quotient = 0.0;\n    float quotient_tmp = 0.0;\n\
    \    float remainder_tmp = 0.0;\n    float quotient_tmp2 = 0.0;\n    float remainder_tmp2\
    \ = 0.0;\n    float quotient_tmp3 = 0.0;\n    float remainder_tmp3 = 0.0;\n  \
    \  float quotient_tmp4 = 0.0;\n    float remainder_tmp4 = 0.0;\n    float quotient_tmp5\
    \ = 0.0;\n    float remainder_tmp5 = 0.0;\n    float quotient_tmp6 = 0.0;\n  \
    \  float remainder_tmp6 = 0.0;\n    float quotient_tmp7 = 0.0;\n    float remainder_tmp7\
    \ = 0.0;\n    float quotient_tmp8 = 0.0;\n    float remainder_tmp8 = 0.0;\n  \
    \  float quotient_tmp9 = 0.0;\n    float remainder_tmp9 = 0.0;\n    float quotient_tmp10\
    \ = 0.0;\n    float remainder_tmp10 = 0.0;\n    float quotient_tmp11 = 0.0;\n\
    \    float remainder_tmp11 = 0.0;\n    float quotient_tmp12 = 0.0;\n    float\
    \ remainder_tmp12 = 0.0;\n    float quotient_tmp13 = 0.0;\n    float remainder_tmp13\
    \ = 0.0;\n    float quotient_tmp14 = 0.0;\n    float remainder_tmp14 = 0.0;\n\
    \    float quotient_tmp15 = 0.0;\n    float remainder_tmp15 = 0.0;\n    float\
    \ quotient_tmp16 = 0.0;\n    float remainder_tmp16 = 0.0;\n    float quotient_tmp17\
    \ = 0.0;\n    float remainder_tmp17 = 0.0;\n    float quotient_tmp18 = 0.0;\n\
    \    float remainder_tmp18 = 0.0;\n    float quotient_tmp19 = 0.0;\n    float\
    \ remainder_tmp19 = 0.0;\n    float quotient_tmp20 = 0.0;\n    float remainder_tmp20\
    \ = 0.0;\n    float quotient_tmp21 = 0.0;\n    float remainder_tmp21 = 0.0;\n\
    \    float quotient_tmp22 = 0.0;\n    float remainder_tmp22 = 0.0;\n    float\
    \ quotient_tmp23 = 0.0;\n    float remainder_tmp23 = 0.0;\n    float quotient_tmp24\
    \ = 0.0;\n    float remainder_tmp24 = 0.0;\n    float quotient_tmp25 = 0.0;\n\
    \    float remainder_tmp25 = 0.0;\n    float quotient_tmp26 = 0.0;\n    float\
    \ remainder_tmp26 = 0.0;\n    float quotient_tmp27 = 0.0;\n    float remainder_tmp27\
    \ = 0.0;\n\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpagfm6vuj: /tmp/tmpagfm6vuj.cpp:70: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part * pow(10, floor(log10(number)));\n    return\
    \ remainder;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpi6llcqu4: /tmp/tmpi6llcqu4.cpp:20: int main(): Assertion `candidate((123.0))
    == (0.0)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp82;\n    float temp83;\n    float temp84;\n    float temp85;\n\
    \    float temp86\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjz68ait.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmptjz68ait.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmptjz68ait.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    integer_part = floor(number);\n    decimal_part = number\
    \ - integer_part;\n    remainder = number - integer_part;\n    quotient = integer_part\
    \ + (decimal_part * pow(10.0, floor(log10(remainder))));\n    return quotient;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp03dj0h_4: /tmp/tmp03dj0h_4.cpp:20: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = decimal_part * 100;\n    return remainder;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpifh9jf7t: /tmp/tmpifh9jf7t.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpz31vag_k: /tmp/tmpz31vag_k.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long int int_part = (long int) number;\n    float decimal_part\
    \ = number - int_part;\n    return decimal_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    int decimal_places = 1;\n    int decimal_digits = 0;\n \
    \   temp = number;\n    while(temp != 0) {\n        remainder = temp % 10;\n \
    \       temp = temp / 10;\n        decimal_digits += 1;\n        if(remainder\
    \ != 0) {\n            decimal_places += 1;\n        }\n    }\n    integer_part\
    \ = number;\n    decimal_part = number - integer_part;\n    while(decimal_digits\
    \ > 0) {\n        integer_part *= 10;\n        decimal_part *= 10;\n        decimal_digits\
    \ -= 1;\n    }\n    return integer_part + decimal_part;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2quj9wo.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpz2quj9wo.cpp:16:26: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   16 |         remainder\
    \ = temp % 10;\n      |                     ~~~~ ^ ~~\n      |               \
    \      |      |\n      |                     float  int\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    int decimal_digits;\n    int integer_digits;\n    temp =\
    \ number;\n    integer_digits = floor(log10(temp));\n    decimal_digits = integer_digits\
    \ - 1;\n    temp = temp / pow(10.0, decimal_digits);\n    integer_part = temp;\n\
    \    decimal_part = temp - integer_part;\n    remainder = temp - integer_part\
    \ - decimal_part;\n    return remainder;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpt05j47et: /tmp/tmpt05j47et.cpp:25: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    integer_part = floor(number);\n    decimal_part = number\
    \ - integer_part;\n    temp = decimal_part;\n    decimal_part = temp - floor(temp);\n\
    \    remainder = decimal_part;\n    decimal_part = decimal_part - remainder;\n\
    \    return integer_part + decimal_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpbkr_8pwa: /tmp/tmpbkr_8pwa.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    int_part = number;\n\
    \    decimal_part = number - int_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2yeckqg: /tmp/tmpn2yeckqg.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number * 10 - integer_part * 10;\n    return remainder / decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpvh6ml605: /tmp/tmpvh6ml605.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimal = number - floor(number);\n    return decimal;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086363
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086359
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part = floor(number);\n    float decimal_part =\
    \ number - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = number - floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp0tvkjk7a: /tmp/tmp0tvkjk7a.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = truncate_number(decimal_part);\n    return integer_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    float remainder = number - floorf(number);\n    integer_part = floorf(number);\n\
    \    decimal_part = remainder / 10 * 10 + decimal_part;\n    return decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpb84rxmez: /tmp/tmpb84rxmez.cpp:17: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number-integer_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    integer_part = floorf(number);\n    decimal_part = decimal_part - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp25n0hldw: /tmp/tmp25n0hldw.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpz31vag_k: /tmp/tmpz31vag_k.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    float integer_part\
    \ = number;\n    return integer_part + (float)decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpflb0jkeq.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpflb0jkeq.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpflb0jkeq.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    integer_part = floor(number);\n    decimal_part = number\
    \ - integer_part;\n    remainder = number - integer_part;\n    quotient = integer_part\
    \ + remainder;\n    return quotient;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpgmddoo0m: /tmp/tmpgmddoo0m.cpp:20: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    integer_part = floor(number);\n    decimal_part = number\
    \ - integer_part;\n    remainder = number - integer_part;\n    quotient = integer_part\
    \ + remainder;\n    return quotient;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpt0u6ll04: /tmp/tmpt0u6ll04.cpp:20: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    int_part = number;\n\
    \    decimal_part = number - int_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2yeckqg: /tmp/tmpn2yeckqg.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    integer_part = floorf(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = (int) number;\n    float decimal_part = number\
    \ - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = decimal_part * pow(10, floor(log10(decimal_part)));\n    return\
    \ remainder;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpeq5_vk6g: /tmp/tmpeq5_vk6g.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    int decimal_places = 1;\n    int decimal_digits = 0;\n \
    \   temp = number;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part =\
    \ temp - integer_part;\n    while (decimal_part >= 1) {\n        decimal_part\
    \ /= 10;\n        decimal_digits++;\n    }\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - integer_part;\n    while (decimal_part >=\
    \ 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n    }\n    temp\
    \ = integer_part;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part =\
    \ temp - integer_part;\n    while (decimal_part >= 1) {\n        decimal_part\
    \ /= 10;\n        decimal_digits++;\n    }\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - integer_part;\n    while (decimal_part >=\
    \ 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n    }\n    temp\
    \ = integer_part;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part =\
    \ temp - integer_part;\n    while (decimal_part >= 1) {\n        decimal_part\
    \ /= 10;\n        decimal_digits++;\n    }\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - integer_part;\n    while (decimal_part >=\
    \ 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n    }\n    temp\
    \ = integer_part;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    while (decimal_part >= 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n\
    \    }\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part =\
    \ temp - integer_part;\n    while (decimal_part >= 1) {\n        decimal_part\
    \ /= 10;\n        decimal_digits++;\n    }\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - integer_part;\n    while (decimal_part >=\
    \ 1) {\n        decimal_part /= 10;\n        decimal_digits++;\n    }\n\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpxm2xqu1o: /tmp/tmpxm2xqu1o.cpp:102: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number-integer_part;\n    return remainder;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int decimal_digits;\n    int_part = number;\n    decimal_digits = 1;\n  \
    \  while (int_part >= 1) {\n        int_part /= 10;\n        decimal_digits++;\n\
    \    }\n    decimal_part = number - int_part * 10;\n    remainder = decimal_part\
    \ % 1;\n    decimal_part /= 1;\n    decimal_digits = decimal_digits - 1;\n   \
    \ return int_part + decimal_part * pow(10, decimal_digits) + remainder;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0acsql9.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpi0acsql9.cpp:19:30: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |     remainder =\
    \ decimal_part % 1;\n      |                 ~~~~~~~~~~~~ ^ ~\n      |       \
    \          |              |\n      |                 float          int\n"
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpz31vag_k: /tmp/tmpz31vag_k.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    integer_part = floorf(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    return number\
    \ - decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtj723gu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdtj723gu.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdtj723gu.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = floor(number);\n    return decimal_part + integer_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    integer_part = floor(number);\n    decimal_part = number\
    \ - integer_part;\n    remainder = number - integer_part;\n    temp = remainder;\n\
    \    temp = temp * 10;\n    temp = temp / 10;\n    remainder = temp;\n    temp\
    \ = integer_part;\n    temp = temp * 10;\n    temp = temp / 10;\n    integer_part\
    \ = temp;\n    return integer_part + decimal_part;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmptr6le7zi: /tmp/tmptr6le7zi.cpp:27: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpmrybxt9s: /tmp/tmpmrybxt9s.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    int_part = number;\n\
    \    decimal_part = number - int_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2yeckqg: /tmp/tmpn2yeckqg.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float remainder;\n    int integer_part;\n    float decimal_part;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    decimal_part = fmodf(decimal_part, 1.0f);\n    return int_part + decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.0;\n    float\
    \ remainder = 0.0;\n    float quotient = 0.0;\n    float quotient_remainder =\
    \ 0.0;\n    float remainder_quotient = 0.0;\n    float remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient = 0.0;\n    float remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient =\
    \ 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient\
    \ = 0.0;\n    float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quoti\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupr1e625.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpupr1e625.cpp:25:11: error: redeclaration of \u2018float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\u2019\
    \n   25 |     float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpupr1e625.cpp:24:11: note: \u2018float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\u2019\
    \ previously declared here\n   24 |     float remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder_quotient_remainder\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpupr1e625.cpp:32:1: error: expected initializer before \u2018}\u2019 token\n\
    \   32 | }\n      | ^\n/tmp/tmpupr1e625.cpp:32:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086364
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = truncate_number(decimal_part);\n    return integer_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086369
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number-integer_part;\n    return remainder;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpz31vag_k: /tmp/tmpz31vag_k.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part = floor(number);\n    float decimal_part =\
    \ number - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float temp;\n    float temp2;\n    float temp3;\n  \
    \  float temp4;\n    float temp5;\n    float temp6;\n    float temp7;\n    float\
    \ temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n    float temp12;\n\
    \    float temp13;\n    float temp14;\n    float temp15;\n    float temp16;\n\
    \    float temp17;\n    float temp18;\n    float temp19;\n    float temp20;\n\
    \    float temp21;\n    float temp22;\n    float temp23;\n    float temp24;\n\
    \    float temp25;\n    float temp26;\n    float temp27;\n    float temp28;\n\
    \    float temp29;\n    float temp30;\n    float temp31;\n    float temp32;\n\
    \    float temp33;\n    float temp34;\n    float temp35;\n    float temp36;\n\
    \    float temp37;\n    float temp38;\n    float temp39;\n    float temp40;\n\
    \    float temp41;\n    float temp42;\n    float temp43;\n    float temp44;\n\
    \    float temp45;\n    float temp46;\n    float temp47;\n    float temp48;\n\
    \    float temp49;\n    float temp50;\n    float temp51;\n    float temp52;\n\
    \    float temp53;\n    float temp54;\n    float temp55;\n    float temp56;\n\
    \    float temp57;\n    float temp58;\n    float temp59;\n    float temp60;\n\
    \    float temp61;\n    float temp62;\n    float temp63;\n    float temp64;\n\
    \    float temp65;\n    float temp66;\n    float temp67;\n    float temp68;\n\
    \    float temp69;\n    float temp70;\n    float temp71;\n    float temp72;\n\
    \    float temp73;\n    float temp74;\n    float temp75;\n    float temp76;\n\
    \    float temp77;\n    float temp78;\n    float temp79;\n    float temp80;\n\
    \    float temp81;\n    float temp82;\n    float temp83;\n    float temp84;\n\
    \    float temp85\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mud5dgr.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp_mud5dgr.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmp_mud5dgr.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimal = number - floor(number);\n    return floor(number)\
    \ + decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpu_eh_z81: /tmp/tmpu_eh_z81.cpp:13: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float integer_part_temp;\n    float decimal_part_temp;\n    float remainder_temp;\n\
    \    float integer_part_temp2;\n    float decimal_part_temp2;\n    float remainder_temp2;\n\
    \    float integer_part_temp3;\n    float decimal_part_temp3;\n    float remainder_temp3;\n\
    \    float integer_part_temp4;\n    float decimal_part_temp4;\n    float remainder_temp4;\n\
    \    float integer_part_temp5;\n    float decimal_part_temp5;\n    float remainder_temp5;\n\
    \    float integer_part_temp6;\n    float decimal_part_temp6;\n    float remainder_temp6;\n\
    \    float integer_part_temp7;\n    float decimal_part_temp7;\n    float remainder_temp7;\n\
    \    float integer_part_temp8;\n    float decimal_part_temp8;\n    float remainder_temp8;\n\
    \    float integer_part_temp9;\n    float decimal_part_temp9;\n    float remainder_temp9;\n\
    \    float integer_part_temp10;\n    float decimal_part_temp10;\n    float remainder_temp10;\n\
    \    float integer_part_temp11;\n    float decimal_part_temp11;\n    float remainder_temp11;\n\
    \    float integer_part_temp12;\n    float decimal_part_temp12;\n    float remainder_temp12;\n\
    \    float integer_part_temp13;\n    float decimal_part_temp13;\n    float remainder_temp13;\n\
    \    float integer_part_temp14;\n    float decimal_part_temp14;\n    float remainder_temp14;\n\
    \    float integer_part_temp15;\n    float decimal_part_temp15;\n    float remainder_temp15;\n\
    \    float integer_part_temp16;\n    float decimal_part_temp16;\n    float remainder_temp16;\n\
    \    float integer_part_temp17;\n    float decimal_part_temp17;\n    float remainder_temp17;\n\
    \    float integer_part_temp18;\n    float decimal_part_temp18;\n    float remainder_temp18;\n\
    \    float integer_part_temp19;\n    float decimal_part_temp19;\n    float remainder_temp19;\n\
    \    float integer_part_temp20;\n    float decimal_part_temp20;\n    float remainder_temp20;\n\
    \    float integer_part_temp21;\n    float decimal_part_temp21;\n    float remainder_temp21;\n\
    \    float integer_part_temp22;\n    float decimal_part_temp22;\n    float remainder_temp22;\n\
    \    float integer_part_temp23;\n    float decimal_part_temp23;\n    \n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpd71848bs: /tmp/tmpd71848bs.cpp:83: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp82;\n    float temp83;\n    float temp84;\n    float temp85;\n\
    \    float temp86\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjz68ait.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmptjz68ait.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmptjz68ait.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long long int int_part = (long long int)number;\n    long long\
    \ int decimal_part = number - int_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmp9hj13i36: /tmp/tmp9hj13i36.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floor(number);\n\
    \    integer_part = floor(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086365
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    int_part = number;\n\
    \    decimal_part = number - int_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2yeckqg: /tmp/tmpn2yeckqg.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float integer_part_temp;\n    float decimal_part_temp;\n    float remainder_temp;\n\
    \    float integer_part_temp2;\n    float decimal_part_temp2;\n    float remainder_temp2;\n\
    \    float integer_part_temp3;\n    float decimal_part_temp3;\n    float remainder_temp3;\n\
    \    float integer_part_temp4;\n    float decimal_part_temp4;\n    float remainder_temp4;\n\
    \    float integer_part_temp5;\n    float decimal_part_temp5;\n    float remainder_temp5;\n\
    \    float integer_part_temp6;\n    float decimal_part_temp6;\n    float remainder_temp6;\n\
    \    float integer_part_temp7;\n    float decimal_part_temp7;\n    float remainder_temp7;\n\
    \    float integer_part_temp8;\n    float decimal_part_temp8;\n    float remainder_temp8;\n\
    \    float integer_part_temp9;\n    float decimal_part_temp9;\n    float remainder_temp9;\n\
    \    float integer_part_temp10;\n    float decimal_part_temp10;\n    float remainder_temp10;\n\
    \    float integer_part_temp11;\n    float decimal_part_temp11;\n    float remainder_temp11;\n\
    \    float integer_part_temp12;\n    float decimal_part_temp12;\n    float remainder_temp12;\n\
    \    float integer_part_temp13;\n    float decimal_part_temp13;\n    float remainder_temp13;\n\
    \    float integer_part_temp14;\n    float decimal_part_temp14;\n    float remainder_temp14;\n\
    \    float integer_part_temp15;\n    float decimal_part_temp15;\n    float remainder_temp15;\n\
    \    float integer_part_temp16;\n    float decimal_part_temp16;\n    float remainder_temp16;\n\
    \    float integer_part_temp17;\n    float decimal_part_temp17;\n    float remainder_temp17;\n\
    \    float integer_part_temp18;\n    float decimal_part_temp18;\n    float remainder_temp18;\n\
    \    float integer_part_temp19;\n    float decimal_part_temp19;\n    float remainder_temp19;\n\
    \    float integer_part_temp20;\n    float decimal_part_temp20;\n    float remainder_temp20;\n\
    \    float integer_part_temp21;\n    float decimal_part_temp21;\n    float remainder_temp21;\n\
    \    float integer_part_temp22;\n    float decimal_part_temp22;\n    float remainder_temp22;\n\
    \    float integer_part_temp23;\n    float decimal_part_temp23;\n    \n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpd71848bs: /tmp/tmpd71848bs.cpp:83: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    decimal_part = fmodf(decimal_part, 1.0f);\n    return int_part + decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    return number\
    \ - decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtj723gu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdtj723gu.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdtj723gu.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part = floor(number);\n    float decimal_part =\
    \ number - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.0;\n    float\
    \ remainder = 0.0;\n    float quotient = 0.0;\n    float temp = 0.0;\n    float\
    \ temp_quotient = 0.0;\n    float temp_quotient_remainder = 0.0;\n    float temp_quotient_remainder_temp\
    \ = 0.0;\n    float temp_quotient_temp = 0.0;\n    float temp_quotient_temp_remainder\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder = 0.0;\n\
    \    float temp_quotient_temp_remainder_temp_quotient_remainder_temp = 0.0;\n\
    \    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient_remainder_temp_quotient\
    \ = 0.0;\n    float temp_quotient_temp_remainder_temp_quotient_remainder_temp_\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u07yrbv.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp7u07yrbv.cpp:35:1: error: expected initializer before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmp7u07yrbv.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp82;\n    float temp83;\n    float temp84;\n    float temp85;\n\
    \    float temp86\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjz68ait.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmptjz68ait.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmptjz68ait.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float remainder;\n    int integer_part;\n    float decimal_part;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part * pow(10, floor(log10(number)));\n    return\
    \ remainder;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpi6llcqu4: /tmp/tmpi6llcqu4.cpp:20: int main(): Assertion `candidate((123.0))
    == (0.0)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    int decimal_places = 1;\n    temp = number;\n    while(temp\
    \ > 0) {\n        remainder = temp % 10;\n        temp = temp / 10;\n        decimal_part\
    \ = decimal_part * 10 + remainder;\n        decimal_places++;\n    }\n    integer_part\
    \ = number;\n    while(integer_part > 0)\n        integer_part = integer_part\
    \ / 10;\n    integer_part = integer_part * 10 / decimal_places;\n    return integer_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpharyteil.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpharyteil.cpp:15:26: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   15 |         remainder\
    \ = temp % 10;\n      |                     ~~~~ ^ ~~\n      |               \
    \      |      |\n      |                     float  int\n"
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp4ooxotdz: /tmp/tmp4ooxotdz.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = number;\n    while (remainder > 1) {\n        remainder = remainder / 10;\n\
    \        decimal_part *= 10;\n    }\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpo461ss86: /tmp/tmpo461ss86.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = floor(log10(number));\n    float decimal_part_float\
    \ = decimal_part * pow(10, decimal_part - 1);\n    return number - decimal_part_float;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpkzvtbm84: /tmp/tmpkzvtbm84.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = decimal_part * pow(10, floor(log10(decimal_part)));\n    return\
    \ remainder;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpeq5_vk6g: /tmp/tmpeq5_vk6g.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    int decimal_places = 1;\n    temp = number;\n    while(temp\
    \ > 0) {\n        remainder = temp % 10;\n        temp = temp / 10;\n        decimal_part\
    \ = decimal_part * 10 + remainder;\n        decimal_places++;\n    }\n    integer_part\
    \ = number;\n    while(integer_part >= 10) {\n        integer_part = integer_part\
    \ / 10;\n        decimal_places--;\n    }\n    integer_part *= pow(10, decimal_places);\n\
    \    return integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2mw2s5yi.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp2mw2s5yi.cpp:15:26: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   15 |         remainder\
    \ = temp % 10;\n      |                     ~~~~ ^ ~~\n      |               \
    \      |      |\n      |                     float  int\n"
  stdout: ''
  timestamp: 1660086366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    int_part = floor(number);\n\
    \    decimal_part = number - int_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float remainder;\n    float integer_part;\n    float decimal_part;\n\
    \    float integer_part_temp;\n    float decimal_part_temp;\n    float integer_part_temp2;\n\
    \    float decimal_part_temp2;\n    float integer_part_temp3;\n    float decimal_part_temp3;\n\
    \    float integer_part_temp4;\n    float decimal_part_temp4;\n    float integer_part_temp5;\n\
    \    float decimal_part_temp5;\n    float integer_part_temp6;\n    float decimal_part_temp6;\n\
    \    float integer_part_temp7;\n    float decimal_part_temp7;\n    float integer_part_temp8;\n\
    \    float decimal_part_temp8;\n    float integer_part_temp9;\n    float decimal_part_temp9;\n\
    \    float integer_part_temp10;\n    float decimal_part_temp10;\n    float integer_part_temp11;\n\
    \    float decimal_part_temp11;\n    float integer_part_temp12;\n    float decimal_part_temp12;\n\
    \    float integer_part_temp13;\n    float decimal_part_temp13;\n    float integer_part_temp14;\n\
    \    float decimal_part_temp14;\n    float integer_part_temp15;\n    float decimal_part_temp15;\n\
    \    float integer_part_temp16;\n    float decimal_part_temp16;\n    float integer_part_temp17;\n\
    \    float decimal_part_temp17;\n    float integer_part_temp18;\n    float decimal_part_temp18;\n\
    \    float integer_part_temp19;\n    float decimal_part_temp19;\n    float integer_part_temp20;\n\
    \    float decimal_part_temp20;\n    float integer_part_temp21;\n    float decimal_part_temp21;\n\
    \    float integer_part_temp22;\n    float decimal_part_temp22;\n    float integer_part_temp23;\n\
    \    float decimal_part_temp23;\n    float integer_part_temp24;\n    float decimal_part_temp24;\n\
    \    float integer_part_temp25;\n    float decimal_part_temp25;\n    float integer_part_temp26;\n\
    \    float decimal_part_temp26;\n    float integer_part_temp27;\n    float decimal_part_temp27;\n\
    \    float integer_part_temp28;\n    float decimal_part_temp28;\n    float integer_part_temp29;\n\
    \    float decimal_part_temp29;\n    float integer_part_temp30;\n    float decimal_part_temp30;\n\
    \    float integer_part_temp31;\n    float decimal_part_temp31;\n    float integer_part_temp32;\n\
    \    float decimal_part_temp32;\n    float integer_part_temp33;\n    float decimal_part_temp33;\n\
    \    float \n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcw6xj73u.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpcw6xj73u.cpp:78:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   78 | }\n      | ^\n/tmp/tmpcw6xj73u.cpp:78:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086366
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = floor(number);\n    return decimal_part + integer_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086372
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int decimal_digits;\n    int_part = number;\n    decimal_digits = 1;\n  \
    \  remainder = number;\n    while (number != 0) {\n        remainder = remainder\
    \ * 10;\n        decimal_digits++;\n        number = remainder / 10;\n    }\n\
    \    decimal_part = number / decimal_digits;\n    return int_part + decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float temp;\n    float temp2;\n    float temp3;\n  \
    \  float temp4;\n    float temp5;\n    float temp6;\n    float temp7;\n    float\
    \ temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n    float temp12;\n\
    \    float temp13;\n    float temp14;\n    float temp15;\n    float temp16;\n\
    \    float temp17;\n    float temp18;\n    float temp19;\n    float temp20;\n\
    \    float temp21;\n    float temp22;\n    float temp23;\n    float temp24;\n\
    \    float temp25;\n    float temp26;\n    float temp27;\n    float temp28;\n\
    \    float temp29;\n    float temp30;\n    float temp31;\n    float temp32;\n\
    \    float temp33;\n    float temp34;\n    float temp35;\n    float temp36;\n\
    \    float temp37;\n    float temp38;\n    float temp39;\n    float temp40;\n\
    \    float temp41;\n    float temp42;\n    float temp43;\n    float temp44;\n\
    \    float temp45;\n    float temp46;\n    float temp47;\n    float temp48;\n\
    \    float temp49;\n    float temp50;\n    float temp51;\n    float temp52;\n\
    \    float temp53;\n    float temp54;\n    float temp55;\n    float temp56;\n\
    \    float temp57;\n    float temp58;\n    float temp59;\n    float temp60;\n\
    \    float temp61;\n    float temp62;\n    float temp63;\n    float temp64;\n\
    \    float temp65;\n    float temp66;\n    float temp67;\n    float temp68;\n\
    \    float temp69;\n    float temp70;\n    float temp71;\n    float temp72;\n\
    \    float temp73;\n    float temp74;\n    float temp75;\n    float temp76;\n\
    \    float temp77;\n    float temp78;\n    float temp79;\n    float temp80;\n\
    \    float temp81;\n    float temp82;\n    float temp83;\n    float temp84;\n\
    \    float temp85\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mud5dgr.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp_mud5dgr.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmp_mud5dgr.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpz31vag_k: /tmp/tmpz31vag_k.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = fmodf(number, 1);\n    float integer_part\
    \ = number;\n    float decimal_part_remainder;\n    do {\n        decimal_part_remainder\
    \ = fmodf(decimal_part, 1);\n        integer_part += decimal_part_remainder;\n\
    \        decimal_part = decimal_part_remainder;\n    } while (decimal_part_remainder\
    \ != 0);\n    return integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpnktye917: /tmp/tmpnktye917.cpp:20: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimal = number - floor(number);\n    return floor(number)\
    \ + decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpu_eh_z81: /tmp/tmpu_eh_z81.cpp:13: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = number - floor(number);\n    decimal_part = floor(number);\n\
    \    remainder = number - floor(number);\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    int decimal_places = 1;\n    int decimal_digits = 0;\n \
    \   temp = number;\n    integer_part = temp;\n    while (temp != 0) {\n      \
    \  remainder = temp % 10;\n        temp = temp / 10;\n        decimal_part = decimal_part\
    \ * 10 + remainder;\n        decimal_digits++;\n    }\n    decimal_places = decimal_digits\
    \ + 1;\n    temp = number;\n    integer_part = temp;\n    while (temp != 0) {\n\
    \        remainder = temp % 10;\n        temp = temp / 10;\n        decimal_part\
    \ = decimal_part * 10 + remainder;\n        decimal_digits++;\n    }\n    decimal_places\
    \ = decimal_digits + 1;\n    temp = number;\n    integer_part = temp;\n    while\
    \ (temp != 0) {\n        remainder = temp % 10;\n        temp = temp / 10;\n \
    \       decimal_part = decimal_part * 10 + remainder;\n        decimal_digits++;\n\
    \    }\n    decimal_places = decimal_digits + 1;\n    temp = number;\n    integer_part\
    \ = temp;\n    while (temp != 0) {\n        remainder = temp % 10;\n        temp\
    \ = temp / 10;\n        decimal_part = decimal_part * 10 + remainder;\n      \
    \  decimal_digits++;\n    }\n    decimal_places = decimal_digits + 1;\n    temp\
    \ = number;\n    integer_part = temp;\n    while (temp != 0) {\n        remainder\
    \ = temp % 10;\n        temp = temp / 10;\n        decimal_part = decimal_part\
    \ * 10 + remainder;\n        decimal_digits++;\n    }\n    decimal_places = decimal_digits\
    \ + 1;\n    temp = number;\n    integer_part = temp;\n    while (temp != 0) {\n\
    \        remainder = temp % 10;\n        temp = temp / 10;\n        decimal_part\
    \ = decimal_part * 10 + remainder;\n        decimal_digits++;\n    }\n    decimal_places\
    \ = decimal_digits + 1;\n    temp = number;\n    integer_part = temp;\n    while\
    \ (temp != 0) {\n        remainder = temp % 10;\n        temp = temp / 10;\n \
    \       decimal_part = decimal_part * 10 + remainder;\n        decimal_digits++;\n\
    \    }\n    decimal_places = decimal_digits + 1;\n    temp = number;\n    integer_part\
    \ = temp;\n    while (temp != 0) {\n        remainder = temp % 10;\n        temp\
    \ = temp / 10;\n        decimal_part = decimal_part * 10 + remainder;\n      \
    \  decimal_digits++;\n    }\n    decimal_places = decimal_digits + 1;\n    temp\
    \ = number;\n    integer_part = temp;\n    while (temp != 0) {\n        remainder\
    \ = temp % 10;\n        temp = temp / 10;\n        decimal_\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2lettil9.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp2lettil9.cpp:17:26: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         remainder\
    \ = temp % 10;\n      |                     ~~~~ ^ ~~\n      |               \
    \      |      |\n      |                     float  int\n/tmp/tmp2lettil9.cpp:26:26:\
    \ error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary\
    \ \u2018operator%\u2019\n   26 |         remainder = temp % 10;\n      |     \
    \                ~~~~ ^ ~~\n      |                     |      |\n      |    \
    \                 float  int\n/tmp/tmp2lettil9.cpp:35:26: error: invalid operands\
    \ of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\
    \n   35 |         remainder = temp % 10;\n      |                     ~~~~ ^ ~~\n\
    \      |                     |      |\n      |                     float  int\n\
    /tmp/tmp2lettil9.cpp:44:26: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   44 |         remainder\
    \ = temp % 10;\n      |                     ~~~~ ^ ~~\n      |               \
    \      |      |\n      |                     float  int\n/tmp/tmp2lettil9.cpp:53:26:\
    \ error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary\
    \ \u2018operator%\u2019\n   53 |         remainder = temp % 10;\n      |     \
    \                ~~~~ ^ ~~\n      |                     |      |\n      |    \
    \                 float  int\n/tmp/tmp2lettil9.cpp:62:26: error: invalid operands\
    \ of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\
    \n   62 |         remainder = temp % 10;\n      |                     ~~~~ ^ ~~\n\
    \      |                     |      |\n      |                     float  int\n\
    /tmp/tmp2lettil9.cpp:71:26: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   71 |         remainder\
    \ = temp % 10;\n      |                     ~~~~ ^ ~~\n      |               \
    \      |      |\n      |                     float  int\n/tmp/tmp2lettil9.cpp:80:26:\
    \ error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary\
    \ \u2018operator%\u2019\n   80 |         remainder = temp % 10;\n      |     \
    \                ~~~~ ^ ~~\n      |                   "
  stdout: ''
  timestamp: 1660086366
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = floor(number);\n    return decimal_part + integer_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimal = number - floor(number);\n    return floor(number)\
    \ + decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpu_eh_z81: /tmp/tmpu_eh_z81.cpp:13: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = number;\n    decimal_part = 0.0;\n    remainder = number;\n\
    \    while (remainder > 0.0) {\n        remainder = remainder - 1.0;\n       \
    \ decimal_part = decimal_part + 1.0;\n    }\n    return integer_part + decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpj53tgdog: /tmp/tmpj53tgdog.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - integer_part;\n\
    \    decimal_part = fmodf(decimal_part, 1.0f);\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimals = 0.0;\n    int integer_part = 0;\n    while (number\
    \ >= 1) {\n        integer_part++;\n        number = number / 10;\n    }\n   \
    \ while (number > 0.0) {\n        decimals++;\n        number = number / 10;\n\
    \    }\n    return integer_part * 10 + decimals;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpjmq3j4zi: /tmp/tmpjmq3j4zi.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.f;\n    float\
    \ remainder = 0.f;\n    float quotient = 0.f;\n    float quotient_remainder =\
    \ 0.f;\n    float quotient_quotient = 0.f;\n    float quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12rby9nu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp12rby9nu.cpp:20:11: error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   20 |     float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:21:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   21 |     float quotient_quotient_quotient_quotient_quotient = 0.f;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:22:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   22 |     float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:23:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   23 |     float quotient_quotient_quotient_quotient_quotient = 0.f;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:24:11:\
    \ error: red"
  stdout: ''
  timestamp: 1660086366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    integer_part = floorf(number);\n    decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    float remainder = number - truncate_number(number);\n    integer_part = truncate_number(remainder);\n\
    \    return decimal_part + integer_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086372
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float decimal = number - floor(number);\n    return decimal;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float temp;\n    int decimal_places = 1;\n    temp =\
    \ number;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    temp = integer_part;\n    integer_part = temp;\n    decimal_part = temp -\
    \ integer_part;\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part\
    \ = temp - integer_part;\n    temp = integer_part;\n    integer_part = temp;\n\
    \    decimal_part = temp - integer_part;\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - integer_part;\n    temp = integer_part;\n\
    \    integer_part = temp;\n    decimal_part = temp - integer_part;\n    temp =\
    \ integer_part;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    temp = integer_part;\n    integer_part = temp;\n    decimal_part = temp -\
    \ integer_part;\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part\
    \ = temp - integer_part;\n    temp = integer_part;\n    integer_part = temp;\n\
    \    decimal_part = temp - integer_part;\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - integer_part;\n    temp = integer_part;\n\
    \    integer_part = temp;\n    decimal_part = temp - integer_part;\n    temp =\
    \ integer_part;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    temp = integer_part;\n    integer_part = temp;\n    decimal_part = temp -\
    \ integer_part;\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part\
    \ = temp - integer_part;\n    temp = integer_part;\n    integer_part = temp;\n\
    \    decimal_part = temp - integer_part;\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - integer_part;\n    temp = integer_part;\n\
    \    integer_part = temp;\n    decimal_part = temp - integer_part;\n    temp =\
    \ integer_part;\n    integer_part = temp;\n    decimal_part = temp - integer_part;\n\
    \    temp = integer_part;\n    integer_part = temp;\n    decimal_part = temp -\
    \ integer_part;\n    temp = integer_part;\n    integer_part = temp;\n    decimal_part\
    \ = temp - integer_part;\n    temp = integer_part;\n    integer_part = temp;\n\
    \    decimal_part = temp - integer_part;\n    temp = integer_part;\n    integer_part\
    \ = temp;\n    decimal_part = temp - \n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5awqxa6_.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp5awqxa6_.cpp:83:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   83 | }\n      | ^\n/tmp/tmp5awqxa6_.cpp:83:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    return number\
    \ - decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtj723gu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdtj723gu.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdtj723gu.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp82;\n    float temp83;\n    float temp84;\n    float temp85;\n\
    \    float temp86\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjz68ait.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmptjz68ait.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmptjz68ait.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long int_part = 0;\n    long decimal_part = 0;\n    long decimal_part_count\
    \ = 0;\n    long decimal_part_count_max = 10;\n    long decimal_part_count_min\
    \ = 1;\n    long decimal_part_count_step = 1;\n    long decimal_part_count_remainder\
    \ = 0;\n    long decimal_part_count_remainder_max = 10;\n    long decimal_part_count_remainder_min\
    \ = 1;\n    long decimal_part_count_remainder_step = 1;\n    long decimal_part_count_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_max = 10;\n    long decimal_part_count_remainder_remainder_min\
    \ = 1;\n    long decimal_part_count_remainder_remainder_step = 1;\n    long decimal_part_count_remainder_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \    long decimal_part_count_remainder_remainder_remainder_min = 1;\n    long\
    \ decimal_part_count_remainder_remainder_remainder_step = 1;\n    long decimal_part_count_remainder_remainder_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \    long decimal_part_count_remainder_remainder_remainder_min = 1;\n    long\
    \ decimal_part_count_remainder_remainder_remainder_step = 1;\n    long decimal_part_count_remainder_remainder_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \    long decimal_part_count_remainder_remainder_remainder_min = 1;\n    long\
    \ decimal_part_count_remainder_remainder_remainder_step = 1;\n    long decimal_part_count_remainder_remainder_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \    long decimal_part_count_remainder_remainder_remainder_min = 1;\n    long\
    \ decimal_part_count_remainder_remainder_remainder_step = 1;\n    long decimal_part_count_remainder_remainder_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \    long decimal_part_count_remainder_remainder_remainder_min = 1;\n    long\
    \ decimal_part_count_remainder_remainder_remainder_step = 1;\n    long decimal_part_count_remainder_remainder_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \    long decimal_part_count_remainder_remainder_remainder_min = 1;\n    long\
    \ decimal_part_count_remainder_remainder_remainder_step = 1;\n    long decimal_part_count_remainder_remainder_remainder_remainder\
    \ = 0;\n    long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \    long decimal_part_count_remainder_remainder_remainder_min = 1;\n    \n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprnt4g0p.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpprnt4g0p.cpp:27:10: error: redeclaration of \u2018long int decimal_part_count_remainder_remainder_remainder_max\u2019\
    \n   27 |     long decimal_part_count_remainder_remainder_remainder_max = 10;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpprnt4g0p.cpp:23:10:\
    \ note: \u2018long int decimal_part_count_remainder_remainder_remainder_max\u2019\
    \ previously declared here\n   23 |     long decimal_part_count_remainder_remainder_remainder_max\
    \ = 10;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpprnt4g0p.cpp:28:10: error: redeclaration of \u2018long int decimal_part_count_remainder_remainder_remainder_min\u2019\
    \n   28 |     long decimal_part_count_remainder_remainder_remainder_min = 1;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpprnt4g0p.cpp:24:10:\
    \ note: \u2018long int decimal_part_count_remainder_remainder_remainder_min\u2019\
    \ previously declared here\n   24 |     long decimal_part_count_remainder_remainder_remainder_min\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpprnt4g0p.cpp:29:10: error: redeclaration of \u2018long int decimal_part_count_remainder_remainder_remainder_step\u2019\
    \n   29 |     long decimal_part_count_remainder_remainder_remainder_step = 1;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpprnt4g0p.cpp:25:10:\
    \ note: \u2018long int decimal_part_count_remainder_remainder_remainder_step\u2019\
    \ previously declared here\n   25 |     long decimal_part_count_remainder_remainder_remainder_step\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpprnt4g0p.cpp:30:10: error: redeclaration of \u2018long int decimal_part_count_remainder_remainder_remainder_remainder\u2019\
    \n   30 |     long decimal_part_count_remainder_remainder_remainder_remainder\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpprnt4g0p.cpp:26:10: note: \u2018long int decimal_part_count_remainder_remainder_remainder_remainder\u2019\
    \ prev"
  stdout: ''
  timestamp: 1660086368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = decimal_part * 100;\n    return remainder;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpifh9jf7t: /tmp/tmpifh9jf7t.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp4ooxotdz: /tmp/tmp4ooxotdz.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    int decimal_part = 0;\n    while (number\
    \ >= 1) {\n        integer_part++;\n        number /= 10;\n    }\n    while (number\
    \ > 0) {\n        decimal_part++;\n        number /= 10;\n    }\n    return number\
    \ - integer_part * 10 / decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp0f3unre_: /tmp/tmp0f3unre_.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.0;\n    float\
    \ remainder = 0.0;\n    float temp = 0.0;\n    float temp_float = 0.0;\n    float\
    \ temp_float2 = 0.0;\n    float temp_float3 = 0.0;\n    float temp_float4 = 0.0;\n\
    \    float temp_float5 = 0.0;\n    float temp_float6 = 0.0;\n    float temp_float7\
    \ = 0.0;\n    float temp_float8 = 0.0;\n    float temp_float9 = 0.0;\n    float\
    \ temp_float10 = 0.0;\n    float temp_float11 = 0.0;\n    float temp_float12 =\
    \ 0.0;\n    float temp_float13 = 0.0;\n    float temp_float14 = 0.0;\n    float\
    \ temp_float15 = 0.0;\n    float temp_float16 = 0.0;\n    float temp_float17 =\
    \ 0.0;\n    float temp_float18 = 0.0;\n    float temp_float19 = 0.0;\n    float\
    \ temp_float20 = 0.0;\n    float temp_float21 = 0.0;\n    float temp_float22 =\
    \ 0.0;\n    float temp_float23 = 0.0;\n    float temp_float24 = 0.0;\n    float\
    \ temp_float25 = 0.0;\n    float temp_float26 = 0.0;\n    float temp_float27 =\
    \ 0.0;\n    float temp_float28 = 0.0;\n    float temp_float29 = 0.0;\n    float\
    \ temp_float30 = 0.0;\n    float temp_float31 = 0.0;\n    float temp_float32 =\
    \ 0.0;\n    float temp_float33 = 0.0;\n    float temp_float34 = 0.0;\n    float\
    \ temp_float35 = 0.0;\n    float temp_float36 = 0.0;\n    float temp_float37 =\
    \ 0.0;\n    float temp_float38 = 0.0;\n    float temp_float39 = 0.0;\n    float\
    \ temp_float40 = 0.0;\n    float temp_float41 = 0.0;\n    float temp_float42 =\
    \ 0.0;\n    float temp_float43 = 0.0;\n    float temp_float44 = 0.0;\n    float\
    \ temp_float45 = 0.0;\n    float temp_float46 = 0.0;\n    float temp_float47 =\
    \ 0.0;\n    float temp_float48 = 0.0;\n    float temp_float49 = 0.0;\n    float\
    \ temp_float50 = 0.0;\n    float temp_float51 = 0.0;\n    float temp_float52 =\
    \ 0.0;\n    float temp_float53 = 0.0;\n    float temp_float54 = 0.0;\n    float\
    \ temp_float55 = 0.0;\n    float temp_float56 = 0.0;\n    float temp_float57 =\
    \ 0.0;\n    float temp_float58 = 0.0;\n    float temp_float59 = 0.0;\n    float\
    \ temp_float60 = 0.\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9uwk6l_b.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp9uwk6l_b.cpp:72:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmp9uwk6l_b.cpp:72:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = number - int_part - decimal_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmpt0ev1qmh: /tmp/tmpt0ev1qmh.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    integer_part = floorf(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = number;\n    while(decimal_part >= 1) {\n        decimal_part /= 10;\n   \
    \     remainder *= 10;\n    }\n    return remainder;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp_3jzjapp: /tmp/tmp_3jzjapp.cpp:22: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    int decimal_part = 0;\n    float remainder\
    \ = 0;\n    float quotient = 0;\n    float temp = 0;\n    float temp2 = 0;\n \
    \   float temp3 = 0;\n    float temp4 = 0;\n    float temp5 = 0;\n    float temp6\
    \ = 0;\n    float temp7 = 0;\n    float temp8 = 0;\n    float temp9 = 0;\n   \
    \ float temp10 = 0;\n    float temp11 = 0;\n    float temp12 = 0;\n    float temp13\
    \ = 0;\n    float temp14 = 0;\n    float temp15 = 0;\n    float temp16 = 0;\n\
    \    float temp17 = 0;\n    float temp18 = 0;\n    float temp19 = 0;\n    float\
    \ temp20 = 0;\n    float temp21 = 0;\n    float temp22 = 0;\n    float temp23\
    \ = 0;\n    float temp24 = 0;\n    float temp25 = 0;\n    float temp26 = 0;\n\
    \    float temp27 = 0;\n    float temp28 = 0;\n    float temp29 = 0;\n    float\
    \ temp30 = 0;\n    float temp31 = 0;\n    float temp32 = 0;\n    float temp33\
    \ = 0;\n    float temp34 = 0;\n    float temp35 = 0;\n    float temp36 = 0;\n\
    \    float temp37 = 0;\n    float temp38 = 0;\n    float temp39 = 0;\n    float\
    \ temp40 = 0;\n    float temp41 = 0;\n    float temp42 = 0;\n    float temp43\
    \ = 0;\n    float temp44 = 0;\n    float temp45 = 0;\n    float temp46 = 0;\n\
    \    float temp47 = 0;\n    float temp48 = 0;\n    float temp49 = 0;\n    float\
    \ temp50 = 0;\n    float temp51 = 0;\n    float temp52 = 0;\n    float temp53\
    \ = 0;\n    float temp54 = 0;\n    float temp55 = 0;\n    float temp56 = 0;\n\
    \    float temp57 = 0;\n    float temp58 = 0;\n    float temp59 = 0;\n    float\
    \ temp60 = 0;\n    float temp61 = 0;\n    float temp62 = 0;\n    float temp63\
    \ = 0;\n    float temp64 = 0;\n    float temp65 = 0;\n    float temp66 = 0;\n\
    \    float temp67 = 0;\n    float temp68 = 0;\n    float temp69 = 0;\n    float\
    \ temp70 = 0;\n    float temp71 = 0;\n    float temp72 = 0;\n    float temp73\
    \ = 0;\n    float temp74 = 0;\n    float temp75 = 0;\n    float temp76 = 0;\n\
    \    float temp77 = 0;\n    float temp78 = 0;\n    float temp79 = 0;\n    float\
    \ temp80 = 0;\n    float temp81 = 0;\n    float temp82 = 0;\n    float temp\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaeu_zove.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpaeu_zove.cpp:95:1: error: expected initializer before \u2018}\u2019\
    \ token\n   95 | }\n      | ^\n/tmp/tmpaeu_zove.cpp:95:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part = floor(number);\n    float decimal_part =\
    \ number - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    return number\
    \ - decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtj723gu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdtj723gu.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdtj723gu.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part = number - floor(number);\n\
    \    decimal_part = fmodf(decimal_part, 1.0);\n    integer_part = floor(number);\n\
    \    return decimal_part + integer_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp1yvytas9: /tmp/tmp1yvytas9.cpp:16: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float temp;\n    int decimal_places = 1;\n    int decimal_digits;\n\
    \    temp = number;\n    decimal_digits = 1;\n    while (temp != 0) {\n      \
    \  temp = temp / 10;\n        decimal_digits++;\n    }\n    temp = number;\n \
    \   decimal_places = 1;\n    while (temp != 0) {\n        temp = temp / 10;\n\
    \        decimal_places++;\n    }\n    integer_part = number;\n    remainder =\
    \ number;\n    quotient = integer_part;\n    while (quotient != 0) {\n       \
    \ temp = quotient / 10;\n        integer_part = integer_part * 10 + temp;\n  \
    \      remainder = remainder * 10 - temp;\n        quotient = quotient % 10;\n\
    \    }\n    decimal_part = remainder;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcfhqbzl6.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpcfhqbzl6.cpp:34:29: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   34 |         quotient\
    \ = quotient % 10;\n      |                    ~~~~~~~~ ^ ~~\n      |        \
    \            |          |\n      |                    float      int\n"
  stdout: ''
  timestamp: 1660086368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floorf(number);\n\
    \    integer_part = floorf(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.f;\n    float\
    \ remainder = 0.f;\n    float quotient = 0.f;\n    float quotient_remainder =\
    \ 0.f;\n    float quotient_quotient = 0.f;\n    float quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n    float quotient_quotient_quotient_quotient_quotient = 0.f;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.f;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12rby9nu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp12rby9nu.cpp:20:11: error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   20 |     float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:21:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   21 |     float quotient_quotient_quotient_quotient_quotient = 0.f;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:22:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   22 |     float quotient_quotient_quotient_quotient_remainder = 0.f;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:23:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   23 |     float quotient_quotient_quotient_quotient_quotient = 0.f;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.f;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12rby9nu.cpp:24:11:\
    \ error: red"
  stdout: ''
  timestamp: 1660086366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp82;\n    float temp83;\n    float temp84;\n    float temp85;\n\
    \    float temp86\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjz68ait.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmptjz68ait.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmptjz68ait.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part;\n    float trunc_number\
    \ = number;\n    float trunc_number_dec = 0.0;\n    float trunc_number_dec_int\
    \ = 0.0;\n    float trunc_number_dec_frac = 0.0;\n    float trunc_number_dec_int2\
    \ = 0.0;\n    float trunc_number_dec_int3 = 0.0;\n    float trunc_number_dec_int4\
    \ = 0.0;\n    float trunc_number_dec_int5 = 0.0;\n    float trunc_number_dec_int6\
    \ = 0.0;\n    float trunc_number_dec_int7 = 0.0;\n    float trunc_number_dec_int8\
    \ = 0.0;\n    float trunc_number_dec_int9 = 0.0;\n    float trunc_number_dec_int10\
    \ = 0.0;\n    float trunc_number_dec_int11 = 0.0;\n    float trunc_number_dec_int12\
    \ = 0.0;\n    float trunc_number_dec_int13 = 0.0;\n    float trunc_number_dec_int14\
    \ = 0.0;\n    float trunc_number_dec_int15 = 0.0;\n    float trunc_number_dec_int16\
    \ = 0.0;\n    float trunc_number_dec_int17 = 0.0;\n    float trunc_number_dec_int18\
    \ = 0.0;\n    float trunc_number_dec_int19 = 0.0;\n    float trunc_number_dec_int20\
    \ = 0.0;\n    float trunc_number_dec_int21 = 0.0;\n    float trunc_number_dec_int22\
    \ = 0.0;\n    float trunc_number_dec_int23 = 0.0;\n    float trunc_number_dec_int24\
    \ = 0.0;\n    float trunc_number_dec_int25 = 0.0;\n    float trunc_number_dec_int26\
    \ = 0.0;\n    float trunc_number_dec_int27 = 0.0;\n    float trunc_number_dec_int28\
    \ = 0.0;\n    float trunc_number_dec_int29 = 0.0;\n    float trunc_number_dec_int30\
    \ = 0.0;\n    float trunc_number_dec_int31 = 0.0;\n    float trunc_number_dec_int32\
    \ = 0.0;\n    float trunc_number_dec_int33 = 0.0;\n    float trunc_number_dec_int34\
    \ = 0.0;\n    float trunc_number_dec_int35 = 0.0;\n    float trunc_number_dec_int36\
    \ = 0.0;\n    float trunc_number_dec_int37 = 0.0;\n    float trunc_number_dec_int38\
    \ = 0.0;\n    float trunc_number_dec_int39 = 0.0;\n    float trunc_number_dec_int40\
    \ = 0.0;\n    float trunc_number_dec_int41 = 0.0;\n    float trunc_number_dec_int42\
    \ = 0.0;\n    float trunc_number_dec_int\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshe6ox8o.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpshe6ox8o.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmpshe6ox8o.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpz31vag_k: /tmp/tmpz31vag_k.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part * pow(10, floor(log10(number)));\n    return\
    \ remainder;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpi6llcqu4: /tmp/tmpi6llcqu4.cpp:20: int main(): Assertion `candidate((123.0))
    == (0.0)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long int integer_part = (long int)number;\n    long int decimal_part\
    \ = number - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpvlhq3g2a: /tmp/tmpvlhq3g2a.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int int_part;\n    float decimal_part = number - int_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmprowuq4lt: /tmp/tmprowuq4lt.cpp:14: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part;\n    float remainder;\n\
    \    int_part = number;\n    decimal_part = number - int_part;\n    remainder\
    \ = decimal_part * 100;\n    return remainder;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpifh9jf7t: /tmp/tmpifh9jf7t.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - truncate_number(number);\n\
    \    integer_part = floor(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660086366
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return decimal_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long decimal_part = modf(number, &number);\n    return number\
    \ - decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtj723gu.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpdtj723gu.cpp:8:38: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n    8 |     long decimal_part = modf(number, &number);\n      |\
    \                                      ^~~~~~~\n      |                      \
    \                |\n      |                                      float*\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdtj723gu.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660086359
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float temp1;\n    float temp2;\n    float temp3;\n    float\
    \ temp4;\n    float temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n\
    \    float temp9;\n    float temp10;\n    float temp11;\n    float temp12;\n \
    \   float temp13;\n    float temp14;\n    float temp15;\n    float temp16;\n \
    \   float temp17;\n    float temp18;\n    float temp19;\n    float temp20;\n \
    \   float temp21;\n    float temp22;\n    float temp23;\n    float temp24;\n \
    \   float temp25;\n    float temp26;\n    float temp27;\n    float temp28;\n \
    \   float temp29;\n    float temp30;\n    float temp31;\n    float temp32;\n \
    \   float temp33;\n    float temp34;\n    float temp35;\n    float temp36;\n \
    \   float temp37;\n    float temp38;\n    float temp39;\n    float temp40;\n \
    \   float temp41;\n    float temp42;\n    float temp43;\n    float temp44;\n \
    \   float temp45;\n    float temp46;\n    float temp47;\n    float temp48;\n \
    \   float temp49;\n    float temp50;\n    float temp51;\n    float temp52;\n \
    \   float temp53;\n    float temp54;\n    float temp55;\n    float temp56;\n \
    \   float temp57;\n    float temp58;\n    float temp59;\n    float temp60;\n \
    \   float temp61;\n    float temp62;\n    float temp63;\n    float temp64;\n \
    \   float temp65;\n    float temp66;\n    float temp67;\n    float temp68;\n \
    \   float temp69;\n    float temp70;\n    float temp71;\n    float temp72;\n \
    \   float temp73;\n    float temp74;\n    float temp75;\n    float temp76;\n \
    \   float temp77;\n    float temp78;\n    float temp79;\n    float temp80;\n \
    \   float temp81;\n    float temp82;\n    float temp83;\n    float temp84;\n \
    \   float temp85;\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpbvdp4o_8: /tmp/tmpbvdp4o_8.cpp:100: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part = number - floor(number);\n\
    \    integer_part = floor(number);\n    return decimal_part;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float temp;\n    float quotient;\n    float remainder_temp;\n    float quotient_temp;\n\
    \    float remainder_temp2;\n    float quotient_temp2;\n    float remainder_temp3;\n\
    \    float quotient_temp3;\n    float remainder_temp4;\n    float quotient_temp4;\n\
    \    float remainder_temp5;\n    float quotient_temp5;\n    float remainder_temp6;\n\
    \    float quotient_temp6;\n    float remainder_temp7;\n    float quotient_temp7;\n\
    \    float remainder_temp8;\n    float quotient_temp8;\n    float remainder_temp9;\n\
    \    float quotient_temp9;\n    float remainder_temp10;\n    float quotient_temp10;\n\
    \    float remainder_temp11;\n    float quotient_temp11;\n    float remainder_temp12;\n\
    \    float quotient_temp12;\n    float remainder_temp13;\n    float quotient_temp13;\n\
    \    float remainder_temp14;\n    float quotient_temp14;\n    float remainder_temp15;\n\
    \    float quotient_temp15;\n    float remainder_temp16;\n    float quotient_temp16;\n\
    \    float remainder_temp17;\n    float quotient_temp17;\n    float remainder_temp18;\n\
    \    float quotient_temp18;\n    float remainder_temp19;\n    float quotient_temp19;\n\
    \    float remainder_temp20;\n    float quotient_temp20;\n    float remainder_temp21;\n\
    \    float quotient_temp21;\n    float remainder_temp22;\n    float quotient_temp22;\n\
    \    float remainder_temp23;\n    float quotient_temp23;\n    float remainder_temp24;\n\
    \    float quotient_temp24;\n    float remainder_temp25;\n    float quotient_temp25;\n\
    \    float remainder_temp26;\n    float quotient_temp26;\n    float remainder_temp27;\n\
    \    float quotient_temp27;\n    float remainder_temp28;\n    float quotient_temp28;\n\
    \    float remainder_temp29;\n    float quotient_temp29;\n    float remainder_temp30;\n\
    \    float quotient_temp30;\n    float remainder_temp31;\n    float quotient_temp31;\n\
    \    float remainder_temp32;\n    float quotient_temp32;\n    float remainder_temp33;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmp8s8zt51h: /tmp/tmp8s8zt51h.cpp:81: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float int_part;\n    float decimal_part = number - int_part;\n\
    \    decimal_part = fmodf(decimal_part, 1);\n    return decimal_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    float quotient;\n    float temp;\n    float temp2;\n    float temp3;\n  \
    \  float temp4;\n    float temp5;\n    float temp6;\n    float temp7;\n    float\
    \ temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n    float temp12;\n\
    \    float temp13;\n    float temp14;\n    float temp15;\n    float temp16;\n\
    \    float temp17;\n    float temp18;\n    float temp19;\n    float temp20;\n\
    \    float temp21;\n    float temp22;\n    float temp23;\n    float temp24;\n\
    \    float temp25;\n    float temp26;\n    float temp27;\n    float temp28;\n\
    \    float temp29;\n    float temp30;\n    float temp31;\n    float temp32;\n\
    \    float temp33;\n    float temp34;\n    float temp35;\n    float temp36;\n\
    \    float temp37;\n    float temp38;\n    float temp39;\n    float temp40;\n\
    \    float temp41;\n    float temp42;\n    float temp43;\n    float temp44;\n\
    \    float temp45;\n    float temp46;\n    float temp47;\n    float temp48;\n\
    \    float temp49;\n    float temp50;\n    float temp51;\n    float temp52;\n\
    \    float temp53;\n    float temp54;\n    float temp55;\n    float temp56;\n\
    \    float temp57;\n    float temp58;\n    float temp59;\n    float temp60;\n\
    \    float temp61;\n    float temp62;\n    float temp63;\n    float temp64;\n\
    \    float temp65;\n    float temp66;\n    float temp67;\n    float temp68;\n\
    \    float temp69;\n    float temp70;\n    float temp71;\n    float temp72;\n\
    \    float temp73;\n    float temp74;\n    float temp75;\n    float temp76;\n\
    \    float temp77;\n    float temp78;\n    float temp79;\n    float temp80;\n\
    \    float temp81;\n    float temp82;\n    float temp83;\n    float temp84;\n\
    \    float temp85\n}\nint main() {\n    auto candidate = truncate_number;\n  \
    \  assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mud5dgr.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp_mud5dgr.cpp:97:1: error: expected initializer before \u2018}\u2019\
    \ token\n   97 | }\n      | ^\n/tmp/tmp_mud5dgr.cpp:97:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660086364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part - decimal_part;\n    return remainder;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmppp5atb1r: /tmp/tmppp5atb1r.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = number;\n    decimal_part = 0.0;\n    remainder = number;\n\
    \    while (integer_part >= 1) {\n        integer_part = integer_part / 10;\n\
    \        decimal_part = decimal_part + remainder * 0.1;\n        remainder = remainder\
    \ - integer_part * 10;\n    }\n    return decimal_part;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: Exception
  stderr: 'tmp6je8h59r: /tmp/tmp6je8h59r.cpp:23: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    long int_part = 0;\n    long decimal_part = 0;\n    long decimal_part_length\
    \ = 0;\n    long decimal_part_index = 0;\n    long decimal_part_index_length =\
    \ 0;\n    long decimal_part_index_count = 0;\n    long decimal_part_index_count_length\
    \ = 0;\n    long decimal_part_index_count_count = 0;\n    long decimal_part_index_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count = 0;\n    long decimal_part_index_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count = 0;\n    long decimal_part_index_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count = 0;\n\
    \    long decimal_part_index_count_count_count_count_count_count_length = 0;\n\
    \    long decimal_part_index_count_count_count_count_count_count_count_count =\
    \ 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n    long decimal_part_index_\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5_lfoyl.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpe5_lfoyl.cpp:34:10: error: redeclaration of \u2018long int decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\u2019\
    \n   34 |     long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe5_lfoyl.cpp:32:10: note: \u2018long int decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\u2019\
    \ previously declared here\n   32 |     long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe5_lfoyl.cpp:39:10: error: redeclaration of \u2018long int decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\u2019\
    \n   39 |     long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe5_lfoyl.cpp:37:10: note: \u2018long int decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\u2019\
    \ previously declared here\n   37 |     long decimal_part_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe5_lfoyl.cpp:40:10: error: redeclaration of \u2018long int decimal_part_index_count_count_count_cou"
  stdout: ''
  timestamp: 1660086368
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = (int) number;\n    float decimal_part = number\
    \ - integer_part;\n    return decimal_part;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086360
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number * 10 - integer_part * 10;\n    return remainder / decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpvh6ml605: /tmp/tmpvh6ml605.cpp:18: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660086362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    float integer_part;\n    float decimal_part;\n    float remainder;\n\
    \    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    remainder = number - integer_part;\n    return remainder;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660086364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\nfloat truncate_number(float\
    \ number) {\n    int integer_part = 0;\n    float decimal_part = 0.0;\n    float\
    \ remainder = 0.0;\n    float quotient = 0.0;\n    float quotient_remainder =\
    \ 0.0;\n    float quotient_quotient = 0.0;\n    float quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \ float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpms3lt_xi.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpms3lt_xi.cpp:20:11: error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   20 |     float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:21:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   21 |     float quotient_quotient_quotient_quotient_quotient = 0.0;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:22:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_remainder\u2019\
    \n   22 |     float quotient_quotient_quotient_quotient_remainder = 0.0;\n   \
    \   |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:18:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_remainder\u2019 previously\
    \ declared here\n   18 |     float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:23:11:\
    \ error: redeclaration of \u2018float quotient_quotient_quotient_quotient_quotient\u2019\
    \n   23 |     float quotient_quotient_quotient_quotient_quotient = 0.0;\n    \
    \  |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:19:11:\
    \ note: \u2018float quotient_quotient_quotient_quotient_quotient\u2019 previously\
    \ declared here\n   19 |     float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpms3lt_xi.cpp:24:11:\
    \ error: red"
  stdout: ''
  timestamp: 1660086359
