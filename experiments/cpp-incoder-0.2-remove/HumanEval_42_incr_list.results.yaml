language: cpp
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l) {\n        result.push_back(i + 1);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); ++i) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l.at(i)\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l) {\n        result.push_back(i + 1);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l) {\n        result.push_back(i + 1);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); ++i) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); ++i) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); ++i) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n    \
    \    result.push_back(sum);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4,\
    \ (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2,\
    \ (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4vfl5_31: /tmp/tmp4vfl5_31.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for(long i = 0; i < l.size(); i++) {\n        r.push_back(l[i] + 1);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for(long i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l) {\n        result.push_back(i + 1);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for(long i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < l.size(); i++) {\n        result.push_back(l[i]\
    \ + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); ++i) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); ++i) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l.at(i)\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); ++i) {\n        res.push_back(l.at(i)\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); ++i) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l.at(i)\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081045
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\nstd::vector<long> incr_list(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i = 0; i < l.size(); i++) {\n        ret.push_back(l[i]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6,\
    \ (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660081164
