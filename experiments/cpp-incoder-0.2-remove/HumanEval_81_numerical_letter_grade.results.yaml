language: cpp
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    float sum = 0;\n    for (float grade : grades) {\n      \
    \  sum += grade;\n    }\n    float average = sum / grades.size();\n    for (float\
    \ grade : grades) {\n        letter_grade.push_back(std::to_string(grade - average));\n\
    \    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfw26rx5p: /tmp/tmpfw26rx5p.cpp:37: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        }\n        else if(g > 2.7) {\n\
    \            letter_grades.push_back(\"A\");\n        }\n        else if(g > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        }\n        else if(g\
    \ > 2.0) {\n            letter_grades.push_back(\"B+\");\n        }\n        else\
    \ if(g > 1.7) {\n            letter_grades.push_back(\"B\");\n        }\n    \
    \    else if(g > 1.3) {\n            letter_grades.push_back(\"B-\");\n      \
    \  }\n        else if(g > 1.0) {\n            letter_grades.push_back(\"C+\");\n\
    \        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(g > 0.3) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(g > -0.7) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(g > -0.3) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5iv2cfrf: /tmp/tmp5iv2cfrf.cpp:70: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float grade : grades) {\n        if(grade >= 4.0 && grade\
    \ < 5.0) {\n            letter_grade.push_back(\"A+\");\n        } else if(grade\
    \ >= 3.7 && grade < 4.0) {\n            letter_grade.push_back(\"A\");\n     \
    \   } else if(grade >= 3.3 && grade < 3.7) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if(grade >= 3.0 && grade < 3.3) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if(grade >= 2.7 && grade < 3.0) {\n            letter_grade.push_back(\"\
    B\");\n        } else if(grade >= 2.3 && grade < 2.7) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grade >= 2.0 && grade < 2.3) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(grade >= 1.7 && grade < 2.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(grade >= 1.3 && grade < 1.7) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(grade >= 1.0 && grade < 1.3) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grade >= 0.7 && grade < 1.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else if(grade >= 0.0 && grade < 0.7) {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvlrd5wx0: /tmp/tmpvlrd5wx0.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g >= 4.0) {\n       \
    \     letter_grade.push_back(\"A+\");\n        } else if(g > 3.7) {\n        \
    \    letter_grade.push_back(\"A\");\n        } else if(g > 3.3) {\n          \
    \  letter_grade.push_back(\"A-\");\n        } else if(g > 3.0) {\n           \
    \ letter_grade.push_back(\"B+\");\n        } else if(g > 2.7) {\n            letter_grade.push_back(\"\
    B\");\n        } else if(g > 2.3) {\n            letter_grade.push_back(\"B-\"\
    );\n        } else if(g > 2.0) {\n            letter_grade.push_back(\"C+\");\n\
    \        } else if(g > 1.7) {\n            letter_grade.push_back(\"C\");\n  \
    \      } else if(g > 1.3) {\n            letter_grade.push_back(\"C-\");\n   \
    \     } else if(g > 1.0) {\n            letter_grade.push_back(\"D+\");\n    \
    \    } else if(g > 0.7) {\n            letter_grade.push_back(\"D\");\n      \
    \  } else if(g > 0.0) {\n            letter_grade.push_back(\"D-\");\n       \
    \ } else {\n            letter_grade.push_back(\"E\");\n        }\n    }\n   \
    \ return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgun9ad6a: /tmp/tmpgun9ad6a.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 3.7) {\n \
    \           letter_grades.push_back(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A\");\n        }\n        else\
    \ if(grades[i] >= 3.0) {\n            letter_grades.push_back(\"A-\");\n     \
    \   }\n        else if(grades[i] >= 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(grades[i] >= 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(grades[i] >= 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(grades[i] >= 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(grades[i] >= 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(grades[i] >= 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(grades[i] >= 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(grades[i] >= 0.3) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8heve7qn: /tmp/tmp8heve7qn.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139714
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    for(int i = 0; i < 12;\
    \ ++i) {\n        if(grades[i] >= 4.0 && grades[i] <= 5.0) {\n            letter_grade.push_back(\"\
    A+\");\n        } else if(grades[i] >= 3.7 && grades[i] <= 4.0) {\n          \
    \  letter_grade.push_back(\"A\");\n        } else if(grades[i] >= 3.3 && grades[i]\
    \ <= 3.7) {\n            letter_grade.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 3.0 && grades[i] <= 3.3) {\n            letter_grade.push_back(\"B+\");\n\
    \        } else if(grades[i] >= 2.7 && grades[i] <= 3.0) {\n            letter_grade.push_back(\"\
    B\");\n        } else if(grades[i] >= 2.3 && grades[i] <= 2.7) {\n           \
    \ letter_grade.push_back(\"B-\");\n        } else if(grades[i] >= 2.0 && grades[i]\
    \ <= 2.3) {\n            letter_grade.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7 && grades[i] <= 2.0) {\n            letter_grade.push_back(\"C\");\n\
    \        } else if(grades[i] >= 1.3 && grades[i] <= 1.7) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(grades[i] >= 1.0 && grades[i] <= 1.3) {\n          \
    \  letter_grade.push_back(\"D+\");\n        } else if(grades[i] >= 0.7 && grades[i]\
    \ <= 1.0) {\n            letter_grade.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 0.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"D-\");\n\
    \        } else {\n            letter_grade.push_back(\"E\");\n        }\n   \
    \ }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1anscxm_: /tmp/tmp1anscxm_.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        letter_grades.push_back(std::to_string(grade\
    \ > 3.7 ? \"A+\" : (grade > 3.3 ? \"A-\" : (grade > 3.0 ? \"B+\" : grade > 2.7\
    \ ? \"B\" : grade > 2.3 ? \"B-\" : grade > 2.0 ? \"C+\" : grade > 1.7 ? \"C\"\
    \ : grade > 1.3 ? \"C-\" : grade > 1.0 ? \"D+\" : grade > 0.7 ? \"D\" : grade\
    \ > 0.0 ? \"D-\" : \"E\")));\n    }\n    return letter_grades;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvlta_dwb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmpvlta_dwb.cpp:26:283:\
    \ error: no matching function for call to \u2018to_string(const char*)\u2019\n\
    \   26 |         letter_grades.push_back(std::to_string(grade > 3.7 ? \"A+\" :\
    \ (grade > 3.3 ? \"A-\" : (grade > 3.0 ? \"B+\" : grade > 2.7 ? \"B\" : grade\
    \ > 2.3 ? \"B-\" : grade > 2.0 ? \"C+\" : grade > 1.7 ? \"C\" : grade > 1.3 ?\
    \ \"C-\" : grade > 1.0 ? \"D+\" : grade > 0.7 ? \"D\" : grade > 0.0 ? \"D-\" :\
    \ \"E\")));\n      |                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                          ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvlta_dwb.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3: note:\
    \ candidate: \u2018std::string std::__cxx11::to_string(int)\u2019 <near match>\n\
    \ 6549 |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note:   conversion of argument 1 would be ill-formed:\n/tmp/tmpvlta_dwb.cpp:26:60:\
    \ error: invalid conversion from \u2018const char*\u2019 to \u2018int\u2019 [-fpermissive]\n\
    \   26 |         letter_grades.push_back(std::to_string(grade > 3.7 ? \"A+\" :\
    \ (grade > 3.3 ? \"A-\" : (grade > 3.0 ? \"B+\" : grade > 2.7 ? \"B\" : grade\
    \ > 2.3 ? \"B-\" : grade > 2.0 ? \"C+\" : grade > 1.7 ? \"C\" : grade > 1.3 ?\
    \ \"C-\" : grade > 1.0 ? \"D+\" : grade > 0.7 ? \"D\" : grade > 0.0 ? \"D-\" :\
    \ \"E\")"
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grade.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        } else if(grade >= 3.0)\
    \ {\n            letter_grade.push_back(\"B+\");\n        } else if(grade >= 2.7)\
    \ {\n            letter_grade.push_back(\"B\");\n        } else if(grade >= 2.3)\
    \ {\n            letter_grade.push_back(\"B-\");\n        } else if(grade >= 2.0)\
    \ {\n            letter_grade.push_back(\"C+\");\n        } else if(grade >= 1.7)\
    \ {\n            letter_grade.push_back(\"C\");\n        } else if(grade >= 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if(grade >= 1.0)\
    \ {\n            letter_grade.push_back(\"D+\");\n        } else if(grade >= 0.7)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else if(grade >= 0.0)\
    \ {\n            letter_grade.push_back(\"D-\");\n        } else {\n         \
    \   letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1zs36kv: /tmp/tmpp1zs36kv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        std::string letter_grade;\n\
    \        if(grade >= 4.0) {\n            letter_grade = \"A+\";\n        } else\
    \ if(grade > 3.7) {\n            letter_grade = \"A\";\n        } else if(grade\
    \ > 3.3) {\n            letter_grade = \"A-\";\n        } else if(grade > 3.0)\
    \ {\n            letter_grade = \"B+\";\n        } else if(grade > 2.7) {\n  \
    \          letter_grade = \"B\";\n        } else if(grade > 2.3) {\n         \
    \   letter_grade = \"B-\";\n        } else if(grade > 2.0) {\n            letter_grade\
    \ = \"C+\";\n        } else if(grade > 1.7) {\n            letter_grade = \"C\"\
    ;\n        } else if(grade > 1.3) {\n            letter_grade = \"C-\";\n    \
    \    } else if(grade > 1.0) {\n            letter_grade = \"D+\";\n        } else\
    \ if(grade > 0.7) {\n            letter_grade = \"D\";\n        } else if(grade\
    \ > 0.0) {\n            letter_grade = \"D-\";\n        } else {\n           \
    \ letter_grade = \"E\";\n        }\n        letter_grades.push_back(letter_grade);\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv7uxjp0r: /tmp/tmpv7uxjp0r.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    float sum = 0;\n    for\
    \ (float g : grades) {\n        sum += g;\n    }\n    float average = sum / grades.size();\n\
    \    float gpa = average;\n    float letter_grade;\n    if (gpa >= 4.0) {\n  \
    \      letter_grade = \"A+\";\n    } else if (gpa > 3.7) {\n        letter_grade\
    \ = \"A\";\n    } else if (gpa > 3.3) {\n        letter_grade = \"A-\";\n    }\
    \ else if (gpa > 3.0) {\n        letter_grade = \"B+\";\n    } else if (gpa >\
    \ 2.7) {\n        letter_grade = \"B\";\n    } else if (gpa > 2.3) {\n       \
    \ letter_grade = \"B-\";\n    } else if (gpa > 2.0) {\n        letter_grade =\
    \ \"C+\";\n    } else if (gpa > 1.7) {\n        letter_grade = \"C\";\n    } else\
    \ if (gpa > 1.3) {\n        letter_grade = \"C-\";\n    } else if (gpa > 1.0)\
    \ {\n        letter_grade = \"D+\";\n    } else if (gpa > 0.7) {\n        letter_grade\
    \ = \"D\";\n    } else if (gpa > 0.0) {\n        letter_grade = \"D-\";\n    }\
    \ else {\n        letter_grade = \"E\";\n    }\n    letter_grades.push_back(letter_grade);\n\
    \    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7sbvfy0h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmp7sbvfy0h.cpp:34:24:\
    \ error: cannot convert \u2018const char [3]\u2019 to \u2018float\u2019 in assignment\n\
    \   34 |         letter_grade = \"A+\";\n      |                        ^~~~\n\
    \      |                        |\n      |                        const char [3]\n\
    /tmp/tmp7sbvfy0h.cpp:36:24: error: cannot convert \u2018const char [2]\u2019 to\
    \ \u2018float\u2019 in assignment\n   36 |         letter_grade = \"A\";\n   \
    \   |                        ^~~\n      |                        |\n      |  \
    \                      const char [2]\n/tmp/tmp7sbvfy0h.cpp:38:24: error: cannot\
    \ convert \u2018const char [3]\u2019 to \u2018float\u2019 in assignment\n   38\
    \ |         letter_grade = \"A-\";\n      |                        ^~~~\n    \
    \  |                        |\n      |                        const char [3]\n\
    /tmp/tmp7sbvfy0h.cpp:40:24: error: cannot convert \u2018const char [3]\u2019 to\
    \ \u2018float\u2019 in assignment\n   40 |         letter_grade = \"B+\";\n  \
    \    |                        ^~~~\n      |                        |\n      |\
    \                        const char [3]\n/tmp/tmp7sbvfy0h.cpp:42:24: error: cannot\
    \ convert \u2018const char [2]\u2019 to \u2018float\u2019 in assignment\n   42\
    \ |         letter_grade = \"B\";\n      |                        ^~~\n      |\
    \                        |\n      |                        const char [2]\n/tmp/tmp7sbvfy0h.cpp:44:24:\
    \ error: cannot convert \u2018const char [3]\u2019 to \u2018float\u2019 in assignment\n\
    \   44 |         letter_grade = \"B-\";\n      |                        ^~~~\n\
    \      |                        |\n      |                        const char [3]\n\
    /tmp/tmp7sbvfy0h.cpp:46:24: error: cannot convert \u2018const char [3]\u2019 to\
    \ \u2018float\u2019 in assignment\n   46 |         letter_grade = \"C+\";\n  \
    \    |                        ^~~~\n      |                        |\n      |\
    \                        const char [3]\n/tmp/tmp7sbvfy0h.cpp:48:24: error: cannot\
    \ convert \u2018const char [2]\u2019 to \u2018float\u2019 in assignment\n   48\
    \ |         letter_grade = \"C\";\n      |              "
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsljngalk: /tmp/tmpsljngalk.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp482v57u8: /tmp/tmp482v57u8.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    float sum = 0;\n    for (float grade : grades) {\n      \
    \  sum += grade;\n    }\n    float average = sum / grades.size();\n    for (float\
    \ grade : grades) {\n        if (grade >= average) {\n            letter_grade.push_back(\"\
    A+\");\n        } else if (grade >= average - 0.2) {\n            letter_grade.push_back(\"\
    A\");\n        } else if (grade >= average - 0.1) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if (grade >= average + 0.1) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if (grade >= average + 0.2) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grade >= average + 0.3) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (grade >= average + 0.4) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (grade >= average + 0.5) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grade >= average + 0.6) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (grade >= average + 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (grade >= average + 0.8) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grade >= average + 0.9) {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpukf4i3o3: /tmp/tmpukf4i3o3.cpp:63: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"C+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"C\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"B-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B-\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"C\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"C-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C-\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > 0.6) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else if(g > 0.5) {\n           \
    \ letter_grades.push_back(\"D\");\n        } else if(g > 0.4) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(g > 0.3) {\n            letter_grades.push_back(\"D\"\
    );\n        } else if(g > 0.2) {\n            letter_grades.push_back(\"D\");\n\
    \        } else if(g > 0.1) {\n            letter_grades.push_back(\"D\");\n \
    \       } else if(g > 0.0) {\n            letter_grades.push_back(\"D\");\n  \
    \      } else if(g > 0.0) {\n            letter_grades.push_back(\"E\");\n   \
    \     } else {\n            letter_grades.push_back(\"F\");\n        }\n    }\n\
    \    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmps3zu4c02: /tmp/tmps3zu4c02.cpp:66: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"D+\");\n        }\n        else if(g > 2.7) {\n\
    \            letter_grades.push_back(\"D\");\n        }\n        else if(g > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        }\n        else if(g\
    \ > 1.0) {\n            letter_grades.push_back(\"C\");\n        }\n        else\
    \ if(g > 0.7) {\n            letter_grades.push_back(\"B\");\n        }\n    \
    \    else if(g > 0.3) {\n            letter_grades.push_back(\"B\");\n       \
    \ }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"A\");\n\
    \        }\n        else if(g > -0.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -0.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -0.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -3.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -2.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -3.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -2.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -3.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -2.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -3.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -2.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -1.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -3.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu6houm85.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmpu6houm85.cpp:109:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  109 | int main() {\n      |            ^\n/tmp/tmpu6houm85.cpp:117:1: error:\
    \ expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpu6houm85.cpp:23:76:\
    \ note: to match this \u2018{\u2019\n   23 | std::vector<std::string> numerical_letter_grade(std::vector<float>\
    \ grades) {\n      |                                                         \
    \                   ^\n/tmp/tmpu6houm85.cpp:117:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  117 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grade.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        } else if(grade >= 3.0)\
    \ {\n            letter_grade.push_back(\"B+\");\n        } else if(grade >= 2.7)\
    \ {\n            letter_grade.push_back(\"B\");\n        } else if(grade >= 2.3)\
    \ {\n            letter_grade.push_back(\"B-\");\n        } else if(grade >= 2.0)\
    \ {\n            letter_grade.push_back(\"C+\");\n        } else if(grade >= 1.7)\
    \ {\n            letter_grade.push_back(\"C\");\n        } else if(grade >= 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if(grade >= 1.0)\
    \ {\n            letter_grade.push_back(\"D+\");\n        } else if(grade >= 0.7)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else if(grade >= 0.0)\
    \ {\n            letter_grade.push_back(\"D-\");\n        } else {\n         \
    \   letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpev66mtkr: /tmp/tmpev66mtkr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"D-\");\n        } else if(g > -1.0) {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hmqngjb: /tmp/tmp1hmqngjb.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbldqyfk: /tmp/tmpnbldqyfk.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        }\n        else if(g > 2.7) {\n\
    \            letter_grades.push_back(\"A\");\n        }\n        else if(g > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        }\n        else if(g\
    \ > 2.0) {\n            letter_grades.push_back(\"B+\");\n        }\n        else\
    \ if(g > 1.7) {\n            letter_grades.push_back(\"B\");\n        }\n    \
    \    else if(g > 1.3) {\n            letter_grades.push_back(\"B-\");\n      \
    \  }\n        else if(g > 1.0) {\n            letter_grades.push_back(\"C+\");\n\
    \        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(g > 0.3) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(g > -0.7) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(g > -0.3) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5iv2cfrf: /tmp/tmp5iv2cfrf.cpp:70: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g < 3.0) {\n        \
    \    letter_grade.push_back(\"A+\");\n        } else if(g < 3.7) {\n         \
    \   letter_grade.push_back(\"A\");\n        } else if(g < 4.0) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(g < 4.7) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if(g < 5.0) {\n            letter_grade.push_back(\"B\"\
    );\n        } else if(g < 5.7) {\n            letter_grade.push_back(\"B-\");\n\
    \        } else if(g < 6.0) {\n            letter_grade.push_back(\"C+\");\n \
    \       } else if(g < 6.7) {\n            letter_grade.push_back(\"C\");\n   \
    \     } else if(g < 7.0) {\n            letter_grade.push_back(\"C-\");\n    \
    \    } else if(g < 7.7) {\n            letter_grade.push_back(\"D+\");\n     \
    \   } else if(g < 8.0) {\n            letter_grade.push_back(\"D\");\n       \
    \ } else if(g < 8.7) {\n            letter_grade.push_back(\"D-\");\n        }\
    \ else if(g < 9.0) {\n            letter_grade.push_back(\"E\");\n        } else\
    \ {\n            letter_grade.push_back(\"F\");\n        }\n    }\n    return\
    \ letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8fvs9exq: /tmp/tmp8fvs9exq.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 4.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grades.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grades.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw8v62zds: /tmp/tmpw8v62zds.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ for(float g : grades) {\n        if(g > 3.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g > 2.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > 2.3) {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else if(g > 2.0) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(g > 1.7) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(g > 1.3) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(g > 1.0) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(g > 0.3) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpaf5k5tyi: /tmp/tmpaf5k5tyi.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    float sum = 0;\n    for (float grade : grades) {\n      \
    \  sum += grade;\n    }\n    float average = sum / grades.size();\n    for (float\
    \ grade : grades) {\n        if (grade >= average) {\n            letter_grade.push_back(\"\
    A+\");\n        } else if (grade >= average - 0.2) {\n            letter_grade.push_back(\"\
    A\");\n        } else if (grade >= average - 0.1) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if (grade >= average - 0.05) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if (grade >= average - 0.02) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grade >= average - 0.01) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (grade >= average - 0.005) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (grade >= average - 0.002) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grade >= average - 0.001) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (grade >= average - 0.0001) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (grade >= average - 0.00005) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grade >= average - 0.00002) {\n            letter_grade.push_back(\"\
    D-\");\n        } else if (grade >= average - 0.00001) {\n            letter_grade.push_back(\"\
    E\");\n        } else {\n            letter_grade.push_back(\"F\");\n        }\n\
    \    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp650mc718: /tmp/tmp650mc718.cpp:65: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if(g > 3.7 &&\
    \ g < 3.3) {\n            letter_grades.push_back(\"A\");\n        } else if(g\
    \ > 3.3 && g < 3.0) {\n            letter_grades.push_back(\"A-\");\n        }\
    \ else if(g > 3.0 && g < 2.7) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if(g > 2.7 && g < 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(g > 2.3 && g < 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hhtxjgw: /tmp/tmp1hhtxjgw.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g > 3.0) {\n     \
    \       letter_grades.push_back(\"A+\");\n        } else if (g > 2.7) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (g > 2.3) {\n    \
    \        letter_grades.push_back(\"A-\");\n        } else if (g > 2.0) {\n   \
    \         letter_grades.push_back(\"B+\");\n        } else if (g > 1.7) {\n  \
    \          letter_grades.push_back(\"B\");\n        } else if (g > 1.3) {\n  \
    \          letter_grades.push_back(\"B-\");\n        } else if (g > 1.0) {\n \
    \           letter_grades.push_back(\"C+\");\n        } else if (g > 0.7) {\n\
    \            letter_grades.push_back(\"C\");\n        } else if (g > 0.3) {\n\
    \            letter_grades.push_back(\"C-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D+\");\n        } else if (g > -0.7) {\n\
    \            letter_grades.push_back(\"D\");\n        } else if (g > -0.3) {\n\
    \            letter_grades.push_back(\"D-\");\n        } else if (g > -0.0) {\n\
    \            letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_3uyhfsx: /tmp/tmp_3uyhfsx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxztf9ujr: /tmp/tmpxztf9ujr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        auto letter_grade =\
    \ std::to_string(grade);\n        letter_grades.push_back(letter_grade);\n   \
    \ }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0n4qvhyj: /tmp/tmp0n4qvhyj.cpp:33: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 4.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.9) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.7) {\n           \
    \ letter_grades.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 3.3) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.9) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 2.3) {\n          \
    \  letter_grades.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.9) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.7) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 1.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else if(grades[i] >= 0.0 && grades[i]\
    \ <= 0.7) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizmgwggq: /tmp/tmpizmgwggq.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g > 3.0) {\n     \
    \       letter_grades.push_back(\"A+\");\n        } else if (g > 2.7) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (g > 2.3) {\n    \
    \        letter_grades.push_back(\"A-\");\n        } else if (g > 2.0) {\n   \
    \         letter_grades.push_back(\"B+\");\n        } else if (g > 1.7) {\n  \
    \          letter_grades.push_back(\"B\");\n        } else if (g > 1.3) {\n  \
    \          letter_grades.push_back(\"B-\");\n        } else if (g > 1.0) {\n \
    \           letter_grades.push_back(\"C+\");\n        } else if (g > 0.7) {\n\
    \            letter_grades.push_back(\"C\");\n        } else if (g > 0.3) {\n\
    \            letter_grades.push_back(\"C-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D+\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3tj6eybr: /tmp/tmp3tj6eybr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbldqyfk: /tmp/tmpnbldqyfk.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        }\n        else if(g > 2.7) {\n\
    \            letter_grades.push_back(\"A\");\n        }\n        else if(g > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        }\n        else if(g\
    \ > 2.0) {\n            letter_grades.push_back(\"B+\");\n        }\n        else\
    \ if(g > 1.7) {\n            letter_grades.push_back(\"B\");\n        }\n    \
    \    else if(g > 1.3) {\n            letter_grades.push_back(\"B-\");\n      \
    \  }\n        else if(g > 1.0) {\n            letter_grades.push_back(\"C+\");\n\
    \        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(g > 0.3) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else {\n            letter_grades.push_back(\"D-\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpiw4c_wr0: /tmp/tmpiw4c_wr0.cpp:67: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsljngalk: /tmp/tmpsljngalk.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto &grade: grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade > 3.7) {\n\
    \            letter_grade.push_back(\"A\");\n        } else if(grade > 3.3) {\n\
    \            letter_grade.push_back(\"A-\");\n        } else if(grade > 3.0) {\n\
    \            letter_grade.push_back(\"B+\");\n        } else if(grade > 2.7) {\n\
    \            letter_grade.push_back(\"B\");\n        } else if(grade > 2.3) {\n\
    \            letter_grade.push_back(\"B-\");\n        } else if(grade > 2.0) {\n\
    \            letter_grade.push_back(\"C+\");\n        } else if(grade > 1.7) {\n\
    \            letter_grade.push_back(\"C\");\n        } else if(grade > 1.3) {\n\
    \            letter_grade.push_back(\"C-\");\n        } else if(grade > 1.0) {\n\
    \            letter_grade.push_back(\"D+\");\n        } else if(grade > 0.7) {\n\
    \            letter_grade.push_back(\"D\");\n        } else if(grade > 0.0) {\n\
    \            letter_grade.push_back(\"D-\");\n        } else {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxqkn_jvz: /tmp/tmpxqkn_jvz.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmptj5g3ulv: /tmp/tmptj5g3ulv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if(g > 3.7 &&\
    \ g < 3.3) {\n            letter_grades.push_back(\"A\");\n        } else if(g\
    \ > 3.3 && g < 3.0) {\n            letter_grades.push_back(\"A-\");\n        }\
    \ else if(g > 3.0 && g < 2.7) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if(g > 2.7 && g < 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(g > 2.3 && g < 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hhtxjgw: /tmp/tmp1hhtxjgw.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    float gpa = grades[4];\n\
    \    float min_gpa = grades[0];\n    float max_gpa = grades[grades.size() - 1];\n\
    \    float diff = max_gpa - min_gpa;\n    float gpa_diff = gpa - min_gpa;\n  \
    \  float gpa_diff2 = gpa_diff * gpa_diff;\n    float gpa_diff3 = gpa_diff2 * gpa_diff;\n\
    \    float gpa_diff4 = gpa_diff3 * gpa_diff;\n    float gpa_diff5 = gpa_diff4\
    \ * gpa_diff;\n    float gpa_diff6 = gpa_diff5 * gpa_diff;\n    float gpa_diff7\
    \ = gpa_diff6 * gpa_diff;\n    float gpa_diff8 = gpa_diff7 * gpa_diff;\n    float\
    \ gpa_diff9 = gpa_diff8 * gpa_diff;\n    float gpa_diff10 = gpa_diff9 * gpa_diff;\n\
    \    float gpa_diff11 = gpa_diff10 * gpa_diff;\n    float gpa_diff12 = gpa_diff11\
    \ * gpa_diff;\n    float gpa_diff13 = gpa_diff12 * gpa_diff;\n    float gpa_diff14\
    \ = gpa_diff13 * gpa_diff;\n    float gpa_diff15 = gpa_diff14 * gpa_diff;\n  \
    \  float gpa_diff16 = gpa_diff15 * gpa_diff;\n    float gpa_diff17 = gpa_diff16\
    \ * gpa_diff;\n    float gpa_diff18 = gpa_diff17 * gpa_diff;\n    float gpa_diff19\
    \ = gpa_diff18 * gpa_diff;\n    float gpa_diff20 = gpa_diff19 * gpa_diff;\n  \
    \  float gpa_diff21 = gpa_diff20 * gpa_diff;\n    float gpa_diff22 = gpa_diff21\
    \ * gpa_diff;\n    float gpa_diff23 = gpa_diff22 * gpa_diff;\n    float gpa_diff24\
    \ = gpa_diff23 * gpa_diff;\n    float gpa_diff25 = gpa_diff24 * gpa_diff;\n  \
    \  float gpa_diff26 = gpa_diff25 * gpa_diff;\n    float gpa_diff27 = gpa_diff26\
    \ * gpa_diff;\n    float gpa_diff28 = gpa_diff27 * gpa_diff;\n    float gpa_diff29\
    \ = gpa_diff28 * gpa_diff;\n    float \n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp71vi35em.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmp71vi35em.cpp:60:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   60 | }\n     \
    \ | ^\n/tmp/tmp71vi35em.cpp:60:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   60 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    for(int i = 0; i < 12;\
    \ i++) {\n        if(grades[i] >= 4.0 && grades[i] < 3.7) {\n            letter_grade.push_back(\"\
    A+\");\n        } else if(grades[i] >= 3.7 && grades[i] < 3.3) {\n           \
    \ letter_grade.push_back(\"A\");\n        } else if(grades[i] >= 3.3 && grades[i]\
    \ < 3.0) {\n            letter_grade.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 3.0 && grades[i] < 2.7) {\n            letter_grade.push_back(\"B+\");\n\
    \        } else if(grades[i] >= 2.7 && grades[i] < 2.3) {\n            letter_grade.push_back(\"\
    B\");\n        } else if(grades[i] >= 2.3 && grades[i] < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] < 1.7) {\n           \
    \ letter_grade.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ < 1.3) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] < 1.0) {\n            letter_grade.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] < 0.0) {\n           \
    \ letter_grade.push_back(\"D\");\n        } else {\n            letter_grade.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6m0ldbxs: /tmp/tmp6m0ldbxs.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(g > 3.7 && g <\
    \ 3.3) {\n            letter_grade.push_back(\"A\");\n        } else if(g > 3.3\
    \ && g < 3.0) {\n            letter_grade.push_back(\"A-\");\n        } else if(g\
    \ > 3.0 && g < 2.7) {\n            letter_grade.push_back(\"B+\");\n        }\
    \ else if(g > 2.7 && g < 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(g > 2.3 && g < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"D-\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvozhh9p7: /tmp/tmpvozhh9p7.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ for(auto &grade : grades) {\n        if(grade >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(grade > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(grade > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else if(grade > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(grade > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(grade > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(grade > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(grade > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(grade > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(grade > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(grade > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(grade > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpazmtv68p: /tmp/tmpazmtv68p.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxztf9ujr: /tmp/tmpxztf9ujr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0)\n          \
    \  letter_grade.push_back(\"A+\");\n        else if(g > 2.7)\n            letter_grade.push_back(\"\
    A\");\n        else if(g > 2.3)\n            letter_grade.push_back(\"A-\");\n\
    \        else if(g > 2.0)\n            letter_grade.push_back(\"B+\");\n     \
    \   else if(g > 1.7)\n            letter_grade.push_back(\"B\");\n        else\
    \ if(g > 1.3)\n            letter_grade.push_back(\"B-\");\n        else if(g\
    \ > 1.0)\n            letter_grade.push_back(\"C+\");\n        else if(g > 0.7)\n\
    \            letter_grade.push_back(\"C\");\n        else if(g > 0.3)\n      \
    \      letter_grade.push_back(\"C-\");\n        else if(g > 0.0)\n           \
    \ letter_grade.push_back(\"D+\");\n        else if(g > -0.3)\n            letter_grade.push_back(\"\
    D\");\n        else if(g > -0.7)\n            letter_grade.push_back(\"D-\");\n\
    \        else\n            letter_grade.push_back(\"E\");\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpklfnciv7: /tmp/tmpklfnciv7.cpp:57: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0 &&\
    \ grade <= 4.7) {\n            letter_grades.push_back(\"A+\");\n        } else\
    \ if(grade >= 3.7 && grade <= 4.0) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if(grade >= 3.3 && grade <= 3.7) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grade >= 3.0 && grade <= 3.3) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade >= 2.7 && grade <= 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade >= 2.3 && grade <= 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grade >= 2.0 && grade <= 2.3) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade >= 1.7 && grade <= 2.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade >= 1.3 && grade <= 1.7) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grade >= 1.0 && grade <= 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade >= 0.7 && grade <= 1.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(grade >= 0.0 && grade <= 0.7) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfy8xjyy9: /tmp/tmpfy8xjyy9.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    float gpa = average * 4;\n    float gpa_1 = average\
    \ * 3.7;\n    float gpa_2 = average * 3.3;\n    float gpa_3 = average * 3;\n \
    \   float gpa_4 = average * 2.7;\n    float gpa_5 = average * 2.3;\n    float\
    \ gpa_6 = average * 2;\n    float gpa_7 = average * 1.7;\n    float gpa_8 = average\
    \ * 1.3;\n    float gpa_9 = average * 1;\n    float gpa_10 = average * 0.7;\n\
    \    float gpa_11 = average * 0;\n    float gpa_12 = average * 0;\n    float gpa_13\
    \ = average * 0;\n    float gpa_14 = average * 0;\n    float gpa_15 = average\
    \ * 0;\n    float gpa_16 = average * 0;\n    float gpa_17 = average * 0;\n   \
    \ float gpa_18 = average * 0;\n    float gpa_19 = average * 0;\n    float gpa_20\
    \ = average * 0;\n    float gpa_21 = average * 0;\n    float gpa_22 = average\
    \ * 0;\n    float gpa_23 = average * 0;\n    float gpa_24 = average * 0;\n   \
    \ float gpa_25 = average * 0;\n    float gpa_26 = average * 0;\n    float gpa_27\
    \ = average * 0;\n    float gpa_28 = average * 0;\n    float gpa_29 = average\
    \ * 0;\n    float gpa_30 = average * 0;\n    float gpa_31 = average * 0;\n   \
    \ float gpa_32 = average * 0;\n    float gpa_33 = average * 0;\n    float gpa_34\
    \ = average * 0;\n    float gpa_35 = average * 0;\n    float gpa_36 = average\
    \ * 0;\n    float gpa_37 = average * 0;\n    float gpa_38 = average * 0;\n   \
    \ float gpa_39 = average * 0;\n    float gpa_40 = average * 0;\n    float gpa_41\
    \ = average * 0;\n    float gpa_42 = average * 0;\n    float gpa_43 = average\
    \ * 0;\n    float gpa_44 = average * 0;\n    float gpa_45 = average * 0;\n   \
    \ float gpa_46 = average * 0;\n    float gpa_47\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps9quoj8s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmps9quoj8s.cpp:79:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   79 | }\n      | ^\n\
    /tmp/tmps9quoj8s.cpp:79:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   79 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ for(float g : grades) {\n        if(g > 3.7) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g > 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > 3) {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else if(g > 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(g > 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(g > 2) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(g > 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(g > 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(g > 1) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(g > 0) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else {\n            letter_grades.push_back(\"D-\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpys1q3vqu: /tmp/tmpys1q3vqu.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() % 2 == 0);\n    for (int i = 0; i <\
    \ grades.size(); i += 2) {\n        letter_grades.push_back(std::to_string(grades[i])\
    \ + \"+\");\n    }\n    for (int i = grades.size(); i > 0; i -= 2) {\n       \
    \ letter_grades.push_back(std::to_string(grades[i]) + \"-\");\n    }\n    letter_grades.push_back(std::to_string(grades[0])\
    \ + \"-\");\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyjkmbtcn: /tmp/tmpyjkmbtcn.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() % 2 ==
    0'' failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto &grade: grades) {\n        if(grade >= 4.0 && grade\
    \ < 3.7) {\n            letter_grade.push_back(\"A+\");\n        } else if(grade\
    \ >= 3.7 && grade < 3.3) {\n            letter_grade.push_back(\"A\");\n     \
    \   } else if(grade >= 3.3 && grade < 3.0) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if(grade >= 3.0 && grade < 2.7) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if(grade >= 2.7 && grade < 2.3) {\n            letter_grade.push_back(\"\
    B\");\n        } else if(grade >= 2.3 && grade < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grade >= 2.0 && grade < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(grade >= 1.7 && grade < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(grade >= 1.3 && grade < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(grade >= 1.0 && grade < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grade >= 0.7 && grade < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"D-\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnxcaq5xv: /tmp/tmpnxcaq5xv.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139714
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        letter_grades.push_back(std::to_string((int)g));\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpobvtpq7a: /tmp/tmpobvtpq7a.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        }\n        else if(g > 2.7) {\n\
    \            letter_grades.push_back(\"A\");\n        }\n        else if(g > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        }\n        else if(g\
    \ > 2.0) {\n            letter_grades.push_back(\"B+\");\n        }\n        else\
    \ if(g > 1.7) {\n            letter_grades.push_back(\"B\");\n        }\n    \
    \    else if(g > 1.3) {\n            letter_grades.push_back(\"B-\");\n      \
    \  }\n        else if(g > 1.0) {\n            letter_grades.push_back(\"C+\");\n\
    \        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(g > 0.3) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    E\");\n        }\n        else {\n            letter_grades.push_back(\"F\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpps_ixhg1: /tmp/tmpps_ixhg1.cpp:73: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_tfibg6v: /tmp/tmp_tfibg6v.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    \n    // Write your code here\n    \n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy4h67w_b: /tmp/tmpy4h67w_b.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grade.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grade.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grade.push_back(\"D\");\n        } else {\n            letter_grade.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc5q2wh80: /tmp/tmpc5q2wh80.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for (float g : grades) {\n        if (g >= 4.0 && g < 5.0)\
    \ {\n            letter_grade.push_back(\"A+\");\n        } else if (g >= 3.7\
    \ && g < 4.0) {\n            letter_grade.push_back(\"A\");\n        } else if\
    \ (g >= 3.3 && g < 3.7) {\n            letter_grade.push_back(\"A-\");\n     \
    \   } else if (g >= 3.0 && g < 3.3) {\n            letter_grade.push_back(\"B+\"\
    );\n        } else if (g >= 2.7 && g < 3.0) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (g >= 2.3 && g < 2.7) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (g >= 2.0 && g < 2.3) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (g >= 1.7 && g < 2.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (g >= 1.3 && g < 1.7) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (g >= 1.0 && g < 1.3) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (g >= 0.7 && g < 1.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (g >= 0.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc_susb52: /tmp/tmpc_susb52.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade > 3.7) {\n\
    \            letter_grade.push_back(\"A\");\n        } else if(grade > 3.3) {\n\
    \            letter_grade.push_back(\"A-\");\n        } else if(grade > 3.0) {\n\
    \            letter_grade.push_back(\"B+\");\n        } else if(grade > 2.7) {\n\
    \            letter_grade.push_back(\"B\");\n        } else if(grade > 2.3) {\n\
    \            letter_grade.push_back(\"B-\");\n        } else if(grade > 2.0) {\n\
    \            letter_grade.push_back(\"C+\");\n        } else if(grade > 1.7) {\n\
    \            letter_grade.push_back(\"C\");\n        } else if(grade > 1.3) {\n\
    \            letter_grade.push_back(\"C-\");\n        } else if(grade > 1.0) {\n\
    \            letter_grade.push_back(\"D+\");\n        } else if(grade > 0.7) {\n\
    \            letter_grade.push_back(\"D\");\n        } else if(grade > 0.0) {\n\
    \            letter_grade.push_back(\"D-\");\n        } else {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8vi5elwi: /tmp/tmp8vi5elwi.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"C+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"C\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"B-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B-\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"C\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"C-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"D+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkt62mvfx: /tmp/tmpkt62mvfx.cpp:52: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grade.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        } else if (grade > 3.0)\
    \ {\n            letter_grade.push_back(\"B+\");\n        } else if (grade > 2.7)\
    \ {\n            letter_grade.push_back(\"B\");\n        } else if (grade > 2.3)\
    \ {\n            letter_grade.push_back(\"B-\");\n        } else if (grade > 2.0)\
    \ {\n            letter_grade.push_back(\"C+\");\n        } else if (grade > 1.7)\
    \ {\n            letter_grade.push_back(\"C\");\n        } else if (grade > 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if (grade > 1.0)\
    \ {\n            letter_grade.push_back(\"D+\");\n        } else if (grade > 0.7)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else if (grade > 0.0)\
    \ {\n            letter_grade.push_back(\"D-\");\n        } else {\n         \
    \   letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7ihvwoek: /tmp/tmp7ihvwoek.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grade.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        } else if (grade > 3.0)\
    \ {\n            letter_grade.push_back(\"B+\");\n        } else if (grade > 2.7)\
    \ {\n            letter_grade.push_back(\"B\");\n        } else if (grade > 2.3)\
    \ {\n            letter_grade.push_back(\"B-\");\n        } else if (grade > 2.0)\
    \ {\n            letter_grade.push_back(\"C+\");\n        } else if (grade > 1.7)\
    \ {\n            letter_grade.push_back(\"C\");\n        } else if (grade > 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if (grade > 1.0)\
    \ {\n            letter_grade.push_back(\"D+\");\n        } else if (grade > 0.7)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else if (grade > 0.0)\
    \ {\n            letter_grade.push_back(\"D-\");\n        } else {\n         \
    \   letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7ihvwoek: /tmp/tmp7ihvwoek.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpi5ahlv4x: /tmp/tmpi5ahlv4x.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_tfibg6v: /tmp/tmp_tfibg6v.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grade.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grade.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grade.push_back(\"D\");\n        } else {\n            letter_grade.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc5q2wh80: /tmp/tmpc5q2wh80.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(g > 3.7 && g <\
    \ 3.3) {\n            letter_grade.push_back(\"A\");\n        } else if(g > 3.3\
    \ && g < 3.0) {\n            letter_grade.push_back(\"A-\");\n        } else if(g\
    \ > 3.0 && g < 2.7) {\n            letter_grade.push_back(\"B+\");\n        }\
    \ else if(g > 2.7 && g < 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(g > 2.3 && g < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"D-\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvozhh9p7: /tmp/tmpvozhh9p7.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0) {\n        \
    \    letter_grade.push_back(\"A+\");\n        } else if(g > 2.7) {\n         \
    \   letter_grade.push_back(\"A\");\n        } else if(g > 2.3) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(g > 2.0) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if(g > 1.7) {\n            letter_grade.push_back(\"B\"\
    );\n        } else if(g > 1.3) {\n            letter_grade.push_back(\"B-\");\n\
    \        } else if(g > 1.0) {\n            letter_grade.push_back(\"C+\");\n \
    \       } else if(g > 0.7) {\n            letter_grade.push_back(\"C\");\n   \
    \     } else if(g > 0.3) {\n            letter_grade.push_back(\"C-\");\n    \
    \    } else if(g > 0.0) {\n            letter_grade.push_back(\"D+\");\n     \
    \   } else if(g > -0.7) {\n            letter_grade.push_back(\"D\");\n      \
    \  } else if(g > -0.3) {\n            letter_grade.push_back(\"D-\");\n      \
    \  } else if(g > -0.0) {\n            letter_grade.push_back(\"E\");\n       \
    \ } else {\n            letter_grade.push_back(\"F\");\n        }\n    }\n   \
    \ return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcotwiweb: /tmp/tmpcotwiweb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(g > 3.7 && g <\
    \ 3.3) {\n            letter_grade.push_back(\"A\");\n        } else if(g > 3.3\
    \ && g < 3.0) {\n            letter_grade.push_back(\"A-\");\n        } else if(g\
    \ > 3.0 && g < 2.7) {\n            letter_grade.push_back(\"B+\");\n        }\
    \ else if(g > 2.7 && g < 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(g > 2.3 && g < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"D-\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvozhh9p7: /tmp/tmpvozhh9p7.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0 &&\
    \ grade <= 4.7) {\n            letter_grades.push_back(\"A+\");\n        } else\
    \ if(grade > 3.7 && grade <= 4.0) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if(grade > 3.3 && grade <= 3.7) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grade > 3.0 && grade <= 3.3) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade > 2.7 && grade <= 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade > 2.3 && grade <= 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grade > 2.0 && grade <= 2.3) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade > 1.7 && grade <= 2.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade > 1.3 && grade <= 1.7) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grade > 1.0 && grade <= 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade > 0.7 && grade <= 1.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(grade > 0.0 && grade <= 0.7) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmps8k0hfpk: /tmp/tmps8k0hfpk.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g > 3.0) {\n     \
    \       letter_grades.push_back(\"A+\");\n        } else if (g > 2.7) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (g > 2.3) {\n    \
    \        letter_grades.push_back(\"A-\");\n        } else if (g > 2.0) {\n   \
    \         letter_grades.push_back(\"B+\");\n        } else if (g > 1.7) {\n  \
    \          letter_grades.push_back(\"B\");\n        } else if (g > 1.3) {\n  \
    \          letter_grades.push_back(\"B-\");\n        } else if (g > 1.0) {\n \
    \           letter_grades.push_back(\"C+\");\n        } else if (g > 0.7) {\n\
    \            letter_grades.push_back(\"C\");\n        } else if (g > 0.3) {\n\
    \            letter_grades.push_back(\"C-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D+\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpowjpgxvv: /tmp/tmpowjpgxvv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g > 3.0) {\n     \
    \       letter_grades.push_back(\"A+\");\n        } else if (g > 2.7) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (g > 2.3) {\n    \
    \        letter_grades.push_back(\"A-\");\n        } else if (g > 2.0) {\n   \
    \         letter_grades.push_back(\"B+\");\n        } else if (g > 1.7) {\n  \
    \          letter_grades.push_back(\"B\");\n        } else if (g > 1.3) {\n  \
    \          letter_grades.push_back(\"B-\");\n        } else if (g > 1.0) {\n \
    \           letter_grades.push_back(\"C+\");\n        } else if (g > 0.7) {\n\
    \            letter_grades.push_back(\"C\");\n        } else if (g > 0.3) {\n\
    \            letter_grades.push_back(\"C-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D+\");\n        } else if (g > -0.7) {\n\
    \            letter_grades.push_back(\"D\");\n        } else if (g > -0.3) {\n\
    \            letter_grades.push_back(\"D-\");\n        } else if (g > -1.0) {\n\
    \            letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5x_pxxly: /tmp/tmp5x_pxxly.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    for(size_t i = 0; i <\
    \ grades.size(); i++) {\n        float gpa = grades[i];\n        float letterGrade;\n\
    \        if(gpa > 3.0) {\n            letterGrade = 'A+';\n        } else if(gpa\
    \ > 2.7) {\n            letterGrade = 'A';\n        } else if(gpa > 2.3) {\n \
    \           letterGrade = 'A-';\n        } else if(gpa > 2.0) {\n            letterGrade\
    \ = 'B+';\n        } else if(gpa > 1.7) {\n            letterGrade = 'B';\n  \
    \      } else if(gpa > 1.3) {\n            letterGrade = 'B-';\n        } else\
    \ if(gpa > 1.0) {\n            letterGrade = 'C+';\n        } else if(gpa > 0.7)\
    \ {\n            letterGrade = 'C';\n        } else if(gpa > 0.3) {\n        \
    \    letterGrade = 'C-';\n        } else if(gpa > 0.0) {\n            letterGrade\
    \ = 'D+';\n        } else if(gpa > 0.0) {\n            letterGrade = 'D';\n  \
    \      } else if(gpa > 0.0) {\n            letterGrade = 'D-';\n        } else\
    \ {\n            letterGrade = 'E';\n        }\n        letter_grades.push_back(letterGrade);\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvrfcd1oi.cpp:30:27: warning: multi-character character constant\
    \ [-Wmultichar]\n   30 |             letterGrade = 'A+';\n      |            \
    \               ^~~~\n/tmp/tmpvrfcd1oi.cpp:34:27: warning: multi-character character\
    \ constant [-Wmultichar]\n   34 |             letterGrade = 'A-';\n      |   \
    \                        ^~~~\n/tmp/tmpvrfcd1oi.cpp:36:27: warning: multi-character\
    \ character constant [-Wmultichar]\n   36 |             letterGrade = 'B+';\n\
    \      |                           ^~~~\n/tmp/tmpvrfcd1oi.cpp:40:27: warning:\
    \ multi-character character constant [-Wmultichar]\n   40 |             letterGrade\
    \ = 'B-';\n      |                           ^~~~\n/tmp/tmpvrfcd1oi.cpp:42:27:\
    \ warning: multi-character character constant [-Wmultichar]\n   42 |         \
    \    letterGrade = 'C+';\n      |                           ^~~~\n/tmp/tmpvrfcd1oi.cpp:46:27:\
    \ warning: multi-character character constant [-Wmultichar]\n   46 |         \
    \    letterGrade = 'C-';\n      |                           ^~~~\n/tmp/tmpvrfcd1oi.cpp:48:27:\
    \ warning: multi-character character constant [-Wmultichar]\n   48 |         \
    \    letterGrade = 'D+';\n      |                           ^~~~\n/tmp/tmpvrfcd1oi.cpp:52:27:\
    \ warning: multi-character character constant [-Wmultichar]\n   52 |         \
    \    letterGrade = 'D-';\n      |                           ^~~~\n/tmp/tmpvrfcd1oi.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > numerical_letter_grade(std::vector<float>)\u2019\
    :\n/tmp/tmpvrfcd1oi.cpp:56:44: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::push_back(float&)\u2019\n   56\
    \ |         letter_grades.push_back(letterGrade);\n      |                   \
    \                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrfcd1oi."
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else if(g > 0.0) {\n           \
    \ letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmptd2mx1un: /tmp/tmptd2mx1un.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grade.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        } else if (grade > 3.0)\
    \ {\n            letter_grade.push_back(\"B+\");\n        } else if (grade > 2.7)\
    \ {\n            letter_grade.push_back(\"B\");\n        } else if (grade > 2.3)\
    \ {\n            letter_grade.push_back(\"B-\");\n        } else if (grade > 2.0)\
    \ {\n            letter_grade.push_back(\"C+\");\n        } else if (grade > 1.7)\
    \ {\n            letter_grade.push_back(\"C\");\n        } else if (grade > 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if (grade > 1.0)\
    \ {\n            letter_grade.push_back(\"D+\");\n        } else if (grade > 0.7)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else if (grade > 0.0)\
    \ {\n            letter_grade.push_back(\"D-\");\n        } else {\n         \
    \   letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7ihvwoek: /tmp/tmp7ihvwoek.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(g > 3.7 && g <\
    \ 3.3) {\n            letter_grade.push_back(\"A\");\n        } else if(g > 3.3\
    \ && g < 3.0) {\n            letter_grade.push_back(\"A-\");\n        } else if(g\
    \ > 3.0 && g < 2.7) {\n            letter_grade.push_back(\"B+\");\n        }\
    \ else if(g > 2.7 && g < 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(g > 2.3 && g < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"D-\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvozhh9p7: /tmp/tmpvozhh9p7.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Write your code\
    \ here\n    std::vector<std::string> letter_grade;\n    for(int i=0;i<grades.size();i++){\n\
    \        if(grades[i]>3.0){\n            letter_grade.push_back(\"D+\");\n   \
    \     }\n        else if(grades[i]>2.7){\n            letter_grade.push_back(\"\
    D\");\n        }\n        else if(grades[i]>2.3){\n            letter_grade.push_back(\"\
    D-\");\n        }\n        else if(grades[i]>2.0){\n            letter_grade.push_back(\"\
    C+\");\n        }\n        else if(grades[i]>1.7){\n            letter_grade.push_back(\"\
    C\");\n        }\n        else if(grades[i]>1.3){\n            letter_grade.push_back(\"\
    C-\");\n        }\n        else if(grades[i]>1.0){\n            letter_grade.push_back(\"\
    B+\");\n        }\n        else if(grades[i]>0.7){\n            letter_grade.push_back(\"\
    B\");\n        }\n        else if(grades[i]>0.0){\n            letter_grade.push_back(\"\
    B-\");\n        }\n        else if(grades[i]>0.0){\n            letter_grade.push_back(\"\
    A+\");\n        }\n        else if(grades[i]>0.0){\n            letter_grade.push_back(\"\
    A\");\n        }\n        else if(grades[i]>0.0){\n            letter_grade.push_back(\"\
    A-\");\n        }\n        else if(grades[i]>0.0){\n            letter_grade.push_back(\"\
    F\");\n        }\n        else if(grades[i]>0.0){\n            letter_grade.push_back(\"\
    E\");\n        }\n        else{\n            letter_grade.push_back(\"F\");\n\
    \        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp34clwn7f: /tmp/tmp34clwn7f.cpp:77: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0 &&\
    \ grade < 5.0) {\n            letter_grades.push_back(\"A+\");\n        } else\
    \ if(grade >= 3.7 && grade < 4.0) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if(grade >= 3.3 && grade < 3.7) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grade >= 3.0 && grade < 3.3) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade >= 2.7 && grade < 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade >= 2.3 && grade < 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grade >= 2.0 && grade < 2.3) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade >= 1.7 && grade < 2.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade >= 1.3 && grade < 1.7) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grade >= 1.0 && grade < 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade >= 0.7 && grade < 1.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(grade >= 0.0 && grade < 0.7) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcwgl9st6: /tmp/tmpcwgl9st6.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"A+\");\n        } else if(grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A\");\n        } else if(grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 4.3) {\n            letter_grades.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 4.7) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ >= 5.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 5.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 5.7) {\n            letter_grades.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 6.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grades[i]\
    \ >= 6.3) {\n            letter_grades.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 6.7) {\n            letter_grades.push_back(\"D-\");\n        } else if(grades[i]\
    \ >= 7.0) {\n            letter_grades.push_back(\"E\");\n        } else {\n \
    \           letter_grades.push_back(\"F\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1f79nblx: /tmp/tmp1f79nblx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        letter_grades.push_back(std::to_string((int)g));\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpobvtpq7a: /tmp/tmpobvtpq7a.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade > 3.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 0.2)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > -0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > -0.2)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpn_0izrua: /tmp/tmpn_0izrua.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0) {\n            letter_grade.push_back(\"A+\");\n        } else if(grades[i]\
    \ >= 3.7) {\n            letter_grade.push_back(\"A\");\n        } else if(grades[i]\
    \ >= 3.3) {\n            letter_grade.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 3.0) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7) {\n            letter_grade.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 2.3) {\n            letter_grade.push_back(\"B-\");\n        } else if(grades[i]\
    \ >= 2.0) {\n            letter_grade.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3) {\n            letter_grade.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 1.0) {\n            letter_grade.push_back(\"D+\");\n        } else if(grades[i]\
    \ >= 0.7) {\n            letter_grade.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 0.0) {\n            letter_grade.push_back(\"D-\");\n        } else {\n \
    \           letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp85mn2hv2: /tmp/tmp85mn2hv2.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_tfibg6v: /tmp/tmp_tfibg6v.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"A+\");\n        }\n       \
    \ else if(grades[i] >= 3.3) {\n            letter_grades.push_back(\"A\");\n \
    \       }\n        else if(grades[i] >= 3.7) {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else if(grades[i] >= 4.0) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(grades[i] >= 4.3) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(grades[i] >= 4.7) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(grades[i] >= 5.0) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(grades[i] >= 5.3) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(grades[i] >= 5.7) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(grades[i] >= 6.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(grades[i] >= 6.3) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(grades[i] >= 6.7) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else if(grades[i] >= 7.0) {\n            letter_grades.push_back(\"\
    E\");\n        }\n        else {\n            letter_grades.push_back(\"F\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjjvqkyrm: /tmp/tmpjjvqkyrm.cpp:73: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp482v57u8: /tmp/tmp482v57u8.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grade.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        } else if (grade > 3.0)\
    \ {\n            letter_grade.push_back(\"B+\");\n        } else if (grade > 2.7)\
    \ {\n            letter_grade.push_back(\"B\");\n        } else if (grade > 2.3)\
    \ {\n            letter_grade.push_back(\"B-\");\n        } else if (grade > 2.0)\
    \ {\n            letter_grade.push_back(\"C+\");\n        } else if (grade > 1.7)\
    \ {\n            letter_grade.push_back(\"C\");\n        } else if (grade > 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if (grade > 1.0)\
    \ {\n            letter_grade.push_back(\"D+\");\n        } else if (grade > 0.7)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else if (grade > 0.0)\
    \ {\n            letter_grade.push_back(\"D-\");\n        } else {\n         \
    \   letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7ihvwoek: /tmp/tmp7ihvwoek.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    for(auto &grade : grades)\
    \ {\n        if(grade > 3.0) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grade > 2.7) {\n            letter_grade.push_back(\"A\");\n\
    \        } else if(grade > 2.3) {\n            letter_grade.push_back(\"A-\");\n\
    \        } else if(grade > 2.0) {\n            letter_grade.push_back(\"B+\");\n\
    \        } else if(grade > 1.7) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(grade > 1.3) {\n            letter_grade.push_back(\"B-\");\n\
    \        } else if(grade > 1.0) {\n            letter_grade.push_back(\"C+\");\n\
    \        } else if(grade > 0.7) {\n            letter_grade.push_back(\"C\");\n\
    \        } else if(grade > 0.2) {\n            letter_grade.push_back(\"C-\");\n\
    \        } else if(grade > 0.0) {\n            letter_grade.push_back(\"D+\");\n\
    \        } else if(grade > -0.2) {\n            letter_grade.push_back(\"D\");\n\
    \        } else if(grade > -0.7) {\n            letter_grade.push_back(\"D-\"\
    );\n        } else if(grade > -1.0) {\n            letter_grade.push_back(\"E\"\
    );\n        } else {\n            letter_grade.push_back(\"F\");\n        }\n\
    \    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqi389iml: /tmp/tmpqi389iml.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grade.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grade.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grade.push_back(\"D\");\n        } else {\n            letter_grade.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc5q2wh80: /tmp/tmpc5q2wh80.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Write your code\
    \ here\n    std::vector<std::string> letter_grades;\n    for(float g : grades)\
    \ {\n        if(g > 3.0)\n            letter_grades.push_back(\"A+\");\n     \
    \   else if(g > 2.7)\n            letter_grades.push_back(\"A\");\n        else\
    \ if(g > 2.3)\n            letter_grades.push_back(\"A-\");\n        else if(g\
    \ > 2.0)\n            letter_grades.push_back(\"B+\");\n        else if(g > 1.7)\n\
    \            letter_grades.push_back(\"B\");\n        else if(g > 1.3)\n     \
    \       letter_grades.push_back(\"B-\");\n        else if(g > 1.0)\n         \
    \   letter_grades.push_back(\"C+\");\n        else if(g > 0.7)\n            letter_grades.push_back(\"\
    C\");\n        else if(g > 0.3)\n            letter_grades.push_back(\"C-\");\n\
    \        else if(g > 0.0)\n            letter_grades.push_back(\"D+\");\n    \
    \    else if(g > -0.3)\n            letter_grades.push_back(\"D\");\n        else\
    \ if(g > -0.7)\n            letter_grades.push_back(\"D-\");\n        else\n \
    \           letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmhkp0gfi: /tmp/tmpmhkp0gfi.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9lcqb1er: /tmp/tmp9lcqb1er.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grade.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grade.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grade.push_back(\"D\");\n        } else {\n            letter_grade.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc5q2wh80: /tmp/tmpc5q2wh80.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    float sum = 0;\n    for (float g : grades) {\n        sum\
    \ += g;\n    }\n    float average = sum / grades.size();\n    for (float g : grades)\
    \ {\n        if (g > average) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if (g > average - 0.1) {\n            letter_grade.push_back(\"\
    A\");\n        } else if (g > average - 0.01) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if (g > average - 0.001) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if (g > average - 0.0001) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (g > average - 0.00001) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (g > average - 0.000001) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (g > average - 0.0000001) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (g > average - 0.00000001) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (g > average - 0.000000001) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (g > average - 0.0000000001) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (g > average - 0.00000000001) {\n            letter_grade.push_back(\"\
    D-\");\n        } else if (g > average - 0.000000000001) {\n            letter_grade.push_back(\"\
    E\");\n        } else {\n            letter_grade.push_back(\"F\");\n        }\n\
    \    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_gxc2vtx: /tmp/tmp_gxc2vtx.cpp:65: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grades[i] >= 2.7 && grades[i] <= 2.3) {\n          \
    \  letter_grades.push_back(\"B+\");\n        } else if(grades[i] >= 2.0 && grades[i]\
    \ <= 1.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"B-\");\n\
    \        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grades[i] >= 0.0 && grades[i] <= 0.0) {\n          \
    \  letter_grades.push_back(\"C\");\n        } else if(grades[i] >= 0.0) {\n  \
    \          letter_grades.push_back(\"D+\");\n        } else if(grades[i] >= 0.0)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else {\n         \
    \   letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1l8ytjvj: /tmp/tmp1l8ytjvj.cpp:52: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(g > 3.7 && g <\
    \ 3.3) {\n            letter_grade.push_back(\"A\");\n        } else if(g > 3.3\
    \ && g < 3.0) {\n            letter_grade.push_back(\"A-\");\n        } else if(g\
    \ > 3.0 && g < 2.7) {\n            letter_grade.push_back(\"B+\");\n        }\
    \ else if(g > 2.7 && g < 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(g > 2.3 && g < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"D-\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvozhh9p7: /tmp/tmpvozhh9p7.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grades.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grades.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp77vy66x0: /tmp/tmp77vy66x0.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ for(float grade : grades) {\n        if(grade > 3.7) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(grade > 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(grade > 3) {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else if(grade > 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(grade > 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(grade > 2) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(grade > 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(grade > 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(grade > 1) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(grade > 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(grade > 0.3) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(grade > 0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf7juzykp: /tmp/tmpf7juzykp.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    letter_grade.push_back(\"\
    A+\");\n    letter_grade.push_back(\"A\");\n    letter_grade.push_back(\"A-\"\
    );\n    letter_grade.push_back(\"B+\");\n    letter_grade.push_back(\"B\");\n\
    \    letter_grade.push_back(\"B-\");\n    letter_grade.push_back(\"C+\");\n  \
    \  letter_grade.push_back(\"C\");\n    letter_grade.push_back(\"C-\");\n    letter_grade.push_back(\"\
    D+\");\n    letter_grade.push_back(\"D\");\n    letter_grade.push_back(\"D-\"\
    );\n    letter_grade.push_back(\"E\");\n    return letter_grade;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3brdw6h3: /tmp/tmp3brdw6h3.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g >= 4.0 && g < 5.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if(g > 3.7 &&\
    \ g < 4.0) {\n            letter_grades.push_back(\"A\");\n        } else if(g\
    \ > 3.3 && g < 3.7) {\n            letter_grades.push_back(\"A-\");\n        }\
    \ else if(g > 3.0 && g < 3.3) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if(g > 2.7 && g < 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(g > 2.3 && g < 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 2.3) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 2.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.7) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 1.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(g > 0.0 && g < 0.7) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpjgu9ltxv: /tmp/tmpjgu9ltxv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuue97x01: /tmp/tmpuue97x01.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grades.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grades.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp77vy66x0: /tmp/tmp77vy66x0.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        letter_grades.push_back(std::to_string(grade));\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmplejaeeyf: /tmp/tmplejaeeyf.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g > 3.0) {\n     \
    \       letter_grades.push_back(\"A+\");\n        } else if (g > 2.7) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (g > 2.3) {\n    \
    \        letter_grades.push_back(\"A-\");\n        } else if (g > 2.0) {\n   \
    \         letter_grades.push_back(\"B+\");\n        } else if (g > 1.7) {\n  \
    \          letter_grades.push_back(\"B\");\n        } else if (g > 1.3) {\n  \
    \          letter_grades.push_back(\"B-\");\n        } else if (g > 1.0) {\n \
    \           letter_grades.push_back(\"C+\");\n        } else if (g > 0.7) {\n\
    \            letter_grades.push_back(\"C\");\n        } else if (g > 0.3) {\n\
    \            letter_grades.push_back(\"C-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D+\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3tj6eybr: /tmp/tmp3tj6eybr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        letter_grades.push_back(std::to_string(grade));\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmplxyrkv3m: /tmp/tmplxyrkv3m.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    float sum = 0;\n    for\
    \ (float grade : grades) {\n        sum += grade;\n    }\n    float average =\
    \ sum / grades.size();\n    for (float grade : grades) {\n        if (grade >=\
    \ average) {\n            letter_grade.push_back(\"A+\");\n        } else if (grade\
    \ >= average - 0.2) {\n            letter_grade.push_back(\"A\");\n        } else\
    \ if (grade >= average - 0.1) {\n            letter_grade.push_back(\"A-\");\n\
    \        } else if (grade >= average - 0.05) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if (grade >= average - 0.02) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grade >= average - 0.005) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (grade >= average - 0.001) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (grade >= average - 0.0001) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grade >= average - 0.00001) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (grade >= average - 0.000001) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (grade >= average - 0.0000001) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grade >= average - 0.00000001) {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbvl4cqzq: /tmp/tmpbvl4cqzq.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade > 3.0 && grade\
    \ < 3.7) {\n            letter_grades.push_back(\"A+\");\n        } else if(grade\
    \ > 3.7 && grade < 3.3) {\n            letter_grades.push_back(\"A\");\n     \
    \   } else if(grade > 3.3 && grade < 3.0) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grade > 3.0 && grade < 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade > 2.7 && grade < 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade > 2.3 && grade < 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grade > 2.0 && grade < 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade > 1.7 && grade < 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade > 1.3 && grade < 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grade > 1.0 && grade < 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade > 0.7 && grade < 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk0r2w2ur: /tmp/tmpk0r2w2ur.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9ikgt_c6: /tmp/tmp9ikgt_c6.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0) {\n        \
    \    letter_grade.push_back(\"A+\");\n        }\n        else if(g > 2.7) {\n\
    \            letter_grade.push_back(\"A\");\n        }\n        else if(g > 2.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        }\n        else if(g\
    \ > 2.0) {\n            letter_grade.push_back(\"B+\");\n        }\n        else\
    \ if(g > 1.7) {\n            letter_grade.push_back(\"B\");\n        }\n     \
    \   else if(g > 1.3) {\n            letter_grade.push_back(\"B-\");\n        }\n\
    \        else if(g > 1.0) {\n            letter_grade.push_back(\"C+\");\n   \
    \     }\n        else if(g > 0.7) {\n            letter_grade.push_back(\"C\"\
    );\n        }\n        else if(g > 0.3) {\n            letter_grade.push_back(\"\
    C-\");\n        }\n        else if(g > 0.0) {\n            letter_grade.push_back(\"\
    D+\");\n        }\n        else if(g > 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        }\n        else {\n            letter_grade.push_back(\"D-\");\n\
    \        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbpj6vrtr: /tmp/tmpbpj6vrtr.cpp:67: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    \n    // Write your code here\n    \n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy4h67w_b: /tmp/tmpy4h67w_b.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grades.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grades.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp77vy66x0: /tmp/tmp77vy66x0.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxztf9ujr: /tmp/tmpxztf9ujr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(g > 3.7 && g <\
    \ 3.3) {\n            letter_grade.push_back(\"A\");\n        } else if(g > 3.3\
    \ && g < 3.0) {\n            letter_grade.push_back(\"A-\");\n        } else if(g\
    \ > 3.0 && g < 2.7) {\n            letter_grade.push_back(\"B+\");\n        }\
    \ else if(g > 2.7 && g < 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(g > 2.3 && g < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"D-\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvozhh9p7: /tmp/tmpvozhh9p7.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsljngalk: /tmp/tmpsljngalk.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"D-\");\n        } else if(g > -1.0) {\n        \
    \    letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb93blrdb: /tmp/tmpb93blrdb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"D-\");\n        } else if(g > -1.0) {\n        \
    \    letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb93blrdb: /tmp/tmpb93blrdb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9ikgt_c6: /tmp/tmp9ikgt_c6.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbldqyfk: /tmp/tmpnbldqyfk.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_tfibg6v: /tmp/tmp_tfibg6v.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        letter_grades.push_back(g\
    \ < 3.0 ? \"A+\" : (g < 3.7 ? \"A\" : (g < 3.3 ? \"A-\" : (g < 3.0 ? \"B+\" :\
    \ g < 3.7 ? \"B\" : g < 3.3 ? \"B-\" : (g < 3.0 ? \"C+\" : g < 3.7 ? \"C\" : g\
    \ < 3.3 ? \"C-\" : (g < 3.0 ? \"D+\" : g < 3.7 ? \"D\" : g < 3.3 ? \"D-\" : (g\
    \ < 3.0 ? \"E\" : \"\")))));\n    }\n    return letter_grades;\n}\nint main()\
    \ {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbwbyd_1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmpbbwbyd_1.cpp:26:262:\
    \ error: expected \u2018)\u2019 before \u2018;\u2019 token\n   26 |         letter_grades.push_back(g\
    \ < 3.0 ? \"A+\" : (g < 3.7 ? \"A\" : (g < 3.3 ? \"A-\" : (g < 3.0 ? \"B+\" :\
    \ g < 3.7 ? \"B\" : g < 3.3 ? \"B-\" : (g < 3.0 ? \"C+\" : g < 3.7 ? \"C\" : g\
    \ < 3.3 ? \"C-\" : (g < 3.0 ? \"D+\" : g < 3.7 ? \"D\" : g < 3.3 ? \"D-\" : (g\
    \ < 3.0 ? \"E\" : \"\")))));\n      |                                        \
    \          ~                                                                 \
    \                                                                            \
    \                                                                      ^\n   \
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                      )\n/tmp/tmpbbwbyd_1.cpp:26:262: error:\
    \ expected \u2018)\u2019 before \u2018;\u2019 token\n   26 |         letter_grades.push_back(g\
    \ < 3.0 ? \"A+\" : (g < 3.7 ? \"A\" : (g < 3.3 ? \"A-\" : (g < 3.0 ? \"B+\" :\
    \ g < 3.7 ? \"B\" : g < 3.3 ? \"B-\" : (g < 3.0 ? \"C+\" : g < 3.7 ? \"C\" : g\
    \ < 3.3 ? \"C-\" : (g < 3.0 ? \"D+\" : g < 3.7 ? \"D\" : g < 3.3 ? \"D-\" : (g\
    \ < 3.0 ? \"E\" : \"\")))));\n      |                                ~       \
    \                                                                            \
    \                                                                            \
    \                                                                      ^\n   \
    \   |                                                                        \
    \                                                                            \
    \                                                                            \
    \                                      )\n"
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp482v57u8: /tmp/tmp482v57u8.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0)\n         \
    \   letter_grades.push_back(\"A+\");\n        else if(g > 2.7)\n            letter_grades.push_back(\"\
    A\");\n        else if(g > 2.3)\n            letter_grades.push_back(\"A-\");\n\
    \        else if(g > 2.0)\n            letter_grades.push_back(\"B+\");\n    \
    \    else if(g > 1.7)\n            letter_grades.push_back(\"B\");\n        else\
    \ if(g > 1.3)\n            letter_grades.push_back(\"B-\");\n        else if(g\
    \ > 1.0)\n            letter_grades.push_back(\"C+\");\n        else if(g > 0.7)\n\
    \            letter_grades.push_back(\"C\");\n        else if(g > 0.3)\n     \
    \       letter_grades.push_back(\"C-\");\n        else if(g > 0.0)\n         \
    \   letter_grades.push_back(\"D+\");\n        else if(g > -0.3)\n            letter_grades.push_back(\"\
    D\");\n        else\n            letter_grades.push_back(\"D-\");\n    }\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpldy_k39b: /tmp/tmpldy_k39b.cpp:55: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    letter_grade.push_back(\"\
    A+\");\n    letter_grade.push_back(\"A\");\n    letter_grade.push_back(\"A-\"\
    );\n    letter_grade.push_back(\"B+\");\n    letter_grade.push_back(\"B\");\n\
    \    letter_grade.push_back(\"B-\");\n    letter_grade.push_back(\"C+\");\n  \
    \  letter_grade.push_back(\"C\");\n    letter_grade.push_back(\"C-\");\n    letter_grade.push_back(\"\
    D+\");\n    letter_grade.push_back(\"D\");\n    letter_grade.push_back(\"D-\"\
    );\n    letter_grade.push_back(\"E\");\n    for(float g : grades) {\n        auto\
    \ it = std::find(letter_grade.begin(), letter_grade.end(), g);\n        if(it\
    \ != letter_grade.end()) {\n            letter_grade.erase(it);\n        }\n \
    \   }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbngxshr2.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Value = const float]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:120:14:   required from \u2018_RandomAccessIterator\
    \ std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag)\
    \ [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ float>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ float>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:   required from \u2018\
    _IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Tp = float]\u2019\n/tmp/tmpbngxshr2.cpp:40:72:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018const float\u2019)\n  241 |  { return *__it == _M_value; }\n     \
    \ |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n               "
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmptj5g3ulv: /tmp/tmptj5g3ulv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0) {\n            letter_grade.push_back(\"A+\");\n        } else if(grades[i]\
    \ >= 3.7) {\n            letter_grade.push_back(\"A\");\n        } else if(grades[i]\
    \ >= 3.3) {\n            letter_grade.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 3.0) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7) {\n            letter_grade.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 2.3) {\n            letter_grade.push_back(\"B-\");\n        } else if(grades[i]\
    \ >= 2.0) {\n            letter_grade.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3) {\n            letter_grade.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 1.0) {\n            letter_grade.push_back(\"D+\");\n        } else if(grades[i]\
    \ >= 0.7) {\n            letter_grade.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 0.0) {\n            letter_grade.push_back(\"D-\");\n        } else {\n \
    \           letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp85mn2hv2: /tmp/tmp85mn2hv2.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade > 3.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade > 2.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >\
    \ 2.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 0.2) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > -0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > -0.2) {\n            letter_grades.push_back(\"D-\");\n        } else if (grade\
    \ > -0.0) {\n            letter_grades.push_back(\"E\");\n        } else {\n \
    \           letter_grades.push_back(\"F\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9h423vsc: /tmp/tmp9h423vsc.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    \    std::vector<std::string> letter_grades;\n    for(int i = 0; i < grades.size();\
    \ i++) {\n        if(grades[i] >= 4.0 && grades[i] <= 3.7) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n          \
    \  letter_grades.push_back(\"A\");\n        } else if(grades[i] >= 3.3 && grades[i]\
    \ <= 3.0) {\n            letter_grades.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 3.0 && grades[i] <= 2.7) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if(grades[i] >= 2.7 && grades[i] <= 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n           \
    \ letter_grades.push_back(\"B-\");\n        } else if(grades[i] >= 2.0 && grades[i]\
    \ <= 1.7) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7 && grades[i] <= 1.3) {\n            letter_grades.push_back(\"C\");\n\
    \        } else if(grades[i] >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(grades[i] >= 0.7 && grades[i]\
    \ <= 0.0) {\n            letter_grades.push_back(\"D\");\n        } else {\n \
    \           letter_grades.push_back(\"D-\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3gwhme2r: /tmp/tmp3gwhme2r.cpp:57: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade > 3.7) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpu6dtz9sp: /tmp/tmpu6dtz9sp.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmptj5g3ulv: /tmp/tmptj5g3ulv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"D+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"D\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"D-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"C+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"C\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"C-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"B+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"B\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"B-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"A+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"A\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"A-\");\n        } else if(g > -0.0) {\n        \
    \    letter_grades.push_back(\"F\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1ey39i7d: /tmp/tmp1ey39i7d.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grades[i] >= 2.7 && grades[i] <= 2.3) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 1.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grades[i] == 0.0) {\n            letter_grade.push_back(\"\
    E\");\n        } else {\n            letter_grade.push_back(\"C\");\n        }\n\
    \    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpt11_jgpc: /tmp/tmpt11_jgpc.cpp:48: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g < 3.0) {\n       \
    \     letter_grades.push_back(\"E\");\n        }\n        else if(g < 3.3) {\n\
    \            letter_grades.push_back(\"D-\");\n        }\n        else if(g <\
    \ 3.7) {\n            letter_grades.push_back(\"D+\");\n        }\n        else\
    \ if(g < 4.0) {\n            letter_grades.push_back(\"B-\");\n        }\n   \
    \     else if(g < 4.3) {\n            letter_grades.push_back(\"B+\");\n     \
    \   }\n        else if(g < 4.7) {\n            letter_grades.push_back(\"B\");\n\
    \        }\n        else if(g < 5.0) {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else if(g < 5.3) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g < 5.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 6.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g < 6.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 6.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 7.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g < 7.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 7.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 8.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g < 8.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 8.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 9.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g < 9.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 9.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 10.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g < 10.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 10.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g < 11.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g < 11.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfvd23zhj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmpfvd23zhj.cpp:106:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  106 | int main() {\n      |            ^\n/tmp/tmpfvd23zhj.cpp:114:1: error:\
    \ expected \u2018}\u2019 at end of input\n  114 | }\n      | ^\n/tmp/tmpfvd23zhj.cpp:23:76:\
    \ note: to match this \u2018{\u2019\n   23 | std::vector<std::string> numerical_letter_grade(std::vector<float>\
    \ grades) {\n      |                                                         \
    \                   ^\n/tmp/tmpfvd23zhj.cpp:114:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  114 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 4.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.9) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.7) {\n           \
    \ letter_grades.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 3.3) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.9) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 2.3) {\n          \
    \  letter_grades.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.9) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.7) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 1.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else if(grades[i] >= 0.0 && grades[i]\
    \ <= 0.7) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizmgwggq: /tmp/tmpizmgwggq.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0 &&\
    \ grade < 5.0) {\n            letter_grades.push_back(\"A+\");\n        } else\
    \ if(grade >= 3.7 && grade < 4.0) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if(grade >= 3.3 && grade < 3.7) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grade >= 3.0 && grade < 3.3) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade >= 2.7 && grade < 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade >= 2.3 && grade < 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grade >= 2.0 && grade < 2.3) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade >= 1.7 && grade < 2.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade >= 1.3 && grade < 1.7) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grade >= 1.0 && grade < 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade >= 0.7 && grade < 1.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(grade >= 0.0 && grade < 0.7) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpr5cfzjej: /tmp/tmpr5cfzjej.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g >= 4.0 && g < 5.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (g >= 3.7\
    \ && g < 4.0) {\n            letter_grades.push_back(\"A\");\n        } else if\
    \ (g >= 3.3 && g < 3.7) {\n            letter_grades.push_back(\"A-\");\n    \
    \    } else if (g >= 3.0 && g < 3.3) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (g >= 2.7 && g < 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (g >= 2.3 && g < 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (g >= 2.0 && g < 2.3) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (g >= 1.7 && g < 2.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (g >= 1.3 && g < 1.7) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (g >= 1.0 && g < 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (g >= 0.7 && g < 1.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (g >= 0.0 && g < 0.7) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgw0njft3: /tmp/tmpgw0njft3.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g < 3.0)\n          \
    \  letter_grade.push_back(\"D-\");\n        else if(g < 3.7)\n            letter_grade.push_back(\"\
    D+\");\n        else if(g < 4.0)\n            letter_grade.push_back(\"D\");\n\
    \        else if(g < 4.7)\n            letter_grade.push_back(\"D+\");\n     \
    \   else if(g < 5.0)\n            letter_grade.push_back(\"D\");\n        else\
    \ if(g < 5.7)\n            letter_grade.push_back(\"D+\");\n        else if(g\
    \ < 6.0)\n            letter_grade.push_back(\"D\");\n        else if(g < 6.7)\n\
    \            letter_grade.push_back(\"D+\");\n        else if(g < 7.0)\n     \
    \       letter_grade.push_back(\"D\");\n        else if(g < 7.7)\n           \
    \ letter_grade.push_back(\"D+\");\n        else if(g < 8.0)\n            letter_grade.push_back(\"\
    D\");\n        else if(g < 8.7)\n            letter_grade.push_back(\"D+\");\n\
    \        else if(g < 9.0)\n            letter_grade.push_back(\"D\");\n      \
    \  else if(g < 9.7)\n            letter_grade.push_back(\"D+\");\n        else\
    \ if(g < 10.0)\n            letter_grade.push_back(\"D\");\n        else if(g\
    \ < 10.7)\n            letter_grade.push_back(\"D+\");\n        else if(g < 11.0)\n\
    \            letter_grade.push_back(\"D\");\n        else if(g < 11.7)\n     \
    \       letter_grade.push_back(\"D+\");\n        else if(g < 12.0)\n         \
    \   letter_grade.push_back(\"D\");\n        else if(g < 12.7)\n            letter_grade.push_back(\"\
    D+\");\n        else if(g < 13.0)\n            letter_grade.push_back(\"D\");\n\
    \        else if(g < 13.7)\n            letter_grade.push_back(\"D+\");\n    \
    \    else if(g < 14.0)\n            letter_grade.push_back(\"D\");\n        else\
    \ if(g < 14.7)\n            letter_grade.push_back(\"D+\");\n        else if(g\
    \ < 15.0)\n            letter_grade.push_back(\"D\");\n        else if(g < 15.7)\n\
    \            letter_grade.push_back(\"D+\");\n        else if(g < 16.0)\n    \
    \        letter_grade.push_back(\"D\");\n        else if(g < 16.7)\n         \
    \   letter_grade.push_back(\"D+\");\n        else if(g < 17.0)\n            letter_grade.push_back(\"\
    D\");\n        else if(g < 17.7)\n            letter_grade.push_back(\"D+\");\n\
    \        else if(\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo759z4d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmpvo759z4d.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmpvo759z4d.cpp:86:17: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   86 |         else if(\n      |                ~^\n      |  \
    \               )\n   87 | }\n      | ~                \n/tmp/tmpvo759z4d.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmpvo759z4d.cpp:88:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   88 | int main() {\n      |            ^\n\
    /tmp/tmpvo759z4d.cpp:96:1: error: expected \u2018}\u2019 at end of input\n   96\
    \ | }\n      | ^\n/tmp/tmpvo759z4d.cpp:23:76: note: to match this \u2018{\u2019\
    \n   23 | std::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
    \ {\n      |                                                                 \
    \           ^\n/tmp/tmpvo759z4d.cpp:96:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   96 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660139719
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        auto it = std::find(std::begin(letter_grades),\
    \ std::end(letter_grades), 'E');\n        if(it == std::end(letter_grades)) {\n\
    \            letter_grades.push_back(\"E\");\n        } else {\n            auto\
    \ gpa = std::abs(g);\n            auto letter = std::to_string((gpa >= 4.0) ?\
    \ gpa-4.0 : gpa);\n            auto it = std::find(std::begin(letter_grades),\
    \ std::end(letter_grades), letter);\n            if(it == std::end(letter_grades))\
    \ {\n                letter_grades.push_back(letter);\n            } else {\n\
    \                auto gpa = std::abs(g);\n                auto letter = std::to_string((gpa\
    \ >= 3.7) ? gpa-3.7 : gpa);\n                auto it = std::find(std::begin(letter_grades),\
    \ std::end(letter_grades), letter);\n                if(it == std::end(letter_grades))\
    \ {\n                    letter_grades.push_back(letter);\n                } else\
    \ {\n                    auto gpa = std::abs(g);\n                    auto letter\
    \ = std::to_string((gpa >= 3.3) ? gpa-3.3 : gpa);\n                    auto it\
    \ = std::find(std::begin(letter_grades), std::end(letter_grades), letter);\n \
    \                   if(it == std::end(letter_grades)) {\n                    \
    \    letter_grades.push_back(letter);\n                    } else {\n        \
    \                auto gpa = std::abs(g);\n                        auto letter\
    \ = std::to_string((gpa >= 3.0) ? gpa-3.0 : gpa);\n                        auto\
    \ it = std::find(std::begin(letter_grades), std::end(letter_grades), letter);\n\
    \                        if(it == std::end(letter_grades)) {\n               \
    \             letter_grades.push_back(letter);\n                        } else\
    \ {\n                            auto gpa = std::abs(g);\n                   \
    \         auto letter = std::to_string((gpa >= 2.7) ? gpa-2.7 : gpa);\n      \
    \                      auto it = std::find(std::begin(letter_grades), std::end(letter_grades),\
    \ letter);\n                            if(it == std::end(letter_grades)) {\n\
    \                                letter_grades.push_back(letter);\n          \
    \                  } else {\n                                auto gpa = std::abs(g);\n\
    \                                auto letter = std::to_string((gpa >= 2.3) ? gpa-2.3\
    \ : gpa);\n                                auto it = std::find(std::begin(letter_grades),\
    \ std::end(letter_grades), letter);\n                                if(it ==\
    \ std::end(letter_grades)) {\n                                    letter_grades.push_back(letter);\n\
    \                                } else {\n                                  \
    \  auto gpa = std::abs(g);\n                                    auto letter =\
    \ std::to_string((gpa >= 2.0) ? gpa-2.0 : gpa);\n                            \
    \        auto it = \n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptdetf4fo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmptdetf4fo.cpp:69:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   69 | }\n \
    \     | ^\n/tmp/tmptdetf4fo.cpp:69:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmptdetf4fo.cpp:70:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   70 | int main() {\n     \
    \ |            ^\n/tmp/tmptdetf4fo.cpp:78:1: error: expected \u2018}\u2019 at\
    \ end of input\n   78 | }\n      | ^\n/tmp/tmptdetf4fo.cpp:59:36: note: to match\
    \ this \u2018{\u2019\n   59 |                             } else {\n      |  \
    \                                  ^\n/tmp/tmptdetf4fo.cpp:78:1: error: expected\
    \ \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmptdetf4fo.cpp:53:32:\
    \ note: to match this \u2018{\u2019\n   53 |                         } else {\n\
    \      |                                ^\n/tmp/tmptdetf4fo.cpp:78:1: error: expected\
    \ \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmptdetf4fo.cpp:47:28:\
    \ note: to match this \u2018{\u2019\n   47 |                     } else {\n  \
    \    |                            ^\n/tmp/tmptdetf4fo.cpp:78:1: error: expected\
    \ \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmptdetf4fo.cpp:41:24:\
    \ note: to match this \u2018{\u2019\n   41 |                 } else {\n      |\
    \                        ^\n/tmp/tmptdetf4fo.cpp:78:1: error: expected \u2018\
    }\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmptdetf4fo.cpp:35:20: note:\
    \ to match this \u2018{\u2019\n   35 |             } else {\n      |         \
    \           ^\n/tmp/tmptdetf4fo.cpp:78:1: error: expected \u2018}\u2019 at end\
    \ of input\n   78 | }\n      | ^\n/tmp/tmptdetf4fo.cpp:29:16: note: to match this\
    \ \u2018{\u2019\n   29 |         } else {\n      |                ^\n/tmp/tmptdetf4fo.cpp:78:1:\
    \ error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmptdetf4fo.cpp:25:27:\
    \ note: to match this \u2018{\u2019\n   25 |     for(float g : grades) {\n   \
    \   |                           ^\n/tmp/tmptdetf4fo.cpp:78:1: error: expected\
    \ \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmptde"
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp482v57u8: /tmp/tmp482v57u8.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbldqyfk: /tmp/tmpnbldqyfk.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grade.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grade.push_back(\"A-\");\n        } else if(grade >= 3.0)\
    \ {\n            letter_grade.push_back(\"B+\");\n        } else if(grade >= 2.7)\
    \ {\n            letter_grade.push_back(\"B\");\n        } else if(grade >= 2.3)\
    \ {\n            letter_grade.push_back(\"B-\");\n        } else if(grade >= 2.0)\
    \ {\n            letter_grade.push_back(\"C+\");\n        } else if(grade >= 1.7)\
    \ {\n            letter_grade.push_back(\"C\");\n        } else if(grade >= 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if(grade >= 1.0)\
    \ {\n            letter_grade.push_back(\"D+\");\n        } else if(grade >= 0.7)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else if(grade >= 0.0)\
    \ {\n            letter_grade.push_back(\"D-\");\n        } else {\n         \
    \   letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp1zs36kv: /tmp/tmpp1zs36kv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Write your code\
    \ here\n    std::vector<std::string> letter_grade;\n    for(float grade : grades)\
    \ {\n        if(grade >= 4.0 && grade <= 4.7) {\n            letter_grade.push_back(\"\
    A+\");\n        } else if(grade >= 3.7 && grade <= 3.3) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grade >= 3.3 && grade <= 3.0) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if(grade >= 2.7 && grade <= 2.3) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if(grade >= 2.3 && grade <= 2.0) {\n            letter_grade.push_back(\"\
    B\");\n        } else if(grade >= 2.0 && grade <= 1.7) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grade >= 1.7 && grade <= 1.3) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(grade >= 1.3 && grade <= 1.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(grade >= 1.0 && grade <= 0.7) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(grade >= 0.7 && grade <= 0.0) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grade >= 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"E\");\n        }\n\
    \    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpg18ok9xo: /tmp/tmpg18ok9xo.cpp:57: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbldqyfk: /tmp/tmpnbldqyfk.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsljngalk: /tmp/tmpsljngalk.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    \    std::vector<std::string> letter_grades;\n    for(float grade : grades) {\n\
    \        if(grade >= 4.0)\n            letter_grades.push_back(\"A+\");\n    \
    \    else if(grade > 3.7 && grade < 4.0)\n            letter_grades.push_back(\"\
    A\");\n        else if(grade > 3.3 && grade < 3.7)\n            letter_grades.push_back(\"\
    A-\");\n        else if(grade > 3.0 && grade < 3.3)\n            letter_grades.push_back(\"\
    B+\");\n        else if(grade > 2.7 && grade < 3.0)\n            letter_grades.push_back(\"\
    B\");\n        else if(grade > 2.3 && grade < 2.7)\n            letter_grades.push_back(\"\
    B-\");\n        else if(grade > 2.0 && grade < 2.3)\n            letter_grades.push_back(\"\
    C+\");\n        else if(grade > 1.7 && grade < 2.0)\n            letter_grades.push_back(\"\
    C\");\n        else if(grade > 1.3 && grade < 1.7)\n            letter_grades.push_back(\"\
    C-\");\n        else if(grade > 1.0 && grade < 1.3)\n            letter_grades.push_back(\"\
    D+\");\n        else if(grade > 0.7 && grade < 1.0)\n            letter_grades.push_back(\"\
    D\");\n        else if(grade > 0.0 && grade < 0.7)\n            letter_grades.push_back(\"\
    D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpko2cf2q3: /tmp/tmpko2cf2q3.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"D-\");\n        } else if(g > -1.0) {\n        \
    \    letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb93blrdb: /tmp/tmpb93blrdb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139718
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_tfibg6v: /tmp/tmp_tfibg6v.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float g : grades) {\n        if(g > 3.0)\n          \
    \  letter_grade.push_back(\"A+\");\n        else if(g > 2.7)\n            letter_grade.push_back(\"\
    A\");\n        else if(g > 2.3)\n            letter_grade.push_back(\"A-\");\n\
    \        else if(g > 2.0)\n            letter_grade.push_back(\"B+\");\n     \
    \   else if(g > 1.7)\n            letter_grade.push_back(\"B\");\n        else\
    \ if(g > 1.3)\n            letter_grade.push_back(\"B-\");\n        else if(g\
    \ > 1.0)\n            letter_grade.push_back(\"C+\");\n        else if(g > 0.7)\n\
    \            letter_grade.push_back(\"C\");\n        else if(g > 0.3)\n      \
    \      letter_grade.push_back(\"C-\");\n        else if(g > 0.0)\n           \
    \ letter_grade.push_back(\"D+\");\n        else if(g > -0.3)\n            letter_grade.push_back(\"\
    D\");\n        else if(g > -0.7)\n            letter_grade.push_back(\"D-\");\n\
    \        else\n            letter_grade.push_back(\"E\");\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpklfnciv7: /tmp/tmpklfnciv7.cpp:57: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf7gk3plt: /tmp/tmpf7gk3plt.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"D+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"D\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"D-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"C+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"C\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"C-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"B+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"B\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"B-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"A+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"A\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"A-\");\n        } else if(g > -0.0) {\n        \
    \    letter_grades.push_back(\"A\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4i1tz977: /tmp/tmp4i1tz977.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade > 3.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        }\n        else if(grade\
    \ > 2.7) {\n            letter_grades.push_back(\"A\");\n        }\n        else\
    \ if(grade > 2.3) {\n            letter_grades.push_back(\"A-\");\n        }\n\
    \        else if(grade > 2.0) {\n            letter_grades.push_back(\"B+\");\n\
    \        }\n        else if(grade > 1.7) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(grade > 1.3) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(grade > 1.0) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(grade > 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(grade > 0.2) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(grade > 0.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(grade > -0.7) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(grade > -0.2) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmproh7g95l: /tmp/tmproh7g95l.cpp:70: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade > 3.7) {\n\
    \            letter_grade.push_back(\"A\");\n        } else if(grade > 3.3) {\n\
    \            letter_grade.push_back(\"A-\");\n        } else if(grade > 3.0) {\n\
    \            letter_grade.push_back(\"B+\");\n        } else if(grade > 2.7) {\n\
    \            letter_grade.push_back(\"B\");\n        } else if(grade > 2.3) {\n\
    \            letter_grade.push_back(\"B-\");\n        } else if(grade > 2.0) {\n\
    \            letter_grade.push_back(\"C+\");\n        } else if(grade > 1.7) {\n\
    \            letter_grade.push_back(\"C\");\n        } else if(grade > 1.3) {\n\
    \            letter_grade.push_back(\"C-\");\n        } else if(grade > 1.0) {\n\
    \            letter_grade.push_back(\"D+\");\n        } else if(grade > 0.7) {\n\
    \            letter_grade.push_back(\"D\");\n        } else if(grade > 0.0) {\n\
    \            letter_grade.push_back(\"D-\");\n        } else {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8vi5elwi: /tmp/tmp8vi5elwi.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g > 3.0) {\n     \
    \       letter_grades.push_back(\"A+\");\n        } else if (g > 2.7) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (g > 2.3) {\n    \
    \        letter_grades.push_back(\"A-\");\n        } else if (g > 2.0) {\n   \
    \         letter_grades.push_back(\"B+\");\n        } else if (g > 1.7) {\n  \
    \          letter_grades.push_back(\"B\");\n        } else if (g > 1.3) {\n  \
    \          letter_grades.push_back(\"B-\");\n        } else if (g > 1.0) {\n \
    \           letter_grades.push_back(\"C+\");\n        } else if (g > 0.7) {\n\
    \            letter_grades.push_back(\"C\");\n        } else if (g > 0.3) {\n\
    \            letter_grades.push_back(\"C-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D+\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpowjpgxvv: /tmp/tmpowjpgxvv.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if(grades[i] >= 2.7 && grades[i] <= 2.3) {\n          \
    \  letter_grade.push_back(\"B+\");\n        } else if(grades[i] >= 2.0 && grades[i]\
    \ <= 1.7) {\n            letter_grade.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 1.7 && grades[i] <= 1.3) {\n            letter_grade.push_back(\"B-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grade.push_back(\"C\");\n        } else if(grades[i] >= 0.0) {\n   \
    \         letter_grade.push_back(\"D+\");\n        } else if(grades[i] <= 0.0)\
    \ {\n            letter_grade.push_back(\"D\");\n        } else {\n          \
    \  letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1x9qtck1: /tmp/tmp1x9qtck1.cpp:52: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if(g > 3.7 &&\
    \ g < 3.3) {\n            letter_grades.push_back(\"A\");\n        } else if(g\
    \ > 3.3 && g < 3.0) {\n            letter_grades.push_back(\"A-\");\n        }\
    \ else if(g > 3.0 && g < 2.7) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if(g > 2.7 && g < 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(g > 2.3 && g < 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hhtxjgw: /tmp/tmp1hhtxjgw.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    for(auto grade : grades)\
    \ {\n        if(grade >= 4.0) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grade > 3.7) {\n            letter_grades.push_back(\"A\");\n\
    \        } else if(grade > 3.3) {\n            letter_grades.push_back(\"A-\"\
    );\n        } else if(grade > 3.0) {\n            letter_grades.push_back(\"B+\"\
    );\n        } else if(grade > 2.7) {\n            letter_grades.push_back(\"B\"\
    );\n        } else if(grade > 2.3) {\n            letter_grades.push_back(\"B-\"\
    );\n        } else if(grade > 2.0) {\n            letter_grades.push_back(\"C+\"\
    );\n        } else if(grade > 1.7) {\n            letter_grades.push_back(\"C\"\
    );\n        } else if(grade > 1.3) {\n            letter_grades.push_back(\"C-\"\
    );\n        } else if(grade > 1.0) {\n            letter_grades.push_back(\"D+\"\
    );\n        } else if(grade > 0.7) {\n            letter_grades.push_back(\"D\"\
    );\n        } else if(grade > 0.0) {\n            letter_grades.push_back(\"D-\"\
    );\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmporrx07_9: /tmp/tmporrx07_9.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grades.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grades.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp77vy66x0: /tmp/tmp77vy66x0.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7 &&\
    \ grade < 4.0) {\n            letter_grades.push_back(\"A\");\n        } else\
    \ if(grade > 3.3 && grade < 3.7) {\n            letter_grades.push_back(\"A-\"\
    );\n        } else if(grade > 3.0 && grade < 3.3) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade > 2.7 && grade < 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade > 2.3 && grade < 2.7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grade > 2.0 && grade < 2.3) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade > 1.7 && grade < 2.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade > 1.3 && grade < 1.7) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grade > 1.0 && grade < 1.3) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade > 0.7 && grade < 1.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(grade > 0.0 && grade < 0.7) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpl_ea6h4c: /tmp/tmpl_ea6h4c.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbldqyfk: /tmp/tmpnbldqyfk.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0 &&\
    \ grade < 3.7) {\n            letter_grades.push_back(\"A+\");\n        } else\
    \ if(grade >= 3.7 && grade < 3.3) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if(grade >= 3.3 && grade < 3.0) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grade >= 3.0 && grade < 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade >= 2.7 && grade < 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade >= 2.3 && grade < 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grade >= 2.0 && grade < 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade >= 1.7 && grade < 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade >= 1.3 && grade < 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grade >= 1.0 && grade < 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade >= 0.7 && grade < 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp27sg7va5: /tmp/tmp27sg7va5.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() == 12);\n    for(float g : grades) {\n\
    \        if(g > 3.0) {\n            letter_grade.push_back(\"D+\");\n        }\
    \ else if(g > 2.7) {\n            letter_grade.push_back(\"D\");\n        } else\
    \ if(g > 2.3) {\n            letter_grade.push_back(\"D-\");\n        } else if(g\
    \ > 2.0) {\n            letter_grade.push_back(\"C+\");\n        } else if(g >\
    \ 1.7) {\n            letter_grade.push_back(\"C\");\n        } else if(g > 1.3)\
    \ {\n            letter_grade.push_back(\"C-\");\n        } else if(g > 1.0) {\n\
    \            letter_grade.push_back(\"B+\");\n        } else if(g > 0.7) {\n \
    \           letter_grade.push_back(\"B\");\n        } else if(g > 0.3) {\n   \
    \         letter_grade.push_back(\"B-\");\n        } else if(g > 0.0) {\n    \
    \        letter_grade.push_back(\"A+\");\n        } else if(g > -0.7) {\n    \
    \        letter_grade.push_back(\"A\");\n        } else if(g > -0.3) {\n     \
    \       letter_grade.push_back(\"A-\");\n        } else if(g > -0.0) {\n     \
    \       letter_grade.push_back(\"A\");\n        } else {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1vaf31ft: /tmp/tmp1vaf31ft.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for (float g : grades) {\n        if (g > 3.0 && g < 3.7)\
    \ {\n            letter_grade.push_back(\"A+\");\n        } else if (g > 3.7 &&\
    \ g < 3.3) {\n            letter_grade.push_back(\"A\");\n        } else if (g\
    \ > 3.3 && g < 3.0) {\n            letter_grade.push_back(\"A-\");\n        }\
    \ else if (g > 3.0 && g < 2.7) {\n            letter_grade.push_back(\"B+\");\n\
    \        } else if (g > 2.7 && g < 2.3) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (g > 2.3 && g < 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (g > 2.0 && g < 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (g > 1.7 && g < 1.3) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (g > 1.3 && g < 1.0) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (g > 1.0 && g < 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (g > 0.7 && g < 0.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (g > 0.0) {\n            letter_grade.push_back(\"D-\"\
    );\n        } else {\n            letter_grade.push_back(\"E\");\n        }\n\
    \    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpry66u93h: /tmp/tmpry66u93h.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g < 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g < 3.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g < 4.0) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g < 4.7) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g < 5.0) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g < 5.7) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g < 6.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g < 6.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g < 7.0) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g < 7.7) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g < 8.0) {\n          \
    \  letter_grades.push_back(\"D\");\n        } else if(g < 8.7) {\n           \
    \ letter_grades.push_back(\"D-\");\n        } else if(g < 9.0) {\n           \
    \ letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpx_j11gf8: /tmp/tmpx_j11gf8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        letter_grades.push_back(std::to_string(grade));\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpswplrxsb: /tmp/tmpswplrxsb.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0) {\n            letter_grade.push_back(\"A+\");\n        }\n        else\
    \ if(grades[i] >= 3.7) {\n            letter_grade.push_back(\"A\");\n       \
    \ }\n        else if(grades[i] >= 3.3) {\n            letter_grade.push_back(\"\
    A-\");\n        }\n        else if(grades[i] >= 3.0) {\n            letter_grade.push_back(\"\
    B+\");\n        }\n        else if(grades[i] >= 2.7) {\n            letter_grade.push_back(\"\
    B\");\n        }\n        else if(grades[i] >= 2.3) {\n            letter_grade.push_back(\"\
    B-\");\n        }\n        else if(grades[i] >= 2.0) {\n            letter_grade.push_back(\"\
    C+\");\n        }\n        else if(grades[i] >= 1.7) {\n            letter_grade.push_back(\"\
    C\");\n        }\n        else if(grades[i] >= 1.3) {\n            letter_grade.push_back(\"\
    C-\");\n        }\n        else if(grades[i] >= 1.0) {\n            letter_grade.push_back(\"\
    D+\");\n        }\n        else if(grades[i] >= 0.7) {\n            letter_grade.push_back(\"\
    D\");\n        }\n        else {\n            letter_grade.push_back(\"D-\");\n\
    \        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hzxp3y8: /tmp/tmp1hzxp3y8.cpp:67: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grades.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grades[i] >= 2.7 && grades[i] <= 2.3) {\n          \
    \  letter_grades.push_back(\"B+\");\n        } else if(grades[i] >= 2.0 && grades[i]\
    \ <= 1.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grades.push_back(\"B-\");\n\
    \        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4zo134sx: /tmp/tmp4zo134sx.cpp:48: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade > 3.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 0.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else {\n         \
    \   letter_grades.push_back(\"D-\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpot3ecqhb: /tmp/tmpot3ecqhb.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"D+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"D\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"D-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"C+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"C\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"C-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"B+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"B\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"B-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"A+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"A\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"A-\");\n        } else if(g > -0.0) {\n        \
    \    letter_grades.push_back(\"A\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4i1tz977: /tmp/tmp4i1tz977.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsljngalk: /tmp/tmpsljngalk.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float grade : grades) {\n        if(grade >= 4.0 && grade\
    \ < 5.0) {\n            letter_grade.push_back(\"A+\");\n        } else if(grade\
    \ >= 3.7 && grade < 4.0) {\n            letter_grade.push_back(\"A\");\n     \
    \   } else if(grade >= 3.3 && grade < 3.7) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if(grade >= 3.0 && grade < 3.3) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if(grade >= 2.7 && grade < 3.0) {\n            letter_grade.push_back(\"\
    B\");\n        } else if(grade >= 2.3 && grade < 2.7) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grade >= 2.0 && grade < 2.3) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(grade >= 1.7 && grade < 2.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if(grade >= 1.3 && grade < 1.7) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if(grade >= 1.0 && grade < 1.3) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grade >= 0.7 && grade < 1.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else if(grade >= 0.0 && grade < 0.7) {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvlrd5wx0: /tmp/tmpvlrd5wx0.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0) {\n            letter_grade.push_back(\"A+\");\n        } else if(grades[i]\
    \ >= 3.7) {\n            letter_grade.push_back(\"A\");\n        } else if(grades[i]\
    \ >= 3.3) {\n            letter_grade.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 3.0) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7) {\n            letter_grade.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 2.3) {\n            letter_grade.push_back(\"B-\");\n        } else if(grades[i]\
    \ >= 2.0) {\n            letter_grade.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3) {\n            letter_grade.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 1.0) {\n            letter_grade.push_back(\"D+\");\n        } else if(grades[i]\
    \ >= 0.7) {\n            letter_grade.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 0.0) {\n            letter_grade.push_back(\"D-\");\n        } else {\n \
    \           letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp85mn2hv2: /tmp/tmp85mn2hv2.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnbldqyfk: /tmp/tmpnbldqyfk.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade > 3.7) {\n\
    \            letter_grade.push_back(\"A\");\n        } else if(grade > 3.3) {\n\
    \            letter_grade.push_back(\"A-\");\n        } else if(grade > 3.0) {\n\
    \            letter_grade.push_back(\"B+\");\n        } else if(grade > 2.7) {\n\
    \            letter_grade.push_back(\"B\");\n        } else if(grade > 2.3) {\n\
    \            letter_grade.push_back(\"B-\");\n        } else if(grade > 2.0) {\n\
    \            letter_grade.push_back(\"C+\");\n        } else if(grade > 1.7) {\n\
    \            letter_grade.push_back(\"C\");\n        } else if(grade > 1.3) {\n\
    \            letter_grade.push_back(\"C-\");\n        } else if(grade > 1.0) {\n\
    \            letter_grade.push_back(\"D+\");\n        } else if(grade > 0.7) {\n\
    \            letter_grade.push_back(\"D\");\n        } else if(grade > 0.0) {\n\
    \            letter_grade.push_back(\"D-\");\n        } else {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfd3glrgy: /tmp/tmpfd3glrgy.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0) {\n            letter_grade.push_back(\"A+\");\n        } else if(grades[i]\
    \ >= 3.7) {\n            letter_grade.push_back(\"A\");\n        } else if(grades[i]\
    \ >= 3.3) {\n            letter_grade.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 3.0) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7) {\n            letter_grade.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 2.3) {\n            letter_grade.push_back(\"B-\");\n        } else if(grades[i]\
    \ >= 2.0) {\n            letter_grade.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3) {\n            letter_grade.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 1.0) {\n            letter_grade.push_back(\"D+\");\n        } else if(grades[i]\
    \ >= 0.7) {\n            letter_grade.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 0.0) {\n            letter_grade.push_back(\"D-\");\n        } else {\n \
    \           letter_grade.push_back(\"E\");\n        }\n    }\n    return letter_grade;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp85mn2hv2: /tmp/tmp85mn2hv2.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139717
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"D+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"D\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"D-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"C+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"C\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"C-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"B+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"B\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"B-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"A+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"A\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"A-\");\n        } else if(g > -0.0) {\n        \
    \    letter_grades.push_back(\"A\");\n        } else {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4i1tz977: /tmp/tmp4i1tz977.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsljngalk: /tmp/tmpsljngalk.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade > 3.7) {\n\
    \            letter_grade.push_back(\"A\");\n        } else if(grade > 3.3) {\n\
    \            letter_grade.push_back(\"A-\");\n        } else if(grade > 3.0) {\n\
    \            letter_grade.push_back(\"B+\");\n        } else if(grade > 2.7) {\n\
    \            letter_grade.push_back(\"B\");\n        } else if(grade > 2.3) {\n\
    \            letter_grade.push_back(\"B-\");\n        } else if(grade > 2.0) {\n\
    \            letter_grade.push_back(\"C+\");\n        } else if(grade > 1.7) {\n\
    \            letter_grade.push_back(\"C\");\n        } else if(grade > 1.3) {\n\
    \            letter_grade.push_back(\"C-\");\n        } else if(grade > 1.0) {\n\
    \            letter_grade.push_back(\"D+\");\n        } else if(grade > 0.7) {\n\
    \            letter_grade.push_back(\"D\");\n        } else if(grade > 0.0) {\n\
    \            letter_grade.push_back(\"D-\");\n        } else {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfd3glrgy: /tmp/tmpfd3glrgy.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] < 5.0) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] < 4.0) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] < 3.7) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if(grades[i] >= 3.0 && grades[i] < 3.3) {\n           \
    \ letter_grade.push_back(\"B+\");\n        } else if(grades[i] >= 2.7 && grades[i]\
    \ < 3.0) {\n            letter_grade.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 2.3 && grades[i] < 2.7) {\n            letter_grade.push_back(\"B-\");\n\
    \        } else if(grades[i] >= 2.0 && grades[i] < 2.3) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if(grades[i] >= 1.7 && grades[i] < 2.0) {\n           \
    \ letter_grade.push_back(\"C\");\n        } else if(grades[i] >= 1.3 && grades[i]\
    \ < 1.7) {\n            letter_grade.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 1.0 && grades[i] < 1.3) {\n            letter_grade.push_back(\"D+\");\n\
    \        } else if(grades[i] >= 0.7 && grades[i] < 1.0) {\n            letter_grade.push_back(\"\
    D\");\n        } else if(grades[i] >= 0.0 && grades[i] < 0.7) {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpath7kfli: /tmp/tmpath7kfli.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0 && g < 3.7)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if(g > 3.7 &&\
    \ g < 3.3) {\n            letter_grades.push_back(\"A\");\n        } else if(g\
    \ > 3.3 && g < 3.0) {\n            letter_grades.push_back(\"A-\");\n        }\
    \ else if(g > 3.0 && g < 2.7) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if(g > 2.7 && g < 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(g > 2.3 && g < 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(g > 2.0 && g < 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(g > 1.7 && g < 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(g > 1.3 && g < 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(g > 1.0 && g < 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(g > 0.7 && g < 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate =\
    \ numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hhtxjgw: /tmp/tmp1hhtxjgw.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"D+\");\n        }\n        else if(g > 2.7) {\n\
    \            letter_grades.push_back(\"D\");\n        }\n        else if(g > 2.3)\
    \ {\n            letter_grades.push_back(\"D-\");\n        }\n        else if(g\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        }\n        else\
    \ if(g > 1.7) {\n            letter_grades.push_back(\"C\");\n        }\n    \
    \    else if(g > 1.3) {\n            letter_grades.push_back(\"C-\");\n      \
    \  }\n        else if(g > 1.0) {\n            letter_grades.push_back(\"B+\");\n\
    \        }\n        else if(g > 0.7) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(g > 0.3) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(g > 0.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(g > -0.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if(g > -0.3) {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp4wx2skd: /tmp/tmpp4wx2skd.cpp:70: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_tfibg6v: /tmp/tmp_tfibg6v.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0 && grades[i] <= 3.7) {\n            letter_grade.push_back(\"A+\");\n\
    \        } else if(grades[i] >= 3.7 && grades[i] <= 3.3) {\n            letter_grade.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3 && grades[i] <= 3.0) {\n           \
    \ letter_grade.push_back(\"A-\");\n        } else if(grades[i] >= 3.0 && grades[i]\
    \ <= 2.7) {\n            letter_grade.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.7 && grades[i] <= 2.3) {\n            letter_grade.push_back(\"B\");\n\
    \        } else if(grades[i] >= 2.3 && grades[i] <= 2.0) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0 && grades[i] <= 1.7) {\n          \
    \  letter_grade.push_back(\"C+\");\n        } else if(grades[i] >= 1.7 && grades[i]\
    \ <= 1.3) {\n            letter_grade.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3 && grades[i] <= 1.0) {\n            letter_grade.push_back(\"C-\");\n\
    \        } else if(grades[i] >= 1.0 && grades[i] <= 0.7) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] <= 0.0) {\n          \
    \  letter_grade.push_back(\"D\");\n        } else {\n            letter_grade.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpc5q2wh80: /tmp/tmpc5q2wh80.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpoyi3yko9: /tmp/tmpoyi3yko9.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto grade : grades) {\n        letter_grades.push_back(std::to_string(grade));\n\
    \    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwj4iqf14: /tmp/tmpwj4iqf14.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto grade : grades) {\n        if(grade > 3.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 0.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else {\n         \
    \   letter_grades.push_back(\"D-\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmppnp0_hyf: /tmp/tmppnp0_hyf.cpp:56: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(auto &grade : grades) {\n        if(grade > 3.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 0.2)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > -0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > -0.2)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp4nsjabs: /tmp/tmpp4nsjabs.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_tfibg6v: /tmp/tmp_tfibg6v.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139713
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxztf9ujr: /tmp/tmpxztf9ujr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        if (g > 3.0) {\n     \
    \       letter_grades.push_back(\"A+\");\n        } else if (g > 2.7) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (g > 2.3) {\n    \
    \        letter_grades.push_back(\"A-\");\n        } else if (g > 2.0) {\n   \
    \         letter_grades.push_back(\"B+\");\n        } else if (g > 1.7) {\n  \
    \          letter_grades.push_back(\"B\");\n        } else if (g > 1.3) {\n  \
    \          letter_grades.push_back(\"B-\");\n        } else if (g > 1.0) {\n \
    \           letter_grades.push_back(\"C+\");\n        } else if (g > 0.7) {\n\
    \            letter_grades.push_back(\"C\");\n        } else if (g > 0.3) {\n\
    \            letter_grades.push_back(\"C-\");\n        } else if (g > 0.0) {\n\
    \            letter_grades.push_back(\"D+\");\n        } else if (g > -0.7) {\n\
    \            letter_grades.push_back(\"D\");\n        } else if (g > -0.3) {\n\
    \            letter_grades.push_back(\"D-\");\n        } else if (g > -1.0) {\n\
    \            letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5x_pxxly: /tmp/tmp5x_pxxly.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto &grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grade.push_back(\"A+\");\n        } else if(grade > 3.7) {\n\
    \            letter_grade.push_back(\"A\");\n        } else if(grade > 3.3) {\n\
    \            letter_grade.push_back(\"A-\");\n        } else if(grade > 3.0) {\n\
    \            letter_grade.push_back(\"B+\");\n        } else if(grade > 2.7) {\n\
    \            letter_grade.push_back(\"B\");\n        } else if(grade > 2.3) {\n\
    \            letter_grade.push_back(\"B-\");\n        } else if(grade > 2.0) {\n\
    \            letter_grade.push_back(\"C+\");\n        } else if(grade > 1.7) {\n\
    \            letter_grade.push_back(\"C\");\n        } else if(grade > 1.3) {\n\
    \            letter_grade.push_back(\"C-\");\n        } else if(grade > 1.0) {\n\
    \            letter_grade.push_back(\"D+\");\n        } else if(grade > 0.7) {\n\
    \            letter_grade.push_back(\"D\");\n        } else if(grade > 0.0) {\n\
    \            letter_grade.push_back(\"D-\");\n        } else {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;\n}\nint main() {\n    auto candidate\
    \ = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8vi5elwi: /tmp/tmp8vi5elwi.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139716
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g > 3.0) {\n       \
    \     letter_grades.push_back(\"A+\");\n        } else if(g > 2.7) {\n       \
    \     letter_grades.push_back(\"A\");\n        } else if(g > 2.3) {\n        \
    \    letter_grades.push_back(\"A-\");\n        } else if(g > 2.0) {\n        \
    \    letter_grades.push_back(\"B+\");\n        } else if(g > 1.7) {\n        \
    \    letter_grades.push_back(\"B\");\n        } else if(g > 1.3) {\n         \
    \   letter_grades.push_back(\"B-\");\n        } else if(g > 1.0) {\n         \
    \   letter_grades.push_back(\"C+\");\n        } else if(g > 0.7) {\n         \
    \   letter_grades.push_back(\"C\");\n        } else if(g > 0.3) {\n          \
    \  letter_grades.push_back(\"C-\");\n        } else if(g > 0.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if(g > -0.7) {\n         \
    \   letter_grades.push_back(\"D\");\n        } else if(g > -0.3) {\n         \
    \   letter_grades.push_back(\"D-\");\n        } else if(g > -0.0) {\n        \
    \    letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"\
    F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto\
    \ candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpao9xae4x: /tmp/tmpao9xae4x.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade >= 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade >= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade >=\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxztf9ujr: /tmp/tmpxztf9ujr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if(grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if(grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if(grade > 3.0)\
    \ {\n            letter_grades.push_back(\"B+\");\n        } else if(grade > 2.7)\
    \ {\n            letter_grades.push_back(\"B\");\n        } else if(grade > 2.3)\
    \ {\n            letter_grades.push_back(\"B-\");\n        } else if(grade > 2.0)\
    \ {\n            letter_grades.push_back(\"C+\");\n        } else if(grade > 1.7)\
    \ {\n            letter_grades.push_back(\"C\");\n        } else if(grade > 1.3)\
    \ {\n            letter_grades.push_back(\"C-\");\n        } else if(grade > 1.0)\
    \ {\n            letter_grades.push_back(\"D+\");\n        } else if(grade > 0.7)\
    \ {\n            letter_grades.push_back(\"D\");\n        } else if(grade > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp482v57u8: /tmp/tmp482v57u8.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() == 12);\n    letter_grades.push_back(\"\
    A+\");\n    letter_grades.push_back(\"A\");\n    letter_grades.push_back(\"A-\"\
    );\n    letter_grades.push_back(\"B+\");\n    letter_grades.push_back(\"B\");\n\
    \    letter_grades.push_back(\"B-\");\n    letter_grades.push_back(\"C+\");\n\
    \    letter_grades.push_back(\"C\");\n    letter_grades.push_back(\"C-\");\n \
    \   letter_grades.push_back(\"D+\");\n    letter_grades.push_back(\"D\");\n  \
    \  letter_grades.push_back(\"D-\");\n    letter_grades.push_back(\"E\");\n   \
    \ for(float g : grades) {\n        if(g > 3.7) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if(g > 3.3) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if(g > 3) {\n            letter_grades.push_back(\"A-\");\n\
    \        } else if(g > 2.7) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if(g > 2.3) {\n            letter_grades.push_back(\"B\");\n \
    \       } else if(g > 2) {\n            letter_grades.push_back(\"B-\");\n   \
    \     } else if(g > 1.7) {\n            letter_grades.push_back(\"C+\");\n   \
    \     } else if(g > 1.3) {\n            letter_grades.push_back(\"C\");\n    \
    \    } else if(g > 1) {\n            letter_grades.push_back(\"C-\");\n      \
    \  } else if(g > 0.7) {\n            letter_grades.push_back(\"D+\");\n      \
    \  } else if(g > 0) {\n            letter_grades.push_back(\"D\");\n        }\
    \ else {\n            letter_grades.push_back(\"D-\");\n        }\n    }\n   \
    \ return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n\
    \    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2,\
    \ (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"\
    B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2})))\
    \ == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5})))\
    \ == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"\
    D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_lhiydt7: /tmp/tmp_lhiydt7.cpp:25: std::vector<std::__cxx11::basic_string<char>
    > numerical_letter_grade(std::vector<float>): Assertion `grades.size() == 12''
    failed.

    '
  stdout: ''
  timestamp: 1660139720
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpoyi3yko9: /tmp/tmpoyi3yko9.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139719
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4pl1yhq: /tmp/tmpb4pl1yhq.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)4.0,
    (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)"A+",
    (std::string)"B", (std::string)"C-", (std::string)"C", (std::string)"A-"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660139712
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of\
    \ the semester and the teacher has to give the grades\n// to students. The teacher\
    \ has been making her own algorithm for grading.\n// The only problem is, she\
    \ has lost the code she used for grading.\n// She has given you a list of GPAs\
    \ for some students and you have to write \n// a function that can output a list\
    \ of letter grades using the following table:\n// GPA       |    Letter grade\n\
    // 4.0                A+\n// > 3.7                A \n// > 3.3               \
    \ A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3      \
    \          B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3\
    \                C-\n// > 1.0                D+ \n// > 0.7                D \n\
    // > 0.0                D-\n// 0.0                E\n// Example:\nstd::vector<std::string>\
    \ numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string>\
    \ letter_grades;\n    \n    assert(grades.size() == 12);\n    \n    float sum\
    \ = 0;\n    for (float grade : grades) {\n        sum += grade;\n    }\n    \n\
    \    float average = sum / grades.size();\n    \n    float min_grade = std::numeric_limits<float>::max();\n\
    \    float max_grade = std::numeric_limits<float>::min();\n    \n    for (float\
    \ grade : grades) {\n        if (grade < min_grade) {\n            min_grade =\
    \ grade;\n        }\n        if (grade > max_grade) {\n            max_grade =\
    \ grade;\n        }\n    }\n    \n    float min_grade_percentage = min_grade /\
    \ average;\n    float max_grade_percentage = max_grade / average;\n    \n    float\
    \ grade_percentage_diff = max_grade_percentage - min_grade_percentage;\n    \n\
    \    float grade_percentage_diff_percentage = grade_percentage_diff / max_grade;\n\
    \    \n    float grade_percentage_diff_percentage_percentage = grade_percentage_diff_percentage\
    \ / min_grade;\n    \n    float grade_percentage_diff_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage * 100;\n    \n    float grade_percentage_diff_percentage_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage_percentage_percentage / 100;\n\
    \    \n    float grade_percentage_diff_percentage_percentage_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage_percentage_percentage_percentage\
    \ * 100;\n    \n    float grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage\
    \ / 100;\n    \n    float grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ * 100;\n    \n    float grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ / 100;\n    \n    float grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ * 100;\n    \n    float grade_percentage_diff_percentage_percentage_percentage_percentage\n\
    }\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
    \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
    A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
    A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
    D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
    D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
    E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
    \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\"\
    , (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"\
    B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7})))\
    \ == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6m5z3imz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmp6m5z3imz.cpp:64:112:\
    \ error: \u2018grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\u2019\
    \ was not declared in this scope; did you mean \u2018grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage\u2019\
    ?\n   64 |     float grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ * 100;\n      |                                                            \
    \                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                           grade_percentage_diff_percentage_percentage_percentage_percentage_percentage_percentage_percentage\n\
    /tmp/tmp6m5z3imz.cpp:71:1: error: expected initializer before \u2018}\u2019 token\n\
    \   71 | }\n      | ^\n/tmp/tmp6m5z3imz.cpp:71:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n   71 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660139719
