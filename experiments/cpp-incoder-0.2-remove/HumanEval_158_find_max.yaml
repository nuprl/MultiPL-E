name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings.\n// The list contains different words. Return the word with\
  \ maximum number\n// of unique characters. If multiple strings have maximum number\
  \ of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\nstd::string find_max(std::vector<std::string> words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
  cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
  footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) ==\
  \ (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
  nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"\
  this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"})))\
  \ == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
completions: ["    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &w : words) {\n        int count = 0;\n        for (auto &c : w)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = w;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    std::string maxWord;\n    for (auto word : words) {\n        int count =\
    \ 0;\n        for (auto c : word) {\n            count += 1;\n        }\n    \
    \    if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    int max = 0;\n    int\
    \ index = 0;\n    std::string maxWord = \"\";\n    for (auto word : words) {\n\
    \        int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > count) {\n                count = std::count(word.begin(),\
    \ word.end(), c);\n                index = word.find(c);\n            }\n    \
    \    }\n        if (count > max) {\n            max = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max;\n   \
    \ int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word: words) {\n        int count\
    \ = 0;\n        for (auto &c: word) {\n            count += 1;\n        }\n  \
    \      if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    std::string maxWord;\n    for\
    \ (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n\
    \            count += 1;\n        }\n        if (count > maxCount) {\n       \
    \     maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words) {\n        int count = 0;\n        for(auto\
    \ &c: word) {\n            count++;\n        }\n        if(count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        int count = 0;\n        for(auto\
    \ &c: word){\n            count += 1;\n        }\n        if(count > maxCount){\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  max = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max;\n    int max_count = 0;\n   \
    \ for (auto &word : words) {\n        std::unordered_map<char, int> char_map;\n\
    \        for (char &c : word) {\n            char_map[c]++;\n        }\n     \
    \   if (char_map.size() > max_count) {\n            max_count = char_map.size();\n\
    \            max = word;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words){\n        int count = 0;\n        for(auto &c: word){\n            count\
    \ += 1;\n        }\n        if(count > maxCount){\n            max = word;\n \
    \           maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &w : words) {\n        int count\
    \ = 0;\n        for (auto &c : w) {\n            count += 1;\n        }\n    \
    \    if (count > maxCount) {\n            max = w;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code goes here\n    std::string\
    \ max;\n    int max_count = 0;\n    std::string temp;\n    for (auto &word : words)\
    \ {\n        std::sort(word.begin(), word.end());\n        temp = word;\n    \
    \    std::sort(temp.begin(), temp.end());\n        std::cout << temp << std::endl;\n\
    \        int count = 0;\n        for (auto &c : temp) {\n            if (std::count(temp.begin(),\
    \ temp.end(), c) > max_count) {\n                max_count = std::count(temp.begin(),\
    \ temp.end(), c);\n                max = temp;\n            }\n        }\n   \
    \ }\n    return max;", "    // Write your code here\n    std::string max;\n  \
    \  int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    int max = 0;\n    std::string word;\n\
    \    for (auto &w : words) {\n        std::set<char> chars;\n        for (auto\
    \ &c : w) {\n            chars.insert(c);\n        }\n        if (chars.size()\
    \ > max) {\n            max = chars.size();\n            word = w;\n        }\n\
    \    }\n    return word;", "    // Write your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max_count = count;\n           \
    \ max = word;\n        }\n    }\n    return max;", "    int n = words.size();\n\
    \    int max = 0;\n    int max_index = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        int count = 0;\n        for (int j = 0; j < n; j++) {\n            if\
    \ (i != j) {\n                count += words[j].size();\n            }\n     \
    \   }\n        if (count > max) {\n            max = count;\n            max_index\
    \ = i;\n        }\n    }\n    return words[max_index];", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &i : words) {\n        std::set<char> s;\n   \
    \     for (auto &j : i) {\n            s.insert(j);\n        }\n        if (s.size()\
    \ > max_count) {\n            max = i;\n            max_count = s.size();\n  \
    \      }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    std::string maxWord;\n    for (auto &word :\
    \ words) {\n        int count = 0;\n        for (auto &c : word) {\n         \
    \   count += 1;\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto\
    \ &word: words) {\n        int count = 0;\n        for(auto &c: word) {\n    \
    \        count += 1;\n        }\n        if(count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max = \"\";\n    int max_count = 0;\n\
    \    for (auto &i : words) {\n        auto count = std::count(i.begin(), i.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = i;\n        }\n    }\n    return max;", "    // Write your code\
    \ here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code goes here\n    std::string max;\n    int maxCount = 0;\n    int\
    \ maxIndex = 0;\n    for (size_t i = 0; i < words.size(); i++) {\n        int\
    \ count = 0;\n        for (size_t j = 0; j < words.size(); j++) {\n          \
    \  if (i == j) {\n                continue;\n            }\n            count\
    \ += words[j].size();\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxIndex = i;\n        }\n    }\n    return\
    \ words[maxIndex];", "    int n = words.size();\n    int max = 0;\n    int max_index\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            if (words[i].size() > words[j].size()) {\n       \
    \         count += 1;\n            }\n        }\n        if (count > max) {\n\
    \            max = count;\n            max_index = i;\n        }\n    }\n    return\
    \ words[max_index];", "    // Write your code here\n    std::string max;\n   \
    \ int maxCount = 0;\n    for(auto &word: words){\n        int count = 0;\n   \
    \     for(auto &c: word){\n            count += 1;\n        }\n        if(count\
    \ > maxCount){\n            max = word;\n            maxCount = count;\n     \
    \   }\n    }\n    return max;", "    int max = 0;\n    int index = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max) {\n        \
    \    max = count;\n            index = words.size() - 1;\n        }\n    }\n \
    \   return words[index];", "    // Write your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for(auto &word: words){\n        int count = 0;\n\
    \        for(auto &c: word){\n            if(c == 'a'){\n                count++;\n\
    \            }\n        }\n        if(count > maxCount){\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    int max_count\
    \ = 0, max_index = 0;\n    for (size_t i = 0; i < words.size(); i++) {\n     \
    \   int count = 0;\n        for (size_t j = 0; j < words[i].size(); j++) {\n \
    \           count += words[i][j].size();\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_index = i;\n        }\n \
    \   }\n    return words[max_index];", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > max_count) {\n           \
    \ max = word;\n            max_count = count;\n        }\n    }\n    return max;",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max = word;\n \
    \           max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  int count = 0;\n        for (auto &c : word) {\n            count += 1;\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    int maxIndex = 0;\n    for (auto\
    \ &i : words) {\n        int count = 0;\n        for (auto &j : words) {\n   \
    \         if (i == j) {\n                continue;\n            }\n          \
    \  count += 1;\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxIndex = i;\n        }\n    }\n    return maxIndex;",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max = word;\n \
    \           max_count = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    std::string\
    \ maxWord;\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += 1;\n        }\n        if (count >\
    \ maxCount) {\n            maxCount = count;\n            maxWord = word;\n  \
    \      }\n    }\n    return maxWord;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto\
    \ it = words.begin(); it != words.end(); ++it){\n        int count = 0;\n    \
    \    for(auto it2 = words.begin(); it2 != words.end(); ++it2){\n            if((*it)\
    \ == (*it2)){\n                count++;\n            }\n        }\n        if(count\
    \ > maxCount){\n            max = *it;\n            maxCount = count;\n      \
    \  }\n    }\n    return max;", "    // Write your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto it = words.begin(); it != words.end();\
    \ ++it){\n        int count = 0;\n        for(auto it2 = words.begin(); it2 !=\
    \ words.end(); ++it2){\n            if((*it) == (*it2)){\n                count++;\n\
    \            }\n        }\n        if(count > maxCount){\n            max = *it;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words){\n        int count = 0;\n        for(auto &c: word){\n            count++;\n\
    \        }\n        if(count > maxCount){\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &w : words) {\n        int count = 0;\n\
    \        for (auto &c : w) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max = w;\n            max_count = count;\n     \
    \   }\n    }\n    return max;", "    int max_count = 0;\n    std::string max_word\
    \ = \"\";\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u');\n        }\n        if (count > max_count) {\n      \
    \      max_count = count;\n            max_word = word;\n        }\n    }\n  \
    \  return max_word;", "    // Write your code here\n    std::string max;\n   \
    \ int maxCount = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        int count = 0;\n        for (int j = 0; j < words[i].size();\
    \ j++) {\n            count += words[i][j];\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxIndex = i;\n        }\n   \
    \ }\n    return words[maxIndex];", "    std::string max;\n    int max_count =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    int max_chars\
    \ = 0, max_char_index = 0;\n    std::string max_word;\n    for (auto &word : words)\
    \ {\n        int chars = word.size();\n        if (chars > max_chars) {\n    \
    \        max_chars = chars;\n            max_word = word;\n        } else if (chars\
    \ == max_chars) {\n            if (word.compare(0, max_char_index, max_word) >\
    \ 0) {\n                max_word = word;\n                max_char_index = chars;\n\
    \            }\n        }\n    }\n    return max_word;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    std::string maxWord;\n    for\
    \ (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n\
    \            count += 1;\n        }\n        if (count > maxCount) {\n       \
    \     maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        int count = 0;\n        for(auto\
    \ &c: word){\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if(count > maxCount){\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = w;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n   \
    \     if (count > maxCount) {\n            max = word;\n            maxCount =\
    \ count;\n        }\n    }\n    return max;", "    // Write your code here\n \
    \   std::string max;\n    int maxCount = 0;\n    for(auto &word: words){\n   \
    \     std::set<char> chars;\n        for(auto &c: word){\n            chars.insert(c);\n\
    \        }\n        int count = chars.size();\n        if(count > maxCount){\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        int count = 0;\n        for(auto\
    \ &c: word){\n            count += 1;\n        }\n        if(count > maxCount){\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        for(auto &c: word){\n           \
    \ if(c == max){\n                maxCount++;\n            }\n        }\n     \
    \   if(maxCount > 0){\n            max = word;\n            maxCount = 1;\n  \
    \      }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto it = words.begin(); it != words.end();\
    \ ++it){\n        int count = 0;\n        for(auto it2 = words.begin(); it2 !=\
    \ words.end(); ++it2){\n            if(*it == *it2){\n                count++;\n\
    \            }\n        }\n        if(count > maxCount){\n            max = *it;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words){\n        int count = 0;\n        for(auto &c: word){\n            count\
    \ += 1;\n        }\n        if(count > maxCount){\n            max = word;\n \
    \           maxCount = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words) {\n        int count = 0;\n        for(auto &c: word) {\n           \
    \ count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n     \
    \   }\n        if(count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    int maxIndex = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (int i = 0; i < word.length();\
    \ i++) {\n            for (int j = 0; j < word.length(); j++) {\n            \
    \    if (i == j) {\n                    continue;\n                }\n       \
    \         if (word[i] == word[j]) {\n                    count++;\n          \
    \      }\n            }\n        }\n        if (count > maxCount) {\n        \
    \    maxCount = count;\n            maxIndex = word.length();\n            max\
    \ = word;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    std::string maxWord;\n    for (auto word :\
    \ words) {\n        int count = 0;\n        for (auto c : word) {\n          \
    \  count += (c == ' ') ? 1 : 0;\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max = \"\";\n    int maxCount = 0;\n \
    \   for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   // Write your code here\n    std::string max;\n    int max_count = 0;\n  \
    \  for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    int max = 0;\n    int index = 0;\n    std::string maxWord;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            if (std::count(word.begin(), word.end(), c) > count) {\n\
    \                count = std::count(word.begin(), word.end(), c);\n          \
    \      maxWord = word;\n                index = std::distance(word.begin(), std::max_element(word.begin(),\
    \ word.end()));\n            }\n        }\n        if (count > max) {\n      \
    \      max = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n \
    \       }\n        if (count > max_count) {\n            max = word;\n       \
    \     max_count = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    std::string temp;\n    int maxCount = 0;\n\
    \    int count = 0;\n    for(auto &i : words){\n        for(auto &j : i){\n  \
    \          count++;\n            if(count > maxCount){\n                maxCount\
    \ = count;\n                max = j;\n            }\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int max_count = 0;\n    for (auto &word :\
    \ words) {\n        int count = 0;\n        for (auto &c : word) {\n         \
    \   count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n   \
    \     }\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    for\
    \ (auto &i : words) {\n        int count = 0;\n        for (auto &j : i) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = i;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    std::string\
    \ maxWord;\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += 1;\n        }\n        if (count >\
    \ maxCount) {\n            maxCount = count;\n            maxWord = word;\n  \
    \      }\n    }\n    return maxWord;", "    // Write your code here\n    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &i : words) {\n        int count\
    \ = 0;\n        for (auto &j : i) {\n            count += 1;\n        }\n    \
    \    if (count > max_count) {\n            max = i;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int n = words.size();\n    std::string max;\n    int max_count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (words[j] == words[i]) {\n       \
    \         count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max = words[i];\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &i : words) {\n        int count = 0;\n       \
    \ for (auto &j : words) {\n            if (i == j) {\n                continue;\n\
    \            }\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = i;\n            maxCount = count;\n        }\n    }\n \
    \   return max;", "    // Write your code here\n    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max = word;\n            max_count = count;\n  \
    \      }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int max_count = 0;\n    int min_count = INT_MAX;\n    for(auto &i\
    \ : words) {\n        int count = 0;\n        for(auto &j : words) {\n       \
    \     if(i != j) {\n                count += 1;\n            }\n        }\n  \
    \      if(count > max_count) {\n            max = i;\n            max_count =\
    \ count;\n        }\n        if(count < min_count) {\n            min_count =\
    \ count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &w : words) {\n        int count\
    \ = 0;\n        for (auto &c : w) {\n            count += 1;\n        }\n    \
    \    if (count > maxCount) {\n            max = w;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > max_count) {\n           \
    \ max = word;\n            max_count = count;\n        }\n    }\n    return max;",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n   \
    \     if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    std::string maxWord;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         maxCount = count;\n            maxWord = word;\n        }\n    }\n \
    \   return maxWord;", "    // Write your code here\n    std::string max;\n   \
    \ int max_count = 0;\n    for (auto &w : words) {\n        std::unordered_set<char>\
    \ s;\n        for (auto &c : w) {\n            s.insert(c);\n        }\n     \
    \   if (s.size() > max_count) {\n            max = w;\n            max_count =\
    \ s.size();\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    std::string temp;\n    int count = 0;\n    for (auto &i : words) {\n\
    \        temp = i;\n        std::sort(temp.begin(), temp.end());\n        std::unique_copy(temp.begin(),\
    \ temp.end(), std::back_inserter(max));\n        count += 1;\n    }\n    if (count\
    \ > 1) {\n        max = temp;\n    }\n    return max;", "    int max_chars = 0,\
    \ max_char_index = 0;\n    std::string max_word = \"\";\n    for (auto &word :\
    \ words) {\n        int chars = word.size();\n        if (chars > max_chars) {\n\
    \            max_chars = chars;\n            max_char_index = word;\n        }\n\
    \    }\n    return max_char_index;", "    int n = words.size();\n    std::string\
    \ max_word;\n    int max_count = 0;\n    for (int i = 0; i < n; i++) {\n     \
    \   int count = 0;\n        for (int j = 0; j < n; j++) {\n            if (i ==\
    \ j) {\n                continue;\n            }\n            if (words[i].size()\
    \ > words[j].size()) {\n                count += 1;\n            }\n        }\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_word = words[i];\n        }\n    }\n    return max_word;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word:\
    \ words) {\n        int count = 0;\n        for (auto &c: word) {\n          \
    \  count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    \
    \    }\n        if (count > maxCount) {\n            max = word;\n           \
    \ maxCount = count;\n        }\n    }\n    return max;", "    // Write your code\
    \ here\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto &i\
    \ : words) {\n        int count = 0;\n        for (auto &j : i) {\n          \
    \  count += 1;\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = i;\n        }\n    }\n    return max;", "    //\
    \ Write your code here\n    std::string max;\n    int maxCount = 0;\n    int maxIndex\
    \ = 0;\n    for(int i = 0; i < words.size(); i++){\n        int count = 0;\n \
    \       for(int j = 0; j < words[i].size(); j++){\n            count += words[i][j];\n\
    \        }\n        if(count > maxCount){\n            maxCount = count;\n   \
    \         maxIndex = i;\n        }\n    }\n    return words[maxIndex];", "   \
    \ // Write your code here\n    std::string max;\n    int maxCount = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    std::string maxWord;\n    for (auto &word : words) {\n        int\
    \ count = 0;\n        for (auto &c : word) {\n            count += 1;\n      \
    \  }\n        if (count > maxCount) {\n            maxCount = count;\n       \
    \     maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        auto count\
    \ = std::count_if(word.begin(), word.end(), [](char c) {\n            return std::tolower(c)\
    \ != 'a';\n        });\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    int n = words.size();\n    std::string max;\n    int max_count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (words[j] == words[i]) {\n       \
    \         count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max = words[i];\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto &w : words) {\n        int count = 0;\n\
    \        for (auto &c : w) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = w;\n            maxCount = count;\n       \
    \ }\n    }\n    return max;", "    // Write your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > max_count) {\n            max = word;\n      \
    \      max_count = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max;\n    int max_count = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for(auto &word: words){\n        int count = 0;\n       \
    \ for(auto &c: word){\n            if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u'){\n                count++;\n            }\n        }\n    \
    \    if(count > maxCount){\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    int max_count\
    \ = 0;\n    std::string max_word;\n    for (auto &word : words) {\n        int\
    \ count = 0;\n        for (auto &c : word) {\n            count += 1;\n      \
    \  }\n        if (count > max_count) {\n            max_count = count;\n     \
    \       max_word = word;\n        }\n    }\n    return max_word;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words) {\n        int count = 0;\n        for(auto &c: word) {\n           \
    \ if(c == max[0]) {\n                count++;\n            }\n        }\n    \
    \    if(count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &i : words) {\n        int count = 0;\n        for (auto &j : i) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = i;\n            max_count = count;\n        }\n    }\n    return max;",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max = word;\n \
    \           max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    int max_count = 0;\n    std::string max_word\
    \ = \"\";\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u');\n        }\n        if (count > max_count) {\n      \
    \      max_count = count;\n            max_word = word;\n        }\n    }\n  \
    \  return max_word;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int n = words.size();\n    int max_count = 0;\n    int\
    \ max_index = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n\
    \        for (int j = 0; j < n; j++) {\n            if (i == j) {\n          \
    \      continue;\n            }\n            if (words[i].size() > words[j].size())\
    \ {\n                count += 1;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_index = i;\n\
    \        }\n    }\n    return words[max_index];", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for(auto &word: words){\n  \
    \      int count = 0;\n        for(auto &c: word){\n            count += 1;\n\
    \        }\n        if(count > maxCount){\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code goes\
    \ here\n    std::string max;\n    int maxCount = 0;\n    int maxIndex = 0;\n \
    \   for (auto &i : words) {\n        int count = 0;\n        for (auto &j : words)\
    \ {\n            if (i != j) {\n                count += 1;\n            }\n \
    \       }\n        if (count > maxCount) {\n            maxCount = count;\n  \
    \          maxIndex = i;\n        }\n    }\n    return maxIndex;", "    // Your\
    \ code here\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n \
    \       }\n        if (count > max_count) {\n            max = word;\n       \
    \     max_count = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    std::string max2;\n    std::string max3;\n\
    \    int maxCount = 0;\n    int maxCount2 = 0;\n    int maxCount3 = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        int count2 = 0;\n  \
    \      int count3 = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \            count2 += 1;\n            count3 += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \        maxCount2 = count2;\n            maxCount3 = count3;\n        }\n   \
    \     if (count2 > maxCount2) {\n            max2 = word;\n            maxCount2\
    \ = count2;\n            maxCount3 = count3;\n        }\n        if (count3 >\
    \ maxCount3) {\n            max3 = word;\n            maxCount3 = count3;\n  \
    \      }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &w : words) {\n        std::unordered_map<char,\
    \ int> m;\n        for (auto &c : w) {\n            m[c]++;\n        }\n     \
    \   if (m.size() > max_count) {\n            max = w;\n            max_count =\
    \ m.size();\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n\
    \        auto count = std::count_if(word.begin(), word.end(), [&](char c) {\n\
    \            return std::count(word.begin(), word.end(), c);\n        });\n  \
    \      if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max = word;\n            max_count = count;\n  \
    \      }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &i : words) {\n        int count\
    \ = 0;\n        for (auto &j : words) {\n            if (i == j) {\n         \
    \       continue;\n            }\n            count += 1;\n        }\n       \
    \ if (count > maxCount) {\n            max = i;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for(auto &word: words) {\n        std::unordered_set<char>\
    \ chars;\n        for(auto &c: word) {\n            chars.insert(c);\n       \
    \ }\n        if(chars.size() > maxCount) {\n            max = word;\n        \
    \    maxCount = chars.size();\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    std::string max2;\n    int maxCount\
    \ = 0;\n    int maxCount2 = 0;\n    int maxCount3 = 0;\n    int maxCount4 = 0;\n\
    \    int maxCount5 = 0;\n    int maxCount6 = 0;\n    int maxCount7 = 0;\n    int\
    \ maxCount8 = 0;\n    int maxCount9 = 0;\n    int maxCount10 = 0;\n    int maxCount11\
    \ = 0;\n    int maxCount12 = 0;\n    int maxCount13 = 0;\n    int maxCount14 =\
    \ 0;\n    int maxCount15 = 0;\n    int maxCount16 = 0;\n    int maxCount17 = 0;\n\
    \    int maxCount18 = 0;\n    int maxCount19 = 0;\n    int maxCount20 = 0;\n \
    \   int maxCount21 = 0;\n    int maxCount22 = 0;\n    int maxCount23 = 0;\n  \
    \  int maxCount24 = 0;\n    int maxCount25 = 0;\n    int maxCount26 = 0;\n   \
    \ int maxCount27 = 0;\n    int maxCount28 = 0;\n    int maxCount29 = 0;\n    int\
    \ maxCount30 = 0;\n    int maxCount31 = 0;\n    int maxCount32 = 0;\n    int maxCount33\
    \ = 0;\n    int maxCount34 = 0;\n    int maxCount35 = 0;\n    int maxCount36 =\
    \ 0;\n    int maxCount37 = 0;\n    int maxCount38 = 0;\n    int maxCount39 = 0;\n\
    \    int maxCount40 = 0;\n    int maxCount41 = 0;\n    int maxCount42 = 0;\n \
    \   int maxCount43 = 0;\n    int maxCount44 = 0;\n    int maxCount45 = 0;\n  \
    \  int maxCount46 = 0;\n    int maxCount47 = 0;\n    int maxCount48 = 0;\n   \
    \ int maxCount49 = 0;\n    int maxCount50 = 0;\n    int maxCount51 = 0;\n    int\
    \ maxCount52 = 0;\n    int maxCount53 = 0;\n    int maxCount54 = 0;\n    int maxCount55\
    \ = 0;\n    int maxCount56 = 0;\n    int maxCount57 = 0;\n    int maxCount58 =\
    \ 0;\n    int maxCount59 = 0;\n    int maxCount60 = 0;\n    int maxCount61 = 0;\n\
    \    int maxCount62 = 0;\n    int maxCount63 = 0;\n    int maxCount64 = 0;\n \
    \   int maxCount65 = 0;\n    int maxCount66 = 0;\n    int maxCount67 = 0;\n  \
    \  int maxCount68 = 0;\n    int maxCount69 = 0;\n    int maxCount70 = 0;\n   \
    \ int maxCount71 = 0;\n    int maxCount72 = 0;\n    int maxCount73 = 0;\n    int\
    \ maxCount74 = 0;\n    int maxCount75 = 0;\n    int maxCount76 = 0;\n    int maxCount77\
    \ = 0;\n    int maxCount78 = 0;\n    int maxCount79 = 0;\n    int maxCount80 =\
    \ 0;\n    int maxCount81 = 0;\n    int maxCount82 = 0;\n    int maxCount83 = 0;\n\
    \    int maxCount84", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &i : words) {\n        int count = 0;\n        for (auto\
    \ &j : i) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = i;\n            maxCount = count;\n        }\n    }\n \
    \   return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for(auto &word: words) {\n \
    \       int count = 0;\n        for(auto &c: word) {\n            count += (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n      \
    \  if(count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto &word: words){\n        int count\
    \ = 0;\n        for(auto &c: word){\n            if(c == 'a'){\n             \
    \   count++;\n            }\n        }\n        if(count > maxCount){\n      \
    \      max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int max_count = 0;\n    for (auto &word :\
    \ words) {\n        int count = 0;\n        for (auto &c : word) {\n         \
    \   count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n   \
    \     }\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    int max_count = 0, max_index = 0;\n    for (size_t i = 0; i < words.size();\
    \ i++) {\n        int count = 0;\n        for (size_t j = 0; j < words[i].size();\
    \ j++) {\n            if (words[i][j] == words[i][max_index]) {\n            \
    \    count++;\n            }\n        }\n        if (count > max_count) {\n  \
    \          max_count = count;\n            max_index = i;\n        }\n    }\n\
    \    return words[max_index];", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto &word : words){\n        int count\
    \ = 0;\n        for(auto &c : word){\n            if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u'){\n                count++;\n            }\n\
    \        }\n        if(count > maxCount){\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code goes\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word: words){\n\
    \        for(auto &c: word){\n            if(c == max){\n                maxCount++;\n\
    \            }\n        }\n        if(maxCount > words.size()){\n            max\
    \ = word;\n            maxCount = words.size();\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto it=words.begin();it!=words.end();it++){\n        auto it2\
    \ = words.begin();\n        for(auto it3=words.begin();it3!=words.end();it3++){\n\
    \            if((*it).compare((*it3))>0){\n                it2 = it3;\n      \
    \      }\n        }\n        auto it3 = words.begin();\n        for(auto it4=words.begin();it4!=words.end();it4++){\n\
    \            if((*it).compare((*it4))<0){\n                it3 = it4;\n      \
    \      }\n        }\n        if(it2==it3){\n            if(it2!=words.begin()){\n\
    \                max = *it;\n                maxCount = 1;\n            }\n  \
    \      }\n        else{\n            if(it2!=words.begin()){\n               \
    \ max = *it;\n                maxCount = 1;\n            }\n            else{\n\
    \                if(it3!=words.begin()){\n                    max = *it;\n   \
    \                 maxCount = 1;\n                }\n                else{\n  \
    \                  if(it4!=words.begin()){\n                        max = *it;\n\
    \                        maxCount = 1;\n                    }\n              \
    \      else{\n                        if(it!=words.begin()){\n               \
    \             max = *it;\n                            maxCount = 1;\n        \
    \                }\n                        else{\n                          \
    \  if(it!=words.end()){\n                                max = *it;\n        \
    \                        maxCount = 1;\n                            }\n      \
    \                      else{\n                                max = *it;\n   \
    \                             maxCount = 1;\n                            }\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return max;", "    // Write your code here\n   \
    \ std::string max;\n    int maxCount = 0;\n    for(auto &word: words) {\n    \
    \    int count = 0;\n        for(auto &c: word) {\n            if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n\
    \            }\n        }\n        if(count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &w : words) {\n        int count\
    \ = 0;\n        for (auto &c : w) {\n            count += 1;\n        }\n    \
    \    if (count > max_count) {\n            max = w;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto &word: words){\n        int count\
    \ = 0;\n        for(auto &c: word){\n            count++;\n        }\n       \
    \ if(count > maxCount){\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    std::string maxWord;\n    for\
    \ (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n\
    \            count += 1;\n        }\n        if (count > maxCount) {\n       \
    \     maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        int count = 0;\n        for(auto\
    \ &c: word){\n            count++;\n        }\n        if(count > maxCount){\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Write your code here\n    std::string max = \"\";\n \
    \   int maxCount = 0;\n    for(auto &word: words) {\n        std::unordered_map<char,\
    \ int> charCount;\n        for(auto &c: word) {\n            charCount[c]++;\n\
    \        }\n        auto it = charCount.begin();\n        int count = 0;\n   \
    \     while(it != charCount.end()) {\n            count += it->second;\n     \
    \       it++;\n        }\n        if(count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words){\n        for(auto &c: word){\n            ++maxCount;\n        }\n \
    \       if(maxCount > 0){\n            max = word;\n            maxCount = 1;\n\
    \        }\n        else{\n            maxCount = 0;\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word : words) {\n        int count = 0;\n        for(auto\
    \ &c : word) {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n                count++;\n            }\n        }\n        if(count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    int n = words.size();\n    int max = 0;\n\
    \    std::string maxWord;\n    for (int i = 0; i < n; i++) {\n        int count\
    \ = 0;\n        for (int j = 0; j < n; j++) {\n            if (i == j) {\n   \
    \             continue;\n            }\n            if (words[j].size() > words[i].size())\
    \ {\n                continue;\n            }\n            if (words[j].size()\
    \ == words[i].size()) {\n                for (int k = 0; k < words[j].size();\
    \ k++) {\n                    if (words[j][k] == words[i][k]) {\n            \
    \            count++;\n                    }\n                }\n            }\n\
    \        }\n        if (count > max) {\n            max = count;\n           \
    \ maxWord = words[i];\n        }\n    }\n    return maxWord;", "    // Your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    int maxIndex = 0;\n \
    \   for (auto &word : words) {\n        int count = 0;\n        int index = 0;\n\
    \        for (auto &c : word) {\n            count++;\n            if (count >\
    \ maxCount) {\n                maxCount = count;\n                maxIndex = index;\n\
    \            }\n            index++;\n        }\n    }\n    return words[maxIndex];",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto\
    \ &word: words) {\n        std::unordered_set<char> chars;\n        for(auto &c:\
    \ word) {\n            chars.insert(c);\n        }\n        int count = chars.size();\n\
    \        if(count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for(auto &word: words){\n  \
    \      int count = 0;\n        for(auto &c: word){\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if(count\
    \ > maxCount){\n            max = word;\n            maxCount = count;\n     \
    \   }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    std::string temp;\n    int maxCount = 0;\n    int count = 0;\n   \
    \ for(int i = 0; i < words.size(); i++){\n        for(int j = 0; j < words[i].size();\
    \ j++){\n            for(int k = 0; k < words[i].size(); k++){\n             \
    \   if(words[i][j] == words[i][k]){\n                    count++;\n          \
    \      }\n            }\n            if(count > maxCount){\n                max\
    \ = words[i];\n                maxCount = count;\n            }\n            count\
    \ = 0;\n        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words){\n        int count = 0;\n        for(auto &c: word){\n            if(c\
    \ == 'a'){\n                count++;\n            }\n        }\n        if(count\
    \ > maxCount){\n            max = word;\n            maxCount = count;\n     \
    \   }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &w : words) {\n        int count = 0;\n\
    \        for (auto &c : w) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = w;\n            maxCount = count;\n       \
    \ }\n    }\n    return max;", "    // Write your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int max_count = 0;\n    for (auto &w :\
    \ words) {\n        std::set<char> s;\n        for (auto &c : w) {\n         \
    \   s.insert(c);\n        }\n        if (s.size() > max_count) {\n           \
    \ max = w;\n            max_count = s.size();\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &i : words) {\n        int count = 0;\n        for (auto &j : words) {\n   \
    \         if (i == j) {\n                continue;\n            }\n          \
    \  count += 1;\n        }\n        if (count > max_count) {\n            max =\
    \ i;\n            max_count = count;\n        }\n    }\n    return max;", "  \
    \  // Write your code here\n    std::string max;\n    int max_count = 0;\n   \
    \ for(auto &i : words) {\n        int count = 0;\n        for(auto &j : i) {\n\
    \            count += 1;\n        }\n        if(count > max_count) {\n       \
    \     max_count = count;\n            max = i;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max\
    \ = w;\n            max_count = count;\n        }\n    }\n    return max;", " \
    \   // Write your code here\n    std::string max;\n    int maxCount = 0;\n   \
    \ for(auto &word: words){\n        int count = 0;\n        for(auto &c: word){\n\
    \            if(c == 'a'){\n                count++;\n            }\n        }\n\
    \        if(count > maxCount){\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    std::string maxWord;\n    for (auto word :\
    \ words) {\n        int count = 0;\n        for (auto c : word) {\n          \
    \  count += 1;\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    int\
    \ maxIndex = 0;\n    for (int i = 0; i < words.size(); i++) {\n        int count\
    \ = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            count\
    \ += words[i][j];\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxIndex = i;\n            max = words[i];\n        }\n\
    \    }\n    return max;", "    // Your code goes here\n    std::string max;\n\
    \    int maxCount = 0;\n    for(auto &word: words) {\n        int count = 0;\n\
    \        for(auto &c: word) {\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n                count++;\n        }\n        if(count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > max_count) {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;",
  "    int max = 0;\n    std::string maxWord = \"\";\n    for (auto word : words)\
    \ {\n        int count = 0;\n        for (auto c : word) {\n            count\
    \ += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n\
    \        if (count > max) {\n            max = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Your code goes here\n    std::string\
    \ max;\n    std::string temp;\n    int maxCount = 0;\n    for(auto &i : words)\n\
    \    {\n        for(auto &j : words)\n        {\n            if(i == j)\n    \
    \            continue;\n            int count = 0;\n            for(auto &k :\
    \ words)\n            {\n                if(k == i)\n                    continue;\n\
    \                for(auto &l : words)\n                {\n                   \
    \ if(l == j)\n                        continue;\n                    if(k == l)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)\n\
    \                        continue;\n                    if(k == i || l == j)\n\
    \                        continue;\n                    if(k == i && l == j)",
  "    // Write your code here\n    std::string max;\n    std::string temp;\n    int\
    \ count = 0;\n    for (auto &i : words) {\n        temp = i;\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::unique_copy(temp.begin(), temp.end(), std::back_inserter(max));\n\
    \        count += temp.size();\n    }\n    if (count > words.size()) {\n     \
    \   return words[words.size() - 1];\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words) {\n        int count = 0;\n        for(auto &c: word) {\n           \
    \ if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n           \
    \     count++;\n            }\n        }\n        if(count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word: words) {\n        int count = 0;\n        for (auto\
    \ &c: word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max = word;\n \
    \           max_count = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    std::string\
    \ maxWord = \"\";\n    for (auto &word : words) {\n        int count = 0;\n  \
    \      for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words) {\n        std::unordered_map<char,int> m;\n        for(auto &c: word)\
    \ {\n            m[c]++;\n        }\n        if(m.size() > maxCount) {\n     \
    \       max = word;\n            maxCount = m.size();\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    std::string maxWord = \"\";\n    for (auto &word : words) {\n        int\
    \ count = 0;\n        for (auto &c : word) {\n            count += 1;\n      \
    \  }\n        if (count > maxCount) {\n            maxCount = count;\n       \
    \     maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max;\n    int max_count = 0;\n    for(auto &i : words){\n   \
    \     std::sort(i.begin(), i.end());\n        std::set<int> s;\n        for(auto\
    \ &j : i){\n            s.insert(j);\n        }\n        if(s.size() > max_count){\n\
    \            max = i;\n            max_count = s.size();\n        }\n    }\n \
    \   return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto it = words.begin(); it != words.end();\
    \ ++it) {\n        std::set<char> chars;\n        for(auto it2 = it->begin();\
    \ it2 != it->end(); ++it2) {\n            chars.insert(*it2);\n        }\n   \
    \     if(chars.size() > maxCount) {\n            max = *it;\n            maxCount\
    \ = chars.size();\n        }\n    }\n    return max;", "    // Write your code\
    \ here\n    std::string max;\n    int max_count = 0;\n    for (auto &i : words)\
    \ {\n        int count = 0;\n        for (auto &j : words) {\n            if (i\
    \ == j) {\n                continue;\n            }\n            count += std::count(i.begin(),\
    \ i.end(), j);\n        }\n        if (count > max_count) {\n            max =\
    \ i;\n            max_count = count;\n        }\n    }\n    return max;", "  \
    \  std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    int max_count = 0;\n    std::string max_word\
    \ = \"\";\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += 1;\n        }\n        if (count >\
    \ max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    int\
    \ max_count = 0;\n    std::string max_word = \"\";\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto\
    \ &word: words){\n        int count = 0;\n        for(auto &c: word){\n      \
    \      count += (int)std::count(word.begin(), word.end(), c);\n        }\n   \
    \     if(count > maxCount){\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > max_count) {\n           \
    \ max_count = count;\n            max = word;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    std::string\
    \ maxWord;\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += 1;\n        }\n        if (count >\
    \ maxCount) {\n            maxCount = count;\n            maxWord = word;\n  \
    \      }\n    }\n    return maxWord;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto &word: words){\n        for(auto &c:\
    \ word){\n            if(c == max){\n                maxCount++;\n           \
    \ }\n        }\n        if(maxCount > words.size()){\n            max = word;\n\
    \            maxCount = words.size();\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n   \
    \     if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ max_count = 0;\n    for(auto &word: words) {\n        int count = 0;\n     \
    \   for(auto &c: word) {\n            count += (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u');\n        }\n        if(count > max_count) {\n    \
    \        max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    std::string maxWord;\n    for (auto &word : words) {\n        int\
    \ count = 0;\n        for (auto &c : word) {\n            count += 1;\n      \
    \  }\n        if (count > maxCount) {\n            maxCount = count;\n       \
    \     maxWord = word;\n        }\n    }\n    return maxWord;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words){\n        int count = 0;\n        for(auto &c: word){\n            count\
    \ += (c>='a' && c<='z') ? 26 : (c>='A' && c<='Z') ? 26 : 0;\n        }\n     \
    \   if(count > maxCount){\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto &i : words){\n        int count =\
    \ 0;\n        for(auto &j : i){\n            count += 1;\n        }\n        if(count\
    \ > maxCount){\n            max = i;\n            maxCount = count;\n        }\n\
    \    }\n    return max;", "    std::string max;\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max_count) {\n  \
    \          max = word;\n            max_count = count;\n        }\n    }\n   \
    \ return max;", "    int n = words.size();\n    int max_count = 0;\n    int max_index\
    \ = -1;\n    for (int i = 0; i < n; ++i) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; ++j) {\n            if (i == j) {\n                continue;\n\
    \            }\n            count += words[j].size();\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_index = i;\n\
    \        }\n    }\n    return words[max_index];", "    // Your code here\n   \
    \ std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n \
    \       int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;"]
stop_tokens:
- "\n}"
