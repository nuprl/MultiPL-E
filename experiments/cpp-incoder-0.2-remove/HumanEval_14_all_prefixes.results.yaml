language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqljazstx: /tmp/tmpqljazstx.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jg0hub0: /tmp/tmp9jg0hub0.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jg0hub0: /tmp/tmp9jg0hub0.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqbwecm45: /tmp/tmpqbwecm45.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        std::string prefix\
    \ = string.substr(0, i);\n        \n        for (int j = 0; j < prefixes.size();\
    \ j++) {\n            if (prefixes[j].find(prefix) == 0) {\n                prefixes[j]\
    \ += string.substr(i);\n                break;\n            }\n        }\n   \
    \ }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp27n9p3yy: /tmp/tmp27n9p3yy.cpp:23: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqljazstx: /tmp/tmpqljazstx.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto it = string.begin(); it != string.end(); ++it) {\n    \
    \    prefix += *it;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7kddwyph: /tmp/tmp7kddwyph.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjs0ajr6j: /tmp/tmpjs0ajr6j.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jg0hub0: /tmp/tmp9jg0hub0.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto it = string.begin(); it != string.end(); ++it) {\n    \
    \    prefix += *it;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpte86e3sp: /tmp/tmpte86e3sp.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmph249v7th: /tmp/tmph249v7th.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        std::string prefix\
    \ = string.substr(0, i);\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp83w8i2cy: /tmp/tmp83w8i2cy.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        if (string.length() - i <= prefix.size()) {\n \
    \           prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpi77slq73: /tmp/tmpi77slq73.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjs0ajr6j: /tmp/tmpjs0ajr6j.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqalkhyjl: /tmp/tmpqalkhyjl.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto it = string.begin(); it != string.end(); ++it) {\n    \
    \    prefix += *it;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.length(); i++) {\n        // Iterate through all possible\
    \ suffixes of the string\n        for (int j = i; j < string.length(); j++) {\n\
    \            // If current prefix and suffix are equal, add current prefix to\
    \ prefixes\n            if (string[i - 1] == string[j - 1]) {\n              \
    \  prefixes.push_back(string[i - 1]);\n            }\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgjd0p70.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpwgjd0p70.cpp:14:49: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   14 |                 prefixes.push_back(string[i\
    \ - 1]);\n      |                                                 ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwgjd0p70.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::alloc"
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (prefixes.size() == 0 || prefixes[prefixes.size() -\
    \ 1].length() < prefix.length()) {\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        if (string.length() - i > 1) {\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpttdinhg_: /tmp/tmpttdinhg_.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (prefix.size() == string.size()) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpr1gmhfew: /tmp/tmpr1gmhfew.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpves6uafr: /tmp/tmpves6uafr.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpj5j5yzi0: /tmp/tmpj5j5yzi0.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjs0ajr6j: /tmp/tmpjs0ajr6j.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpibdy471o: /tmp/tmpibdy471o.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqalkhyjl: /tmp/tmpqalkhyjl.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpsppcghtv: /tmp/tmpsppcghtv.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp_6hbpuig: /tmp/tmp_6hbpuig.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        if (string.length() - i < prefix.length()) {\n\
    \            prefixes.push_back(prefix);\n            prefix = \"\";\n       \
    \ }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmptnxrr0li: /tmp/tmptnxrr0li.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmz5pnh8: /tmp/tmpmmz5pnh8.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (int i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp0emfzqrh: /tmp/tmp0emfzqrh.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto it = string.begin(); it != string.end(); ++it) {\n    \
    \    if (*it == *prefix) {\n            prefixes.push_back(prefix);\n        \
    \    prefix = \"\";\n        } else {\n            prefix += *it;\n        }\n\
    \    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf8mfitfb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpf8mfitfb.cpp:8:20: error: no match\
    \ for \u2018operator*\u2019 (operand type is \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019})\n    8 |         if (*it == *prefix)\
    \ {\n      |                    ^~~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf8mfitfb.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpf8mfitfb.cpp:8:21:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n    8 |         if\
    \ (*it == *prefix) {\n      |                     ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf8mfitfb.cpp:2:\n/usr/include/c++/9/complex:400:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpf8mfitfb.cpp:8:21:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n    8 |         if\
    \ (*it == *prefix) {\n      |                     ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf8mfitfb.cpp:2:\n/usr/include/c++/9/complex:409:5:\
    \ note: candidate: \u2018template<class _Tp> std:"
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmz5pnh8: /tmp/tmpmmz5pnh8.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpyyirvuy2: /tmp/tmpyyirvuy2.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    std::string prefix = string;\n    while (!prefix.empty()) {\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppet9jsvt: /tmp/tmppet9jsvt.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_len = string.length();\n    \n    // Loop through all\
    \ possible prefixes of the string\n    for (size_t i = 1; i < prefix_len; i++)\
    \ {\n        // Add prefix to list of prefixes if current prefix is not the empty\
    \ string\n        if (string[i - 1] != \"\") {\n            prefixes.push_back(string[i\
    \ - 1]);\n        }\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvcwzu8t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdvcwzu8t.cpp:13:30: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   13 |     \
    \    if (string[i - 1] != \"\") {\n      |                              ^~\n/tmp/tmpdvcwzu8t.cpp:14:45:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   14 |             prefixes.push_back(string[i - 1]);\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvcwzu8t.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_"
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqljazstx: /tmp/tmpqljazstx.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmprvk1swfn: /tmp/tmprvk1swfn.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpfhscmfmr: /tmp/tmpfhscmfmr.cpp:15: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jg0hub0: /tmp/tmp9jg0hub0.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpj5j5yzi0: /tmp/tmpj5j5yzi0.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpibdy471o: /tmp/tmpibdy471o.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jg0hub0: /tmp/tmp9jg0hub0.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (prefix.size() == string.size()) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpr1gmhfew: /tmp/tmpr1gmhfew.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jg0hub0: /tmp/tmp9jg0hub0.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpibdy471o: /tmp/tmpibdy471o.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmphdk10q4o: /tmp/tmphdk10q4o.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp8987abl5: /tmp/tmp8987abl5.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Loop through all possible prefixes\n    for (int i = 1; i < string.size();\
    \ i++) {\n        // Add prefix to list of prefixes\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp5z0hhsft: /tmp/tmp5z0hhsft.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    std::string prefix = prefixes[i\
    \ - 1] + string[i];\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpojxj9495: /tmp/tmpojxj9495.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpsppcghtv: /tmp/tmpsppcghtv.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqljazstx: /tmp/tmpqljazstx.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp5usnrg60: /tmp/tmp5usnrg60.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (prefix.size() >= string.size()) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpfeqmbmq5: /tmp/tmpfeqmbmq5.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    size_t prefix_length = 1;\n    \n    while (prefix_length < string.size())\
    \ {\n        size_t prefix_index = string.find(prefix_length);\n        \n   \
    \     if (prefix_index != std::string::npos) {\n            prefixes.push_back(string.substr(0,\
    \ prefix_index));\n            \n            prefix_length = prefix_index + 1;\n\
    \        }\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqi40ntef: /tmp/tmpqi40ntef.cpp:24: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jg0hub0: /tmp/tmp9jg0hub0.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpkap9e1by: /tmp/tmpkap9e1by.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Loop through all possible prefixes of the string\n    for (int i\
    \ = 1; i < string.size(); i++) {\n        // Add prefix to list of prefixes if\
    \ string starts with it\n        if (string[i - 1] == string[i]) {\n         \
    \   prefixes.push_back(string);\n            break;\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp5ia63egc: /tmp/tmp5ia63egc.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix =\
    \ prefix + string[i];\n        if (string[i] == string[0]) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp8987abl5: /tmp/tmp8987abl5.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto it = string.begin(); it != string.end(); ++it) {\n    \
    \    prefix += *it;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (prefix.size() == string.size()) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpr1gmhfew: /tmp/tmpr1gmhfew.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpfhscmfmr: /tmp/tmpfhscmfmr.cpp:15: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjs0ajr6j: /tmp/tmpjs0ajr6j.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (int i = 1; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpj5j5yzi0: /tmp/tmpj5j5yzi0.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto it = string.begin(); it != string.end(); ++it) {\n    \
    \    prefix += *it;\n        if (prefix.size() > string.length()) {\n        \
    \    prefixes.push_back(prefix);\n            prefix = \"\";\n        }\n    }\n\
    \    prefixes.push_back(prefix);\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpbwjyi3tt: /tmp/tmpbwjyi3tt.cpp:19: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix\
    \ + string[i];\n        if (prefix.size() > string.length()) {\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        }\n    }\n    prefixes.push_back(prefix);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpw_2e38ah: /tmp/tmpw_2e38ah.cpp:19: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (int i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp0emfzqrh: /tmp/tmp0emfzqrh.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // Iterate through all possible prefixes of the string\n    for (int\
    \ i = 1; i < string.length(); i++) {\n        // Iterate through all possible\
    \ suffixes of the string\n        for (int j = i; j < string.length(); j++) {\n\
    \            // Append the prefix and suffix to the list of prefixes\n       \
    \     prefixes.push_back(string.substr(0, i) + string.substr(i, j));\n       \
    \ }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpfdngi7um: /tmp/tmpfdngi7um.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix += string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjs0ajr6j: /tmp/tmpjs0ajr6j.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141257
