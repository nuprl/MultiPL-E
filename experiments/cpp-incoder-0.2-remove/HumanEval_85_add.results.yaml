language: cpp
name: HumanEval_85_add
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long even = 0;\n    long\
    \ odd = 0;\n    long evensum = 0;\n    long oddsum = 0;\n    long evenevensum\
    \ = 0;\n    long oddoddsum = 0;\n    long evenoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long oddoddoddsum = 0;\n    long evenoddoddsum = 0;\n    long evenevenevensum\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeph2awec.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpeph2awec.cpp:21:10: error: redeclaration of \u2018long int evenevenevensum\u2019\
    \n   21 |     long evenevenevensum = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:18:10:\
    \ note: \u2018long int evenevenevensum\u2019 previously declared here\n   18 |\
    \     long evenevenevensum = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:22:10:\
    \ error: redeclaration of \u2018long int oddoddoddsum\u2019\n   22 |     long\
    \ oddoddoddsum = 0;\n      |          ^~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:19:10:\
    \ note: \u2018long int oddoddoddsum\u2019 previously declared here\n   19 |  \
    \   long oddoddoddsum = 0;\n      |          ^~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:23:10:\
    \ error: redeclaration of \u2018long int evenoddoddsum\u2019\n   23 |     long\
    \ evenoddoddsum = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:20:10:\
    \ note: \u2018long int evenoddoddsum\u2019 previously declared here\n   20 | \
    \    long evenoddoddsum = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:24:10:\
    \ error: redeclaration of \u2018long int evenevenevensum\u2019\n   24 |     long\
    \ evenevenevensum = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:18:10:\
    \ note: \u2018long int evenevenevensum\u2019 previously declared here\n   18 |\
    \     long evenevenevensum = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:25:10:\
    \ error: redeclaration of \u2018long int oddoddoddsum\u2019\n   25 |     long\
    \ oddoddoddsum = 0;\n      |          ^~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:19:10:\
    \ note: \u2018long int oddoddoddsum\u2019 previously declared here\n   19 |  \
    \   long oddoddoddsum = 0;\n      |          ^~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:26:10:\
    \ error: redeclaration of \u2018long int evenoddoddsum\u2019\n   26 |     long\
    \ evenoddoddsum = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:20:10:\
    \ note: \u2018long int evenoddoddsum\u2019 previously declared here\n   20 | \
    \    long evenoddoddsum = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpeph2awec.cpp:27:10:\
    \ error: redeclaration of \u2018long int evenevenevensum\u2019\n   27 |     long\
    \ evenevenevensum = 0;\n      |          ^~~"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long even = 0;\n    long odd = 0;\n    long index = 0;\n    for (index =\
    \ 0; index < n; index++) {\n        if (index % 2 == 0) {\n            even =\
    \ even + lst[index];\n        } else {\n            odd = odd + lst[index];\n\
    \        }\n    }\n    sum = even + odd;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpk13ywqg6: /tmp/tmpk13ywqg6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long temp = 0;\n    while\
    \ (i < n) {\n        j = i + 1;\n        while (j < n) {\n            if (lst[i]\
    \ % 2 == 0 && lst[j] % 2 == 1) {\n                temp = lst[i];\n           \
    \     lst[i] = lst[j];\n                lst[j] = temp;\n            }\n      \
    \      j++;\n        }\n        i++;\n    }\n    k = lst.size() - 1;\n    while\
    \ (k >= 0) {\n        if (lst[k] % 2 == 1) {\n            sum = sum + lst[k];\n\
    \            k--;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132553
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo1b_u6il: /tmp/tmpo1b_u6il.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    long\
    \ size = lst.size();\n    for (long i = 0; i < size; i++) {\n        if (i % 2\
    \ == 0) {\n            sum += lst[i];\n        }\n    }\n    for (long i = 0;\
    \ i < size; i++) {\n        if (i % 2 == 1) {\n            ans += sum;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmporfe4blc: /tmp/tmporfe4blc.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long even = 0;\n    long odd = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    long temp = 0;\n    long evenSum = 0;\n    long oddSum = 0;\n\
    \    long evenCount = 0;\n    long oddCount = 0;\n    long evenSum2 = 0;\n   \
    \ long oddSum2 = 0;\n    long evenCount2 = 0;\n    long oddCount2 = 0;\n    long\
    \ evenSum3 = 0;\n    long oddSum3 = 0;\n    long evenCount3 = 0;\n    long oddCount3\
    \ = 0;\n    long evenSum4 = 0;\n    long oddSum4 = 0;\n    long evenCount4 = 0;\n\
    \    long oddCount4 = 0;\n    long evenSum5 = 0;\n    long oddSum5 = 0;\n    long\
    \ evenCount5 = 0;\n    long oddCount5 = 0;\n    long evenSum6 = 0;\n    long oddSum6\
    \ = 0;\n    long evenCount6 = 0;\n    long oddCount6 = 0;\n    long evenSum7 =\
    \ 0;\n    long oddSum7 = 0;\n    long evenCount7 = 0;\n    long oddCount7 = 0;\n\
    \    long evenSum8 = 0;\n    long oddSum8 = 0;\n    long evenCount8 = 0;\n   \
    \ long oddCount8 = 0;\n    long evenSum9 = 0;\n    long oddSum9 = 0;\n    long\
    \ evenCount9 = 0;\n    long oddCount9 = 0;\n    long evenSum10 = 0;\n    long\
    \ oddSum10 = 0;\n    long evenCount10 = 0;\n    long oddCount10 = 0;\n    long\
    \ evenSum11 = 0;\n    long oddSum11 = 0;\n    long evenCount11 = 0;\n    long\
    \ oddCount11 = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n    long evenCount12\
    \ = 0;\n    long oddCount12 = 0;\n    long evenSum13 = 0;\n    long oddSum13 =\
    \ 0;\n    long evenCount13 = 0;\n    long oddCount13 = 0;\n    long evenSum14\
    \ = 0;\n    long oddSum14 = 0;\n    long evenCount14 = 0;\n    long oddCount14\
    \ = 0;\n    long evenSum15 = 0;\n    long oddSum15 = 0;\n    long evenCount15\
    \ = 0;\n    long oddCount15 = 0;\n    long evenSum16 = 0;\n    long oddSum16 =\
    \ 0;\n    long evenCount16 = 0;\n    long oddCount16 = 0;\n    long evenSum17\
    \ = 0;\n    long oddSum17 = 0;\n    long evenCount17 = 0;\n    long oddCount17\
    \ = 0;\n    long evenSum18 = 0;\n    long oddSum18 = 0;\n\n}\nint main() {\n \
    \   auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmphcsn3hk6: /tmp/tmphcsn3hk6.cpp:88: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long temp = 0;\n    long\
    \ even = 0;\n    long odd = 0;\n    long evenSum = 0;\n    long oddSum = 0;\n\
    \    long evenCount = 0;\n    long oddCount = 0;\n    long evenSum2 = 0;\n   \
    \ long oddSum2 = 0;\n    long evenCount2 = 0;\n    long oddCount2 = 0;\n    long\
    \ evenSum3 = 0;\n    long oddSum3 = 0;\n    long evenCount3 = 0;\n    long oddCount3\
    \ = 0;\n    long evenSum4 = 0;\n    long oddSum4 = 0;\n    long evenCount4 = 0;\n\
    \    long oddCount4 = 0;\n    long evenSum5 = 0;\n    long oddSum5 = 0;\n    long\
    \ evenCount5 = 0;\n    long oddCount5 = 0;\n    long evenSum6 = 0;\n    long oddSum6\
    \ = 0;\n    long evenCount6 = 0;\n    long oddCount6 = 0;\n    long evenSum7 =\
    \ 0;\n    long oddSum7 = 0;\n    long evenCount7 = 0;\n    long oddCount7 = 0;\n\
    \    long evenSum8 = 0;\n    long oddSum8 = 0;\n    long evenCount8 = 0;\n   \
    \ long oddCount8 = 0;\n    long evenSum9 = 0;\n    long oddSum9 = 0;\n    long\
    \ evenCount9 = 0;\n    long oddCount9 = 0;\n    long evenSum10 = 0;\n    long\
    \ oddSum10 = 0;\n    long evenCount10 = 0;\n    long oddCount10 = 0;\n    long\
    \ evenSum11 = 0;\n    long oddSum11 = 0;\n    long evenCount11 = 0;\n    long\
    \ oddCount11 = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n    long evenCount12\
    \ = 0;\n    long oddCount12 = 0;\n    long evenSum13 = 0;\n    long oddSum13 =\
    \ 0;\n    long evenCount13 = 0;\n    long oddCount13 = 0;\n    long evenSum14\
    \ = 0;\n    long oddSum14 = 0;\n    long evenCount14 = 0;\n    long oddCount14\
    \ = 0;\n    long evenSum15 = 0;\n    long oddSum15 = 0;\n    long evenCount15\
    \ = 0;\n    long oddCount15 = 0;\n    long evenSum16 = 0;\n    long oddSum16 =\
    \ 0;\n    long evenCount16 = 0;\n    long oddCount16 = 0;\n    long evenSum17\
    \ = 0;\n    long oddSum17 = 0;\n    long evenCount17 = 0;\n    long oddCount17\
    \ = 0;\n    long evenSum18 = 0;\n    long oddSum18 = 0;\n\n}\nint main() {\n \
    \   auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpcujare48: /tmp/tmpcujare48.cpp:88: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo1b_u6il: /tmp/tmpo1b_u6il.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo1b_u6il: /tmp/tmpo1b_u6il.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpu5xo0s3t: /tmp/tmpu5xo0s3t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long evenSum = 0;\n    long oddSum = 0;\n    long evenSum2\
    \ = 0;\n    long oddSum2 = 0;\n    long evenSum3 = 0;\n    long oddSum3 = 0;\n\
    \    long evenSum4 = 0;\n    long oddSum4 = 0;\n    long evenSum5 = 0;\n    long\
    \ oddSum5 = 0;\n    long evenSum6 = 0;\n    long oddSum6 = 0;\n    long evenSum7\
    \ = 0;\n    long oddSum7 = 0;\n    long evenSum8 = 0;\n    long oddSum8 = 0;\n\
    \    long evenSum9 = 0;\n    long oddSum9 = 0;\n    long evenSum10 = 0;\n    long\
    \ oddSum10 = 0;\n    long evenSum11 = 0;\n    long oddSum11 = 0;\n    long evenSum12\
    \ = 0;\n    long oddSum12 = 0;\n    long evenSum13 = 0;\n    long oddSum13 = 0;\n\
    \    long evenSum14 = 0;\n    long oddSum14 = 0;\n    long evenSum15 = 0;\n  \
    \  long oddSum15 = 0;\n    long evenSum16 = 0;\n    long oddSum16 = 0;\n    long\
    \ evenSum17 = 0;\n    long oddSum17 = 0;\n    long evenSum18 = 0;\n    long oddSum18\
    \ = 0;\n    long evenSum19 = 0;\n    long oddSum19 = 0;\n    long evenSum20 =\
    \ 0;\n    long oddSum20 = 0;\n    long evenSum21 = 0;\n    long oddSum21 = 0;\n\
    \    long evenSum22 = 0;\n    long oddSum22 = 0;\n    long evenSum23 = 0;\n  \
    \  long oddSum23 = 0;\n    long evenSum24 = 0;\n    long oddSum24 = 0;\n    long\
    \ evenSum25 = 0;\n    long oddSum25 = 0;\n    long evenSum26 = 0;\n    long oddSum26\
    \ = 0;\n    long evenSum27 = 0;\n    long oddSum27 = 0;\n    long evenSum28 =\
    \ 0;\n    long oddSum28 = 0;\n    long evenSum29 = 0;\n    long oddSum29 = 0;\n\
    \    long evenSum30 = 0;\n    long oddSum30 = 0;\n    long evenSum31 = 0;\n  \
    \  long oddSum31 = 0;\n    long evenSum32 = 0;\n    long oddSum32 = 0;\n    long\
    \ evenSum33 = 0;\n    long oddSum33 = 0;\n    long evenSum34 = 0;\n    long oddSum34\
    \ = 0;\n    long evenSum35 = 0;\n    long \n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1gftm9a.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpv1gftm9a.cpp:83:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   83 | }\n      | ^\n/tmp/tmpv1gftm9a.cpp:83:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < n) {\n        if (i % 2 == 0)\
    \ {\n            sum += lst[i];\n        }\n        i += 2;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpze1cue_a: /tmp/tmpze1cue_a.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n       \
    \     sum += lst[i];\n            even++;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbuggcd9u: /tmp/tmpbuggcd9u.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    ans = sum;\n    return ans;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzzk7dw34: /tmp/tmpzzk7dw34.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i : lst) {\n        if (i % 2 == 0) {\n       \
    \     even = even + i;\n        } else {\n            odd = odd + i;\n       \
    \ }\n    }\n    sum = even + odd;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbw1fysnx: /tmp/tmpbw1fysnx.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long even = 0;\n    long\
    \ odd = 0;\n    long evenSum = 0;\n    long oddSum = 0;\n    long evenCount =\
    \ 0;\n    long oddCount = 0;\n    long evenSum2 = 0;\n    long oddSum2 = 0;\n\
    \    long evenCount2 = 0;\n    long oddCount2 = 0;\n    long evenSum3 = 0;\n \
    \   long oddSum3 = 0;\n    long evenCount3 = 0;\n    long oddCount3 = 0;\n   \
    \ long evenSum4 = 0;\n    long oddSum4 = 0;\n    long evenCount4 = 0;\n    long\
    \ oddCount4 = 0;\n    long evenSum5 = 0;\n    long oddSum5 = 0;\n    long evenCount5\
    \ = 0;\n    long oddCount5 = 0;\n    long evenSum6 = 0;\n    long oddSum6 = 0;\n\
    \    long evenCount6 = 0;\n    long oddCount6 = 0;\n    long evenSum7 = 0;\n \
    \   long oddSum7 = 0;\n    long evenCount7 = 0;\n    long oddCount7 = 0;\n   \
    \ long evenSum8 = 0;\n    long oddSum8 = 0;\n    long evenCount8 = 0;\n    long\
    \ oddCount8 = 0;\n    long evenSum9 = 0;\n    long oddSum9 = 0;\n    long evenCount9\
    \ = 0;\n    long oddCount9 = 0;\n    long evenSum10 = 0;\n    long oddSum10 =\
    \ 0;\n    long evenCount10 = 0;\n    long oddCount10 = 0;\n    long evenSum11\
    \ = 0;\n    long oddSum11 = 0;\n    long evenCount11 = 0;\n    long oddCount11\
    \ = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n    long evenCount12\
    \ = 0;\n    long oddCount12 = 0;\n    long evenSum13 = 0;\n    long oddSum13 =\
    \ 0;\n    long evenCount13 = 0;\n    long oddCount13 = 0;\n    long evenSum14\
    \ = 0;\n    long oddSum14 = 0;\n    long evenCount14 = 0;\n    long oddCount14\
    \ = 0;\n    long evenSum15 = 0;\n    long oddSum15 = 0;\n    long evenCount15\
    \ = 0;\n    long oddCount15 = 0;\n    long evenSum16 = 0;\n    long oddSum16 =\
    \ 0;\n    long evenCount16 = 0;\n    long oddCount16 = 0;\n    long evenSum17\
    \ = 0;\n    long oddSum17 = 0;\n    long evenCount17 = 0;\n    long oddCount17\
    \ = 0;\n    long evenSum18 = 0;\n    long oddSum18 = 0;\n    long evenCount18\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptn34unj7.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmptn34unj7.cpp:84:1: error: expected initializer before \u2018}\u2019\
    \ token\n   84 | }\n      | ^\n/tmp/tmptn34unj7.cpp:84:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long i = 0;\n    long size = lst.size();\n    for (i = 0;\
    \ i < size; i++) {\n        if (i % 2 == 0) {\n            even = even + lst[i];\n\
    \        } else {\n            odd = odd + lst[i];\n        }\n    }\n    sum\
    \ = even + odd;\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpokjo3q0d: /tmp/tmpokjo3q0d.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            ans\
    \ += lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpyzsg_koj: /tmp/tmpyzsg_koj.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            ans\
    \ += lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdeln3me3: /tmp/tmpdeln3me3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmppvh1jted: /tmp/tmppvh1jted.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long even = lst[n/2];\n    for(long i = 0; i<n; i+=2){\n        sum += lst[i];\n\
    \    }\n    return sum + even;\n}\nint main() {\n    auto candidate = add;\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpkd_1ecox: /tmp/tmpkd_1ecox.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i : lst) {\n        if (i % 2 == 0) {\n       \
    \     even = even + i;\n        } else {\n            odd = odd + i;\n       \
    \ }\n    }\n    sum = even + odd;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbw1fysnx: /tmp/tmpbw1fysnx.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i : lst) {\n        if (i % 2 == 0) {\n       \
    \     even = even + i;\n        } else {\n            odd = odd + i;\n       \
    \ }\n    }\n    sum = even + odd;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbw1fysnx: /tmp/tmpbw1fysnx.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    long i = 0;\n    while (i <\
    \ size) {\n        if (lst[i] % 2 == 0) {\n            even = even + lst[i];\n\
    \        } else {\n            odd = odd + lst[i];\n        }\n        i++;\n\
    \    }\n    sum = even + odd;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp9mkpb_0k: /tmp/tmp9mkpb_0k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long sum2 = 0;\n    long\
    \ sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long\
    \ sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n   \
    \ long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 =\
    \ 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long\
    \ sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n\
    \    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25\
    \ = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long\
    \ sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n\
    \    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36\
    \ = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long\
    \ sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n\
    \    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47\
    \ = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long\
    \ sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n\
    \    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58\
    \ = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long\
    \ sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n\
    \    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69\
    \ = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long\
    \ sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n\
    \    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80\
    \ = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqvzdwnos.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpqvzdwnos.cpp:93:1: error: expected initializer before \u2018}\u2019\
    \ token\n   93 | }\n      | ^\n/tmp/tmpqvzdwnos.cpp:93:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    for (long i = 0; i < size; i++)\
    \ {\n        if (i % 2 == 0) {\n            even = even + lst[i];\n        } else\
    \ {\n            odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpln5t0q44: /tmp/tmpln5t0q44.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n       \
    \     sum += lst[i];\n        } else {\n            even += lst[i];\n        }\n\
    \    }\n    return sum + even;\n}\nint main() {\n    auto candidate = add;\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp3eiyd3xi: /tmp/tmp3eiyd3xi.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo1b_u6il: /tmp/tmpo1b_u6il.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i : lst) {\n        if (i % 2 == 0) {\n       \
    \     even = even + i;\n        } else {\n            odd = odd + i;\n       \
    \ }\n    }\n    sum = even + odd;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbw1fysnx: /tmp/tmpbw1fysnx.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for(auto i : lst) {\n        if(i%2==0) {\n            even+=i;\n\
    \        }\n        else {\n            odd+=i;\n        }\n    }\n    sum=even+odd;\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbkp0iu2p: /tmp/tmpbkp0iu2p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmppvh1jted: /tmp/tmppvh1jted.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long sum2 = 0;\n    long\
    \ sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long\
    \ sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n   \
    \ long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 =\
    \ 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long\
    \ sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n\
    \    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25\
    \ = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long\
    \ sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n\
    \    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36\
    \ = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long\
    \ sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n\
    \    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47\
    \ = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long\
    \ sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n\
    \    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58\
    \ = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long\
    \ sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n\
    \    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69\
    \ = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long\
    \ sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n\
    \    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80\
    \ = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqvzdwnos.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpqvzdwnos.cpp:93:1: error: expected initializer before \u2018}\u2019\
    \ token\n   93 | }\n      | ^\n/tmp/tmpqvzdwnos.cpp:93:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    while (i < size) {\n        if (lst[i] % 2 == 0) {\n   \
    \         even = even + lst[i];\n        } else {\n            odd = odd + lst[i];\n\
    \        }\n        i++;\n    }\n    long evenSize = even;\n    long oddSize =\
    \ odd;\n    while (j < size) {\n        if (lst[j] % 2 == 0) {\n            even\
    \ = even + lst[j];\n        } else {\n            odd = odd + lst[j];\n      \
    \  }\n        j++;\n    }\n    long evenSum = evenSize;\n    long oddSum = oddSize;\n\
    \    while (k < size) {\n        if (lst[k] % 2 == 0) {\n            even = even\
    \ + lst[k];\n        } else {\n            odd = odd + lst[k];\n        }\n  \
    \      k++;\n    }\n    long evenSum2 = even;\n    long oddSum2 = odd;\n    while\
    \ (i < size) {\n        if (lst[i] % 2 == 0) {\n            even = even + lst[i];\n\
    \        } else {\n            odd = odd + lst[i];\n        }\n        i++;\n\
    \    }\n    long evenSum3 = even;\n    long oddSum3 = odd;\n    while (j < size)\
    \ {\n        if (lst[j] % 2 == 0) {\n            even = even + lst[j];\n     \
    \   } else {\n            odd = odd + lst[j];\n        }\n        j++;\n    }\n\
    \    long evenSum4 = even;\n    long oddSum4 = odd;\n    while (k < size) {\n\
    \        if (lst[k] % 2 == 0) {\n            even = even + lst[k];\n        }\
    \ else {\n            odd = odd + lst[k];\n        }\n        k++;\n    }\n  \
    \  long evenSum5 = even;\n    long oddSum5 = odd;\n    while (i < size) {\n  \
    \      if (lst[i] % 2 == 0) {\n            even = even + lst[i];\n        } else\
    \ {\n            odd = odd + lst[i];\n        }\n        i++;\n    }\n    long\
    \ evenSum6 = even;\n    long oddSum6 = odd;\n    while (j < size) {\n        if\
    \ (lst[j] % 2 == 0) {\n            even = even + lst[j];\n        } else {\n \
    \           odd = odd + lst[j];\n        }\n        j++;\n    }\n    long evenSum7\
    \ = even;\n    long oddSum7 = odd;\n    while (k < size) {\n        if (lst[k]\
    \ % 2 == 0) {\n            even = even + lst[k];\n        } else {\n         \
    \   odd = odd + lst[k];\n        }\n        k++;\n    }\n    long evenSum\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoa2ulqgq.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpoa2ulqgq.cpp:102:1: error: expected initializer before \u2018}\u2019\
    \ token\n  102 | }\n      | ^\n/tmp/tmpoa2ulqgq.cpp:102:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpf2n_wbk_: /tmp/tmpf2n_wbk_.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpf2n_wbk_: /tmp/tmpf2n_wbk_.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long sum2 = 0;\n    long\
    \ sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long\
    \ sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n   \
    \ long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 =\
    \ 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long\
    \ sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n\
    \    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25\
    \ = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long\
    \ sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n\
    \    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36\
    \ = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long\
    \ sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n\
    \    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47\
    \ = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long\
    \ sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n\
    \    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58\
    \ = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long\
    \ sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n\
    \    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69\
    \ = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long\
    \ sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n\
    \    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80\
    \ = 0;\n    long sum81 = 0;\n    long sum82 = 0;\n    long sum\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqvzdwnos.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpqvzdwnos.cpp:93:1: error: expected initializer before \u2018}\u2019\
    \ token\n   93 | }\n      | ^\n/tmp/tmpqvzdwnos.cpp:93:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpu5xo0s3t: /tmp/tmpu5xo0s3t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long even = 0;\n    long\
    \ odd = 0;\n    long evenSum = 0;\n    long oddSum = 0;\n    long evenCount =\
    \ 0;\n    long oddCount = 0;\n    long evenSum2 = 0;\n    long oddSum2 = 0;\n\
    \    long evenCount2 = 0;\n    long oddCount2 = 0;\n    long evenSum3 = 0;\n \
    \   long oddSum3 = 0;\n    long evenCount3 = 0;\n    long oddCount3 = 0;\n   \
    \ long evenSum4 = 0;\n    long oddSum4 = 0;\n    long evenCount4 = 0;\n    long\
    \ oddCount4 = 0;\n    long evenSum5 = 0;\n    long oddSum5 = 0;\n    long evenCount5\
    \ = 0;\n    long oddCount5 = 0;\n    long evenSum6 = 0;\n    long oddSum6 = 0;\n\
    \    long evenCount6 = 0;\n    long oddCount6 = 0;\n    long evenSum7 = 0;\n \
    \   long oddSum7 = 0;\n    long evenCount7 = 0;\n    long oddCount7 = 0;\n   \
    \ long evenSum8 = 0;\n    long oddSum8 = 0;\n    long evenCount8 = 0;\n    long\
    \ oddCount8 = 0;\n    long evenSum9 = 0;\n    long oddSum9 = 0;\n    long evenCount9\
    \ = 0;\n    long oddCount9 = 0;\n    long evenSum10 = 0;\n    long oddSum10 =\
    \ 0;\n    long evenCount10 = 0;\n    long oddCount10 = 0;\n    long evenSum11\
    \ = 0;\n    long oddSum11 = 0;\n    long evenCount11 = 0;\n    long oddCount11\
    \ = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n    long evenCount12\
    \ = 0;\n    long oddCount12 = 0;\n    long evenSum13 = 0;\n    long oddSum13 =\
    \ 0;\n    long evenCount13 = 0;\n    long oddCount13 = 0;\n    long evenSum14\
    \ = 0;\n    long oddSum14 = 0;\n    long evenCount14 = 0;\n    long oddCount14\
    \ = 0;\n    long evenSum15 = 0;\n    long oddSum15 = 0;\n    long evenCount15\
    \ = 0;\n    long oddCount15 = 0;\n    long evenSum16 = 0;\n    long oddSum16 =\
    \ 0;\n    long evenCount16 = 0;\n    long oddCount16 = 0;\n    long evenSum17\
    \ = 0;\n    long oddSum17 = 0;\n    long evenCount17 = 0;\n    long oddCount17\
    \ = 0;\n    long evenSum18 = 0;\n    long oddSum18 = 0;\n    long evenCount18\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptn34unj7.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmptn34unj7.cpp:84:1: error: expected initializer before \u2018}\u2019\
    \ token\n   84 | }\n      | ^\n/tmp/tmptn34unj7.cpp:84:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(int i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo1b_u6il: /tmp/tmpo1b_u6il.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i : lst) {\n        if (i % 2 == 0) {\n       \
    \     even = even + i;\n        } else {\n            odd = odd + i;\n       \
    \ }\n    }\n    sum = even + odd;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbw1fysnx: /tmp/tmpbw1fysnx.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    ans = sum;\n    return ans;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzzk7dw34: /tmp/tmpzzk7dw34.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmppp2e6ikn: /tmp/tmppp2e6ikn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n       \
    \     even = even + lst[i];\n        }\n    }\n    sum = sum + even;\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmprd7utgg5: /tmp/tmprd7utgg5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpu5xo0s3t: /tmp/tmpu5xo0s3t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpu5xo0s3t: /tmp/tmpu5xo0s3t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpf2n_wbk_: /tmp/tmpf2n_wbk_.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long even = 0;\n    long odd = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    long temp = 0;\n    long evenSum = 0;\n    long oddSum = 0;\n\
    \    long evenCount = 0;\n    long oddCount = 0;\n    long evenSum2 = 0;\n   \
    \ long oddSum2 = 0;\n    long evenCount2 = 0;\n    long oddCount2 = 0;\n    long\
    \ evenSum3 = 0;\n    long oddSum3 = 0;\n    long evenCount3 = 0;\n    long oddCount3\
    \ = 0;\n    long evenSum4 = 0;\n    long oddSum4 = 0;\n    long evenCount4 = 0;\n\
    \    long oddCount4 = 0;\n    long evenSum5 = 0;\n    long oddSum5 = 0;\n    long\
    \ evenCount5 = 0;\n    long oddCount5 = 0;\n    long evenSum6 = 0;\n    long oddSum6\
    \ = 0;\n    long evenCount6 = 0;\n    long oddCount6 = 0;\n    long evenSum7 =\
    \ 0;\n    long oddSum7 = 0;\n    long evenCount7 = 0;\n    long oddCount7 = 0;\n\
    \    long evenSum8 = 0;\n    long oddSum8 = 0;\n    long evenCount8 = 0;\n   \
    \ long oddCount8 = 0;\n    long evenSum9 = 0;\n    long oddSum9 = 0;\n    long\
    \ evenCount9 = 0;\n    long oddCount9 = 0;\n    long evenSum10 = 0;\n    long\
    \ oddSum10 = 0;\n    long evenCount10 = 0;\n    long oddCount10 = 0;\n    long\
    \ evenSum11 = 0;\n    long oddSum11 = 0;\n    long evenCount11 = 0;\n    long\
    \ oddCount11 = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n    long evenCount12\
    \ = 0;\n    long oddCount12 = 0;\n    long evenSum13 = 0;\n    long oddSum13 =\
    \ 0;\n    long evenCount13 = 0;\n    long oddCount13 = 0;\n    long evenSum14\
    \ = 0;\n    long oddSum14 = 0;\n    long evenCount14 = 0;\n    long oddCount14\
    \ = 0;\n    long evenSum15 = 0;\n    long oddSum15 = 0;\n    long evenCount15\
    \ = 0;\n    long oddCount15 = 0;\n    long evenSum16 = 0;\n    long oddSum16 =\
    \ 0;\n    long evenCount16 = 0;\n    long oddCount16 = 0;\n    long evenSum17\
    \ = 0;\n    long oddSum17 = 0;\n    long evenCount17 = 0;\n    long oddCount17\
    \ = 0;\n    long evenSum18 = 0;\n    long oddSum18 = 0;\n\n}\nint main() {\n \
    \   auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmphcsn3hk6: /tmp/tmphcsn3hk6.cpp:88: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long evenSum = 0;\n\
    \    long oddSum = 0;\n    long evenSum2 = 0;\n    long oddSum2 = 0;\n    long\
    \ evenSum3 = 0;\n    long oddSum3 = 0;\n    long evenSum4 = 0;\n    long oddSum4\
    \ = 0;\n    long evenSum5 = 0;\n    long oddSum5 = 0;\n    long evenSum6 = 0;\n\
    \    long oddSum6 = 0;\n    long evenSum7 = 0;\n    long oddSum7 = 0;\n    long\
    \ evenSum8 = 0;\n    long oddSum8 = 0;\n    long evenSum9 = 0;\n    long oddSum9\
    \ = 0;\n    long evenSum10 = 0;\n    long oddSum10 = 0;\n    long evenSum11 =\
    \ 0;\n    long oddSum11 = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n\
    \    long evenSum13 = 0;\n    long oddSum13 = 0;\n    long evenSum14 = 0;\n  \
    \  long oddSum14 = 0;\n    long evenSum15 = 0;\n    long oddSum15 = 0;\n    long\
    \ evenSum16 = 0;\n    long oddSum16 = 0;\n    long evenSum17 = 0;\n    long oddSum17\
    \ = 0;\n    long evenSum18 = 0;\n    long oddSum18 = 0;\n    long evenSum19 =\
    \ 0;\n    long oddSum19 = 0;\n    long evenSum20 = 0;\n    long oddSum20 = 0;\n\
    \    long evenSum21 = 0;\n    long oddSum21 = 0;\n    long evenSum22 = 0;\n  \
    \  long oddSum22 = 0;\n    long evenSum23 = 0;\n    long oddSum23 = 0;\n    long\
    \ evenSum24 = 0;\n    long oddSum24 = 0;\n    long evenSum25 = 0;\n    long oddSum25\
    \ = 0;\n    long evenSum26 = 0;\n    long oddSum26 = 0;\n    long evenSum27 =\
    \ 0;\n    long oddSum27 = 0;\n    long evenSum28 = 0;\n    long oddSum28 = 0;\n\
    \    long evenSum29 = 0;\n    long oddSum29 = 0;\n    long evenSum30 = 0;\n  \
    \  long oddSum30 = 0;\n    long evenSum31 = 0;\n    long oddSum31 = 0;\n    long\
    \ evenSum32 = 0;\n    long oddSum32 = 0;\n    long evenSum33 = 0;\n    long oddSum33\
    \ = 0;\n    long evenSum34 = 0;\n    long oddSum34 = 0;\n    long evenSum35 =\
    \ 0;\n    long oddSum35 = 0;\n    long evenSum36 = 0;\n    long oddSum36 = 0;\n\
    \    long evenSum37 = 0;\n    long oddSum37 = 0;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp6e9ijvfm: /tmp/tmp6e9ijvfm.cpp:84: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long n = lst.size();\n    long evens = 0;\n   \
    \ long odds = 0;\n    long even = 0;\n    long odd = 0;\n    long sum = 0;\n \
    \   long temp = 0;\n    long count = 0;\n    long evenSum = 0;\n    long oddSum\
    \ = 0;\n    long evenCount = 0;\n    long oddCount = 0;\n    long evenSum2 = 0;\n\
    \    long oddSum2 = 0;\n    long evenCount2 = 0;\n    long oddCount2 = 0;\n  \
    \  long evenSum3 = 0;\n    long oddSum3 = 0;\n    long evenCount3 = 0;\n    long\
    \ oddCount3 = 0;\n    long evenSum4 = 0;\n    long oddSum4 = 0;\n    long evenCount4\
    \ = 0;\n    long oddCount4 = 0;\n    long evenSum5 = 0;\n    long oddSum5 = 0;\n\
    \    long evenCount5 = 0;\n    long oddCount5 = 0;\n    long evenSum6 = 0;\n \
    \   long oddSum6 = 0;\n    long evenCount6 = 0;\n    long oddCount6 = 0;\n   \
    \ long evenSum7 = 0;\n    long oddSum7 = 0;\n    long evenCount7 = 0;\n    long\
    \ oddCount7 = 0;\n    long evenSum8 = 0;\n    long oddSum8 = 0;\n    long evenCount8\
    \ = 0;\n    long oddCount8 = 0;\n    long evenSum9 = 0;\n    long oddSum9 = 0;\n\
    \    long evenCount9 = 0;\n    long oddCount9 = 0;\n    long evenSum10 = 0;\n\
    \    long oddSum10 = 0;\n    long evenCount10 = 0;\n    long oddCount10 = 0;\n\
    \    long evenSum11 = 0;\n    long oddSum11 = 0;\n    long evenCount11 = 0;\n\
    \    long oddCount11 = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n \
    \   long evenCount12 = 0;\n    long oddCount12 = 0;\n    long evenSum13 = 0;\n\
    \    long oddSum13 = 0;\n    long evenCount13 = 0;\n    long oddCount13 = 0;\n\
    \    long evenSum14 = 0;\n    long oddSum14 = 0;\n    long evenCount14 = 0;\n\
    \    long oddCount14 = 0;\n    long evenSum15 = 0;\n    long oddSum15 = 0;\n \
    \   long evenCount15 = 0;\n    long oddCount15 = 0;\n    long evenSum16 = 0;\n\
    \    long oddSum16 = 0;\n    long evenCount16 = 0;\n    long oddCount16 = 0;\n\
    \    long evenSum17 = 0;\n    long oddSum17 = 0;\n    long evenCount17 = 0;\n\
    \    long \n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37117kgn.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmp37117kgn.cpp:86:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   86 | }\n      | ^\n/tmp/tmp37117kgn.cpp:86:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum +=\
    \ lst[i];\n        }\n    }\n    ans = sum;\n    return ans;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzzk7dw34: /tmp/tmpzzk7dw34.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    for (long i = 0; i < size; i++)\
    \ {\n        if (i % 2 == 0) {\n            even = even + lst[i];\n        } else\
    \ {\n            odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpln5t0q44: /tmp/tmpln5t0q44.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpu5xo0s3t: /tmp/tmpu5xo0s3t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long temp = 0;\n    long evenSum = 0;\n    long oddSum =\
    \ 0;\n    long evenSum2 = 0;\n    long oddSum2 = 0;\n    long evenSum3 = 0;\n\
    \    long oddSum3 = 0;\n    long evenSum4 = 0;\n    long oddSum4 = 0;\n    long\
    \ evenSum5 = 0;\n    long oddSum5 = 0;\n    long evenSum6 = 0;\n    long oddSum6\
    \ = 0;\n    long evenSum7 = 0;\n    long oddSum7 = 0;\n    long evenSum8 = 0;\n\
    \    long oddSum8 = 0;\n    long evenSum9 = 0;\n    long oddSum9 = 0;\n    long\
    \ evenSum10 = 0;\n    long oddSum10 = 0;\n    long evenSum11 = 0;\n    long oddSum11\
    \ = 0;\n    long evenSum12 = 0;\n    long oddSum12 = 0;\n    long evenSum13 =\
    \ 0;\n    long oddSum13 = 0;\n    long evenSum14 = 0;\n    long oddSum14 = 0;\n\
    \    long evenSum15 = 0;\n    long oddSum15 = 0;\n    long evenSum16 = 0;\n  \
    \  long oddSum16 = 0;\n    long evenSum17 = 0;\n    long oddSum17 = 0;\n    long\
    \ evenSum18 = 0;\n    long oddSum18 = 0;\n    long evenSum19 = 0;\n    long oddSum19\
    \ = 0;\n    long evenSum20 = 0;\n    long oddSum20 = 0;\n    long evenSum21 =\
    \ 0;\n    long oddSum21 = 0;\n    long evenSum22 = 0;\n    long oddSum22 = 0;\n\
    \    long evenSum23 = 0;\n    long oddSum23 = 0;\n    long evenSum24 = 0;\n  \
    \  long oddSum24 = 0;\n    long evenSum25 = 0;\n    long oddSum25 = 0;\n    long\
    \ evenSum26 = 0;\n    long oddSum26 = 0;\n    long evenSum27 = 0;\n    long oddSum27\
    \ = 0;\n    long evenSum28 = 0;\n    long oddSum28 = 0;\n    long evenSum29 =\
    \ 0;\n    long oddSum29 = 0;\n    long evenSum30 = 0;\n    long oddSum30 = 0;\n\
    \    long evenSum31 = 0;\n    long oddSum31 = 0;\n    long evenSum32 = 0;\n  \
    \  long oddSum32 = 0;\n    long evenSum33 = 0;\n    long oddSum33 = 0;\n    long\
    \ evenSum34 = 0;\n    long oddSum34 = 0;\n    long evenSum\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_f615r_.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpy_f615r_.cpp:83:1: error: expected initializer before \u2018}\u2019\
    \ token\n   83 | }\n      | ^\n/tmp/tmpy_f615r_.cpp:83:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    for (long i = 0; i < size; i++)\
    \ {\n        if (i % 2 == 0) {\n            even = even + lst[i];\n        } else\
    \ {\n            odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpln5t0q44: /tmp/tmpln5t0q44.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long temp = 0;\n    while\
    \ (i < n) {\n        temp = lst[i];\n        if (i % 2 == 0) {\n            sum\
    \ += temp;\n        }\n        i += 2;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqtas01yu: /tmp/tmpqtas01yu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(lst[i] % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwgew6xb1: /tmp/tmpwgew6xb1.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < n) {\n        if (i % 2 == 0)\
    \ {\n            sum += lst[i];\n        }\n        i++;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2orpth10: /tmp/tmp2orpth10.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtu60w5j: /tmp/tmpdtu60w5j.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132547
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpf2n_wbk_: /tmp/tmpf2n_wbk_.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(lst[i] % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwgew6xb1: /tmp/tmpwgew6xb1.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(i % 2\
    \ == 0) {\n            even = even + lst[i];\n        } else {\n            odd\
    \ = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmplkhwsxds: /tmp/tmplkhwsxds.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132549
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmppp2e6ikn: /tmp/tmppp2e6ikn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    for (long i = 0; i < size; i++)\
    \ {\n        if (i % 2 == 0) {\n            even = even + lst[i];\n        } else\
    \ {\n            odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpln5t0q44: /tmp/tmpln5t0q44.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for(long i = 0; i <\
    \ lst.size(); i++) {\n        if(i % 2 == 0) {\n            ans += lst[i];\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp64cl_26a: /tmp/tmp64cl_26a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsii12mim: /tmp/tmpsii12mim.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long long sum = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n    \
    \        sum += lst[i];\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 != 0) {\n            ans += sum;\n            sum\
    \ = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdtcftcqp: /tmp/tmpdtcftcqp.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    long size = lst.size();\n    for (long i = 0; i < size; i++)\
    \ {\n        if (i % 2 == 0) {\n            even = even + lst[i];\n        } else\
    \ {\n            odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpln5t0q44: /tmp/tmpln5t0q44.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqb9rcl26: /tmp/tmpqb9rcl26.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpb83uq5kn: /tmp/tmpb83uq5kn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ long odd = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0) {\n            even = even + lst[i];\n        } else {\n           \
    \ odd = odd + lst[i];\n        }\n    }\n    sum = even + odd;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7549i4am: /tmp/tmp7549i4am.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long even = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n       \
    \     sum += lst[i];\n        } else {\n            even += lst[i];\n        }\n\
    \    }\n    return sum + even;\n}\nint main() {\n    auto candidate = add;\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp3eiyd3xi: /tmp/tmp3eiyd3xi.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132548
