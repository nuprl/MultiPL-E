name: HumanEval_56_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  <\" and \">\".\n// return True if every opening bracket has a corresponding closing\
  \ bracket.\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
  <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
  )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
  ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
  <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
  <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
  \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
completions: ["    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets++;\n        } else if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    } else {\n        return false;\n    }", "    //\
    \ initialize a stack to store opening brackets\n    stack<char> brackets_stack;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store opening brackets\n    stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_open;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close;\n\
    \    // initialize a stack to store opening brackets\n    stack<char> brackets_stack_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_open_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_open_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_open_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_",
  "    bool correct = true;\n    for(int i = 0; i < brackets.size(); i++) {\n    \
    \    if(brackets[i] == '<') {\n            if(brackets[i + 1] == '>') {\n    \
    \            correct = false;\n                break;\n            }\n       \
    \ }\n    }\n    return correct;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    size_t brackets_size = brackets.size();\n    for (size_t i = 0; i\
    \ < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;", "    size_t brackets_size = brackets.size();\n    size_t\
    \ open_brackets_size = 0;\n    size_t close_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<') {\n      \
    \      open_brackets_size++;\n        } else if (brackets[i] == '>') {\n     \
    \       close_brackets_size++;\n        }\n    }\n    if (open_brackets_size !=\
    \ close_brackets_size) {\n        return false;\n    }\n    for (size_t i = 0;\
    \ i < brackets_size; i++) {\n        if (brackets[i] == '<') {\n            if\
    \ (open_brackets_size == close_brackets_size) {\n                return true;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (open_brackets_size\
    \ != close_brackets_size) {\n                return false;\n            }\n  \
    \      }\n    }\n    return false;", "    size_t len = brackets.size();\n    bool\
    \ res = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') res = false;\n    }\n    return res;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] != '>') {\n                return false;\n      \
    \      }\n        }\n    }\n    return true;", "    int brackets_size = brackets.size();\n\
    \    for (int i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<')\
    \ {\n            int j = i + 1;\n            while (j < brackets_size && brackets[j]\
    \ == '>') {\n                j++;\n            }\n            if (j == brackets_size)\
    \ {\n                return false;\n            }\n            if (brackets[i]\
    \ == '>' && brackets[j] == '<') {\n                return false;\n           \
    \ }\n        }\n    }\n    return true;", "    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] != '<') result =\
    \ false;\n    }\n    return result;", "    std::string opening_brackets = brackets;\n\
    \    std::string closing_brackets = brackets;\n    opening_brackets.erase(opening_brackets.begin(),\
    \ opening_brackets.begin() + 1);\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.begin() + 1);\n    opening_brackets.erase(opening_brackets.begin(),\
    \ opening_brackets.end());\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.end());\n    bool result = true;\n    for (auto it = opening_brackets.begin();\
    \ it != opening_brackets.end(); ++it) {\n        if (closing_brackets.find(*it)\
    \ == closing_brackets.end()) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    int open_brackets = 0;\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets !=\
    \ close_brackets) {\n        return false;\n    }\n    return true;", "    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string opening_brackets_end\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_end\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_start\
    \ = opening_brackets.substr(0, opening_brackets_size);\n    std::string closing_brackets_start\
    \ = closing_brackets.substr(0, closing_brackets_size);\n    std::string opening_brackets_middle\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle2\
    \ = opening_brackets.substr(opening_brackets_size + 1);\n    std::string closing_brackets_middle2\
    \ = closing_brackets.substr(closing_brackets_size + 1);\n    std::string opening_brackets_middle3\
    \ = opening_brackets.substr(opening_brackets_size + 2);\n    std::string closing_brackets_middle3\
    \ = closing_brackets.substr(closing_brackets_size + 2);\n    std::string opening_brackets_middle4\
    \ = opening_brackets.substr(opening_brackets_size + 3);\n    std::string closing_brackets_middle4\
    \ = closing_brackets.substr(closing_brackets_size + 3);\n    std::string opening_brackets_middle5\
    \ = opening_brackets.substr(opening_brackets_size + 4);\n    std::string closing_brackets_middle5\
    \ = closing_brackets.substr(closing_brackets_size + 4);\n    std::string opening_brackets_middle6\
    \ = opening_brackets.substr(opening_brackets_size + 5);\n    std::string closing_brackets_middle6\
    \ = closing_brackets.substr(closing_brackets_size + 5);\n    std::string opening_brackets_middle7\
    \ = opening_brackets.substr(opening_brackets_size + 6);\n    std::string closing_brackets_middle7\
    \ = closing_brackets.substr(closing_brackets_size + 6);\n    std::string opening_brackets_middle8\
    \ = opening_brackets.substr(opening_brackets_size + ", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ += true;\n                i += 2;\n            } else {\n                result\
    \ += false;\n            }\n        } else {\n            if (brackets[i + 1]\
    \ != '>') {\n                result += false;\n            }\n        }\n    }\n\
    \    return result;", "    size_t opening_brackets = brackets.size();\n    size_t\
    \ closing_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n\
    \        if (brackets[i] == '<') {\n            ++opening_brackets;\n        }\
    \ else if (brackets[i] == '>') {\n            ++closing_brackets;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    std::string opening_brackets = \"([{\";\n    std::string\
    \ closing_brackets = \")]}\";\n    std::string opening_brackets_size = opening_brackets.size();\n\
    \    std::string closing_brackets_size = closing_brackets.size();\n    bool correct\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + opening_brackets_size] == '>') {\n \
    \               correct = false;\n            }\n        }\n    }\n    return\
    \ correct;", "    // Your code goes here\n    bool correct = false;\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      }\n        if (brackets[i] == '>') {\n            close_brackets++;\n \
    \       }\n        if (open_brackets == close_brackets) {\n            correct\
    \ = true;\n        }\n    }\n    return correct;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets.find(\"\
    <\", brackets.find(\"<\") + 1) != std::string::npos) {\n                result\
    \ = false;\n            }\n        } else if (c == '>') {\n            if (brackets.find(\"\
    >\", brackets.find(\">\") + 1) != std::string::npos) {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  correct = false;\n            break;\n        }\n    }\n    return correct;",
  "    int brackets_size = brackets.size();\n    for (int i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] !=\
    \ '=') {\n                return false;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (brackets[i + 1] != '>') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    bool result\
    \ = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it) {\n\
    \        if (*it == '<') {\n            if (brackets.end() != std::find(brackets.begin(),\
    \ brackets.end(), '>')) return false;\n        } else if (*it == '>') {\n    \
    \        if (brackets.end() != std::find(brackets.begin(), brackets.end(), '<'))\
    \ return false;\n        }\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] != '<') result = false;\n    }\n    return result;",
  "    int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] != '<') return false;\n    }\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] != '>') return false;\n    }\n    return true;",
  "    // initialize a stack\n    std::stack<char> brackets_stack;\n    // initialize\
    \ a boolean to indicate whether a closing bracket is found\n    bool found = false;\n\
    \    // iterate over each character in the brackets string\n    for (char c :\
    \ brackets) {\n        // if the character is a \"<\", push it onto the stack\n\
    \        if (c == '<') {\n            brackets_stack.push(c);\n        }\n   \
    \     // if the character is a \">\", pop it from the stack\n        else if (c\
    \ == '>') {\n            // if the stack is empty, the closing bracket is not\
    \ found\n            if (brackets_stack.empty()) {\n                return false;\n\
    \            }\n            // otherwise, pop the top character from the stack\n\
    \            else {\n                char top = brackets_stack.top();\n      \
    \          brackets_stack.pop();\n                // if the top character is the\
    \ closing bracket, found\n                if (top == c) {\n                  \
    \  found = true;\n                }\n            }\n        }\n        // otherwise,\
    \ the character is not \"<\" or \">\"\n        else {\n            // if the stack\
    \ is empty, the closing bracket is not found\n            if (brackets_stack.empty())\
    \ {\n                return false;\n            }\n            // otherwise, pop\
    \ the top character from the stack\n            else {\n                char top\
    \ = brackets_stack.top();\n                brackets_stack.pop();\n           \
    \     // if the top character is not the closing bracket, found\n            \
    \    if (top != c) {\n                    found = true;\n                }\n \
    \           }\n        }\n    }\n    // if the stack is empty, the brackets are\
    \ not correctly closed\n    if (brackets_stack.empty()) {\n        return false;\n\
    \    }\n    // otherwise, the brackets are correctly closed\n    else {\n    \
    \    return true;\n    }", "    std::string opening_brackets = \"([{\";\n    std::string\
    \ closing_brackets = \")]}\";\n    size_t opening_brackets_size = opening_brackets.size();\n\
    \    size_t closing_brackets_size = closing_brackets.size();\n    size_t brackets_size\
    \ = brackets.size();\n    size_t i = 0;\n    size_t j = 0;\n    bool result =\
    \ false;\n    while (i < brackets_size) {\n        if (brackets[i] == opening_brackets[j])\
    \ {\n            i++;\n            j++;\n            if (j == opening_brackets_size)\
    \ {\n                result = true;\n                break;\n            }\n \
    \       } else if (brackets[i] == closing_brackets[j]) {\n            i++;\n \
    \           j++;\n            if (j == closing_brackets_size) {\n            \
    \    result = true;\n                break;\n            }\n        } else {\n\
    \            i++;\n        }\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t closing_brackets_size = brackets.find_first_of(\">\");\n   \
    \ if (opening_brackets_size == std::string::npos || closing_brackets_size == std::string::npos)\
    \ {\n        return false;\n    }\n    size_t opening_brackets_count = opening_brackets_size\
    \ - 1;\n    size_t closing_brackets_count = closing_brackets_size - 1;\n    for\
    \ (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<') {\n\
    \            if (opening_brackets_count > 0) {\n                opening_brackets_count--;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (closing_brackets_count\
    \ > 0) {\n                closing_brackets_count--;\n            }\n        }\n\
    \    }\n    return opening_brackets_count == 0 && closing_brackets_count == 0;",
  "    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int i = 0; i <\
    \ brackets.length(); i++) {\n        if(brackets[i] == '<') {\n            open_brackets++;\n\
    \        }\n        else if(brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    if(open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;", "    bool correct = true;\n    std::string opening_brackets;\n\
    \    std::string closing_brackets;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            opening_brackets += c;\n        } else {\n       \
    \     closing_brackets += c;\n        }\n    }\n    if (opening_brackets.empty()\
    \ || closing_brackets.empty()) {\n        correct = false;\n    }\n    for (auto\
    \ c : opening_brackets) {\n        if (closing_brackets.find(c) == std::string::npos)\
    \ {\n            correct = false;\n        }\n    }\n    return correct;", " \
    \   size_t bracket_count = 0;\n    for (size_t i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++bracket_count;\n       \
    \ } else if (brackets[i] == '>') {\n            --bracket_count;\n        }\n\
    \    }\n    return bracket_count == 0;", "    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      ++open_brackets;\n        } else if (brackets[i] == '>') {\n          \
    \  ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    if (open_brackets != close_brackets) {\n        return false;\n  \
    \  }\n    return true;", "    bool result = true;\n    for (auto bracket = brackets.begin();\
    \ bracket != brackets.end(); ++bracket) {\n        if (*bracket != '<') result\
    \ = false;\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ &c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool correct = true;\n    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t closing_brackets_size = brackets.find_first_of(\">\");\n   \
    \ for (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<')\
    \ {\n            if (i < opening_brackets_size) {\n                correct = false;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (i <\
    \ closing_brackets_size) {\n                correct = false;\n            }\n\
    \        }\n    }\n    return correct;", "    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<') {\n      \
    \      open_brackets++;\n        } else if (brackets[i] == '>') {\n          \
    \  close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    bool correct = true;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] !=\
    \ '<') {\n            correct = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] !=\
    \ '>') {\n            correct = false;\n            break;\n        }\n    }\n\
    \    return correct;", "    int open_brackets = 0;\n    int close_brackets = 0;\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    bool result = true;\n\
    \    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets++;\n        } else if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        result = false;\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t open_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t close_brackets_size = brackets.find_first_of(\">\");\n    \n\
    \    if (open_brackets_size == close_brackets_size) {\n        // if brackets\
    \ are balanced, then return true.\n        return true;\n    }\n    \n    // if\
    \ brackets are not balanced, then return false.\n    return false;", "    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '>') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    return result;",
  "    std::string opening_brackets = \"([{\";\n    std::string closing_brackets =\
    \ \")]}\";\n    std::string opening_brackets_size = opening_brackets.size();\n\
    \    std::string closing_brackets_size = closing_brackets.size();\n    std::string\
    \ opening_brackets_end = opening_brackets.substr(opening_brackets_size - 1);\n\
    \    std::string closing_brackets_end = closing_brackets.substr(closing_brackets_size\
    \ - 1);\n    std::string opening_brackets_start = opening_brackets.substr(0, opening_brackets_size\
    \ - 1);\n    std::string closing_brackets_start = closing_brackets.substr(0, closing_brackets_size\
    \ - 1);\n    std::string opening_brackets_middle = opening_brackets.substr(0,\
    \ opening_brackets_size - 2);\n    std::string closing_brackets_middle = closing_brackets.substr(0,\
    \ closing_brackets_size - 2);\n    std::string opening_brackets_middle2 = opening_brackets.substr(0,\
    \ opening_brackets_size - 3);\n    std::string closing_brackets_middle2 = closing_brackets.substr(0,\
    \ closing_brackets_size - 3);\n    std::string opening_brackets_middle3 = opening_brackets.substr(0,\
    \ opening_brackets_size - 4);\n    std::string closing_brackets_middle3 = closing_brackets.substr(0,\
    \ closing_brackets_size - 4);\n    std::string opening_brackets_middle4 = opening_brackets.substr(0,\
    \ opening_brackets_size - 5);\n    std::string closing_brackets_middle4 = closing_brackets.substr(0,\
    \ closing_brackets_size - 5);\n    std::string opening_brackets_middle5 = opening_brackets.substr(0,\
    \ opening_brackets_size - 6);\n    std::string closing_brackets_middle5 = closing_brackets.substr(0,\
    \ closing_brackets_size - 6);\n    std::string opening_brackets_middle6 = opening_brackets.substr(0,\
    \ opening_brackets_size - 7);\n    std::string closing_brackets_middle6 = closing_brackets.substr(0,\
    \ closing_brackets_size - 7);\n    std::string opening_brackets_middle7 = opening_brackets.substr(0,\
    \ opening_brackets_size - 8);\n    std::string closing_brackets_middle7 = closing_brackets.substr(0,\
    \ closing_brackets_size - 8);\n    std::string opening", "    size_t brackets_size\
    \ = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] != '<') result = false;\n    }\n    return result;",
  "    bool correct = true;\n    for (auto &c : brackets) {\n        if (c == '<')\
    \ {\n            correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;", "    bool correct = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                correct = false;\n                break;\n            }\n   \
    \     }\n    }\n    return correct;", "    int len = brackets.size();\n    for\
    \ (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n           \
    \ if (brackets[i + 1] != '>') {\n                return false;\n            }\n\
    \        }\n    }\n    return true;", "    bool correct = true;\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    std::string\
    \ opening_bracket;\n    std::string closing_bracket;\n    int opening_brackets_size\
    \ = opening_brackets.size();\n    int closing_brackets_size = closing_brackets.size();\n\
    \    int opening_brackets_index = 0;\n    int closing_brackets_index = 0;\n  \
    \  while (opening_brackets_index < opening_brackets_size) {\n        opening_bracket\
    \ = opening_brackets.substr(opening_brackets_index, 1);\n        closing_bracket\
    \ = closing_brackets.substr(closing_brackets_index, 1);\n        if (opening_bracket\
    \ == \"<\") {\n            opening_brackets_index++;\n        }\n        if (closing_bracket\
    \ == \">\") {\n            closing_brackets_index++;\n        }\n        if (opening_brackets_index\
    \ >= opening_brackets_size || closing_brackets_index >= closing_brackets_size)\
    \ {\n            correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;", "    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        }\n        if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    }\n    return false;", "    // Write your code\
    \ here\n    \n    // return true if brackets is correct.\n    return false;",
  "    size_t brackets_size = brackets.size();\n    size_t open_brackets = 0;\n  \
    \  size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n       \
    \ } else if (brackets[i] == '>') {\n            ++close_brackets;\n        } else\
    \ {\n            return false;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] != '<') return false;\n\
    \    }\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i] != '>') return\
    \ false;\n    }\n    return true;", "    std::string opening_brackets = \"([{<\"\
    ;\n    std::string closing_brackets = \")]}>\";\n    std::string opening_brackets_size\
    \ = opening_brackets.size();\n    std::string closing_brackets_size = closing_brackets.size();\n\
    \    std::string opening_brackets_end = opening_brackets + opening_brackets_size;\n\
    \    std::string closing_brackets_end = closing_brackets + closing_brackets_size;\n\
    \    std::string opening_brackets_start = opening_brackets + 1;\n    std::string\
    \ closing_brackets_start = closing_brackets + 1;\n    std::string opening_brackets_middle\
    \ = opening_brackets + opening_brackets_size;\n    std::string closing_brackets_middle\
    \ = closing_brackets + closing_brackets_size;\n    std::string opening_brackets_middle2\
    \ = opening_brackets + opening_brackets_size + 1;\n    std::string closing_brackets_middle2\
    \ = closing_brackets + closing_brackets_size + 1;\n    std::string opening_brackets_middle3\
    \ = opening_brackets + opening_brackets_size + opening_brackets_size;\n    std::string\
    \ closing_brackets_middle3 = closing_brackets + closing_brackets_size + closing_brackets_size;\n\
    \    std::string opening_brackets_middle4 = opening_brackets + opening_brackets_size\
    \ + opening_brackets_size + 1;\n    std::string closing_brackets_middle4 = closing_brackets\
    \ + closing_brackets_size + closing_brackets_size + 1;\n    std::string opening_brackets_middle5\
    \ = opening_brackets + opening_brackets_size + opening_brackets_size + opening_brackets_size;\n\
    \    std::string closing_brackets_middle5 = closing_brackets + closing_brackets_size\
    \ + closing_brackets_size + closing_brackets_size;\n    std::string opening_brackets_middle6\
    \ = opening_brackets + opening_brackets_size + opening_brackets_size + opening_brackets_size\
    \ + 1;\n    std::string closing_brackets_middle6 = closing_brackets + closing_brackets_size\
    \ + closing_brackets_size + closing_brackets_size + 1;\n    std::string opening_brackets_middle7\
    \ = opening_brackets + opening_brackets_size + opening_bra", "    bool correct\
    \ = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n         \
    \   correct = false;\n            break;\n        }\n    }\n    return correct;",
  "    std::string opening_brackets = \"([{\";\n    std::string closing_brackets =\
    \ \")]}\";\n    std::string opening_brackets_size = opening_brackets.size();\n\
    \    std::string closing_brackets_size = closing_brackets.size();\n    std::string\
    \ brackets_size = brackets.size();\n    bool result = false;\n    for (int i =\
    \ 0; i < brackets_size; i++) {\n        if (brackets[i] == opening_brackets[i])\
    \ {\n            if (brackets[i + opening_brackets_size] == closing_brackets[i])\
    \ {\n                i += opening_brackets_size;\n                result += true;\n\
    \            } else {\n                result += false;\n            }\n     \
    \   }\n    }\n    return result;", "    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    size_t open_brackets_cnt = 0;\n    size_t close_brackets_cnt\
    \ = 0;\n    size_t open_brackets_cnt2 = 0;\n    size_t close_brackets_cnt2 = 0;\n\
    \    size_t open_brackets_cnt3 = 0;\n    size_t close_brackets_cnt3 = 0;\n   \
    \ size_t open_brackets_cnt4 = 0;\n    size_t close_brackets_cnt4 = 0;\n    size_t\
    \ open_brackets_cnt5 = 0;\n    size_t close_brackets_cnt5 = 0;\n    size_t open_brackets_cnt6\
    \ = 0;\n    size_t close_brackets_cnt6 = 0;\n    size_t open_brackets_cnt7 = 0;\n\
    \    size_t close_brackets_cnt7 = 0;\n    size_t open_brackets_cnt8 = 0;\n   \
    \ size_t close_brackets_cnt8 = 0;\n    size_t open_brackets_cnt9 = 0;\n    size_t\
    \ close_brackets_cnt9 = 0;\n    size_t open_brackets_cnt10 = 0;\n    size_t close_brackets_cnt10\
    \ = 0;\n    size_t open_brackets_cnt11 = 0;\n    size_t close_brackets_cnt11 =\
    \ 0;\n    size_t open_brackets_cnt12 = 0;\n    size_t close_brackets_cnt12 = 0;\n\
    \    size_t open_brackets_cnt13 = 0;\n    size_t close_brackets_cnt13 = 0;\n \
    \   size_t open_brackets_cnt14 = 0;\n    size_t close_brackets_cnt14 = 0;\n  \
    \  size_t open_brackets_cnt15 = 0;\n    size_t close_brackets_cnt15 = 0;\n   \
    \ size_t open_brackets_cnt16 = 0;\n    size_t close_brackets_cnt16 = 0;\n    size_t\
    \ open_brackets_cnt17 = 0;\n    size_t close_brackets_cnt17 = 0;\n    size_t open_brackets_cnt18\
    \ = 0;\n    size_t close_brackets_cnt18 = 0;\n    size_t open_brackets_cnt19 =\
    \ 0;\n    size_t close_brackets_cnt19 = 0;\n    size_t open_brackets_cnt20 = 0;\n\
    \    size_t close_brackets_cnt20 = 0;\n    size_t open_brackets_cnt21 = 0;\n \
    \   size_t close_brackets_cnt21 = 0;\n    size_t open_brackets_cnt22 = 0;\n  \
    \  size_t close_brackets_cnt22 = 0;\n    size_t open_brackets_cnt23 = 0;\n   \
    \ size_t close_brackets_cnt23 = 0;\n", "    bool correct = false;\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_cnt\
    \ = 0;\n    size_t close_brackets_cnt = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \          ++open_brackets_cnt;\n        } else if (brackets[i] == '>') {\n  \
    \          ++close_brackets;\n            ++close_brackets_cnt;\n        }\n \
    \   }\n    if (open_brackets == close_brackets) {\n        correct = true;\n \
    \   }\n    if (open_brackets_cnt != close_brackets_cnt) {\n        correct = false;\n\
    \    }\n    return correct;", "    size_t brackets_size = brackets.size();\n \
    \   bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n  \
    \      if (brackets[i] != '<') result = false;\n    }\n    return result;", " \
    \   int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] != '<') {\n        \
    \        return false;\n            }\n        } else if (brackets[i] == '>')\
    \ {\n            if (brackets[i + 1] != '>') {\n                return false;\n\
    \            }\n        }\n    }\n    return true;", "    bool correct = true;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] !=\
    \ '<') {\n            correct = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] !=\
    \ '>') {\n            correct = false;\n            break;\n        }\n    }\n\
    \    return correct;", "    std::string opening_brackets = \"([{\";\n    std::string\
    \ closing_brackets = \")]}\";\n    std::string opening_brackets_size = opening_brackets.size();\n\
    \    std::string closing_brackets_size = closing_brackets.size();\n    std::string\
    \ brackets_size = brackets.size();\n    bool result = false;\n    for (int i =\
    \ 0; i < brackets_size; i++) {\n        if (brackets.find(opening_brackets[i])\
    \ == std::string::npos) {\n            continue;\n        }\n        if (brackets.find(closing_brackets[i])\
    \ == std::string::npos) {\n            continue;\n        }\n        if (opening_brackets_size\
    \ == closing_brackets_size) {\n            result = true;\n            break;\n\
    \        }\n        if (opening_brackets_size < closing_brackets_size) {\n   \
    \         result = false;\n            break;\n        }\n    }\n    return result;",
  "    bool result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n \
    \       if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n\
    \                result = true;\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto &bracket : brackets) {\n \
    \       if (bracket != '<' && bracket != '>') {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;", "    bool correct\
    \ = true;\n    std::string opening_brackets = brackets;\n    std::string closing_brackets;\n\
    \    std::string opening_bracket;\n    std::string closing_bracket;\n    std::string\
    \ bracket;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n", "    bool result = true;\n    for (auto &c : brackets)\
    \ {\n        if (c == '<') {\n            result &= (brackets.find(\"<\", brackets.find(\"\
    <\") + 1) != std::string::npos);\n        }\n        if (c == '>') {\n       \
    \     result &= (brackets.find(\">\", brackets.find(\">\") + 1) != std::string::npos);\n\
    \        }\n    }\n    return result;", "    bool correct = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                correct = false;\n                break;\n \
    \           }\n        }\n    }\n    return correct;", "    bool result = true;\n\
    \    for (auto it = brackets.begin(); it != brackets.end(); ++it) {\n        if\
    \ (*it == '<') {\n            auto next = brackets.find(*it + 1, 1);\n       \
    \     if (next == brackets.end()) {\n                result = false;\n       \
    \         break;\n            }\n            if (*next != '>') {\n           \
    \     result = false;\n                break;\n            }\n        }\n    }\n\
    \    return result;", "    size_t len = brackets.size();\n    bool result = true;\n\
    \    for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n     \
    \   if (c == '<') {\n            if (brackets[i + 1] != '=') {\n             \
    \   result = false;\n                break;\n            }\n        } else if\
    \ (c == '>') {\n            if (brackets[i + 1] != '>') {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    size_t len = brackets.size();\n    bool result = true;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n        if (c\
    \ == '<') {\n            if (brackets[i + 1] != '<') {\n                result\
    \ = false;\n            }\n        }\n        else if (c == '>') {\n         \
    \   if (brackets[i + 1] != '>') {\n                result = false;\n         \
    \   }\n        }\n    }\n    return result;", "    bool result = true;\n    for\
    \ (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    int opening_brackets = 0;\n    int closing_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets++;\n        } else if (brackets[i] ==\
    \ '>') {\n            closing_brackets++;\n        }\n    }\n    if (opening_brackets\
    \ != closing_brackets) {\n        return false;\n    }\n    return true;", " \
    \   bool correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n\
    \        if (brackets[i] != '<') {\n            correct = false;\n           \
    \ break;\n        }\n    }\n    for (size_t i = 0; i < brackets.size(); i++) {\n\
    \        if (brackets[i] != '>') {\n            correct = false;\n           \
    \ break;\n        }\n    }\n    return correct;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    size_t brackets_size = brackets.size();\n\
    \    size_t open_brackets_size = 0;\n    size_t close_brackets_size = 0;\n   \
    \ bool result = true;\n    for (size_t i = 0; i < brackets_size; i++) {\n    \
    \    if (brackets[i] == '<') {\n            open_brackets_size++;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets_size++;\n        }\n \
    \   }\n    if (open_brackets_size != close_brackets_size) {\n        result =\
    \ false;\n    }\n    return result;", "    bool correct = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                correct = false;\n            }\n        }\n\
    \    }\n    return correct;", "    bool result = true;\n    for (auto it = brackets.begin();\
    \ it != brackets.end(); ++it) {\n        if (*it == '<') {\n            if (brackets.find('>',\
    \ it) == brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if (*it == '>') {\n            if (brackets.find('<',\
    \ it) == brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] !=\
    \ '<') result = false;\n    }\n    return result;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n \
    \           result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            if (brackets.find('>',\
    \ it) != brackets.end()) {\n                result = false;\n            }\n \
    \       }\n    }\n    return result;", "    bool result = true;\n    size_t pos\
    \ = 0;\n    size_t len = brackets.size();\n    while (pos < len) {\n        char\
    \ c = brackets[pos];\n        if (c == '<') {\n            if (pos == 0) {\n \
    \               result = false;\n                break;\n            }\n     \
    \       char prev = brackets[pos - 1];\n            if (prev == '>') {\n     \
    \           result = false;\n                break;\n            }\n        }\
    \ else if (c == '>') {\n            if (pos == len - 1) {\n                result\
    \ = false;\n                break;\n            }\n            char next = brackets[pos\
    \ + 1];\n            if (next == '<') {\n                result = false;\n   \
    \             break;\n            }\n        }\n        pos++;\n    }\n    return\
    \ result;", "    bool correct = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            correct = false;\n  \
    \          break;\n        }\n    }\n    for (size_t i = brackets.size() - 1;\
    \ i >= 0; i--) {\n        if (brackets[i] != '>') {\n            correct = false;\n\
    \            break;\n        }\n    }\n    return correct;", "    bool result\
    \ = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n         \
    \   if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    bool correct = true;\n   \
    \ for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] != '<')\
    \ {\n            correct = false;\n            break;\n        }\n    }\n    for\
    \ (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] != '>')\
    \ {\n            correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;", "    // Your code here\n    bool correct = false;\n    for(int i\
    \ = 0; i < brackets.size(); i++) {\n        if(brackets[i] == '<') {\n       \
    \     if(brackets[i+1] == '>') {\n                correct = true;\n          \
    \  }\n        }\n    }\n    return correct;", "    int open_brackets = 0;\n  \
    \  int close_brackets = 0;\n    for(int i = 0; i < brackets.length(); i++) {\n\
    \        if(brackets[i] == '<') {\n            open_brackets++;\n        }\n \
    \       if(brackets[i] == '>') {\n            close_brackets++;\n        }\n \
    \   }\n    if(open_brackets == close_brackets) {\n        return true;\n    }\n\
    \    return false;", "    size_t brackets_size = brackets.size();\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] !=\
    \ '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;", "    size_t brackets_size = brackets.size();\n    bool correct\
    \ = true;\n    for (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i]\
    \ != '<') correct = false;\n    }\n    return correct;", "    bool result = true;\n\
    \    for (auto bracket = brackets.begin(); bracket != brackets.end(); ++bracket)\
    \ {\n        if (*bracket != '<') result = false;\n    }\n    return result;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets++;\n        } else if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(opening_brackets.begin(), opening_brackets.begin()\
    \ + 1);\n    closing_brackets.erase(closing_brackets.begin(), closing_brackets.begin()\
    \ + 1);\n    bool result = true;\n    for (auto &c : opening_brackets) {\n   \
    \     if (c != '>') {\n            result = false;\n            break;\n     \
    \   }\n    }\n    for (auto &c : closing_brackets) {\n        if (c != '<') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    // your code goes here\n    bool result = true;\n    for(int\
    \ i = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '<') {\n   \
    \         if(brackets[i+1] == '>') {\n                result += true;\n      \
    \      }\n        }\n    }\n    return result;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for(size_t i = 0; i < len; ++i) {\n        char\
    \ c = brackets[i];\n        if(c == '<') {\n            if(brackets[i+1] != '<')\
    \ {\n                result = false;\n                break;\n            }\n\
    \            i += 2;\n        }\n        else if(c == '>') {\n            if(brackets[i+1]\
    \ != '>') {\n                result = false;\n                break;\n       \
    \     }\n            i += 2;\n        }\n    }\n    return result;", "    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] != '=') {\n                result = false;\n      \
    \          break;\n            }\n        } else if (c == '>') {\n           \
    \ if (brackets[i + 1] != '>') {\n                result = false;\n           \
    \     break;\n            }\n        }\n    }\n    return result;", "    bool\
    \ result = true;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '>') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;",
  "    int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;", " \
    \   bool result = true;\n    for (auto it = brackets.begin(); it != brackets.end();\
    \ ++it) {\n        if (*it == '<') {\n            if (brackets.end() != std::find(brackets.begin(),\
    \ brackets.end(), '>')) {\n                result = false;\n            }\n  \
    \      }\n    }\n    return result;", "    std::string opening_brackets = brackets;\n\
    \    std::string closing_brackets;\n    opening_brackets.erase(opening_brackets.begin(),\
    \ opening_brackets.begin() + 1);\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.end());\n    opening_brackets.erase(opening_brackets.end()\
    \ - 1, closing_brackets.end());\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.end() - 1);\n    bool result = opening_brackets.front() ==\
    \ closing_brackets.front();\n    return result;", "    bool result = true;\n \
    \   for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    std::string opening_brackets = \"([{<\";\n \
    \   std::string closing_brackets = \")]}>\";\n    std::string opening_brackets_index\
    \ = opening_brackets.find(brackets);\n    std::string closing_brackets_index =\
    \ closing_brackets.find(brackets);\n    bool correct = opening_brackets_index\
    \ != std::string::npos;\n    correct = correct && closing_brackets_index != std::string::npos;\n\
    \    return correct;", "    int open_brackets = 0;\n    int close_brackets = 0;\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;", "    int open_brackets = 0;\n    int close_brackets = 0;\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    bool result = true;\n    for\
    \ (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] != '<')\
    \ result = false;\n    }\n    return result;", "    size_t brackets_size = brackets.size();\n\
    \    bool correct = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n\
    \        if (brackets[i] != '<') {\n            correct = false;\n           \
    \ break;\n        }\n    }\n    for (size_t i = 0; i < brackets_size; ++i) {\n\
    \        if (brackets[i] != '>') {\n            correct = false;\n           \
    \ break;\n        }\n    }\n    return correct;", "    std::string opening_brackets\
    \ = \"([{\";\n    std::string closing_brackets = \")]}\";\n    std::string opening_brackets_index\
    \ = opening_brackets.find(brackets[0]);\n    std::string closing_brackets_index\
    \ = closing_brackets.find(brackets[1]);\n    if (opening_brackets_index == std::string::npos\
    \ || closing_brackets_index == std::string::npos)\n        return false;\n   \
    \ if (opening_brackets_index == closing_brackets_index)\n        return true;\n\
    \    if (opening_brackets_index > closing_brackets_index)\n        return false;\n\
    \    return true;", "    bool correct = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            correct = false;\n  \
    \          break;\n        }\n    }\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '>') {\n            correct = false;\n  \
    \          break;\n        }\n    }\n    return correct;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            opening_brackets_size++;\n        } else\
    \ if (c == '>') {\n            closing_brackets_size++;\n        }\n    }\n  \
    \  if (opening_brackets_size != closing_brackets_size) {\n        return false;\n\
    \    }\n    for (size_t i = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            opening_brackets_size--;\n        } else\
    \ if (c == '>') {\n            closing_brackets_size--;\n        }\n    }\n  \
    \  if (opening_brackets_size != 0) {\n        return false;\n    }\n    return\
    \ true;", "    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') result = false;\n    }\n    return result;",
  "    size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n \
    \   for (size_t i = 0; i < open_brackets; ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return close_brackets\
    \ == open_brackets;", "    int len = brackets.size();\n    for (int i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i +\
    \ 1] != '>') {\n                return false;\n            }\n        }\n    }\n\
    \    return true;", "    size_t brackets_size = brackets.size();\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets_size; i++) {\n        char open_bracket\
    \ = brackets[i];\n        char close_bracket = brackets[brackets_size - i - 1];\n\
    \        if (open_bracket != close_bracket) {\n            result = false;\n \
    \           break;\n        }\n    }\n    return result;", "    // initialize\
    \ a stack to keep track of brackets\n    std::stack<char> brackets_stack;\n  \
    \  // initialize a boolean to keep track of whether a bracket is open\n    bool\
    \ is_open = false;\n    // initialize a boolean to keep track of whether a bracket\
    \ is closed\n    bool is_closed = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is correct\n    bool is_correct = false;\n    //\
    \ initialize a boolean to keep track of whether a bracket is incorrect\n    bool\
    \ is_incorrect = false;\n    // initialize a boolean to keep track of whether\
    \ a bracket is ignored\n    bool is_ignored = false;\n    // initialize a boolean\
    \ to keep track of whether a bracket is ignored\n    bool is_opening_bracket =\
    \ false;\n    // initialize a boolean to keep track of whether a bracket is ignored\n\
    \    bool is_closing_bracket = false;\n    // initialize a boolean to keep track\
    \ of whether a bracket is ignored\n    bool is_opening_square_bracket = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_square_bracket = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_curly_bracket = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_curly_bracket = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_angle_bracket = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_angle_bracket = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_parenthesis = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_parenthesis = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_square_parenthesis\
    \ = false;\n    // initialize a boolean to keep track of whether a bracket is\
    \ ignored\n    bool is_closing_square_parenthesis = false;\n    // initialize\
    \ a boolean to keep track of whether a bracket is ignored\n    bool is_opening_curly_parenthesis\
    \ = false;\n    // initialize a boolean to keep track of whether a bracket is\
    \ ignored\n    bool is_closing_curly_parenthesis = false;\n    // initialize a\
    \ boolean to keep track of whether a bracket is ignored\n    bool is_opening_angled_parenthesis\
    \ = false;\n    // initialize a boolean to keep track of whether a bracket is\
    \ ignored\n    bool is_closing_angle", "    size_t brackets_size = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       char open_bracket = brackets[i];\n        char close_bracket = brackets[brackets_size\
    \ - i - 1];\n        if (open_bracket != close_bracket) {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;", "    bool\
    \ result = true;\n    size_t len = brackets.size();\n    for (size_t i = 0; i\
    \ < len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n    \
    \        char next_c = brackets[i + 1];\n            if (next_c == '>') {\n  \
    \              i += 1;\n            } else {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    std::string opening_brackets\
    \ = \"([{\";\n    std::string closing_brackets = \")]}\";\n    std::string opening_brackets_index\
    \ = opening_brackets.find(brackets[0]);\n    std::string closing_brackets_index\
    \ = closing_brackets.find(brackets[1]);\n    if (opening_brackets_index == std::string::npos\
    \ || closing_brackets_index == std::string::npos) {\n        return false;\n \
    \   }\n    if (opening_brackets_index > closing_brackets_index) {\n        return\
    \ false;\n    }\n    return true;", "    int len = brackets.size();\n    for (int\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i\
    \ + 1] == '>') {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    while (i < open_brackets)\
    \ {\n        if (brackets[i] == '<') {\n            close_brackets++;\n      \
    \  }\n        i++;\n    }\n    while (j < close_brackets) {\n        if (brackets[j]\
    \ == '>') {\n            open_brackets--;\n        }\n        j++;\n    }\n  \
    \  return open_brackets == close_brackets;", "    int open_brackets = 0;\n   \
    \ int close_brackets = 0;\n    for (int i = 0; i < brackets.size(); ++i) {\n \
    \       if (brackets[i] == '<') {\n            ++open_brackets;\n        } else\
    \ if (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n\
    \            return false;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < open_brackets; ++i) {\n        if (brackets[i] == '<') {\n            ++close_brackets;\n\
    \        } else {\n            assert(brackets[i] == '>');\n        }\n    }\n\
    \    return open_brackets == close_brackets;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i) {\n        char\
    \ c = brackets[i];\n        if (c == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                result += true;\n            }\n        }\n    }\n \
    \   return result;", "    int open_brackets = brackets.size();\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < open_brackets; i++) {\n        if (brackets[i]\
    \ == '<') {\n            close_brackets++;\n        }\n    }\n    for (int i =\
    \ 0; i < open_brackets; i++) {\n        if (brackets[i] == '>') {\n          \
    \  close_brackets--;\n        }\n    }\n    return close_brackets == 0;", "  \
    \  size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n \
    \   for (size_t i = 0; i < open_brackets; ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return close_brackets\
    \ == open_brackets;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    size_t open_brackets_cnt = 0;\n    size_t close_brackets_cnt = 0;\n\
    \    size_t open_brackets_cnt2 = 0;\n    size_t close_brackets_cnt2 = 0;\n   \
    \ size_t open_brackets_cnt3 = 0;\n    size_t close_brackets_cnt3 = 0;\n    size_t\
    \ open_brackets_cnt4 = 0;\n    size_t close_brackets_cnt4 = 0;\n    size_t open_brackets_cnt5\
    \ = 0;\n    size_t close_brackets_cnt5 = 0;\n    size_t open_brackets_cnt6 = 0;\n\
    \    size_t close_brackets_cnt6 = 0;\n    size_t open_brackets_cnt7 = 0;\n   \
    \ size_t close_brackets_cnt7 = 0;\n    size_t open_brackets_cnt8 = 0;\n    size_t\
    \ close_brackets_cnt8 = 0;\n    size_t open_brackets_cnt9 = 0;\n    size_t close_brackets_cnt9\
    \ = 0;\n    size_t open_brackets_cnt10 = 0;\n    size_t close_brackets_cnt10 =\
    \ 0;\n    size_t open_brackets_cnt11 = 0;\n    size_t close_brackets_cnt11 = 0;\n\
    \    size_t open_brackets_cnt12 = 0;\n    size_t close_brackets_cnt12 = 0;\n \
    \   size_t open_brackets_cnt13 = 0;\n    size_t close_brackets_cnt13 = 0;\n  \
    \  size_t open_brackets_cnt14 = 0;\n    size_t close_brackets_cnt14 = 0;\n   \
    \ size_t open_brackets_cnt15 = 0;\n    size_t close_brackets_cnt15 = 0;\n    size_t\
    \ open_brackets_cnt16 = 0;\n    size_t close_brackets_cnt16 = 0;\n    size_t open_brackets_cnt17\
    \ = 0;\n    size_t close_brackets_cnt17 = 0;\n    size_t open_brackets_cnt18 =\
    \ 0;\n    size_t close_brackets_cnt18 = 0;\n    size_t open_brackets_cnt19 = 0;\n\
    \    size_t close_brackets_cnt19 = 0;\n    size_t open_brackets_cnt20 = 0;\n \
    \   size_t close_brackets_cnt20 = 0;\n    size_t open_brackets_cnt21 = 0;\n  \
    \  size_t close_brackets_cnt21 = 0;\n    size_t open_brackets_cnt22 = 0;\n   \
    \ size_t close_brackets_cnt22 = 0;\n    size_t open_brackets_cnt23 = 0;\n    size_t\
    \ close_brackets_cnt23 = 0;\n", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c != '<' && c != '>') {\n            result = false;\n      \
    \  }\n    }\n    return result;", "    bool result = true;\n    for (auto c :\
    \ brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool correct = true;\n    for (size_t i = 0;\
    \ i < brackets.size(); i++) {\n        if (brackets[i] != '<') {\n           \
    \ correct = false;\n            break;\n        }\n    }\n    for (size_t i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '>') {\n        \
    \    if (i < brackets.size() - 1) {\n                if (brackets[i + 1] != '<')\
    \ {\n                    correct = false;\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    return correct;", "    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                correct\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;", "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    if (open_brackets != close_brackets) {\n        return\
    \ false;\n    }\n    return true;", "    bool result = true;\n    for (auto c\
    \ : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool correct = true;\n    for (auto &c : brackets)\
    \ {\n        if (c == '<') {\n            correct = correct && false;\n      \
    \  }\n        else if (c == '>') {\n            correct = correct && true;\n \
    \       }\n        else {\n            correct = correct && false;\n        }\n\
    \    }\n    return correct;", "    bool result = true;\n    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    while (i < open_brackets) {\n        if (brackets[i] == '<') {\n\
    \            close_brackets++;\n        } else if (brackets[i] == '>') {\n   \
    \         close_brackets--;\n        }\n        i++;\n    }\n    if (close_brackets\
    \ != 0) {\n        result = false;\n    }\n    return result;", "    bool result\
    \ = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it) {\n\
    \        if (*it == '<') {\n            result += (*(it + 1) != '<');\n      \
    \  }\n        if (*it == '>') {\n            result += (*(it + 1) != '>');\n \
    \       }\n    }\n    return result;", "    bool correct = true;\n    for (auto\
    \ &c : brackets) {\n        if (c == '<') {\n            correct = false;\n  \
    \          break;\n        }\n    }\n    return correct;", "    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ != '<') result = false;\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto &bracket : brackets) {\n        if (bracket != '<' && bracket !=\
    \ '>') {\n            result = false;\n        }\n    }\n    return result;",
  "    std::string opening_brackets = \"([{\";\n    std::string closing_brackets =\
    \ \")]}\";\n    std::string opening_brackets_size = opening_brackets.size();\n\
    \    std::string closing_brackets_size = closing_brackets.size();\n    std::string\
    \ opening_brackets_end = opening_brackets.substr(opening_brackets_size);\n   \
    \ std::string closing_brackets_end = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_start = opening_brackets.substr(0, opening_brackets_size);\n\
    \    std::string closing_brackets_start = closing_brackets.substr(0, closing_brackets_size);\n\
    \    std::string opening_brackets_middle = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_middle2 = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle2 = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_middle3 = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle3 = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_middle4 = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle4 = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_middle5 = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle5 = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_middle6 = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle6 = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_middle7 = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle7 = closing_brackets.substr(closing_brackets_size);\n\
    \    std::string opening_brackets_middle8 = opening_brackets.substr(opening_brackets_size);\n\
    \    std::string closing_brackets_middle8 = closing_b", "    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;", " \
    \   int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;", "    bool correct = true;\n    for (size_t i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ if (brackets[i + 1] == '>') {\n                correct = false;\n          \
    \  }\n        }\n    }\n    return correct;", "    bool correct = true;\n    for\
    \ (auto bracket = brackets.begin(); bracket != brackets.end(); ++bracket) {\n\
    \        if (*bracket != '<') correct = false;\n    }\n    return correct;", " \
    \   bool correct = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n\
    \        if (brackets[i] != '<') correct = false;\n    }\n    return correct;",
  "    bool result = true;\n    for (auto &c : brackets) {\n        if (c == '<')\
    \ {\n            if (brackets[brackets.size() - 1] != '>') {\n               \
    \ result = false;\n            }\n        }\n    }\n    return result;", "   \
    \ bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      }\n        if (brackets[i] == '>') {\n            close_brackets++;\n \
    \       }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;", "    std::string opening_brackets = brackets;\n  \
    \  std::string closing_brackets = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    bool correct = true;\n    for (size_t i = 0; i <\
    \ brackets.size(); ++i) {\n        if (brackets[i] != '<') correct = false;\n\
    \    }\n    return correct;", "    bool result = true;\n    for (size_t i = 0;\
    \ i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n         \
    \   if (brackets[i + 1] == '>') {\n                result = true;\n          \
    \  }\n        }\n    }\n    return result;", "    std::string opening_brackets\
    \ = \"([{\";\n    std::string closing_brackets = \")]}\";\n    std::string opening_brackets_size\
    \ = opening_brackets.size();\n    std::string closing_brackets_size = closing_brackets.size();\n\
    \    std::string opening_brackets_copy = opening_brackets;\n    std::string closing_brackets_copy\
    \ = closing_brackets;\n    bool correct_bracketing = true;\n    for (size_t i\
    \ = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n      \
    \      opening_brackets_copy = opening_brackets_copy.substr(0, i);\n         \
    \   closing_brackets_copy = closing_brackets_copy.substr(0, i);\n        }\n \
    \       if (brackets[i] == '>') {\n            opening_brackets_copy = opening_brackets_copy.substr(i\
    \ + 1, opening_brackets_copy.size() - i - 1);\n            closing_brackets_copy\
    \ = closing_brackets_copy.substr(i + 1, closing_brackets_copy.size() - i - 1);\n\
    \        }\n        if (opening_brackets_copy != closing_brackets_copy) {\n  \
    \          correct_bracketing = false;\n        }\n    }\n    return correct_bracketing;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n         \
    \   if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto &c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool result = true;\n    for (auto &c : brackets)\
    \ {\n        if (c != '>' && c != '<') {\n            result = false;\n      \
    \      break;\n        }\n    }\n    return result;", "    int brackets_size =\
    \ brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i - 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;", " \
    \   bool correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n\
    \        if (brackets[i] != '<') correct = false;\n    }\n    return correct;",
  "    bool correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n\
    \        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>') {\n\
    \                correct = false;\n            }\n        }\n    }\n    return\
    \ correct;", "    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>')\
    \ return false;\n        }\n    }\n    return true;", "    bool result = true;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] !=\
    \ '<') result = false;\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_cnt = 0;\n  \
    \  size_t close_brackets_cnt = 0;\n    size_t open_brackets_cnt2 = 0;\n    size_t\
    \ close_brackets_cnt2 = 0;\n    size_t open_brackets_cnt3 = 0;\n    size_t close_brackets_cnt3\
    \ = 0;\n    size_t open_brackets_cnt4 = 0;\n    size_t close_brackets_cnt4 = 0;\n\
    \    size_t open_brackets_cnt5 = 0;\n    size_t close_brackets_cnt5 = 0;\n   \
    \ size_t open_brackets_cnt6 = 0;\n    size_t close_brackets_cnt6 = 0;\n    size_t\
    \ open_brackets_cnt7 = 0;\n    size_t close_brackets_cnt7 = 0;\n    size_t open_brackets_cnt8\
    \ = 0;\n    size_t close_brackets_cnt8 = 0;\n    size_t open_brackets_cnt9 = 0;\n\
    \    size_t close_brackets_cnt9 = 0;\n    size_t open_brackets_cnt10 = 0;\n  \
    \  size_t close_brackets_cnt10 = 0;\n    size_t open_brackets_cnt11 = 0;\n   \
    \ size_t close_brackets_cnt11 = 0;\n    size_t open_brackets_cnt12 = 0;\n    size_t\
    \ close_brackets_cnt12 = 0;\n    size_t open_brackets_cnt13 = 0;\n    size_t close_brackets_cnt13\
    \ = 0;\n    size_t open_brackets_cnt14 = 0;\n    size_t close_brackets_cnt14 =\
    \ 0;\n    size_t open_brackets_cnt15 = 0;\n    size_t close_brackets_cnt15 = 0;\n\
    \    size_t open_brackets_cnt16 = 0;\n    size_t close_brackets_cnt16 = 0;\n \
    \   size_t open_brackets_cnt17 = 0;\n    size_t close_brackets_cnt17 = 0;\n  \
    \  size_t open_brackets_cnt18 = 0;\n    size_t close_brackets_cnt18 = 0;\n   \
    \ size_t open_brackets_cnt19 = 0;\n    size_t close_brackets_cnt19 = 0;\n    size_t\
    \ open_brackets_cnt20 = 0;\n    size_t close_brackets_cnt20 = 0;\n    size_t open_brackets_cnt21\
    \ = 0;\n    size_t close_brackets_cnt21 = 0;\n    size_t open_brackets_cnt22 =\
    \ 0;\n    size_t close_brackets_cnt22 = 0;\n    size_t open_brackets_cnt23 = 0;\n\
    \    size_t close_brackets_cnt23 = 0;\n", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            result &= (brackets[brackets.size()\
    \ - 1] == '>');\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    bool result = true;\n    for\
    \ (auto it = brackets.begin(); it != brackets.end(); ++it) {\n        if (*it\
    \ == '<') {\n            if (brackets.end() != std::find(brackets.begin(), brackets.end(),\
    \ '>')) {\n                result = false;\n                break;\n         \
    \   }\n        }\n    }\n    return result;", "    std::string opening_brackets\
    \ = \"([{<\";\n    std::string closing_brackets = \")]}>\";\n    std::string opening_brackets_index\
    \ = opening_brackets.find(brackets[0]);\n    std::string closing_brackets_index\
    \ = closing_brackets.find(brackets[1]);\n    if (opening_brackets_index == std::string::npos\
    \ || closing_brackets_index == std::string::npos)\n        return false;\n   \
    \ if (opening_brackets_index != closing_brackets_index)\n        return false;\n\
    \    return true;", "    std::string opening_brackets = brackets.substr(0, brackets.size()\
    \ - 1);\n    std::string closing_brackets = brackets.substr(brackets.size() -\
    \ 1, brackets.size());\n    std::string opening_brackets_copy = opening_brackets;\n\
    \    std::string closing_brackets_copy = closing_brackets;\n    bool result =\
    \ true;\n    for (int i = 0; i < opening_brackets.size(); i++) {\n        if (opening_brackets_copy[i]\
    \ != closing_brackets_copy[i]) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ bracket = brackets.begin(); bracket != brackets.end(); ++bracket) {\n      \
    \  if (*bracket != '<') result = false;\n    }\n    return result;", "    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') result = false;\n\
    \    }\n    return result;", "    size_t bracket_count = 0;\n    for (size_t i\
    \ = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n      \
    \      bracket_count++;\n        }\n        if (brackets[i] == '>') {\n      \
    \      bracket_count--;\n        }\n        if (bracket_count < 0) {\n       \
    \     return false;\n        }\n    }\n    return bracket_count == 0;", "    int\
    \ len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') return false;\n    }\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] != '>') return false;\n    }\n    return true;", "    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') result = false;\n    }\n    return result;", "    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i - 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;", " \
    \   bool correct = true;\n    for (auto c : brackets) {\n        if (c == '<')\
    \ {\n            correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;", '    // Your code here', "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            result &= (c == '>');\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    size_t brackets_size = brackets.size();\n  \
    \  bool result = true;\n    for (size_t i = 0; i < brackets_size; i++) {\n   \
    \     if (brackets[i] != '<' && brackets[i] != '>') {\n            result = false;\n\
    \        }\n    }\n    return result;", "    int len = brackets.size();\n    for\
    \ (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n           \
    \ if (brackets[i + 1] == '>') {\n                return true;\n            }\n\
    \        }\n    }\n    return false;", "    size_t brackets_size = brackets.size();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            opening_brackets_size++;\n        } else if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        return false;\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (opening_brackets_size == closing_brackets_size) {\n                return\
    \ false;\n            }\n        } else if (brackets[i] == '>') {\n          \
    \  if (opening_brackets_size != closing_brackets_size) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '<') result = false;\n\
    \    }\n    return result;", "    // initialize a stack to store opening brackets\n\
    \    std::stack<char> brackets_stack;\n    // initialize a stack to store closing\
    \ brackets\n    std::stack<char> brackets_stack_close;\n    // initialize a stack\
    \ to store brackets\n    std::stack<char> brackets_stack_open;\n    // initialize\
    \ a stack to store brackets\n    std::stack<char> brackets_stack_close;\n    //\
    \ initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open",
  "    std::string opening_brackets = \"([{\";\n    std::string closing_brackets =\
    \ \")]}\";\n    std::string opening_brackets_index = opening_brackets.find(brackets[0]);\n\
    \    std::string closing_brackets_index = closing_brackets.find(brackets[1]);\n\
    \    if (opening_brackets_index == std::string::npos || closing_brackets_index\
    \ == std::string::npos)\n        return false;\n    if (opening_brackets_index\
    \ > closing_brackets_index)\n        return true;\n    return false;", "    bool\
    \ correct = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n \
    \           correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;", "    bool result = true;\n    size_t brackets_size = brackets.size();\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] !=\
    \ '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = brackets_size; i > 0; --i) {\n        if (brackets[i - 1]\
    \ != '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;", "    size_t bracket_count = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++bracket_count;\n\
    \        } else if (brackets[i] == '>') {\n            --bracket_count;\n    \
    \    }\n        if (bracket_count < 0) {\n            return false;\n        }\n\
    \    }\n    return bracket_count == 0;", "    size_t opening_brackets = brackets.size();\n\
    \    size_t closing_brackets = 0;\n    for (size_t i = 0; i < opening_brackets;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++closing_brackets;\n\
    \        }\n    }\n    if (closing_brackets != opening_brackets) {\n        return\
    \ false;\n    }\n    for (size_t i = 0; i < opening_brackets; ++i) {\n       \
    \ if (brackets[i] == '>') {\n            --closing_brackets;\n        }\n    }\n\
    \    if (closing_brackets != opening_brackets) {\n        return false;\n    }\n\
    \    return true;", "    bool correct = true;\n    for (auto bracket = brackets.begin();\
    \ bracket != brackets.end(); ++bracket) {\n        if (*bracket != '<') {\n  \
    \          correct = false;\n            break;\n        }\n        ++bracket;\n\
    \        if (*bracket != '>') {\n            correct = false;\n            break;\n\
    \        }\n        ++bracket;\n    }\n    return correct;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    size_t brackets_size = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       char c = brackets[i];\n        if (c == '<') {\n            if (brackets[i\
    \ - 1] == '<') {\n                result = false;\n                break;\n  \
    \          }\n        } else if (c == '>') {\n            if (brackets[i - 1]\
    \ == '>') {\n                result = false;\n                break;\n       \
    \     }\n        }\n    }\n    return result;", "    int brackets_size = brackets.size();\n\
    \    for (int i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<')\
    \ {\n            if (brackets[i + 1] != '<') {\n                return false;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (brackets[i\
    \ + 1] != '>') {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;", "    size_t brackets_size = brackets.size();\n    size_t\
    \ open_brackets_size = brackets.find_first_of(\"<\");\n    size_t close_brackets_size\
    \ = brackets.find_first_of(\">\");\n    \n    if (open_brackets_size == close_brackets_size)\
    \ {\n        // no brackets found\n        return false;\n    }\n    \n    if\
    \ (open_brackets_size == brackets_size - 1) {\n        // only one opening bracket\n\
    \        return true;\n    }\n    \n    if (close_brackets_size == brackets_size\
    \ - 1) {\n        // only one closing bracket\n        return true;\n    }\n \
    \   \n    if (open_brackets_size == 0) {\n        // no opening brackets\n   \
    \     return false;\n    }\n    \n    if (close_brackets_size == 0) {\n      \
    \  // no closing brackets\n        return false;\n    }\n    \n    // there are\
    \ two opening brackets\n    if (brackets[open_brackets_size - 1] != '>') {\n \
    \       // the closing bracket is not the closing bracket of the opening bracket\n\
    \        return false;\n    }\n    \n    // there are two closing brackets\n \
    \   if (brackets[close_brackets_size - 1] != '<') {\n        // the opening bracket\
    \ is not the closing bracket of the opening bracket\n        return false;\n \
    \   }\n    \n    // the closing bracket is the closing bracket of the opening\
    \ bracket\n    return true;", "    int open_brackets = 0;\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    // Your code goes here\n    bool correct = true;\n\
    \    for(int i = 0; i < brackets.size() - 1; i++) {\n        if(brackets[i] ==\
    \ '<' && brackets[i + 1] == '>') {\n            correct = false;\n        }\n\
    \    }\n    return correct;", "    std::string opening_brackets = \"([{\";\n \
    \   std::string closing_brackets = \")]}\";\n    std::string opening_brackets_end\
    \ = opening_brackets + opening_brackets.size();\n    std::string closing_brackets_end\
    \ = closing_brackets + closing_brackets.size();\n    std::string opening_brackets_start\
    \ = opening_brackets;\n    std::string closing_brackets_start = closing_brackets;\n\
    \    std::string opening_brackets_end = opening_brackets + opening_brackets.size();\n\
    \    std::string closing_brackets_end = closing_brackets + closing_brackets.size();\n\
    \    std::string opening_brackets_start = opening_brackets;\n    std::string closing_brackets_start\
    \ = closing_brackets;\n    std::string opening_brackets_end = opening_brackets\
    \ + opening_brackets.size();\n    std::string closing_brackets_end = closing_brackets\
    \ + closing_brackets.size();\n    std::string opening_brackets_start = opening_brackets;\n\
    \    std::string closing_brackets_start = closing_brackets;\n    std::string opening_brackets_end\
    \ = opening_brackets + opening_brackets.size();\n    std::string closing_brackets_end\
    \ = closing_brackets + closing_brackets.size();\n    std::string opening_brackets_start\
    \ = opening_brackets;\n    std::string closing_brackets_start = closing_brackets;\n\
    \    std::string opening_brackets_end = opening_brackets + opening_brackets.size();\n\
    \    std::string closing_brackets_end = closing_brackets + closing_brackets.size();\n\
    \    std::string opening_brackets_start = opening_brackets;\n    std::string closing_brackets_start\
    \ = closing_brackets;\n    std::string opening_brackets_end = opening_brackets\
    \ + opening_brackets.size();\n    std::string closing_brackets_end = closing_brackets\
    \ + closing_brackets.size();\n    std::string opening_brackets_start = opening_brackets;\n\
    \    std::string closing_brackets_start = closing_brackets;\n    std::string opening_brackets_end\
    \ = opening_brackets + opening_brackets.size();\n    std::string closing_brackets_end\
    \ = closing_brackets + closing_brackets.size();\n    std::string opening_brackets_",
  "    bool correct = true;\n    for (auto c : brackets) {\n        if (c == '<')\
    \ {\n            correct = correct && false;\n        } else {\n            correct\
    \ = correct && true;\n        }\n    }\n    return correct;", "    size_t len\
    \ = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ if (brackets[i + 1] != '<') {\n                result = false;\n           \
    \     break;\n            }\n        } else if (c == '>') {\n            if (brackets[i\
    \ + 1] != '>') {\n                result = false;\n                break;\n  \
    \          }\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    size_t i = 0;\n    while\
    \ (i < open_brackets) {\n        if (brackets[i] == '<') {\n            close_brackets++;\n\
    \        }\n        i++;\n    }\n    bool result = close_brackets == open_brackets;\n\
    \    return result;", "    int len = brackets.size();\n    for (int i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i +\
    \ 1] != '<') {\n                return false;\n            }\n        } else if\
    \ (brackets[i] == '>') {\n            if (brackets[i + 1] != '>') {\n        \
    \        return false;\n            }\n        }\n    }\n    return true;", " \
    \   int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ open_brackets++;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    if (open_brackets != close_brackets) {\n        return\
    \ false;\n    }\n    return true;", "    size_t brackets_size = brackets.size();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       char c = brackets[i];\n        if (c == '<') {\n            opening_brackets_size++;\n\
    \        } else if (c == '>') {\n            closing_brackets_size++;\n      \
    \  } else {\n            result = false;\n            break;\n        }\n    }\n\
    \    if (opening_brackets_size != closing_brackets_size) {\n        result = false;\n\
    \    }\n    return result;", "    bool result = true;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; i++) {\n     \
    \   if (brackets[i] != '<') {\n            result = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] != '>') {\n            result = false;\n            break;\n  \
    \      }\n    }\n    return result;", "    size_t brackets_size = brackets.size();\n\
    \    size_t open_brackets_size = 0;\n    size_t close_brackets_size = 0;\n   \
    \ bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n    \
    \    if (brackets[i] == '<') {\n            open_brackets_size++;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets_size++;\n        }\n \
    \   }\n    if (open_brackets_size == close_brackets_size) {\n        result =\
    \ open_brackets_size == brackets_size;\n    }\n    return result;", "    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n        if (c\
    \ == '<') {\n            if (brackets[i + 1] != '<') {\n                result\
    \ = false;\n                break;\n            }\n        } else if (c == '>')\
    \ {\n            if (brackets[i - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;"]
stop_tokens:
- "\n}"
