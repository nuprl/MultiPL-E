language: cpp
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    std::string db = \"\
    db\";\n    binary = db + binary;\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_k_jfxfw: /tmp/tmp_k_jfxfw.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp1dbzwdgq: /tmp/tmp1dbzwdgq.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while (decimal != 0) {\n        int remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpi8_lr1di: /tmp/tmpi8_lr1di.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj60tbqjd: /tmp/tmpj60tbqjd.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n \
    \   binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_f8y5x2w: /tmp/tmp_f8y5x2w.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    binary = std::string(\"db\") + binary;\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpbuttilo6: /tmp/tmpbuttilo6.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy7y815li: /tmp/tmpy7y815li.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        decimal %= 2;\n        binary +=\
    \ \"0\";\n    }\n    binary += \"1\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpgb9818mq: /tmp/tmpgb9818mq.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary\
    \ += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprcach8wz: /tmp/tmprcach8wz.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ -= std::bitset<8>(decimal).to_ulong();\n    }\n    binary = std::bitset<8>(decimal).to_string();\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9n3d8wig: /tmp/tmp9n3d8wig.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary.insert(binary.begin(), \"b\");\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59fgb_be.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp59fgb_be.cpp:15:38: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [2])\u2019\n   15 |     binary.insert(binary.begin(), \"b\");\n \
    \     |                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp59fgb_be.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/usr/"
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5mnsmxqb: /tmp/tmp5mnsmxqb.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    binary\
    \ = binary + \"1\";\n    return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp19z16bp7: /tmp/tmp19z16bp7.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpgc8qxh3m: /tmp/tmpgc8qxh3m.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzi60snt.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptzi60snt.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptzi60snt.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n  \
    \  while (binary.length() < 8) {\n        binary += \"1\";\n    }\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpjt4cbd4b: /tmp/tmpjt4cbd4b.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n  \
    \      decimal /= 2;\n        binary += remainder + '0';\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpds8i6j71: /tmp/tmpds8i6j71.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal /= 2;\n    }\n  \
    \  binary.insert(0, \"0\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpajjp9zjm: /tmp/tmpajjp9zjm.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6htntp27: /tmp/tmp6htntp27.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqtke1ggo: /tmp/tmpqtke1ggo.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqtke1ggo: /tmp/tmpqtke1ggo.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqtke1ggo: /tmp/tmpqtke1ggo.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while(decimal)\
    \ {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpo05m6urz: /tmp/tmpo05m6urz.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6htntp27: /tmp/tmp6htntp27.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal = decimal/2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplb8cdxho: /tmp/tmplb8cdxho.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n    binary.insert(0,\
    \ \"db\");\n    binary.push_back('\\0');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqh23abdw: /tmp/tmpqh23abdw.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (remainder > 0) {\n \
    \       remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpi1n1cvl0: /tmp/tmpi1n1cvl0.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqtke1ggo: /tmp/tmpqtke1ggo.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    std::string db = \"\
    db\";\n    binary = db + binary;\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_k_jfxfw: /tmp/tmp_k_jfxfw.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj60tbqjd: /tmp/tmpj60tbqjd.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphfcgoyja: /tmp/tmphfcgoyja.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary += \"0\";\n    return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkgl_2l1l: /tmp/tmpkgl_2l1l.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (remainder != 0) {\n\
    \        binary[counter] = '0';\n        if (remainder % 2 == 0) {\n         \
    \   binary[counter] = '1';\n        }\n        remainder = remainder / 2;\n  \
    \      counter++;\n    }\n    binary[counter] = 'd';\n    binary[counter + 1]\
    \ = 'b';\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9xoewug5: /tmp/tmp9xoewug5.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n  \
    \  }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dekbe6d.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp3dekbe6d.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3dekbe6d.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqut4qzwo: /tmp/tmpqut4qzwo.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ -= std::bitset<8>(decimal).to_ulong();\n    }\n    binary = std::bitset<8>(decimal).to_string();\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpetzfkr41: /tmp/tmpetzfkr41.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0){\n        binary += \"0\";\n        decimal /= 2;\n    }\n    binary =\
    \ binary + \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_nqrzik6: /tmp/tmp_nqrzik6.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(0, \"db\");\n    binary.push_back('0');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplnq9it5l: /tmp/tmplnq9it5l.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp07fsu6ns: /tmp/tmp07fsu6ns.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp7wdtff4p: /tmp/tmp7wdtff4p.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppdr6oxds: /tmp/tmppdr6oxds.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary\
    \ = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpxiv1lujk: /tmp/tmpxiv1lujk.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder;\n    }\n    return binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpwwm3fazz: /tmp/tmpwwm3fazz.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppdr6oxds: /tmp/tmppdr6oxds.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp1dbzwdgq: /tmp/tmp1dbzwdgq.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"01\";\n        decimal -= 1;\n    }\n \
    \   binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmph39vdeao: /tmp/tmph39vdeao.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (counter < 8) {\n   \
    \     if (remainder == 0) {\n            binary = \"0\" + binary;\n          \
    \  remainder = 1;\n        } else {\n            binary = \"1\" + binary;\n  \
    \          remainder = 0;\n        }\n        counter++;\n    }\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpmi61her6: /tmp/tmpmi61her6.cpp:27: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = std::bitset<8>(decimal).to_string();\n   \
    \     decimal -= std::bitset<8>(decimal).to_ulong();\n    }\n    binary = binary\
    \ + \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk80inyf5: /tmp/tmpk80inyf5.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        decimal %= 2;\n        binary += \"01\"[decimal];\n\
    \        decimal /= 2;\n    }\n    return \"db\" + binary + \"b\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9e935dss: /tmp/tmp9e935dss.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5_cqhgfh: /tmp/tmp5_cqhgfh.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary += \"0\";\n    return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkgl_2l1l: /tmp/tmpkgl_2l1l.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal /= 2;\n    }\n  \
    \  binary.insert(0, \"0\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpajjp9zjm: /tmp/tmpajjp9zjm.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    while(decimal\
    \ == 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    binary\
    \ = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp0ywiwmms: /tmp/tmp0ywiwmms.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (counter < 32) {\n  \
    \      remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        counter++;\n        remainder = remainder / 2;\n    }\n    return binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfilc_69w.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpfilc_69w.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfilc_69w.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = std::string(\"db\") + binary + std::string(\"db\"\
    );\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4pnpapfn: /tmp/tmp4pnpapfn.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqtke1ggo: /tmp/tmpqtke1ggo.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0){\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary +=\
    \ \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptksiicsi: /tmp/tmptksiicsi.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n  \
    \  }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dekbe6d.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp3dekbe6d.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3dekbe6d.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    while(binary.size()\
    \ < 8) {\n        binary += \"0\";\n    }\n    binary = \"db\" + binary;\n   \
    \ return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy0hqgb1m: /tmp/tmpy0hqgb1m.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        decimal /= 2;\n        binary +=\
    \ \"0\";\n    }\n    while(binary.length() < 32){\n        binary += \"1\";\n\
    \    }\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpaepsdgwo: /tmp/tmpaepsdgwo.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code goes here\n    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        int remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    std::string\
    \ db = \"db\";\n    binary = db + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpk_eg9dql: /tmp/tmpk_eg9dql.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    int count = 0;\n    while (decimal != 0) {\n     \
    \   remainder *= 2;\n        decimal -= remainder;\n        binary.push_back(remainder\
    \ % 2);\n        remainder /= 2;\n        count++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), count);\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2p7hkld.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpo2p7hkld.cpp:20:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   20 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo2p7hkld.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/us"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpit0o1f4e: /tmp/tmpit0o1f4e.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = std::bitset<8>(decimal).to_string();\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_rw0gzeq: /tmp/tmp_rw0gzeq.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp1dbzwdgq: /tmp/tmp1dbzwdgq.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder + '0';\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv8mehri6: /tmp/tmpv8mehri6.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    int digit;\n    while (decimal != 0) {\n        remainder =\
    \ decimal % 2;\n        digit = decimal / 2;\n        binary = to_string(remainder)\
    \ + binary;\n        decimal = digit;\n    }\n    binary = binary + \"db\";\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrx2s6i0.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpmrx2s6i0.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmrx2s6i0.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code goes here\n    std::string\
    \ binary = \"\";\n    while(decimal != 0){\n        int remainder = decimal%2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyubm694n: /tmp/tmpyubm694n.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary += \"0\" + remainder;\n        remainder = remainder /\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9f0dthpy: /tmp/tmp9f0dthpy.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj60tbqjd: /tmp/tmpj60tbqjd.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n \
    \   binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpob_anwjm: /tmp/tmpob_anwjm.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppmeu3mk7: /tmp/tmppmeu3mk7.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppmeu3mk7: /tmp/tmppmeu3mk7.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder + '0';\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpv8mehri6: /tmp/tmpv8mehri6.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcvgsw7i.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpdcvgsw7i.cpp:14:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   14 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcvgsw7i.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    int count = 0;\n    while (remainder > 0) {\n    \
    \    remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        count++;\n        remainder = remainder / 2;\n    }\n    binary = to_string(count)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6vu05xbl.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp6vu05xbl.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6vu05xbl.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp6vu05xbl.cpp:19:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |     binary = to_string(count) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6vu05xbl.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppmeu3mk7: /tmp/tmppmeu3mk7.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj60tbqjd: /tmp/tmpj60tbqjd.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n\
    \    binary = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvguyyind: /tmp/tmpvguyyind.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        binary += (decimal % 2) + '0';\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplmq1aroi: /tmp/tmplmq1aroi.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    std::string db\
    \ = \"db\";\n    binary = db + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpbke4xv6e: /tmp/tmpbke4xv6e.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary\
    \ += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprcach8wz: /tmp/tmprcach8wz.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n\
    \    binary = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvguyyind: /tmp/tmpvguyyind.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n \
    \   binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpob_anwjm: /tmp/tmpob_anwjm.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n \
    \       remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        counter = counter * 10;\n    }\n    binary = to_string(counter) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.push_back('\\0');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4djaq_py.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp4djaq_py.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4djaq_py.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp4djaq_py.cpp:18:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   18 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4djaq_py.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        binary += (decimal % 2) + '0';\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplmq1aroi: /tmp/tmplmq1aroi.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqdwtymwk: /tmp/tmpqdwtymwk.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = std::bitset<8>(decimal).to_string();\n   \
    \     decimal -= std::bitset<8>(decimal).to_ulong();\n    }\n    binary = std::bitset<8>(decimal).to_string();\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmperyiv27_: /tmp/tmperyiv27_.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    long temp = decimal;\n    while (temp != 0) {\n        binary =\
    \ std::to_string(temp % 2) + binary;\n        temp = temp / 2;\n    }\n    binary\
    \ = std::to_string(decimal) + binary;\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpaf8b2k8t: /tmp/tmpaf8b2k8t.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcvgsw7i.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpdcvgsw7i.cpp:14:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   14 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcvgsw7i.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    binary = std::string(\"db\") + binary + std::string(\"\
    db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkc5r6_v5: /tmp/tmpkc5r6_v5.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5mnsmxqb: /tmp/tmp5mnsmxqb.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n\
    \        decimal /= 2;\n    }\n    binary = std::bitset<8>(decimal).to_string();\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpz_2spi7s: /tmp/tmpz_2spi7s.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5mnsmxqb: /tmp/tmp5mnsmxqb.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ '1');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpi4_4ac5x: /tmp/tmpi4_4ac5x.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = std::string(\"db\") + binary + std::string(\"db\"\
    );\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4pnpapfn: /tmp/tmp4pnpapfn.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqdwtymwk: /tmp/tmpqdwtymwk.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphjk56asq: /tmp/tmphjk56asq.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary\
    \ += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprcach8wz: /tmp/tmprcach8wz.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 1;\n    while (counter > 0) {\n   \
    \     remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n        counter = counter + 1;\n    }\n \
    \   binary = binary + \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1t6kh8t8.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp1t6kh8t8.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1t6kh8t8.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = std::string(\"db\") + binary;\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplo_q06zx: /tmp/tmplo_q06zx.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (remainder > 0) {\n \
    \       remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   if (counter > 0) {\n        binary = std::to_string(counter) + binary;\n \
    \   }\n    return \"db\" + binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp840a2var: /tmp/tmp840a2var.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder *= 2;\n\
    \        binary += (remainder % 2) + '0';\n        remainder /= 2;\n    }\n  \
    \  binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp261bi4to: /tmp/tmp261bi4to.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    int count = 0;\n    while (decimal != 0) {\n     \
    \   remainder *= 10;\n        count++;\n    }\n    while (count > 0) {\n     \
    \   binary += (remainder % 2) + '0';\n        remainder /= 2;\n        count--;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq37u2apx: /tmp/tmpq37u2apx.cpp:28: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = std::bitset<8>(decimal).to_string();\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_rw0gzeq: /tmp/tmp_rw0gzeq.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpuw2pyc51: /tmp/tmpuw2pyc51.cpp:25: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp1dbzwdgq: /tmp/tmp1dbzwdgq.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzi60snt.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptzi60snt.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptzi60snt.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115783
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzi60snt.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptzi60snt.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptzi60snt.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        binary += decimal%2;\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpxnsm3hff: /tmp/tmpxnsm3hff.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp1dbzwdgq: /tmp/tmp1dbzwdgq.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary = to_string(remainder) + binary;\n    }\n    binary = binary +\
    \ \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3jix8th.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpf3jix8th.cpp:14:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   14 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpf3jix8th.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::to_string(decimal % 2) + binary;\n \
    \       decimal /= 2;\n    }\n    binary = std::to_string(decimal) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.push_back('\\0');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp33xuiw7y: /tmp/tmp33xuiw7y.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n\
    \    binary.insert(0, \"db\");\n    binary.push_back('0');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpzgaavt_h: /tmp/tmpzgaavt_h.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n \
    \   binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpob_anwjm: /tmp/tmpob_anwjm.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n\
    \    binary = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvguyyind: /tmp/tmpvguyyind.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcvgsw7i.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpdcvgsw7i.cpp:14:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   14 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcvgsw7i.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4tuw8eb6: /tmp/tmp4tuw8eb6.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (remainder > 0) {\n \
    \       remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        counter++;\n    }\n    if (counter > 0) {\n        binary = to_string(counter)\
    \ + binary;\n    }\n    return \"db\" + binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphidi39lg.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmphidi39lg.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphidi39lg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmphidi39lg.cpp:19:18: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |         binary = to_string(counter) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphidi39lg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = std::bitset<8>(decimal).to_string();\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqf_1avum: /tmp/tmpqf_1avum.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    binary = \"db\"\
    \ + binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoh71vq7g: /tmp/tmpoh71vq7g.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary.insert(0, \"0\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6uuo5eah: /tmp/tmp6uuo5eah.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp1dbzwdgq: /tmp/tmp1dbzwdgq.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        binary = to_string(remainder) + binary;\n    }\n   \
    \ binary = binary + \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2porqjl.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpw2porqjl.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpw2porqjl.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    long temp = decimal;\n    while (temp > 0) {\n        binary +=\
    \ (temp % 2) + '0';\n        temp /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq19dy55n: /tmp/tmpq19dy55n.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    return binary + \"db\";\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyfscv3_t: /tmp/tmpyfscv3_t.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary.insert(0,\
    \ \"db\");\n    binary.push_back('0');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptjdg2y3c: /tmp/tmptjdg2y3c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary = \"db\" + binary;\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmperqofe_n: /tmp/tmperqofe_n.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal = decimal / 2;\n        binary += to_string(remainder);\n    }\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4g_xt_ie.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp4g_xt_ie.cpp:15:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4g_xt_ie.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary\
    \ += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprcach8wz: /tmp/tmprcach8wz.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcvgsw7i.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpdcvgsw7i.cpp:14:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   14 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcvgsw7i.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    int remainder;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5mnsmxqb: /tmp/tmp5mnsmxqb.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (remainder > 0) {\n \
    \       counter++;\n        remainder = remainder % 2;\n    }\n    binary = std::to_string(counter);\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpf779gle8: /tmp/tmpf779gle8.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy7y815li: /tmp/tmpy7y815li.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpuw2pyc51: /tmp/tmpuw2pyc51.cpp:25: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary\
    \ += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprcach8wz: /tmp/tmprcach8wz.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppdr6oxds: /tmp/tmppdr6oxds.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 1;\n    while (counter > 0) {\n   \
    \     remainder = remainder % 2;\n        binary = std::to_string(remainder) +\
    \ binary;\n        counter = counter * 2;\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpvz_mlbnt: /tmp/tmpvz_mlbnt.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        decimal %= 2;\n        binary += \"01\"[decimal];\n    }\n\
    \    std::string db = \"db\";\n    return db + binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6c82hyjb: /tmp/tmp6c82hyjb.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code goes here\n    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"1\";\n      \
    \  decimal -= 1;\n    }\n    binary.insert(0, \"0\");\n    binary.append(\"db\"\
    );\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4w7s8p2k: /tmp/tmp4w7s8p2k.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder *= 2;\n\
    \        binary += remainder % 2;\n        remainder /= 2;\n    }\n    binary\
    \ = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6pd4k4ys: /tmp/tmp6pd4k4ys.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal\
    \ -= 1;\n    }\n    while (decimal == 0) {\n        binary += \"1\";\n       \
    \ decimal -= 1;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqc2i95b.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmphqc2i95b.cpp:20:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   20 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphqc2i95b.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/us"
  stdout: ''
  timestamp: 1660115788
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n  \
    \      remainder = decimal % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n\
    \        counter++;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5u2n2lyb.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp5u2n2lyb.cpp:16:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary += to_string(remainder);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5u2n2lyb.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy7y815li: /tmp/tmpy7y815li.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  return binary + \"0db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpbpdm2t7k: /tmp/tmpbpdm2t7k.cpp:19: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    std::string db = \"db\";\n    binary.insert(0,\
    \ db);\n    binary.insert(0, db);\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp2ue5syvo: /tmp/tmp2ue5syvo.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n  \
    \  while (binary.length() < 8) {\n        binary += \"1\";\n    }\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpjt4cbd4b: /tmp/tmpjt4cbd4b.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        binary = binary + (decimal % 2);\n\
    \        decimal = decimal / 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmxn1shb.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpjmxn1shb.cpp:13:25: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018long int\u2019)\n   13 |         binary = binary + (decimal % 2);\n\
    \      |                  ~~~~~~ ^ ~~~~~~~~~~~~~\n      |                  | \
    \                |\n      |                  |                 long int\n    \
    \  |                  std::string {aka std::__cxx11::basic_string<char>}\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjmxn1shb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpjmxn1shb.cpp:13:39:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   13 |         binary = binary + (decimal % 2);\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjmxn1shb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |  "
  stdout: ''
  timestamp: 1660115788
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"01\";\n        decimal -= 1;\n    }\n \
    \   binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_jtih29e.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp_jtih29e.cpp:15:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   15 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_jtih29e.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/us"
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        binary += remainder;\n    }\n    return binary\
    \ + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpcb9flo15: /tmp/tmpcb9flo15.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while(decimal)\
    \ {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpo05m6urz: /tmp/tmpo05m6urz.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary = binary + \"0\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpo2ki_b94: /tmp/tmpo2ki_b94.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n    binary\
    \ += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmprcach8wz: /tmp/tmprcach8wz.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqyr45pms.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpqyr45pms.cpp:15:39: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [3])\u2019\n   15 |     binary.insert(binary.begin(), \"db\");\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqyr45pms.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/us"
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n\
    \    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpfvl5s25x: /tmp/tmpfvl5s25x.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while(decimal)\
    \ {\n        binary += \"1\";\n        decimal -= 1;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpo05m6urz: /tmp/tmpo05m6urz.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n  \
    \      remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary\
    \ = to_string(remainder) + binary;\n        counter++;\n    }\n    binary = to_string(counter)\
    \ + binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfzqzryjy.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpfzqzryjy.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfzqzryjy.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpfzqzryjy.cpp:19:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfzqzryjy.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4tuw8eb6: /tmp/tmp4tuw8eb6.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppdr6oxds: /tmp/tmppdr6oxds.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115783
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 1;\n    while(counter > 0) {\n    \
    \    remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n        counter = counter + 1;\n    }\n \
    \   binary = binary + \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1mwzfdfx.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp1mwzfdfx.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1mwzfdfx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqtke1ggo: /tmp/tmpqtke1ggo.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp2f_3uapa: /tmp/tmp2f_3uapa.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    int count = 0;\n    while (decimal != 0) {\n     \
    \   remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \        count++;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n\
    \    binary = binary + db;\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpxln4juw7: /tmp/tmpxln4juw7.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    int remainder = decimal;\n    int i = 0;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        decimal = decimal / 2;\n        i++;\n    }\n    binary =\
    \ to_string(remainder) + binary;\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2es6arau.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp2es6arau.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2es6arau.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp2es6arau.cpp:20:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |     binary = to_string(remainder) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2es6arau.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpit0o1f4e: /tmp/tmpit0o1f4e.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp33fltp4z: /tmp/tmp33fltp4z.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder ? \"1\" : \"0\";\n    }\n    return \"db\" + binary\
    \ + \"b\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpkctamig9: /tmp/tmpkctamig9.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0){\n        binary += \"0\";\n        decimal /= 2;\n    }\n    binary =\
    \ binary + \"1\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_nqrzik6: /tmp/tmp_nqrzik6.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    return \"db\"\
    \ + binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpr6_bil57: /tmp/tmpr6_bil57.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptj3j24u2.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptj3j24u2.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptj3j24u2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary.insert(0, \"0\");\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpyh3ad0r4: /tmp/tmpyh3ad0r4.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder *= 2;\n\
    \        binary += '1';\n    }\n    binary += '0';\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpetvbnbr3: /tmp/tmpetvbnbr3.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzi60snt.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptzi60snt.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptzi60snt.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppdr6oxds: /tmp/tmppdr6oxds.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        decimal %= 2;\n        binary += \"0\";\n    }\n \
    \   binary += \"1\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpob_anwjm: /tmp/tmpob_anwjm.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += remainder;\n    }\n    binary.insert(binary.begin(), 'b');\n\
    \    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4tuw8eb6: /tmp/tmp4tuw8eb6.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary.insert(binary.begin(), \"b\");\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59fgb_be.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp59fgb_be.cpp:15:38: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [2])\u2019\n   15 |     binary.insert(binary.begin(), \"b\");\n \
    \     |                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp59fgb_be.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/usr/"
  stdout: ''
  timestamp: 1660115783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpit0o1f4e: /tmp/tmpit0o1f4e.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n\
    \    return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmppu0wfi5c: /tmp/tmppu0wfi5c.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        binary = std::bitset<8>(decimal).to_string();\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpdg7gmweo: /tmp/tmpdg7gmweo.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        decimal %= 2;\n        binary +=\
    \ \"0\";\n    }\n    binary += \"1\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpgb9818mq: /tmp/tmpgb9818mq.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary = std::string(\"db\") + binary;\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmplo_q06zx: /tmp/tmplo_q06zx.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp87otp02j: /tmp/tmp87otp02j.cpp:22: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n  \
    \      remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary\
    \ = to_string(remainder) + binary;\n        counter++;\n    }\n    binary = to_string(remainder)\
    \ + binary;\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2mk_64v.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpz2mk_64v.cpp:16:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpz2mk_64v.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpz2mk_64v.cpp:19:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |     binary = to_string(remainder) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpz2mk_64v.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n  \
    \      decimal /= 2;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnr85qko6: /tmp/tmpnr85qko6.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj60tbqjd: /tmp/tmpj60tbqjd.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj60tbqjd: /tmp/tmpj60tbqjd.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = remainder + binary;\n        remainder = remainder /\
    \ 2;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr9myml7v.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpr9myml7v.cpp:14:28: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019})\n   14 |         binary = remainder +\
    \ binary;\n      |                  ~~~~~~~~~ ^ ~~~~~~\n      |              \
    \    |           |\n      |                  long int    std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpr9myml7v.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpr9myml7v.cpp:14:30:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   14\
    \ |         binary = remainder + binary;\n      |                            \
    \  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpr9myml7v.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(ty"
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6htntp27: /tmp/tmp6htntp27.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpqtke1ggo: /tmp/tmpqtke1ggo.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::bitset<8>(decimal).to_string();\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp33fltp4z: /tmp/tmp33fltp4z.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"1\";\n        decimal /= 2;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp40vd6c2y: /tmp/tmp40vd6c2y.cpp:20: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code goes here\n    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpbry4jkzu: /tmp/tmpbry4jkzu.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n\
    \        decimal = decimal / 2;\n        binary = to_string(remainder) + binary;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzi60snt.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmptzi60snt.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptzi60snt.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115783
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code goes here\n    std::string\
    \ binary = \"\";\n    while(decimal != 0){\n        binary = binary + (decimal\
    \ % 2);\n        decimal = decimal / 2;\n    }\n    binary = binary + \"db\";\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjdd_gnh.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpkjdd_gnh.cpp:13:25: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018long int\u2019)\n   13 |         binary = binary + (decimal % 2);\n\
    \      |                  ~~~~~~ ^ ~~~~~~~~~~~~~\n      |                  | \
    \                |\n      |                  |                 long int\n    \
    \  |                  std::string {aka std::__cxx11::basic_string<char>}\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkjdd_gnh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjdd_gnh.cpp:13:39:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   13 |         binary = binary + (decimal % 2);\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkjdd_gnh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |  "
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp07fsu6ns: /tmp/tmp07fsu6ns.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal -= 1;\n    }\n  \
    \  binary.insert(0, \"0\");\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6uuo5eah: /tmp/tmp6uuo5eah.cpp:21: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 1;\n    while (remainder != 0) {\n\
    \        remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n        counter++;\n    }\n    binary = to_string(counter)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.insert(binary.length(),\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpet2vozcr.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpet2vozcr.cpp:15:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   15 |         binary = to_string(remainder) + binary;\n      |            \
    \      ^~~~~~~~~\n      |                  std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpet2vozcr.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpet2vozcr.cpp:19:14: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |     binary = to_string(counter) + binary;\n      |              ^~~~~~~~~\n\
    \      |              std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpet2vozcr.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    // Your code here\n    std::string binary\
    \ = \"\";\n    while(decimal != 0){\n        decimal /= 2;\n        binary +=\
    \ \"0\";\n    }\n    while(binary.length() < 32){\n        binary += \"1\";\n\
    \    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpgmv1bvu7: /tmp/tmpgmv1bvu7.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\nstd::string\
    \ decimal_to_binary(long decimal) {\n    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        binary += remainder;\n    }\n    std::string db\
    \ = \"db\";\n    binary = db + binary;\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9v1cyhww: /tmp/tmp9v1cyhww.cpp:23: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660115789
