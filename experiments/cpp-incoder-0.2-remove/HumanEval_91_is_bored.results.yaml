language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt2uw9d09: /tmp/tmpt2uw9d09.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n \
    \       if(S[i] == 'I'){\n            boredom++;\n        }\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbgo70h2j: /tmp/tmpbgo70h2j.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            word = c;\n        }\n        else if (word\
    \ == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpseai1xm2: /tmp/tmpseai1xm2.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa9nvqgyt: /tmp/tmpa9nvqgyt.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n  \
    \      pos = 0;\n        for(size_t i = 0; i < delimiters.size(); i++) {\n   \
    \         if(word.find(delimiters[i]) != std::string::npos) {\n              \
    \  pos = word.find(delimiters[i]);\n                break;\n            }\n  \
    \      }\n        if(pos == 0) {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ delimiters.size());\n        if (word == \"I\") {\n            boredoms += 1;\n\
    \        }\n        pos = delimiters.find(S.substr(pos));\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp09b_blpk: /tmp/tmp09b_blpk.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word\
    \ == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmrahov0q: /tmp/tmpmrahov0q.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n        else {\n\
    \            word = c;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpovgvb_pi: /tmp/tmpovgvb_pi.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.' && S[i+2] == '.' && S[i+3] == '.') {\n            boredoms += 1;\n  \
    \      }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprgdij5uk: /tmp/tmprgdij5uk.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    while ((pos = S.find(delimiters, pos)) != std::string::npos) {\n\
    \        word = S.substr(0, pos);\n        if (word == \"I\") {\n            boredoms++;\n\
    \        }\n        pos = pos + 1;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp884_ti0j: /tmp/tmp884_ti0j.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        if (delimiters.find(word) != std::string::npos) {\n           \
    \ boredoms += 1;\n        }\n        pos = pos + 1;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpugzwjny7: /tmp/tmpugzwjny7.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    // Write your code here\n    return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq4l9qycv: /tmp/tmpq4l9qycv.cpp:16: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        i += 1;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn29gb53p: /tmp/tmpn29gb53p.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.size(); i++){\n   \
    \     if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdmvuq6_w: /tmp/tmpdmvuq6_w.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == '.') {\n\
    \            if (S[i + 1] == '.') {\n                if (S[i + 2] == '.') {\n\
    \                    if (S[i + 3] == '.') {\n                        if (S[i +\
    \ 4] == '.') {\n                            if (S[i + 5] == '.') {\n         \
    \                       if (S[i + 6] == '.') {\n                             \
    \       if (S[i + 7] == '.') {\n                                        if (S[i\
    \ + 8] == '.') {\n                                            if (S[i + 9] ==\
    \ '.') {\n                                                if (S[i + 10] == '.')\
    \ {\n                                                    if (S[i + 11] == '.')\
    \ {\n                                                        if (S[i + 12] ==\
    \ '.') {\n                                                            if (S[i\
    \ + 13] == '.') {\n                                                          \
    \      if (S[i + 14] == '.') {\n                                             \
    \                       if (S[i + 15] == '.') {\n                            \
    \                                            boredoms += 1;\n                \
    \                                                    }\n                     \
    \                                           }\n                              \
    \                              }\n                                           \
    \             }\n                                                    }\n     \
    \                                           }\n                              \
    \              }\n                                        }\n                \
    \                    }\n                                }\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        i += 1;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3_eclca0: /tmp/tmp3_eclca0.cpp:52: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp93k15imh: /tmp/tmp93k15imh.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqe1b_gj7: /tmp/tmpqe1b_gj7.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (auto &c : S) {\n        if (c == delimiters[0]) {\n            boredoms +=\
    \ 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb5k31qt8: /tmp/tmpb5k31qt8.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word.compare(0,\
    \ 2, \"I\") == 0) {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0owoh62b: /tmp/tmp0owoh62b.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmofv_itg: /tmp/tmpmofv_itg.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps8rnmgxc: /tmp/tmps8rnmgxc.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i\
    \ + 1] == '.') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpaoxlszr4: /tmp/tmpaoxlszr4.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \"I\") {\n            boredoms++;\n     \
    \   }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjzeyo4_v: /tmp/tmpjzeyo4_v.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \"I\") {\n            boredoms += 1;\n  \
    \      }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_osqnopf: /tmp/tmp_osqnopf.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int n = S.size();\n    for (int i = 0; i < n; i++) {\n        if (S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpls0xfm6f: /tmp/tmpls0xfm6f.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    int i = 0;\n    while(i < S.size()) {\n        if(S[i] == 'I')\n \
    \           boredoms++;\n        i++;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5smbyc6i: /tmp/tmp5smbyc6i.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::stringstream ss;\n    ss << S;\n    while(ss\
    \ >> word) {\n        if(word == \"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpv2ylz95i: /tmp/tmpv2ylz95i.cpp:26: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n        i++;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp68ytf03a: /tmp/tmp68ytf03a.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n        word+=c;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcbl9u1aw: /tmp/tmpcbl9u1aw.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.length(); i++) {\n   \
    \     word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\"\
    ) {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpav6z64iy: /tmp/tmpav6z64iy.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' &&\
    \ S[i + 1] == '.') {\n            i++;\n            while (i < S.size() && S[i]\
    \ != '.') {\n                i++;\n            }\n            if (i == S.size())\
    \ {\n                boredoms += 1;\n            }\n        }\n        i++;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsujtm84n: /tmp/tmpsujtm84n.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpok6qkkzn: /tmp/tmpok6qkkzn.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.size(); i++){\n   \
    \     if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdmvuq6_w: /tmp/tmpdmvuq6_w.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    // Your code here\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm9_which: /tmp/tmpm9_which.cpp:16: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    int i = 0;\n    while(i < S.length()) {\n        if(S[i] == 'I') {\n\
    \            boredoms++;\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptgdxjkmr: /tmp/tmptgdxjkmr.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    int i = 0;\n    while(i < S.length()){\n        if(S[i] == 'I'){\n\
    \            boredoms++;\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp3k52fkw: /tmp/tmpp3k52fkw.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp93k15imh: /tmp/tmp93k15imh.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpj363_hfn: /tmp/tmpj363_hfn.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpszzj627z: /tmp/tmpszzj627z.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.length(); i++){\n \
    \       if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpikhdbkrv: /tmp/tmpikhdbkrv.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n \
    \           boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpydjn3ife: /tmp/tmpydjn3ife.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c : S) {\n        if(c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpk0deswrv: /tmp/tmpk0deswrv.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmofv_itg: /tmp/tmpmofv_itg.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpea7kj67v: /tmp/tmpea7kj67v.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c: S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpx5jt9f7h: /tmp/tmpx5jt9f7h.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i\
    \ + 1] == '.') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpul8i3qg2: /tmp/tmpul8i3qg2.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    // Write your code here\n    return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq4l9qycv: /tmp/tmpq4l9qycv.cpp:16: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   if(S[i] == '.') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == '?') {\n            boredoms += 1;\n        }\n        if(S[i] == '!') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ne0gbs1.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8ne0gbs1.cpp:104:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  104 | int main() {\n      |            ^\n/tmp/tmp8ne0gbs1.cpp:112:1:\
    \ error: expected \u2018}\u2019 at end of input\n  112 | }\n      | ^\n/tmp/tmp8ne0gbs1.cpp:10:39:\
    \ note: to match this \u2018{\u2019\n   10 |     for(int i = 0; i < S.size();\
    \ i++) {\n      |                                       ^\n/tmp/tmp8ne0gbs1.cpp:112:1:\
    \ error: expected \u2018}\u2019 at end of input\n  112 | }\n      | ^\n/tmp/tmp8ne0gbs1.cpp:7:30:\
    \ note: to match this \u2018{\u2019\n    7 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmp8ne0gbs1.cpp:112:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  112 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660094322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt2uw9d09: /tmp/tmpt2uw9d09.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.size(); i++){\n   \
    \     if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdmvuq6_w: /tmp/tmpdmvuq6_w.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::stringstream ss(S);\n    while(std::getline(ss,\
    \ word, ','))\n    {\n        if(word == \"I\")\n        {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0nd4hk0y: /tmp/tmp0nd4hk0y.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I' && S[i\
    \ + 1] == '.') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp80iu136j: /tmp/tmp80iu136j.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (auto &c : S) {\n        if (c == delimiters[0]) {\n            boredoms +=\
    \ 1;\n        }\n        if (c == delimiters[1]) {\n            boredoms += 1;\n\
    \        }\n        if (c == delimiters[2]) {\n            boredoms += 1;\n  \
    \      }\n        if (c == delimiters[3]) {\n            boredoms += 1;\n    \
    \    }\n        if (c == delimiters[4]) {\n            boredoms += 1;\n      \
    \  }\n        if (c == delimiters[5]) {\n            boredoms += 1;\n        }\n\
    \        if (c == delimiters[6]) {\n            boredoms += 1;\n        }\n  \
    \      if (c == delimiters[7]) {\n            boredoms += 1;\n        }\n    \
    \    if (c == delimiters[8]) {\n            boredoms += 1;\n        }\n      \
    \  if (c == delimiters[9]) {\n            boredoms += 1;\n        }\n        if\
    \ (c == delimiters[10]) {\n            boredoms += 1;\n        }\n        if (c\
    \ == delimiters[11]) {\n            boredoms += 1;\n        }\n        if (c ==\
    \ delimiters[12]) {\n            boredoms += 1;\n        }\n        if (c == delimiters[13])\
    \ {\n            boredoms += 1;\n        }\n        if (c == delimiters[14]) {\n\
    \            boredoms += 1;\n        }\n        if (c == delimiters[15]) {\n \
    \           boredoms += 1;\n        }\n        if (c == delimiters[16]) {\n  \
    \          boredoms += 1;\n        }\n        if (c == delimiters[17]) {\n   \
    \         boredoms += 1;\n        }\n        if (c == delimiters[18]) {\n    \
    \        boredoms += 1;\n        }\n        if (c == delimiters[19]) {\n     \
    \       boredoms += 1;\n        }\n        if (c == delimiters[20]) {\n      \
    \      boredoms += 1;\n        }\n        if (c == delimiters[21]) {\n       \
    \     boredoms += 1;\n        }\n        if (c == delimiters[22]) {\n        \
    \    boredoms += 1;\n        }\n        if (c == delimiters[23]) {\n         \
    \   boredoms += 1;\n        }\n        if (c == delimiters[24]) {\n          \
    \  boredoms += 1;\n        }\n        if (c == delimiters[25]) {\n           \
    \ boredoms += 1;\n        }\n        if (c == delimiters[26]) {\n            boredoms\
    \ += 1;\n        }\n        if (c == delimiters[27]) {\n            boredoms +=\
    \ 1;\n        }\n        if (c == delimiters[28]) {\n            bo\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05u99gp3.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp05u99gp3.cpp:97:13: error: \u2018bo\u2019 was not declared in this\
    \ scope\n   97 |             bo\n      |             ^~\n/tmp/tmp05u99gp3.cpp:99:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   99 | int main() {\n      |            ^\n/tmp/tmp05u99gp3.cpp:107:1: error:\
    \ expected \u2018}\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmp05u99gp3.cpp:11:23:\
    \ note: to match this \u2018{\u2019\n   11 |     for (auto &c : S) {\n      |\
    \                       ^\n/tmp/tmp05u99gp3.cpp:107:1: error: expected \u2018\
    }\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmp05u99gp3.cpp:7:30: note:\
    \ to match this \u2018{\u2019\n    7 | long is_bored(std::string S) {\n      |\
    \                              ^\n/tmp/tmp05u99gp3.cpp:107:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  107 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660094322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n        else {\n\
    \            word = c;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpovgvb_pi: /tmp/tmpovgvb_pi.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_5l_6sdt: /tmp/tmp_5l_6sdt.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' &&\
    \ S[i + 1] == '.') {\n            i++;\n            while (i < S.size() && S[i]\
    \ != '.') {\n                i++;\n            }\n            if (i < S.size()\
    \ && S[i] == '.') {\n                i++;\n                while (i < S.size()\
    \ && S[i] != '.') {\n                    i++;\n                }\n           \
    \     if (i < S.size() && S[i] == '.') {\n                    i++;\n         \
    \           while (i < S.size() && S[i] != '.') {\n                        i++;\n\
    \                    }\n                    if (i < S.size() && S[i] == '.') {\n\
    \                        i++;\n                        while (i < S.size() &&\
    \ S[i] != '.') {\n                            i++;\n                        }\n\
    \                        if (i < S.size() && S[i] == '.') {\n                \
    \            i++;\n                            while (i < S.size() && S[i] !=\
    \ '.') {\n                                i++;\n                            }\n\
    \                            if (i < S.size() && S[i] == '.') {\n            \
    \                    i++;\n                                while (i < S.size()\
    \ && S[i] != '.') {\n                                    i++;\n              \
    \                  }\n                                if (i < S.size() && S[i]\
    \ == '.') {\n                                    i++;\n                      \
    \              while (i < S.size() && S[i] != '.') {\n                       \
    \                 i++;\n                                    }\n              \
    \                      if (i < S.size() && S[i] == '.') {\n                  \
    \                      i++;\n                                        while (i\
    \ < S.size() && S[i] != '.') {\n                                            i++;\n\
    \                                        }\n                                 \
    \       if (i < S.size() && S[i] == '.') {\n                                 \
    \           i++;\n                                            while (i < S.size()\
    \ && S[i] != '.') {\n                                                i++;\n  \
    \                                          }\n                               \
    \             if (i < S.size() && S[i] == '.') {\n                           \
    \                     i++;\n                                                while\
    \ (i < S.size() && S[i] != '.') {\n                                          \
    \          i++;\n                                                }\n         \
    \                                       if (i < S.size() && S[i] == '.') {\n \
    \                                                   i++;\n                   \
    \                                 while (i < S.size() && S[i] != '.') {\n    \
    \                                                    i++;\n                  \
    \                                  }\n                                       \
    \             if (i < S.size() && S[i] == '.') {\n                           \
    \                             i++;\n                                         \
    \               while (i < S.size() && S[i] != '.') {\n                      \
    \                                      i++;\n                                \
    \                        }\n                                                 \
    \       if (i < S.size() && S[i] == '.') {\n                                 \
    \                           i++;\n                                           \
    \                 while (i < S.size() && S[i] != '.') {\n                    \
    \                                            i++;\n                          \
    \                                  }\n                                       \
    \                     if (i < S.size() && S[i] == '.') {\n                   \
    \                                             i++;\n                         \
    \                                       while (i < S.size() && S[i] != '.') {\n\
    \                                                                    i++;\n  \
    \                                                              }\n           \
    \                                                     if (i < S.size() && S[i]\
    \ == '.') {\n                                                                \
    \    i++\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmi6o83l0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpmi6o83l0.cpp:82:72: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   82 |                                                             \
    \        i++\n      |                                                        \
    \                ^\n      |                                                  \
    \                      ;\n   83 | }\n      | ~                               \
    \                                        \n/tmp/tmpmi6o83l0.cpp:84:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   84\
    \ | int main() {\n      |            ^\n/tmp/tmpmi6o83l0.cpp:92:1: error: expected\
    \ \u2018}\u2019 at end of input\n   92 | }\n      | ^\n/tmp/tmpmi6o83l0.cpp:76:94:\
    \ note: to match this \u2018{\u2019\n   76 |                                 \
    \                            if (i < S.size() && S[i] == '.') {\n      |     \
    \                                                                            \
    \             ^\n/tmp/tmpmi6o83l0.cpp:92:1: error: expected \u2018}\u2019 at end\
    \ of input\n   92 | }\n      | ^\n/tmp/tmpmi6o83l0.cpp:71:90: note: to match this\
    \ \u2018{\u2019\n   71 |                                                     \
    \    if (i < S.size() && S[i] == '.') {\n      |                             \
    \                                                             ^\n/tmp/tmpmi6o83l0.cpp:92:1:\
    \ error: expected \u2018}\u2019 at end of input\n   92 | }\n      | ^\n/tmp/tmpmi6o83l0.cpp:66:86:\
    \ note: to match this \u2018{\u2019\n   66 |                                 \
    \                    if (i < S.size() && S[i] == '.') {\n      |             \
    \                                                                         ^\n\
    /tmp/tmpmi6o83l0.cpp:92:1: error: expected \u2018}\u2019 at end of input\n   92\
    \ | }\n      | ^\n/tmp/tmpmi6o83l0.cpp:61:82: note: to match this \u2018{\u2019\
    \n   61 |                                                 if (i < S.size() &&\
    \ S[i] == '.') {\n      |                                                    \
    \                              ^\n/tmp/tmpmi6o83l0.cpp:92:1: error: expected \u2018\
    }\u2019 at end of input\n   92 | }\n     "
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps8rnmgxc: /tmp/tmps8rnmgxc.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == 'I' && S[i+1] == '.') {\n            boredoms += 1;\n    \
    \    }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpupci_1ro: /tmp/tmpupci_1ro.cpp:21: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n\
    \        }\n        word = S[i];\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsin9ji1f: /tmp/tmpsin9ji1f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word.find(delimiters)\
    \ != std::string::npos) {\n            word = word.substr(0, word.find(delimiters));\n\
    \        }\n        if (word == \"I\") {\n            boredoms++;\n        }\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp84bj7a0d: /tmp/tmp84bj7a0d.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        if (word == \"I\") {\n            boredoms += 1;\n        }\n \
    \       pos = pos + 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq1qs2bf5: /tmp/tmpq1qs2bf5.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps8rnmgxc: /tmp/tmps8rnmgxc.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' &&\
    \ S[i + 1] == '.') {\n            boredoms += 1;\n            i += 2;\n      \
    \  } else if (S[i] == 'I' && S[i + 1] == '?') {\n            boredoms += 1;\n\
    \            i += 2;\n        } else if (S[i] == 'I' && S[i + 1] == '!') {\n \
    \           boredoms += 1;\n            i += 2;\n        } else if (S[i] == '.')\
    \ {\n            i += 1;\n        } else if (S[i] == '?') {\n            i +=\
    \ 1;\n        } else if (S[i] == '!') {\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7dtyu1m_: /tmp/tmp7dtyu1m_.cpp:36: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpywnmtp1f: /tmp/tmpywnmtp1f.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n        else {\n\
    \            word = c;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpovgvb_pi: /tmp/tmpovgvb_pi.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            word = c;\n        }\n        else if (word\
    \ == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpseai1xm2: /tmp/tmpseai1xm2.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.length(); i++)\n\
    \    {\n        if(S[i] == 'I')\n        {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpd9d9cg1n: /tmp/tmpd9d9cg1n.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int i = 0;\n    while(i < S.size()) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n        i +=\
    \ 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplitxy91h: /tmp/tmplitxy91h.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == '?') {\n            boredoms += 1;\n        }\n        if(S[i] == '!') {\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpd3f1cegn: /tmp/tmpd3f1cegn.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n        word\
    \ = c;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjlch5_q8: /tmp/tmpjlch5_q8.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word.compare(0,\
    \ 2, \"I\") == 0) {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0owoh62b: /tmp/tmp0owoh62b.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt2uw9d09: /tmp/tmpt2uw9d09.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n        word\
    \ = c;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjlch5_q8: /tmp/tmpjlch5_q8.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t len = S.length();\n    while (pos < len) {\n        word\
    \ = S.substr(pos, 1);\n        if (delimiters.find(word) != std::string::npos)\
    \ {\n            boredoms += 1;\n        }\n        pos += 1;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp718s01kc: /tmp/tmp718s01kc.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c: S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpx5jt9f7h: /tmp/tmpx5jt9f7h.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n \
    \       if(S[i] == 'I'){\n            boredom++;\n        }\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbgo70h2j: /tmp/tmpbgo70h2j.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int n = S.size();\n    for(int i = 0; i < n; i++) {\n        if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn2ga8_7k: /tmp/tmpn2ga8_7k.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.length(); i++){\n \
    \       if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpikhdbkrv: /tmp/tmpikhdbkrv.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == '.') {\n\
    \            i++;\n        } else if (S[i] == '?') {\n            i++;\n     \
    \   } else if (S[i] == '!') {\n            i++;\n        } else if (S[i] == 'I')\
    \ {\n            i++;\n            while (i < S.size() && S[i] != 'I') {\n   \
    \             i++;\n            }\n        } else {\n            i++;\n      \
    \  }\n        boredoms++;\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwip9fjii: /tmp/tmpwip9fjii.cpp:31: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.length()) {\n        if (S[i] == 'I')\
    \ {\n            boredoms++;\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprcd28843: /tmp/tmprcd28843.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.size(); i++){\n   \
    \     if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdmvuq6_w: /tmp/tmpdmvuq6_w.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.length(); i++){\n \
    \       if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpikhdbkrv: /tmp/tmpikhdbkrv.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            word = S[i];\n\
    \            for(int j = i; j < S.size(); j++) {\n                if(S[j] == word)\
    \ {\n                    boredoms += 1;\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpafof_nes.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpafof_nes.cpp:14:25: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   14 |                 if(S[j] == word) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpafof_nes.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpafof_nes.cpp:14:28:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   14 |                 if(S[j] == word) {\n      |\
    \                            ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpafof_nes.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpafof_nes.cpp:14:28: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_ty"
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I')\n   \
    \         boredoms++;\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4h5c4v3x: /tmp/tmp4h5c4v3x.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    // Write your code here\n    for(int i=0;i<S.size();i++){\n      \
    \  if(S[i]=='I'){\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2tivngpt: /tmp/tmp2tivngpt.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpswwcebwv: /tmp/tmpswwcebwv.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps8rnmgxc: /tmp/tmps8rnmgxc.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.length(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_kgy2287: /tmp/tmp_kgy2287.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpj363_hfn: /tmp/tmpj363_hfn.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpj363_hfn: /tmp/tmpj363_hfn.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   if(S[i] == '.') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == '?') {\n            boredoms += 1;\n        }\n        if(S[i] == '!') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ne0gbs1.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8ne0gbs1.cpp:104:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  104 | int main() {\n      |            ^\n/tmp/tmp8ne0gbs1.cpp:112:1:\
    \ error: expected \u2018}\u2019 at end of input\n  112 | }\n      | ^\n/tmp/tmp8ne0gbs1.cpp:10:39:\
    \ note: to match this \u2018{\u2019\n   10 |     for(int i = 0; i < S.size();\
    \ i++) {\n      |                                       ^\n/tmp/tmp8ne0gbs1.cpp:112:1:\
    \ error: expected \u2018}\u2019 at end of input\n  112 | }\n      | ^\n/tmp/tmp8ne0gbs1.cpp:7:30:\
    \ note: to match this \u2018{\u2019\n    7 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmp8ne0gbs1.cpp:112:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  112 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660094322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' &&\
    \ S[i + 1] == '.') {\n            boredoms++;\n            i += 2;\n        }\
    \ else if (S[i] == 'I' && S[i + 1] == '?') {\n            boredoms++;\n      \
    \      i += 2;\n        } else if (S[i] == 'I' && S[i + 1] == '!') {\n       \
    \     boredoms++;\n            i += 2;\n        } else if (S[i] == '.' && S[i\
    \ + 1] == '.') {\n            boredoms++;\n            i += 2;\n        } else\
    \ if (S[i] == '.' && S[i + 1] == '?') {\n            boredoms++;\n           \
    \ i += 2;\n        } else if (S[i] == '.' && S[i + 1] == '!') {\n            boredoms++;\n\
    \            i += 2;\n        } else if (S[i] == '?' && S[i + 1] == '.') {\n \
    \           boredoms++;\n            i += 2;\n        } else if (S[i] == '?' &&\
    \ S[i + 1] == '?') {\n            boredoms++;\n            i += 2;\n        }\
    \ else if (S[i] == '?' && S[i + 1] == '!') {\n            boredoms++;\n      \
    \      i += 2;\n        } else if (S[i] == '!' && S[i + 1] == '.') {\n       \
    \     boredoms++;\n            i += 2;\n        } else if (S[i] == '!' && S[i\
    \ + 1] == '?') {\n            boredoms++;\n            i += 2;\n        } else\
    \ if (S[i] == '!' && S[i + 1] == '!') {\n            boredoms++;\n           \
    \ i += 2;\n        } else if (S[i] == '.' && S[i + 1] == '.' && S[i + 2] == '.')\
    \ {\n            boredoms++;\n            i += 3;\n        } else if (S[i] ==\
    \ '.' && S[i + 1] == '.' && S[i + 2] == '?') {\n            boredoms++;\n    \
    \        i += 3;\n        } else if (S[i] == '.' && S[i + 1] == '.' && S[i + 2]\
    \ == '!') {\n            boredoms++;\n            i += 3;\n        } else if (S[i]\
    \ == '.' && S[i + 1] == '?' && S[i + 2] == '.') {\n            boredoms++;\n \
    \           i += 3;\n        } else if (S[i] == '.' && S[i + 1] == '?' && S[i\
    \ + 2] == '?') {\n            boredoms++;\n            i += 3;\n        } else\
    \ if (S[i] == '.' && S[i + 1] == '?' && S[i + 2] == '!') {\n            boredoms++;\n\
    \            i += 3;\n        } else if (S[i] == '.' && S[i + 1] == '!' && S[i\
    \ + 2] == '.') {\n            boredoms++;\n            i += 3;\n        } else\
    \ if (S[i] == '.' && S[i + 1] == '!' && S[i + 2] == '?') {\n\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4iup6zh3.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp4iup6zh3.cpp:71:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   71 | int main() {\n      |            ^\n/tmp/tmp4iup6zh3.cpp:79:1:\
    \ error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp4iup6zh3.cpp:10:26:\
    \ note: to match this \u2018{\u2019\n   10 |     while (i < S.size()) {\n    \
    \  |                          ^\n/tmp/tmp4iup6zh3.cpp:79:1: error: expected \u2018\
    }\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp4iup6zh3.cpp:7:30: note:\
    \ to match this \u2018{\u2019\n    7 | long is_bored(std::string S) {\n      |\
    \                              ^\n/tmp/tmp4iup6zh3.cpp:79:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   79 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string::size_type pos;\n    for (pos =\
    \ S.find_first_of(\".?!\"); pos != std::string::npos; pos = S.find_first_of(\"\
    .?!\", pos + 1)) {\n        word = S.substr(0, pos);\n        if (word == \"I\"\
    ) {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi8pbczs7: /tmp/tmpi8pbczs7.cpp:23: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt2uw9d09: /tmp/tmpt2uw9d09.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (auto &c : S) {\n        if (c == delimiters[0]) {\n            boredoms +=\
    \ 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb5k31qt8: /tmp/tmpb5k31qt8.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c : S) {\n        if(c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpk0deswrv: /tmp/tmpk0deswrv.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n \
    \           boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgc06v79u: /tmp/tmpgc06v79u.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp93k15imh: /tmp/tmp93k15imh.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c : S) {\n        if(c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpk0deswrv: /tmp/tmpk0deswrv.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t len = S.length();\n    while (pos < len) {\n        word\
    \ = S.substr(pos, 1);\n        if (delimiters.find(word) != std::string::npos)\
    \ {\n            boredoms += 1;\n        }\n        pos += 1;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp718s01kc: /tmp/tmp718s01kc.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.length(); i++) {\n\
    \        if(S[i] == 'I')\n            boredoms += 1;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm9x_30bw: /tmp/tmpm9x_30bw.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        if (word == \"I\") {\n            boredoms++;\n        }\n    \
    \    pos = pos + 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpv0rl8ceq: /tmp/tmpv0rl8ceq.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp93k15imh: /tmp/tmp93k15imh.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (auto &c : S) {\n        if (c == delimiters[0]) {\n            boredoms +=\
    \ 1;\n        } else if (c == delimiters[1]) {\n            boredoms += 1;\n \
    \       } else if (c == delimiters[2]) {\n            boredoms += 1;\n       \
    \ }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp18gpwsb: /tmp/tmpp18gpwsb.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpea7kj67v: /tmp/tmpea7kj67v.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &i : S) {\n        if(i == '.' ||\
    \ i == '?' || i == '!') {\n            boredoms += 1;\n        }\n        word\
    \ = i;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb66mxpv2: /tmp/tmpb66mxpv2.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpj363_hfn: /tmp/tmpj363_hfn.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c : S) {\n        if(c == '.' ||\
    \ c == '?' || c == '!') {\n            word = c;\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw4ol4o37: /tmp/tmpw4ol4o37.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ delimiters.size());\n        if (word == \"I\") {\n            boredoms += 1;\n\
    \        }\n        pos = pos + delimiters.size();\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpx4cymucj: /tmp/tmpx4cymucj.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < S.length(); i++){\n \
    \       if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpikhdbkrv: /tmp/tmpikhdbkrv.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmofv_itg: /tmp/tmpmofv_itg.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n        word+=c;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcbl9u1aw: /tmp/tmpcbl9u1aw.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        if (word == \"I\") {\n            pos = pos + 1;\n            while\
    \ (pos < S.size() && delimiters.find(S[pos]) == std::string::npos) {\n       \
    \         pos = pos + 1;\n            }\n            if (pos == S.size()) {\n\
    \                boredoms += 1;\n            }\n        }\n        pos = pos +\
    \ 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0stl_vt_: /tmp/tmp0stl_vt_.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        for (size_t\
    \ j = 0; j < delimiters.size(); j++) {\n            if (word.find(delimiters[j])\
    \ != std::string::npos) {\n                boredoms += 1;\n                break;\n\
    \            }\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6901dcsm: /tmp/tmp6901dcsm.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++)\n    {\n        if(S[i] == 'I')\n\
    \        {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxe4h304h: /tmp/tmpxe4h304h.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::stringstream ss(S);\n    while(std::getline(ss,\
    \ word, ','))\n    {\n        if(word == \"I\")\n        {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkv8p1yaq: /tmp/tmpkv8p1yaq.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3y98qktz: /tmp/tmp3y98qktz.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps8rnmgxc: /tmp/tmps8rnmgxc.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    size_t\
    \ pos = 0;\n    while ((pos = S.find(delimiters, pos)) != std::string::npos) {\n\
    \        word = S.substr(0, pos);\n        if (word == \"I\") {\n            boredoms\
    \ += 1;\n        }\n        pos = pos + 1;\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4_fthale: /tmp/tmp4_fthale.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (auto &c : S) {\n        if (c == delimiters[0]) {\n            boredoms +=\
    \ 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb5k31qt8: /tmp/tmpb5k31qt8.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw9vs3j64: /tmp/tmpw9vs3j64.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpixcl0dwl: /tmp/tmpixcl0dwl.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp93k15imh: /tmp/tmp93k15imh.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ga25p6s: /tmp/tmp6ga25p6s.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy0as971f: /tmp/tmpy0as971f.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094321
