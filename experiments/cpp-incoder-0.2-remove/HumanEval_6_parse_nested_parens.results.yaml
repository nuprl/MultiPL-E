language: cpp
name: HumanEval_6_parse_nested_parens
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n            current_level\
    \ = paren_level;\n        } else if (c == ')') {\n            paren_level--;\n\
    \            current_level = paren_level;\n        }\n        if (current_level\
    \ > paren_level) {\n            paren_levels.push_back(current_level);\n     \
    \   }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd9u98qa4: /tmp/tmpd9u98qa4.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (size_t i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     paren_level = paren_string.substr(0, i);\n            level++;\n       \
    \ } else if (paren_string[i] == ')') {\n            level--;\n            if (level\
    \ == 0) {\n                levels.push_back(level);\n            }\n        }\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpay8ns5g0: /tmp/tmpay8ns5g0.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    std::string paren_level = \"\";\n    std::string paren_level_string = \"\"\
    ;\n    long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n   \
    \ long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long\
    \ paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7\
    \ = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n\
    \    long paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n  \
    \  long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n    long\
    \ paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16\
    \ = 0;\n    long paren_level_counter17 = 0;\n    long paren_level_counter18 =\
    \ 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n\
    \    long paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n  \
    \  long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n    long\
    \ paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27\
    \ = 0;\n    long paren_level_counter28 = 0;\n    long paren_level_counter29 =\
    \ 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n\
    \    long paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n  \
    \  long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n    long\
    \ paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38\
    \ = 0;\n    long paren_level_counter39 = 0;\n    long paren_level_counter40 =\
    \ 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n\
    \    long paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n  \
    \  long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n    long\
    \ paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49\
    \ = 0;\n    long paren_level_counter50 = 0;\n    long paren_level_counter51 =\
    \ 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n\
    \    long paren_level_counter54 = 0;\n    long paren_level_counter55\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizzlyku8.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpizzlyku8.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmpizzlyku8.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_sum = 0;\n\
    \    long paren_level_cur = 0;\n    long paren_level_max = 0;\n    long paren_level_cur2\
    \ = 0;\n    long paren_level_max2 = 0;\n    long paren_level_cur3 = 0;\n    long\
    \ paren_level_max3 = 0;\n    long paren_level_cur4 = 0;\n    long paren_level_max4\
    \ = 0;\n    long paren_level_cur5 = 0;\n    long paren_level_max5 = 0;\n    long\
    \ paren_level_cur6 = 0;\n    long paren_level_max6 = 0;\n    long paren_level_cur7\
    \ = 0;\n    long paren_level_max7 = 0;\n    long paren_level_cur8 = 0;\n    long\
    \ paren_level_max8 = 0;\n    long paren_level_cur9 = 0;\n    long paren_level_max9\
    \ = 0;\n    long paren_level_cur10 = 0;\n    long paren_level_max10 = 0;\n   \
    \ long paren_level_cur11 = 0;\n    long paren_level_max11 = 0;\n    long paren_level_cur12\
    \ = 0;\n    long paren_level_max12 = 0;\n    long paren_level_cur13 = 0;\n   \
    \ long paren_level_max13 = 0;\n    long paren_level_cur14 = 0;\n    long paren_level_max14\
    \ = 0;\n    long paren_level_cur15 = 0;\n    long paren_level_max15 = 0;\n   \
    \ long paren_level_cur16 = 0;\n    long paren_level_max16 = 0;\n    long paren_level_cur17\
    \ = 0;\n    long paren_level_max17 = 0;\n    long paren_level_cur18 = 0;\n   \
    \ long paren_level_max18 = 0;\n    long paren_level_cur19 = 0;\n    long paren_level_max19\
    \ = 0;\n    long paren_level_cur20 = 0;\n    long paren_level_max20 = 0;\n   \
    \ long paren_level_cur21 = 0;\n    long paren_level_max21 = 0;\n    long paren_level_cur22\
    \ = 0;\n    long paren_level_max22 = 0;\n    long paren_level_cur23 = 0;\n   \
    \ long paren_level_max23 = 0;\n    long paren_level_cur24 = 0;\n    long paren_level_max24\
    \ = 0;\n    long paren_level_cur25 = 0;\n    long paren_level_max25 = 0;\n   \
    \ long paren_level_cur26 = 0;\n    long paren_level_max26 = 0;\n    long paren_level_cur27\
    \ = 0;\n    long paren_level_max27 = 0;\n    long paren_level_cur28\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfq5ph_cr.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpfq5ph_cr.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpfq5ph_cr.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n            current_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            current_level--;\n\
    \        }\n        if (paren_level > current_level) {\n            paren_levels[paren_level]\
    \ = current_level;\n        }\n    }\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpaj4icr0c: /tmp/tmpaj4icr0c.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  long level = 0;\n  for (auto &c : paren_string) {\n    if (c == '(') {\n  \
    \    paren_levels.push_back(level);\n      level++;\n    } else if (c == ')')\
    \ {\n      level--;\n    }\n  }\n  assert(paren_levels.size() == paren_string.size());\n\
    \  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmppaxq6o0g: /tmp/tmppaxq6o0g.cpp:17: std::vector<long int> parse_nested_parens(std::string):
    Assertion `paren_levels.size() == paren_string.size()'' failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 1;\n    size_t paren_level = 0;\n    for (size_t i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         paren_levels[paren_level] = paren_levels[paren_level] + 1;\n       \
    \ } else if (paren_string[i] == ')') {\n            paren_levels[paren_level]\
    \ = paren_levels[paren_level] - 1;\n            if (paren_levels[paren_level]\
    \ == 0) {\n                paren_level++;\n            }\n        }\n    }\n \
    \   return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    std::string curr_paren_string = paren_string;\n\
    \    long curr_paren_level = 0;\n    long paren_level_count = 0;\n    while (curr_paren_level\
    \ != 0) {\n        curr_paren_string = curr_paren_string.substr(0, curr_paren_string.find_first_of('('));\n\
    \        curr_paren_level++;\n        paren_level_count++;\n    }\n    curr_paren_string\
    \ = curr_paren_string.substr(0, curr_paren_string.find_first_of(')'));\n    curr_paren_level--;\n\
    \    paren_level_count--;\n    paren_level_count = paren_level_count % 2;\n  \
    \  paren_level_count = paren_level_count + 1;\n    paren_level_count = paren_level_count\
    \ * 2;\n    paren_level_count = paren_level_count + 1;\n    paren_level_count\
    \ = paren_level_count * 2;\n    paren_level_count = paren_level_count + 1;\n \
    \   paren_level_count = paren_level_count * 2;\n    paren_level_count = paren_level_count\
    \ + 1;\n    paren_level_count = paren_level_count * 2;\n    paren_level_count\
    \ = paren_level_count + 1;\n    paren_level_count = paren_level_count * 2;\n \
    \   paren_level_count = paren_level_count + 1;\n    paren_level_count = paren_level_count\
    \ * 2;\n    paren_level_count = paren_level_count + 1;\n    paren_level_count\
    \ = paren_level_count * 2;\n    paren_level_count = paren_level_count + 1;\n \
    \   paren_level_count = paren_level_count * 2;\n    paren_level_count = paren_level_count\
    \ + 1;\n    paren_level_count = paren_level_count * 2;\n    paren_level_count\
    \ = paren_level_count + 1;\n    paren_level_count = paren_level_count * 2;\n \
    \   paren_level_count = paren_level_count + 1;\n    paren_level_count = paren_level_count\
    \ * 2;\n    paren_level_count = paren_level_count + 1;\n    paren_level_count\
    \ = paren_level_count * 2;\n    paren_level_count = paren_level_count + 1;\n \
    \   paren_level_count = paren_level_count * 2;\n    paren_level_count = paren_level_count\
    \ + 1;\n    paren_level_count = paren_level_count * 2;\n    paren_level_count\
    \ = paren_level_count + \n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph2e4rgpj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmph2e4rgpj.cpp:50:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   50 | }\n      | ^\n/tmp/tmph2e4rgpj.cpp:50:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            current_level++;\n        } else if\
    \ (c == ')') {\n            current_level--;\n        }\n        if (current_level\
    \ > max_level) {\n            max_level = current_level;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    std::vector<long> result;\n    for (long level : paren_levels) {\n\
    \        result.push_back(level);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpaqykxrqx: /tmp/tmpaqykxrqx.cpp:29: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpphyretcm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpphyretcm.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpphyretcm.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpphyretcm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpphyretcm.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpphyretcm.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.push_back(0);\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            paren_level_count++;\n            if (paren_level > paren_level_max)\
    \ {\n                paren_level_max = paren_level;\n                paren_level_max_count\
    \ = paren_level_count;\n            }\n        } else if (c == ')') {\n      \
    \      paren_level_count--;\n            if (paren_level_count > paren_level_max_count)\
    \ {\n                paren_level_max_count = paren_level_count;\n            }\n\
    \        }\n        paren_levels.push_back(paren_level);\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzg31pl19: /tmp/tmpzg31pl19.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level >\
    \ level) {\n            level = paren_level;\n        }\n        paren_levels[paren_level].push_back(level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmbtwn_hd.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpmbtwn_hd.cpp:19:35: error: request for member \u2018push_back\u2019\
    \ in \u2018paren_levels.std::vector<long int>::operator[](((std::vector<long int>::size_type)paren_level))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   19 |      \
    \   paren_levels[paren_level].push_back(level);\n      |                     \
    \              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level = c;\n            level++;\n\
    \        } else if (c == ')') {\n            level--;\n            if (paren_level\
    \ == c) {\n                levels.push_back(level);\n                paren_level.clear();\n\
    \            }\n        }\n    }\n    return levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwg9i8n4g.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpwg9i8n4g.cpp:16:29: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   16 |             if (paren_level == c) {\n      |\
    \                 ~~~~~~~~~~~ ^~ ~\n      |                 |              |\n\
    \      |                 |              char\n      |                 std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwg9i8n4g.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpwg9i8n4g.cpp:16:32:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   16\
    \ |             if (paren_level == c) {\n      |                             \
    \   ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmpwg9i8n4g.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5: note: candidate:\
    \ \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099\
    \ |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1099:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpwg9i8n4g.cpp:16:32:\
    \ note:   mismatched types \u2018const std::__cxx"
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_count =\
    \ 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n           \
    \ paren_count++;\n            current_level++;\n        } else if (c == ')') {\n\
    \            paren_count--;\n            current_level--;\n        }\n       \
    \ if (current_level > max_level) {\n            max_level = current_level;\n \
    \       }\n        if (paren_count == 0) {\n            paren_levels.push_back(max_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3_m5t6kv: /tmp/tmp3_m5t6kv.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    for (auto c :\
    \ paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level--;\n        }\n        if (paren_level_count == 0) {\n\
    \            paren_level_count = paren_level;\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp_6f9g2rc: /tmp/tmp_6f9g2rc.cpp:27: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113122
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  long paren_level = 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \    paren_levels.push_back(paren_level);\n  }\n  return paren_levels;\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp1x5ae76i: /tmp/tmp1x5ae76i.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmps7y1vmze: /tmp/tmps7y1vmze.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_count = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_start = 0;\n    long paren_level_end = 0;\n    long\
    \ paren_level_start_index = 0;\n    long paren_level_end_index = 0;\n    long\
    \ paren_level_end_index2 = 0;\n    long paren_level_end_index3 = 0;\n    long\
    \ paren_level_end_index4 = 0;\n    long paren_level_end_index5 = 0;\n    long\
    \ paren_level_end_index6 = 0;\n    long paren_level_end_index7 = 0;\n    long\
    \ paren_level_end_index8 = 0;\n    long paren_level_end_index9 = 0;\n    long\
    \ paren_level_end_index10 = 0;\n    long paren_level_end_index11 = 0;\n    long\
    \ paren_level_end_index12 = 0;\n    long paren_level_end_index13 = 0;\n    long\
    \ paren_level_end_index14 = 0;\n    long paren_level_end_index15 = 0;\n    long\
    \ paren_level_end_index16 = 0;\n    long paren_level_end_index17 = 0;\n    long\
    \ paren_level_end_index18 = 0;\n    long paren_level_end_index19 = 0;\n    long\
    \ paren_level_end_index20 = 0;\n    long paren_level_end_index21 = 0;\n    long\
    \ paren_level_end_index22 = 0;\n    long paren_level_end_index23 = 0;\n    long\
    \ paren_level_end_index24 = 0;\n    long paren_level_end_index25 = 0;\n    long\
    \ paren_level_end_index26 = 0;\n    long paren_level_end_index27 = 0;\n    long\
    \ paren_level_end_index28 = 0;\n    long paren_level_end_index29 = 0;\n    long\
    \ paren_level_end_index30 = 0;\n    long paren_level_end_index31 = 0;\n    long\
    \ paren_level_end_index32 = 0;\n    long paren_level_end_index33 = 0;\n    long\
    \ paren_level_end_index34 = 0;\n    long paren_level_end_index35 = 0;\n    long\
    \ paren_level_end_index36 = 0;\n    long paren_level_end_index37 = 0;\n    long\
    \ paren_level_end_index38 = 0;\n    long paren_level_end_index39 = 0;\n    long\
    \ paren_level_end_index40 = 0;\n    long paren_level_end_index41 = 0;\n    long\
    \ paren_level_end_index42 = 0;\n    long paren_level_end_index43 = 0;\n    long\
    \ paren_level_end_index44 = 0;\n    long paren_level_end_index45 = 0;\n    long\
    \ paren_level_end_index46 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmw2s2c5.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpjmw2s2c5.cpp:61:1: error: expected initializer before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmpjmw2s2c5.cpp:61:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113121
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level = std::to_string(level);\n\
    \            level++;\n        } else if (c == ')') {\n            level--;\n\
    \            levels[level] = std::stoi(paren_level);\n        }\n    }\n    return\
    \ levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count2 =\
    \ 0;\n    long paren_level_max_count3 = 0;\n    long paren_level_max_count4 =\
    \ 0;\n    long paren_level_max_count5 = 0;\n    long paren_level_max_count6 =\
    \ 0;\n    long paren_level_max_count7 = 0;\n    long paren_level_max_count8 =\
    \ 0;\n    long paren_level_max_count9 = 0;\n    long paren_level_max_count10 =\
    \ 0;\n    long paren_level_max_count11 = 0;\n    long paren_level_max_count12\
    \ = 0;\n    long paren_level_max_count13 = 0;\n    long paren_level_max_count14\
    \ = 0;\n    long paren_level_max_count15 = 0;\n    long paren_level_max_count16\
    \ = 0;\n    long paren_level_max_count17 = 0;\n    long paren_level_max_count18\
    \ = 0;\n    long paren_level_max_count19 = 0;\n    long paren_level_max_count20\
    \ = 0;\n    long paren_level_max_count21 = 0;\n    long paren_level_max_count22\
    \ = 0;\n    long paren_level_max_count23 = 0;\n    long paren_level_max_count24\
    \ = 0;\n    long paren_level_max_count25 = 0;\n    long paren_level_max_count26\
    \ = 0;\n    long paren_level_max_count27 = 0;\n    long paren_level_max_count28\
    \ = 0;\n    long paren_level_max_count29 = 0;\n    long paren_level_max_count30\
    \ = 0;\n    long paren_level_max_count31 = 0;\n    long paren_level_max_count32\
    \ = 0;\n    long paren_level_max_count33 = 0;\n    long paren_level_max_count34\
    \ = 0;\n    long paren_level_max_count35 = 0;\n    long paren_level_max_count36\
    \ = 0;\n    long paren_level_max_count37 = 0;\n    long paren_level_max_count38\
    \ = 0;\n    long paren_level_max_count39 = 0;\n    long paren_level_max_count40\
    \ = 0;\n    long paren_level_max_count41 = 0;\n    long paren_level_max_count42\
    \ = 0;\n    long paren_level_max_count43 = 0;\n    long paren_level_max_count44\
    \ = 0;\n    long paren_level_max_count45 = 0;\n    long paren_level_max_count46\
    \ = 0;\n    long paren_level_max_count47 = 0;\n    long paren_level_max_count48\
    \ = 0;\n    long paren_level_max_count\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp60t1ku_3.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp60t1ku_3.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmp60t1ku_3.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp9au1pg8: /tmp/tmpp9au1pg8.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            paren_level++;\n        } else if (c == ')') {\n    \
    \        paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmppvik9lkt: /tmp/tmppvik9lkt.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  paren_levels = paren_string.substr(0, paren_string.find(' '));\n  long max_level\
    \ = 0;\n  for (long i = 0; i < paren_levels.size(); i++) {\n    if (paren_levels[i]\
    \ > max_level) {\n      max_level = paren_levels[i];\n    }\n  }\n  std::vector<long>\
    \ nested_paren_levels;\n  for (long i = 0; i < paren_levels.size(); i++) {\n \
    \   if (paren_levels[i] > max_level) {\n      nested_paren_levels.push_back(max_level);\n\
    \    } else {\n      nested_paren_levels.push_back(paren_levels[i]);\n    }\n\
    \  }\n  return nested_paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphipvbd_f.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmphipvbd_f.cpp:8:63: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n    8 |   paren_levels = paren_string.substr(0, paren_string.find(' '));\n\
    \      |                                                               ^\nIn file\
    \ included from /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphipvbd_f.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018const std::vector<long\
    \ int>&\u2019\n  199 |     operator=(const vector<_Tp, _Alloc>& __x)\n      |\
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphipvbd_f.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n\
    \  706 |       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:706:26: note:  \
    \ no known c"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.size() == paren_string.size());\n\
    \  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmplemyysp8: /tmp/tmplemyysp8.cpp:17: std::vector<long int> parse_nested_parens(std::string):
    Assertion `paren_levels.size() == paren_string.size()'' failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_prev = 0;\n\
    \    long paren_level_next = 0;\n    long paren_level_next_prev = 0;\n    long\
    \ paren_level_next_next_prev = 0;\n    long paren_level_next_next_next_prev =\
    \ 0;\n    long paren_level_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptu25tt3y.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmptu25tt3y.cpp:23:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   23 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptu25tt3y.cpp:22:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   22 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptu25tt3y.cpp:25:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   25 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptu25tt3y.cpp:24:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   24 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptu25tt3y.cpp:28:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   28 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptu25tt3y.cpp:27:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   27 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_nex"
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpk9s7n38f: /tmp/tmpk9s7n38f.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n            current_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            current_level--;\n\
    \        }\n        if (paren_level == current_level) {\n            paren_levels[paren_level]\
    \ = current_level;\n        }\n    }\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113121
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long level = 0;\n    long paren_level = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            current_level = level;\n            level++;\n        } else if (c\
    \ == ')') {\n            level--;\n            paren_level--;\n            current_level\
    \ = level;\n        } else if (c == ' ') {\n            level++;\n        }\n\
    \        paren_levels[paren_level] = current_level;\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113122
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long level = 0;\n \
    \   long index = 0;\n    long paren_index = 0;\n    long paren_level = 0;\n  \
    \  long paren_level_start = 0;\n    long paren_level_end = 0;\n    long paren_level_length\
    \ = 0;\n    long paren_level_end2 = -1;\n    long paren_level_length2 = 0;\n \
    \   long paren_level_end3 = -1;\n    long paren_level_length3 = 0;\n    long paren_level_end4\
    \ = -1;\n    long paren_level_length4 = 0;\n    long paren_level_end5 = -1;\n\
    \    long paren_level_length5 = 0;\n    long paren_level_end6 = -1;\n    long\
    \ paren_level_length6 = 0;\n    long paren_level_end7 = -1;\n    long paren_level_length7\
    \ = 0;\n    long paren_level_end8 = -1;\n    long paren_level_length8 = 0;\n \
    \   long paren_level_end9 = -1;\n    long paren_level_length9 = 0;\n    long paren_level_end10\
    \ = -1;\n    long paren_level_length10 = 0;\n    long paren_level_end11 = -1;\n\
    \    long paren_level_length11 = 0;\n    long paren_level_end12 = -1;\n    long\
    \ paren_level_length12 = 0;\n    long paren_level_end13 = -1;\n    long paren_level_length13\
    \ = 0;\n    long paren_level_end14 = -1;\n    long paren_level_length14 = 0;\n\
    \    long paren_level_end15 = -1;\n    long paren_level_length15 = 0;\n    long\
    \ paren_level_end16 = -1;\n    long paren_level_length16 = 0;\n    long paren_level_end17\
    \ = -1;\n    long paren_level_length17 = 0;\n    long paren_level_end18 = -1;\n\
    \    long paren_level_length18 = 0;\n    long paren_level_end19 = -1;\n    long\
    \ paren_level_length19 = 0;\n    long paren_level_end20 = -1;\n    long paren_level_length20\
    \ = 0;\n    long paren_level_end21 = -1;\n    long paren_level_length21 = 0;\n\
    \    long paren_level_end22 = -1;\n    long paren_level_length22 = 0;\n    long\
    \ paren_level_end23 = -1;\n    long paren_level_length23 = 0;\n    long paren_level_end24\
    \ = -1;\n    long paren_level_length24 = 0;\n    long paren_level_end25 = -1;\n\
    \    long paren_level_length25 = 0;\n    long paren\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm1iu6ipf.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpm1iu6ipf.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpm1iu6ipf.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_prev = 0;\n\
    \    long paren_level_next = 0;\n    long paren_level_next_prev = 0;\n    long\
    \ paren_level_next_next_prev = 0;\n    long paren_level_next_next_next_prev =\
    \ 0;\n    long paren_level_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e76wr9t.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp5e76wr9t.cpp:23:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   23 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5e76wr9t.cpp:22:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   22 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5e76wr9t.cpp:25:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   25 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5e76wr9t.cpp:24:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   24 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5e76wr9t.cpp:28:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   28 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5e76wr9t.cpp:27:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   27 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_nex"
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_count =\
    \ 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min = 0;\n\
    \    long paren_level_count_sum = 0;\n    long paren_level_count_sum_max = 0;\n\
    \    long paren_level_count_sum_min = 0;\n    long paren_level_count_sum_sum =\
    \ 0;\n    long paren_level_count_sum_sum_max = 0;\n    long paren_level_count_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n   \
    \ long paren_level_count_sum_sum_sum_sum_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpui485y_k.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpui485y_k.cpp:39:10: error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min\u2019\
    \n   39 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpui485y_k.cpp:36:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min\u2019\
    \ previously declared here\n   36 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpui485y_k.cpp:40:10: error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\u2019\
    \n   40 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpui485y_k.cpp:37:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\u2019\
    \ previously declared here\n   37 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpui485y_k.cpp:41:10: error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\u2019\
    \n   41 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpui485y_k.cpp:38:10: note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\u2019\
    \ previously declared here\n   38 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpui485y_k.cpp:42:10: error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min\u2019\
    \n   42 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpui485y_k.cpp:36:10:\
    \ not"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2\
    \ = 0;\n    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n\
    \    long paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long\
    \ paren_level_counter7 = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9\
    \ = 0;\n    long paren_level_counter10 = 0;\n    long paren_level_counter11 =\
    \ 0;\n    long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n\
    \    long paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n  \
    \  long paren_level_counter16 = 0;\n    long paren_level_counter17 = 0;\n    long\
    \ paren_level_counter18 = 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20\
    \ = 0;\n    long paren_level_counter21 = 0;\n    long paren_level_counter22 =\
    \ 0;\n    long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n\
    \    long paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n  \
    \  long paren_level_counter27 = 0;\n    long paren_level_counter28 = 0;\n    long\
    \ paren_level_counter29 = 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31\
    \ = 0;\n    long paren_level_counter32 = 0;\n    long paren_level_counter33 =\
    \ 0;\n    long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n\
    \    long paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n  \
    \  long paren_level_counter38 = 0;\n    long paren_level_counter39 = 0;\n    long\
    \ paren_level_counter40 = 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42\
    \ = 0;\n    long paren_level_counter43 = 0;\n    long paren_level_counter44 =\
    \ 0;\n    long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n\
    \    long paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n  \
    \  long paren_level_counter49 = 0;\n    long paren_level_counter50 = 0;\n    long\
    \ paren_level_counter51 = 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53\
    \ = 0;\n    long paren_level_counter54 = 0;\n    long paren_level_counter55 =\
    \ 0;\n    long paren_level_counter\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpigs43hlu.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpigs43hlu.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmpigs43hlu.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long current_paren_level = 0;\n    long paren_levels_size\
    \ = 0;\n    long paren_levels_index = 0;\n    long paren_levels_index_next = 0;\n\
    \    long paren_levels_index_prev = 0;\n    long paren_levels_index_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_prev = 0;\n    long paren_levels_index_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_prev = 0;\n    long paren_levels_index_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_prev = 0;\n\
    \    long paren_levels_index_next_next_next_next_next_next_next_prev = 0;\n  \
    \  long paren_levels_index_next_next_next_next_next_next_next_next_prev = 0;\n\
    \    long paren_levels_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckp60qpv.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpckp60qpv.cpp:23:10: error: redeclaration of \u2018long int paren_levels_index_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   23 |     long paren_levels_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpckp60qpv.cpp:22:10: note: \u2018long int paren_levels_index_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   22 |     long paren_levels_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpckp60qpv.cpp:26:10: error: redeclaration of \u2018long int paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   26 |     long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpckp60qpv.cpp:25:10: note: \u2018long int paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   25 |     long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpckp60qpv.cpp:28:10: error: redeclaration of \u2018long int paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   28 |     long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpckp60qpv.cpp:27:10: note: \u2018long int paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   27 |     long paren_levels_index_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    "
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx5fp8afl: /tmp/tmpx5fp8afl.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_max = 0;\n\
    \    long paren_level_curr = 0;\n    long paren_level_curr2 = 0;\n    long paren_level_curr3\
    \ = 0;\n    long paren_level_curr4 = 0;\n    long paren_level_curr5 = 0;\n   \
    \ long paren_level_curr6 = 0;\n    long paren_level_curr7 = 0;\n    long paren_level_curr8\
    \ = 0;\n    long paren_level_curr9 = 0;\n    long paren_level_curr10 = 0;\n  \
    \  long paren_level_curr11 = 0;\n    long paren_level_curr12 = 0;\n    long paren_level_curr13\
    \ = 0;\n    long paren_level_curr14 = 0;\n    long paren_level_curr15 = 0;\n \
    \   long paren_level_curr16 = 0;\n    long paren_level_curr17 = 0;\n    long paren_level_curr18\
    \ = 0;\n    long paren_level_curr19 = 0;\n    long paren_level_curr20 = 0;\n \
    \   long paren_level_curr21 = 0;\n    long paren_level_curr22 = 0;\n    long paren_level_curr23\
    \ = 0;\n    long paren_level_curr24 = 0;\n    long paren_level_curr25 = 0;\n \
    \   long paren_level_curr26 = 0;\n    long paren_level_curr27 = 0;\n    long paren_level_curr28\
    \ = 0;\n    long paren_level_curr29 = 0;\n    long paren_level_curr30 = 0;\n \
    \   long paren_level_curr31 = 0;\n    long paren_level_curr32 = 0;\n    long paren_level_curr33\
    \ = 0;\n    long paren_level_curr34 = 0;\n    long paren_level_curr35 = 0;\n \
    \   long paren_level_curr36 = 0;\n    long paren_level_curr37 = 0;\n    long paren_level_curr38\
    \ = 0;\n    long paren_level_curr39 = 0;\n    long paren_level_curr40 = 0;\n \
    \   long paren_level_curr41 = 0;\n    long paren_level_curr42 = 0;\n    long paren_level_curr43\
    \ = 0;\n    long paren_level_curr44 = 0;\n    long paren_level_curr45 = 0;\n \
    \   long paren_level_curr46 = 0;\n    long paren_level_curr47 = 0;\n    long paren_level_curr48\
    \ = 0;\n    long paren_level_curr49 = 0;\n    long paren_level_curr50 = 0;\n \
    \   long paren_level_curr51 = 0;\n    long paren_level_curr52 = 0;\n    long paren_level_curr53\
    \ = 0;\n    long paren_level_curr54 = 0;\n    long \n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpw9oxn9.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpgpw9oxn9.cpp:66:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpgpw9oxn9.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  paren_levels = paren_string.substr(0, paren_string.find('(')).split(' ').size();\n\
    \  std::vector<long> paren_levels_temp;\n  paren_levels_temp.reserve(paren_levels);\n\
    \  for (int i = 0; i < paren_levels; i++) {\n    paren_levels_temp.push_back(paren_levels);\n\
    \  }\n  long max_level = 0;\n  for (int i = 0; i < paren_levels_temp.size(); i++)\
    \ {\n    for (int j = 0; j < paren_levels_temp[i].size(); j++) {\n      if (paren_levels_temp[i][j]\
    \ > max_level) {\n        max_level = paren_levels_temp[i][j];\n      }\n    }\n\
    \  }\n  std::vector<long> paren_levels_temp2;\n  paren_levels_temp2.reserve(max_level);\n\
    \  for (int i = 0; i < paren_levels_temp.size(); i++) {\n    for (int j = 0; j\
    \ < paren_levels_temp[i].size(); j++) {\n      if (paren_levels_temp[i][j] ==\
    \ max_level) {\n        paren_levels_temp2.push_back(max_level);\n      }\n  \
    \  }\n  }\n  paren_levels_temp2.push_back(max_level);\n  return paren_levels_temp2;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkyan8e6s.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpkyan8e6s.cpp:8:65: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n    8 |   paren_levels = paren_string.substr(0,\
    \ paren_string.find('(')).split(' ').size();\n      |                        \
    \                                         ^~~~~\n/tmp/tmpkyan8e6s.cpp:10:29: error:\
    \ cannot convert \u2018std::vector<long int>\u2019 to \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   10 |   paren_levels_temp.reserve(paren_levels);\n\
    \      |                             ^~~~~~~~~~~~\n      |                   \
    \          |\n      |                             std::vector<long int>\nIn file\
    \ included from /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkyan8e6s.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:67:23:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::reserve(std::vector<_Tp,\
    \ _Alloc>::size_type) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n   67 |    \
    \ reserve(size_type __n)\n      |             ~~~~~~~~~~^~~\n/tmp/tmpkyan8e6s.cpp:11:21:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018int\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   11 |   for (int i = 0; i < paren_levels;\
    \ i++) {\n      |                   ~ ^ ~~~~~~~~~~~~\n      |                \
    \   |   |\n      |                   int std::vector<long int>\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkyan8e6s.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIte"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter_max = 0;\n    long\
    \ paren_level_counter_max_index = 0;\n    long paren_level_counter_max_index2\
    \ = 0;\n    long paren_level_counter_max_index3 = 0;\n    long paren_level_counter_max_index4\
    \ = 0;\n    long paren_level_counter_max_index5 = 0;\n    long paren_level_counter_max_index6\
    \ = 0;\n    long paren_level_counter_max_index7 = 0;\n    long paren_level_counter_max_index8\
    \ = 0;\n    long paren_level_counter_max_index9 = 0;\n    long paren_level_counter_max_index10\
    \ = 0;\n    long paren_level_counter_max_index11 = 0;\n    long paren_level_counter_max_index12\
    \ = 0;\n    long paren_level_counter_max_index13 = 0;\n    long paren_level_counter_max_index14\
    \ = 0;\n    long paren_level_counter_max_index15 = 0;\n    long paren_level_counter_max_index16\
    \ = 0;\n    long paren_level_counter_max_index17 = 0;\n    long paren_level_counter_max_index18\
    \ = 0;\n    long paren_level_counter_max_index19 = 0;\n    long paren_level_counter_max_index20\
    \ = 0;\n    long paren_level_counter_max_index21 = 0;\n    long paren_level_counter_max_index22\
    \ = 0;\n    long paren_level_counter_max_index23 = 0;\n    long paren_level_counter_max_index24\
    \ = 0;\n    long paren_level_counter_max_index25 = 0;\n    long paren_level_counter_max_index26\
    \ = 0;\n    long paren_level_counter_max_index27 = 0;\n    long paren_level_counter_max_index28\
    \ = 0;\n    long paren_level_counter_max_index29 = 0;\n    long paren_level_counter_max_index30\
    \ = 0;\n    long paren_level_counter_max_index31 = 0;\n    long paren_level_counter_max_index32\
    \ = 0;\n    long paren_level_counter_max_index33 = 0;\n    long paren_level_counter_max_index34\
    \ = 0;\n    long paren_level_counter_max_index35 = 0;\n    long paren_level_counter_max_index36\
    \ = 0;\n    long paren_level_counter_max_index37 = 0;\n    long paren_level_counter_max_index38\
    \ = 0;\n    long paren_level_counter_max_index39 = 0;\n    long paren_level_counter_max_index40\
    \ = 0;\n    long paren_level_counter_max_index41 = 0;\n    long paren_level_counter_max_index42\
    \ = 0;\n    long paren_level_counter_max_index43 = 0;\n\n}\nint main() {\n   \
    \ auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpz6k6hzjr: /tmp/tmpz6k6hzjr.cpp:60: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposc_pobj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmposc_pobj.cpp:13:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   13 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:14:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   14 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:15:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   15 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   16 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:17:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   17 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   18 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string curr_level;\n    long curr_level_size = 0;\n    long max_level_size\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   curr_level.push_back(c);\n            curr_level_size++;\n        } else if\
    \ (c == ')') {\n            curr_level.pop_back();\n            curr_level_size--;\n\
    \            if (curr_level_size < 0) {\n                curr_level_size = 0;\n\
    \            }\n        } else {\n            curr_level.push_back(c);\n     \
    \       curr_level_size++;\n        }\n        if (curr_level_size > max_level_size)\
    \ {\n            max_level_size = curr_level_size;\n        }\n    }\n    levels.push_back(max_level_size);\n\
    \    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpvicae9i7: /tmp/tmpvicae9i7.cpp:34: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n            current_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            current_level--;\n\
    \        }\n        if (current_level > paren_level) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpghfnmlgx: /tmp/tmpghfnmlgx.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string curr_parens = \"\";\n    std::string curr_level = \"\";\n   \
    \ for (char c : paren_string) {\n        if (c == '(') {\n            curr_parens\
    \ += c;\n        } else if (c == ')') {\n            curr_parens = curr_parens.substr(0,\
    \ curr_parens.size() - 1);\n            curr_level += c;\n            long curr_level_num\
    \ = std::stoi(curr_level);\n            curr_level = curr_level.substr(0, curr_level.size()\
    \ - 1);\n            levels.push_back(curr_level_num);\n        } else {\n   \
    \         curr_parens += c;\n        }\n    }\n    return levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ current_level) {\n            paren_levels.push_back(paren_level);\n       \
    \ }\n        current_level = paren_level;\n    }\n    return paren_levels;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpn43bxbig: /tmp/tmpn43bxbig.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            level--;\n\
    \        } else if (is_open) {\n            level++;\n        }\n        levels.push_back(level);\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpv9e7zwha: /tmp/tmpv9e7zwha.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmps7y1vmze: /tmp/tmps7y1vmze.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   for (auto &c : paren_string) {\n        if (c == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n    }\n    paren_levels.push_back(paren_level);\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpt13hg0qr: /tmp/tmpt13hg0qr.cpp:23: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_start =\
    \ 0;\n    long paren_level_end = 0;\n    long paren_level_end_index = 0;\n   \
    \ long paren_level_end_index2 = 0;\n    long paren_level_end_index3 = 0;\n   \
    \ long paren_level_end_index4 = 0;\n    long paren_level_end_index5 = 0;\n   \
    \ long paren_level_end_index6 = 0;\n    long paren_level_end_index7 = 0;\n   \
    \ long paren_level_end_index8 = 0;\n    long paren_level_end_index9 = 0;\n   \
    \ long paren_level_end_index10 = 0;\n    long paren_level_end_index11 = 0;\n \
    \   long paren_level_end_index12 = 0;\n    long paren_level_end_index13 = 0;\n\
    \    long paren_level_end_index14 = 0;\n    long paren_level_end_index15 = 0;\n\
    \    long paren_level_end_index16 = 0;\n    long paren_level_end_index17 = 0;\n\
    \    long paren_level_end_index18 = 0;\n    long paren_level_end_index19 = 0;\n\
    \    long paren_level_end_index20 = 0;\n    long paren_level_end_index21 = 0;\n\
    \    long paren_level_end_index22 = 0;\n    long paren_level_end_index23 = 0;\n\
    \    long paren_level_end_index24 = 0;\n    long paren_level_end_index25 = 0;\n\
    \    long paren_level_end_index26 = 0;\n    long paren_level_end_index27 = 0;\n\
    \    long paren_level_end_index28 = 0;\n    long paren_level_end_index29 = 0;\n\
    \    long paren_level_end_index30 = 0;\n    long paren_level_end_index31 = 0;\n\
    \    long paren_level_end_index32 = 0;\n    long paren_level_end_index33 = 0;\n\
    \    long paren_level_end_index34 = 0;\n    long paren_level_end_index35 = 0;\n\
    \    long paren_level_end_index36 = 0;\n    long paren_level_end_index37 = 0;\n\
    \    long paren_level_end_index38 = 0;\n    long paren_level_end_index39 = 0;\n\
    \    long paren_level_end_index40 = 0;\n    long paren_level_end_index41 = 0;\n\
    \    long paren_level_end_index42 = 0;\n    long paren_level_end_index43 = 0;\n\
    \    long paren_level_end_index44 = 0;\n    long paren_level_end_index45 = 0;\n\
    \    long paren_level_end_index46 = 0;\n    long paren_level_end_index47 = 0;\n\
    \    long paren_level_end_index48 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpizw66bux: /tmp/tmpizw66bux.cpp:64: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    std::string paren_level_string = \"\";\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            paren_level_string = std::to_string(paren_level);\n        } else\
    \ if (c == ')') {\n            paren_level--;\n            paren_level_string\
    \ = std::to_string(paren_level);\n        } else {\n            paren_level_string\
    \ = std::to_string(paren_level);\n        }\n        paren_levels.push_back(paren_level_string);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvt_x91ve.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpvt_x91ve.cpp:20:50: error: no matching function for call to \u2018\
    std::vector<long int>::push_back(std::string&)\u2019\n   20 |         paren_levels.push_back(paren_level_string);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvt_x91ve.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660113122
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> result;\n\
    \    long level = 0;\n    long max_level = 0;\n    long paren_level = 0;\n   \
    \ long paren_max_level = 0;\n    long paren_level_count = 0;\n    long paren_max_level_count\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_max_level_count_max\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_max_level_count_min\
    \ = 0;\n    long paren_level_count_min2 = 0;\n    long paren_max_level_count_min2\
    \ = 0;\n    long paren_level_count_min3 = 0;\n    long paren_max_level_count_min3\
    \ = 0;\n    long paren_level_count_min4 = 0;\n    long paren_max_level_count_min4\
    \ = 0;\n    long paren_level_count_min5 = 0;\n    long paren_max_level_count_min5\
    \ = 0;\n    long paren_level_count_min6 = 0;\n    long paren_max_level_count_min6\
    \ = 0;\n    long paren_level_count_min7 = 0;\n    long paren_max_level_count_min7\
    \ = 0;\n    long paren_level_count_min8 = 0;\n    long paren_max_level_count_min8\
    \ = 0;\n    long paren_level_count_min9 = 0;\n    long paren_max_level_count_min9\
    \ = 0;\n    long paren_level_count_min10 = 0;\n    long paren_max_level_count_min10\
    \ = 0;\n    long paren_level_count_min11 = 0;\n    long paren_max_level_count_min11\
    \ = 0;\n    long paren_level_count_min12 = 0;\n    long paren_max_level_count_min12\
    \ = 0;\n    long paren_level_count_min13 = 0;\n    long paren_max_level_count_min13\
    \ = 0;\n    long paren_level_count_min14 = 0;\n    long paren_max_level_count_min14\
    \ = 0;\n    long paren_level_count_min15 = 0;\n    long paren_max_level_count_min15\
    \ = 0;\n    long paren_level_count_min16 = 0;\n    long paren_max_level_count_min16\
    \ = 0;\n    long paren_level_count_min17 = 0;\n    long paren_max_level_count_min17\
    \ = 0;\n    long paren_level_count_min18 = 0;\n    long paren_max_level_count_min18\
    \ = 0;\n    long paren_level_count_min19 = 0;\n    long paren_max_level_count_min19\
    \ = 0;\n    long paren_level_count_min20 = 0;\n    long paren_max_level_count_min20\
    \ = 0;\n    long paren_level_count_min21 = 0;\n    long paren_max_level_count_min21\
    \ = 0;\n    long paren_level_count_min22 = 0;\n    long paren\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpup5h6el3.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpup5h6el3.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmpup5h6el3.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113122
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto &c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ level) {\n            paren_levels.push_back(paren_level);\n        }\n    \
    \    level++;\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4u0wkd5_: /tmp/tmp4u0wkd5_.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ level) {\n            paren_levels[paren_level].push_back(level);\n        }\n\
    \        level++;\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmec07gdu.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpmec07gdu.cpp:17:39: error: request for member \u2018push_back\u2019\
    \ in \u2018paren_levels.std::vector<long int>::operator[](((std::vector<long int>::size_type)paren_level))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   17 |      \
    \       paren_levels[paren_level].push_back(level);\n      |                 \
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_count =\
    \ 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_max_index = 0;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp14twdxp3.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp14twdxp3.cpp:15:10: error: redeclaration of \u2018long int paren_level_count_max\u2019\
    \n   15 |     long paren_level_count_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14twdxp3.cpp:11:10: note: \u2018long int paren_level_count_max\u2019 previously\
    \ declared here\n   11 |     long paren_level_count_max = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp14twdxp3.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_count_min\u2019\n   16 |     long paren_level_count_min\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp14twdxp3.cpp:13:10: note:\
    \ \u2018long int paren_level_count_min\u2019 previously declared here\n   13 |\
    \     long paren_level_count_min = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14twdxp3.cpp:17:10: error: redeclaration of \u2018long int paren_level_count_max_index\u2019\
    \n   17 |     long paren_level_count_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14twdxp3.cpp:12:10: note: \u2018long int paren_level_count_max_index\u2019\
    \ previously declared here\n   12 |     long paren_level_count_max_index = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp14twdxp3.cpp:18:10: error:\
    \ redeclaration of \u2018long int paren_level_count_min\u2019\n   18 |     long\
    \ paren_level_count_min = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp14twdxp3.cpp:13:10:\
    \ note: \u2018long int paren_level_count_min\u2019 previously declared here\n\
    \   13 |     long paren_level_count_min = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14twdxp3.cpp:19:10: error: redeclaration of \u2018long int paren_level_count_max_index\u2019\
    \n   19 |     long paren_level_count_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14twdxp3.cpp:12:10: note: \u2018long int paren_level_count_max_index\u2019\
    \ previously declared here\n   12 |     long paren_level_count_max_index = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp14twdxp3.cpp:20:10: error:\
    \ redeclaration of \u2018long int paren_level_count_min\u2019\n   20 |     long\
    \ paren_level_count_m"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx5fp8afl: /tmp/tmpx5fp8afl.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    bool is_open = false;\n    std::string current_paren_string\
    \ = \"\";\n    for (auto c : paren_string) {\n        if (c == '(') {\n      \
    \      is_open = true;\n            current_paren_string = c;\n        } else\
    \ if (c == ')') {\n            is_open = false;\n            current_paren_string\
    \ = \"\";\n        } else if (is_open) {\n            current_paren_string = current_paren_string\
    \ + c;\n        } else {\n            paren_levels.push_back(level);\n       \
    \ }\n        level = level + 1;\n    }\n    paren_levels.push_back(level);\n \
    \   return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpl5ak04p3: /tmp/tmpl5ak04p3.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_level =\
    \ 0;\n    long paren_level_counter = 0;\n    for (auto c : paren_string) {\n \
    \       if (c == '(') {\n            paren_level++;\n            paren_levels[paren_level_counter]\
    \ = paren_level;\n            paren_level_counter++;\n            current_level\
    \ = paren_level;\n        } else if (c == ')') {\n            paren_level--;\n\
    \            paren_levels[paren_level_counter] = paren_level;\n            paren_level_counter++;\n\
    \            current_level = paren_level;\n        } else {\n            if (current_level\
    \ > max_level) {\n                max_level = current_level;\n            }\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_max = 0;\n\
    \    long paren_level_cur = 0;\n    long paren_level_max2 = 0;\n    long paren_level_cur2\
    \ = 0;\n    long paren_level_max3 = 0;\n    long paren_level_cur3 = 0;\n    long\
    \ paren_level_max4 = 0;\n    long paren_level_cur4 = 0;\n    long paren_level_max5\
    \ = 0;\n    long paren_level_cur5 = 0;\n    long paren_level_max6 = 0;\n    long\
    \ paren_level_cur6 = 0;\n    long paren_level_max7 = 0;\n    long paren_level_cur7\
    \ = 0;\n    long paren_level_max8 = 0;\n    long paren_level_cur8 = 0;\n    long\
    \ paren_level_max9 = 0;\n    long paren_level_cur9 = 0;\n    long paren_level_max10\
    \ = 0;\n    long paren_level_cur10 = 0;\n    long paren_level_max11 = 0;\n   \
    \ long paren_level_cur11 = 0;\n    long paren_level_max12 = 0;\n    long paren_level_cur12\
    \ = 0;\n    long paren_level_max13 = 0;\n    long paren_level_cur13 = 0;\n   \
    \ long paren_level_max14 = 0;\n    long paren_level_cur14 = 0;\n    long paren_level_max15\
    \ = 0;\n    long paren_level_cur15 = 0;\n    long paren_level_max16 = 0;\n   \
    \ long paren_level_cur16 = 0;\n    long paren_level_max17 = 0;\n    long paren_level_cur17\
    \ = 0;\n    long paren_level_max18 = 0;\n    long paren_level_cur18 = 0;\n   \
    \ long paren_level_max19 = 0;\n    long paren_level_cur19 = 0;\n    long paren_level_max20\
    \ = 0;\n    long paren_level_cur20 = 0;\n    long paren_level_max21 = 0;\n   \
    \ long paren_level_cur21 = 0;\n    long paren_level_max22 = 0;\n    long paren_level_cur22\
    \ = 0;\n    long paren_level_max23 = 0;\n    long paren_level_cur23 = 0;\n   \
    \ long paren_level_max24 = 0;\n    long paren_level_cur24 = 0;\n    long paren_level_max25\
    \ = 0;\n    long paren_level_cur25 = 0;\n    long paren_level_max26 = 0;\n   \
    \ long paren_level_cur26 = 0;\n    long paren_level_max27 = 0;\n    long paren_level_cur27\
    \ = 0;\n    long paren_level_max28 = 0;\n    long paren_level_cur\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnupkd2qz.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpnupkd2qz.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpnupkd2qz.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113122
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_level =\
    \ 0;\n    long paren_level_count = 0;\n    long paren_level_max = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    \n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_buellg_.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp_buellg_.cpp:15:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   15 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_buellg_.cpp:13:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   13 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_buellg_.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   16 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_buellg_.cpp:14:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   14 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_buellg_.cpp:17:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   17 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_buellg_.cpp:13:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   13 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_buellg_.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   18 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_buellg_.cpp:14:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   14 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_buellg_.cpp:19:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   19 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_buellg_.cpp:13:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   13 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_buellg_.cpp:20:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   20 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_buellg_.cpp:14:1"
  stdout: ''
  timestamp: 1660113122
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long current_paren_level = 0;\n    long paren_levels_size\
    \ = 0;\n    long paren_levels_index = 0;\n    long paren_levels_index_max = 0;\n\
    \    long paren_levels_index_min = 0;\n    long paren_levels_index_current = 0;\n\
    \    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    long paren_levels_index_current_max = 0;\n    long paren_levels_index_current_min\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = parse_nested_parens;\n   \
    \ assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7d6jljp.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpw7d6jljp.cpp:17:10: error: redeclaration of \u2018long int paren_levels_index_current_max\u2019\
    \n   17 |     long paren_levels_index_current_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw7d6jljp.cpp:15:10: note: \u2018long int paren_levels_index_current_max\u2019\
    \ previously declared here\n   15 |     long paren_levels_index_current_max =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7d6jljp.cpp:18:10:\
    \ error: redeclaration of \u2018long int paren_levels_index_current_min\u2019\n\
    \   18 |     long paren_levels_index_current_min = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw7d6jljp.cpp:16:10: note: \u2018long int paren_levels_index_current_min\u2019\
    \ previously declared here\n   16 |     long paren_levels_index_current_min =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7d6jljp.cpp:19:10:\
    \ error: redeclaration of \u2018long int paren_levels_index_current_max\u2019\n\
    \   19 |     long paren_levels_index_current_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw7d6jljp.cpp:15:10: note: \u2018long int paren_levels_index_current_max\u2019\
    \ previously declared here\n   15 |     long paren_levels_index_current_max =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7d6jljp.cpp:20:10:\
    \ error: redeclaration of \u2018long int paren_levels_index_current_min\u2019\n\
    \   20 |     long paren_levels_index_current_min = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw7d6jljp.cpp:16:10: note: \u2018long int paren_levels_index_current_min\u2019\
    \ previously declared here\n   16 |     long paren_levels_index_current_min =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7d6jljp.cpp:21:10:\
    \ error: redeclaration of \u2018long int paren_levels_index_current_max\u2019\n\
    \   21 |     long paren_levels_index_current_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpw7d6jljp.cpp:15:10: note: \u2018long int paren_levels_index_current_max\u2019\
    \ previously declared here\n   15 |     long paren_level"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count_index = 0;\n    long paren_level_max_count_index2\
    \ = 0;\n    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n    long paren_level_max_count_index44\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = parse_nested_parens;\n   \
    \ assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpg1wpl65b: /tmp/tmpg1wpl65b.cpp:59: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_prev = 0;\n\
    \    long paren_level_curr = 0;\n    long paren_level_curr2 = 0;\n    long paren_level_curr3\
    \ = 0;\n    long paren_level_curr4 = 0;\n    long paren_level_curr5 = 0;\n   \
    \ long paren_level_curr6 = 0;\n    long paren_level_curr7 = 0;\n    long paren_level_curr8\
    \ = 0;\n    long paren_level_curr9 = 0;\n    long paren_level_curr10 = 0;\n  \
    \  long paren_level_curr11 = 0;\n    long paren_level_curr12 = 0;\n    long paren_level_curr13\
    \ = 0;\n    long paren_level_curr14 = 0;\n    long paren_level_curr15 = 0;\n \
    \   long paren_level_curr16 = 0;\n    long paren_level_curr17 = 0;\n    long paren_level_curr18\
    \ = 0;\n    long paren_level_curr19 = 0;\n    long paren_level_curr20 = 0;\n \
    \   long paren_level_curr21 = 0;\n    long paren_level_curr22 = 0;\n    long paren_level_curr23\
    \ = 0;\n    long paren_level_curr24 = 0;\n    long paren_level_curr25 = 0;\n \
    \   long paren_level_curr26 = 0;\n    long paren_level_curr27 = 0;\n    long paren_level_curr28\
    \ = 0;\n    long paren_level_curr29 = 0;\n    long paren_level_curr30 = 0;\n \
    \   long paren_level_curr31 = 0;\n    long paren_level_curr32 = 0;\n    long paren_level_curr33\
    \ = 0;\n    long paren_level_curr34 = 0;\n    long paren_level_curr35 = 0;\n \
    \   long paren_level_curr36 = 0;\n    long paren_level_curr37 = 0;\n    long paren_level_curr38\
    \ = 0;\n    long paren_level_curr39 = 0;\n    long paren_level_curr40 = 0;\n \
    \   long paren_level_curr41 = 0;\n    long paren_level_curr42 = 0;\n    long paren_level_curr43\
    \ = 0;\n    long paren_level_curr44 = 0;\n    long paren_level_curr45 = 0;\n \
    \   long paren_level_curr46 = 0;\n    long paren_level_curr47 = 0;\n    long paren_level_curr48\
    \ = 0;\n    long paren_level_curr49 = 0;\n    long paren_level_curr50 = 0;\n \
    \   long paren_level_curr51 = 0;\n    long paren_level_curr52 = 0;\n    long paren_level_curr53\
    \ = 0;\n    long paren_level_curr54 = 0;\n    long \n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgv66_qj6.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpgv66_qj6.cpp:66:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpgv66_qj6.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_level =\
    \ 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n\
    \    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long\
    \ paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7\
    \ = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n\
    \    long paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n  \
    \  long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n    long\
    \ paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16\
    \ = 0;\n    long paren_level_counter17 = 0;\n    long paren_level_counter18 =\
    \ 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n\
    \    long paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n  \
    \  long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n    long\
    \ paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27\
    \ = 0;\n    long paren_level_counter28 = 0;\n    long paren_level_counter29 =\
    \ 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n\
    \    long paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n  \
    \  long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n    long\
    \ paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38\
    \ = 0;\n    long paren_level_counter39 = 0;\n    long paren_level_counter40 =\
    \ 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n\
    \    long paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n  \
    \  long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n    long\
    \ paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49\
    \ = 0;\n    long paren_level_counter50 = 0;\n    long paren_level_counter51 =\
    \ 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n\
    \    long paren_level_counter54 = 0;\n    long paren\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpeaoc4wc3.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpeaoc4wc3.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpeaoc4wc3.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n            current_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            current_level--;\n\
    \        }\n        paren_levels[paren_level] = current_level;\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            current_level++;\n        } else if\
    \ (c == ')') {\n            current_level--;\n        }\n        if (current_level\
    \ > max_level) {\n            max_level = current_level;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    std::vector<long> result;\n    for (long level : paren_levels) {\n\
    \        result.push_back(level);\n    }\n    result.push_back(max_level);\n \
    \   return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpapib0jsk: /tmp/tmpapib0jsk.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_index2 = 0;\n    long paren_level_max_index3 =\
    \ 0;\n    long paren_level_max_index4 = 0;\n    long paren_level_max_index5 =\
    \ 0;\n    long paren_level_max_index6 = 0;\n    long paren_level_max_index7 =\
    \ 0;\n    long paren_level_max_index8 = 0;\n    long paren_level_max_index9 =\
    \ 0;\n    long paren_level_max_index10 = 0;\n    long paren_level_max_index11\
    \ = 0;\n    long paren_level_max_index12 = 0;\n    long paren_level_max_index13\
    \ = 0;\n    long paren_level_max_index14 = 0;\n    long paren_level_max_index15\
    \ = 0;\n    long paren_level_max_index16 = 0;\n    long paren_level_max_index17\
    \ = 0;\n    long paren_level_max_index18 = 0;\n    long paren_level_max_index19\
    \ = 0;\n    long paren_level_max_index20 = 0;\n    long paren_level_max_index21\
    \ = 0;\n    long paren_level_max_index22 = 0;\n    long paren_level_max_index23\
    \ = 0;\n    long paren_level_max_index24 = 0;\n    long paren_level_max_index25\
    \ = 0;\n    long paren_level_max_index26 = 0;\n    long paren_level_max_index27\
    \ = 0;\n    long paren_level_max_index28 = 0;\n    long paren_level_max_index29\
    \ = 0;\n    long paren_level_max_index30 = 0;\n    long paren_level_max_index31\
    \ = 0;\n    long paren_level_max_index32 = 0;\n    long paren_level_max_index33\
    \ = 0;\n    long paren_level_max_index34 = 0;\n    long paren_level_max_index35\
    \ = 0;\n    long paren_level_max_index36 = 0;\n    long paren_level_max_index37\
    \ = 0;\n    long paren_level_max_index38 = 0;\n    long paren_level_max_index39\
    \ = 0;\n    long paren_level_max_index40 = 0;\n    long paren_level_max_index41\
    \ = 0;\n    long paren_level_max_index42 = 0;\n    long paren_level_max_index43\
    \ = 0;\n    long paren_level_max_index44 = 0;\n    long paren_level_max_index45\
    \ = 0;\n    long paren_level_max_index46 = 0;\n    long paren_level_max_index47\
    \ = 0;\n    long paren_level_max_index\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppj3ym6zr.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmppj3ym6zr.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmppj3ym6zr.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level--;\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n      \
    \  paren_levels[paren_level] = paren_levels[paren_level] + 1;\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp9au1pg8: /tmp/tmpp9au1pg8.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long level = 0;\n    long\
    \ paren_level = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter_max\
    \ = 0;\n    long paren_level_counter_max_index = 0;\n    long paren_level_counter_max_index2\
    \ = 0;\n    long paren_level_counter_max_index3 = 0;\n    long paren_level_counter_max_index4\
    \ = 0;\n    long paren_level_counter_max_index5 = 0;\n    long paren_level_counter_max_index6\
    \ = 0;\n    long paren_level_counter_max_index7 = 0;\n    long paren_level_counter_max_index8\
    \ = 0;\n    long paren_level_counter_max_index9 = 0;\n    long paren_level_counter_max_index10\
    \ = 0;\n    long paren_level_counter_max_index11 = 0;\n    long paren_level_counter_max_index12\
    \ = 0;\n    long paren_level_counter_max_index13 = 0;\n    long paren_level_counter_max_index14\
    \ = 0;\n    long paren_level_counter_max_index15 = 0;\n    long paren_level_counter_max_index16\
    \ = 0;\n    long paren_level_counter_max_index17 = 0;\n    long paren_level_counter_max_index18\
    \ = 0;\n    long paren_level_counter_max_index19 = 0;\n    long paren_level_counter_max_index20\
    \ = 0;\n    long paren_level_counter_max_index21 = 0;\n    long paren_level_counter_max_index22\
    \ = 0;\n    long paren_level_counter_max_index23 = 0;\n    long paren_level_counter_max_index24\
    \ = 0;\n    long paren_level_counter_max_index25 = 0;\n    long paren_level_counter_max_index26\
    \ = 0;\n    long paren_level_counter_max_index27 = 0;\n    long paren_level_counter_max_index28\
    \ = 0;\n    long paren_level_counter_max_index29 = 0;\n    long paren_level_counter_max_index30\
    \ = 0;\n    long paren_level_counter_max_index31 = 0;\n    long paren_level_counter_max_index32\
    \ = 0;\n    long paren_level_counter_max_index33 = 0;\n    long paren_level_counter_max_index34\
    \ = 0;\n    long paren_level_counter_max_index35 = 0;\n    long paren_level_counter_max_index36\
    \ = 0;\n    long paren_level_counter_max_index37 = 0;\n    long paren_level_counter_max_index38\
    \ = 0;\n    long paren_level_counter_max_index39 = 0;\n    long paren_level_counter_max_index40\
    \ = 0;\n    long paren_level_counter_max_index41 = 0;\n    long paren_level_counter_max_index42\
    \ = 0;\n    long paren_level_counter_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqt5tiast.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpqt5tiast.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmpqt5tiast.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  long level = 0;\n  long paren_level = 0;\n  for (char c : paren_string) {\n\
    \    if (c == '(') {\n      paren_level++;\n    } else if (c == ')') {\n     \
    \ paren_level--;\n    }\n    if (paren_level == level) {\n      paren_levels.push_back(paren_level);\n\
    \    }\n    level++;\n  }\n  return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmuv4ep32: /tmp/tmpmuv4ep32.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 0;\n    long max_level = 0;\n    for (auto &c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_levels.push_back(paren_levels.size());\n\
    \            max_level = std::max(max_level, paren_levels[paren_levels.size()\
    \ - 1] + 1);\n        } else if (c == ')') {\n            long level = paren_levels[paren_levels.size()\
    \ - 1];\n            assert(level > 0);\n            assert(level < max_level);\n\
    \            paren_levels[level] = paren_levels.size();\n        }\n    }\n  \
    \  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxg1qy1f.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpaxg1qy1f.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxg1qy1f.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaxg1qy1f.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   15 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaxg1qy1f.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxg1qy1f.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxg1qy1f.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaxg1qy1f.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   17 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaxg1qy1f.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxg1qy1f.cpp:18:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   18 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpaxg1qy1f.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaxg1qy1f.cpp:19:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   19 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaxg1qy1f.cpp:13:1"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_max_index\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9plz3w57.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp9plz3w57.cpp:15:10: error: redeclaration of \u2018long int paren_level_count_max\u2019\
    \n   15 |     long paren_level_count_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9plz3w57.cpp:11:10: note: \u2018long int paren_level_count_max\u2019 previously\
    \ declared here\n   11 |     long paren_level_count_max = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9plz3w57.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_count_min\u2019\n   16 |     long paren_level_count_min\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9plz3w57.cpp:13:10: note:\
    \ \u2018long int paren_level_count_min\u2019 previously declared here\n   13 |\
    \     long paren_level_count_min = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9plz3w57.cpp:17:10: error: redeclaration of \u2018long int paren_level_count_max_index\u2019\
    \n   17 |     long paren_level_count_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9plz3w57.cpp:12:10: note: \u2018long int paren_level_count_max_index\u2019\
    \ previously declared here\n   12 |     long paren_level_count_max_index = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9plz3w57.cpp:18:10: error:\
    \ redeclaration of \u2018long int paren_level_count_min_index\u2019\n   18 | \
    \    long paren_level_count_min_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9plz3w57.cpp:14:10: note: \u2018long int paren_level_count_min_index\u2019\
    \ previously declared here\n   14 |     long paren_level_count_min_index = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9plz3w57.cpp:19:10: error:\
    \ redeclaration of \u2018long int paren_level_count_max\u2019\n   19 |     long\
    \ paren_level_count_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9plz3w57.cpp:11:10:\
    \ note: \u2018long int paren_level_count_max\u2019 previously declared here\n\
    \   11 |     long paren_level_count_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9plz3w57.cpp:20:10: error: redeclaration of \u2018long int paren_level_count_min\u2019\
    \n   20 |     long paren_level_count_m"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n            if (paren_level == 0 && paren_levels.size()\
    \ <= level) {\n                paren_levels.push_back(level);\n            }\n\
    \        }\n        level++;\n    }\n    return paren_levels;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpul98kiuf: /tmp/tmpul98kiuf.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count2 =\
    \ 0;\n    long paren_level_max_count3 = 0;\n    long paren_level_max_count4 =\
    \ 0;\n    long paren_level_max_count5 = 0;\n    long paren_level_max_count6 =\
    \ 0;\n    long paren_level_max_count7 = 0;\n    long paren_level_max_count8 =\
    \ 0;\n    long paren_level_max_count9 = 0;\n    long paren_level_max_count10 =\
    \ 0;\n    long paren_level_max_count11 = 0;\n    long paren_level_max_count12\
    \ = 0;\n    long paren_level_max_count13 = 0;\n    long paren_level_max_count14\
    \ = 0;\n    long paren_level_max_count15 = 0;\n    long paren_level_max_count16\
    \ = 0;\n    long paren_level_max_count17 = 0;\n    long paren_level_max_count18\
    \ = 0;\n    long paren_level_max_count19 = 0;\n    long paren_level_max_count20\
    \ = 0;\n    long paren_level_max_count21 = 0;\n    long paren_level_max_count22\
    \ = 0;\n    long paren_level_max_count23 = 0;\n    long paren_level_max_count24\
    \ = 0;\n    long paren_level_max_count25 = 0;\n    long paren_level_max_count26\
    \ = 0;\n    long paren_level_max_count27 = 0;\n    long paren_level_max_count28\
    \ = 0;\n    long paren_level_max_count29 = 0;\n    long paren_level_max_count30\
    \ = 0;\n    long paren_level_max_count31 = 0;\n    long paren_level_max_count32\
    \ = 0;\n    long paren_level_max_count33 = 0;\n    long paren_level_max_count34\
    \ = 0;\n    long paren_level_max_count35 = 0;\n    long paren_level_max_count36\
    \ = 0;\n    long paren_level_max_count37 = 0;\n    long paren_level_max_count38\
    \ = 0;\n    long paren_level_max_count39 = 0;\n    long paren_level_max_count40\
    \ = 0;\n    long paren_level_max_count41 = 0;\n    long paren_level_max_count42\
    \ = 0;\n    long paren_level_max_count43 = 0;\n    long paren_level_max_count44\
    \ = 0;\n    long paren_level_max_count45 = 0;\n    long paren_level_max_count46\
    \ = 0;\n    long paren_level_max_count47 = 0;\n    long paren_level_max_count48\
    \ = 0;\n    long paren_level_max_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabswa_sn.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpabswa_sn.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmpabswa_sn.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count_index = 0;\n    long paren_level_max_count_index2\
    \ = 0;\n    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n    long paren_level_max_count_index44\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = parse_nested_parens;\n   \
    \ assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpg1wpl65b: /tmp/tmpg1wpl65b.cpp:59: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ level) {\n            paren_level++;\n        }\n        level = paren_level;\n\
    \        paren_levels.push_back(level);\n    }\n    return paren_levels;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpmyqnjjc4: /tmp/tmpmyqnjjc4.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string current_level;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            current_level = current_level + \"(\";\n        }\
    \ else if (c == ')') {\n            current_level = current_level.substr(0, current_level.size()\
    \ - 1) + \")\";\n        } else {\n            current_level = current_level +\
    \ c;\n        }\n        if (current_level.find(\"(\") != std::string::npos) {\n\
    \            levels.push_back(std::stoi(current_level));\n            current_level.clear();\n\
    \        }\n    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level = paren_level + c;\n   \
    \     } else if (c == ')') {\n            level++;\n            levels[level]\
    \ = levels[level] + 1;\n            paren_level = paren_level.substr(0, paren_level.length()\
    \ - 1);\n        } else {\n            paren_level = paren_level + c;\n      \
    \  }\n    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    for (auto &c : paren_string)\
    \ {\n        if (c == '(') {\n            level++;\n        } else if (c == ')')\
    \ {\n            level--;\n        }\n        if (level > max_level) {\n     \
    \       max_level = level;\n        }\n    }\n    paren_levels.push_back(max_level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpt3inf36q: /tmp/tmpt3inf36q.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_sum = 0;\n\
    \    long paren_level_cur = 0;\n    long paren_level_max = 0;\n    long paren_level_max_sum\
    \ = 0;\n    long paren_level_max_cur = 0;\n    long paren_level_max_cur_index\
    \ = 0;\n    long paren_level_max_cur_index2 = 0;\n    long paren_level_max_cur_index3\
    \ = 0;\n    long paren_level_max_cur_index4 = 0;\n    long paren_level_max_cur_index5\
    \ = 0;\n    long paren_level_max_cur_index6 = 0;\n    long paren_level_max_cur_index7\
    \ = 0;\n    long paren_level_max_cur_index8 = 0;\n    long paren_level_max_cur_index9\
    \ = 0;\n    long paren_level_max_cur_index10 = 0;\n    long paren_level_max_cur_index11\
    \ = 0;\n    long paren_level_max_cur_index12 = 0;\n    long paren_level_max_cur_index13\
    \ = 0;\n    long paren_level_max_cur_index14 = 0;\n    long paren_level_max_cur_index15\
    \ = 0;\n    long paren_level_max_cur_index16 = 0;\n    long paren_level_max_cur_index17\
    \ = 0;\n    long paren_level_max_cur_index18 = 0;\n    long paren_level_max_cur_index19\
    \ = 0;\n    long paren_level_max_cur_index20 = 0;\n    long paren_level_max_cur_index21\
    \ = 0;\n    long paren_level_max_cur_index22 = 0;\n    long paren_level_max_cur_index23\
    \ = 0;\n    long paren_level_max_cur_index24 = 0;\n    long paren_level_max_cur_index25\
    \ = 0;\n    long paren_level_max_cur_index26 = 0;\n    long paren_level_max_cur_index27\
    \ = 0;\n    long paren_level_max_cur_index28 = 0;\n    long paren_level_max_cur_index29\
    \ = 0;\n    long paren_level_max_cur_index30 = 0;\n    long paren_level_max_cur_index31\
    \ = 0;\n    long paren_level_max_cur_index32 = 0;\n    long paren_level_max_cur_index33\
    \ = 0;\n    long paren_level_max_cur_index34 = 0;\n    long paren_level_max_cur_index35\
    \ = 0;\n    long paren_level_max_cur_index36 = 0;\n    long paren_level_max_cur_index37\
    \ = 0;\n    long paren_level_max_cur_index38 = 0;\n    long paren_level_max_cur_index39\
    \ = 0;\n    long paren_level_max_cur_index40 = 0;\n    long paren_level_max_cur_index41\
    \ = 0;\n    long paren\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxbi1hcl.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpdxbi1hcl.cpp:57:1: error: expected initializer before \u2018}\u2019\
    \ token\n   57 | }\n      | ^\n/tmp/tmpdxbi1hcl.cpp:57:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_level++;\n            paren_level_counter++;\n        } else if (c ==\
    \ ')') {\n            paren_level--;\n            paren_level_counter--;\n   \
    \         if (paren_level == 0 && paren_level_counter == 0) {\n              \
    \  paren_levels.push_back(level);\n                level++;\n            }\n \
    \       }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp5igc354: /tmp/tmpp5igc354.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_counter_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95ykvy_x.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp95ykvy_x.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmp95ykvy_x.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min = 0;\n    long paren_level_count_min_index\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_max_index\
    \ = 0;\n    long paren_level_count_min\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqhm8cl7.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpzqhm8cl7.cpp:15:10: error: redeclaration of \u2018long int paren_level_count_max\u2019\
    \n   15 |     long paren_level_count_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzqhm8cl7.cpp:11:10: note: \u2018long int paren_level_count_max\u2019 previously\
    \ declared here\n   11 |     long paren_level_count_max = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzqhm8cl7.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_count_max_index\u2019\n   16 |     long paren_level_count_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzqhm8cl7.cpp:12:10:\
    \ note: \u2018long int paren_level_count_max_index\u2019 previously declared here\n\
    \   12 |     long paren_level_count_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzqhm8cl7.cpp:17:10: error: redeclaration of \u2018long int paren_level_count_min\u2019\
    \n   17 |     long paren_level_count_min = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzqhm8cl7.cpp:13:10: note: \u2018long int paren_level_count_min\u2019 previously\
    \ declared here\n   13 |     long paren_level_count_min = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzqhm8cl7.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_count_min_index\u2019\n   18 |     long paren_level_count_min_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzqhm8cl7.cpp:14:10:\
    \ note: \u2018long int paren_level_count_min_index\u2019 previously declared here\n\
    \   14 |     long paren_level_count_min_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzqhm8cl7.cpp:19:10: error: redeclaration of \u2018long int paren_level_count_max\u2019\
    \n   19 |     long paren_level_count_max = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzqhm8cl7.cpp:11:10: note: \u2018long int paren_level_count_max\u2019 previously\
    \ declared here\n   11 |     long paren_level_count_max = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzqhm8cl7.cpp:20:10: error: redeclaration of\
    \ \u2018long int paren_level_count_max_index\u2019\n   20 |     long paren_level_c"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.push_back(0);\n    long current_level = 0;\n    long paren_level\
    \ = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n\
    \    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long\
    \ paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7\
    \ = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n\
    \    long paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n  \
    \  long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n    long\
    \ paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16\
    \ = 0;\n    long paren_level_counter17 = 0;\n    long paren_level_counter18 =\
    \ 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n\
    \    long paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n  \
    \  long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n    long\
    \ paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27\
    \ = 0;\n    long paren_level_counter28 = 0;\n    long paren_level_counter29 =\
    \ 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n\
    \    long paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n  \
    \  long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n    long\
    \ paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38\
    \ = 0;\n    long paren_level_counter39 = 0;\n    long paren_level_counter40 =\
    \ 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n\
    \    long paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n  \
    \  long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n    long\
    \ paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49\
    \ = 0;\n    long paren_level_counter50 = 0;\n    long paren_level_counter51 =\
    \ 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n\
    \    long paren_level_counter54 = 0;\n    long \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprlgs4fq0.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmprlgs4fq0.cpp:66:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmprlgs4fq0.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposc_pobj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmposc_pobj.cpp:13:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   13 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:14:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   14 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:15:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   15 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   16 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:17:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   17 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   18 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    for (auto &c\
    \ : paren_string) {\n        if (c == '(') {\n            paren_level++;\n   \
    \         paren_level_count++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \            paren_level_count--;\n        }\n        if (paren_level == 0 &&\
    \ paren_level_count == 0) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvypnzumg: /tmp/tmpvypnzumg.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long level_count = 0;\n   \
    \ long level_count_temp = 0;\n    long level_count_temp2 = 0;\n    long level_count_temp3\
    \ = 0;\n    long level_count_temp4 = 0;\n    long level_count_temp5 = 0;\n   \
    \ long level_count_temp6 = 0;\n    long level_count_temp7 = 0;\n    long level_count_temp8\
    \ = 0;\n    long level_count_temp9 = 0;\n    long level_count_temp10 = 0;\n  \
    \  long level_count_temp11 = 0;\n    long level_count_temp12 = 0;\n    long level_count_temp13\
    \ = 0;\n    long level_count_temp14 = 0;\n    long level_count_temp15 = 0;\n \
    \   long level_count_temp16 = 0;\n    long level_count_temp17 = 0;\n    long level_count_temp18\
    \ = 0;\n    long level_count_temp19 = 0;\n    long level_count_temp20 = 0;\n \
    \   long level_count_temp21 = 0;\n    long level_count_temp22 = 0;\n    long level_count_temp23\
    \ = 0;\n    long level_count_temp24 = 0;\n    long level_count_temp25 = 0;\n \
    \   long level_count_temp26 = 0;\n    long level_count_temp27 = 0;\n    long level_count_temp28\
    \ = 0;\n    long level_count_temp29 = 0;\n    long level_count_temp30 = 0;\n \
    \   long level_count_temp31 = 0;\n    long level_count_temp32 = 0;\n    long level_count_temp33\
    \ = 0;\n    long level_count_temp34 = 0;\n    long level_count_temp35 = 0;\n \
    \   long level_count_temp36 = 0;\n    long level_count_temp37 = 0;\n    long level_count_temp38\
    \ = 0;\n    long level_count_temp39 = 0;\n    long level_count_temp40 = 0;\n \
    \   long level_count_temp41 = 0;\n    long level_count_temp42 = 0;\n    long level_count_temp43\
    \ = 0;\n    long level_count_temp44 = 0;\n    long level_count_temp45 = 0;\n \
    \   long level_count_temp46 = 0;\n    long level_count_temp47 = 0;\n    long level_count_temp48\
    \ = 0;\n    long level_count_temp49 = 0;\n    long level_count_temp50 = 0;\n \
    \   long level_count_temp51 = 0;\n    long level_count_temp52 = 0;\n    long level_count_temp53\
    \ = 0;\n    long level_count_temp54 = 0;\n    long level_count_temp55 = 0;\n \
    \   long level_count_temp56 = 0;\n    long level_count_temp57 = 0;\n    long level_count_temp58\
    \ = 0;\n    long level_count_temp59 = 0;\n    long level_count_temp60 = 0;\n \
    \   long level_count_temp61 = 0;\n    long level_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps6_j67r3.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmps6_j67r3.cpp:73:1: error: expected initializer before \u2018}\u2019\
    \ token\n   73 | }\n      | ^\n/tmp/tmps6_j67r3.cpp:73:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpphyretcm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpphyretcm.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpphyretcm.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level = paren_level + c;\n   \
    \     } else if (c == ')') {\n            level++;\n            levels[level]\
    \ = level;\n            paren_level = paren_level.substr(0, paren_level.length()\
    \ - 1);\n        } else {\n            paren_level = paren_level + c;\n      \
    \  }\n    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_counter_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95ykvy_x.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp95ykvy_x.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmp95ykvy_x.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_sum = 0;\n\
    \    long paren_level_cur = 0;\n    long paren_level_max = 0;\n    long paren_level_max_sum\
    \ = 0;\n    long paren_level_max_cur = 0;\n    long paren_level_max_cur_index\
    \ = 0;\n    long paren_level_max_cur_index2 = 0;\n    long paren_level_max_cur_index3\
    \ = 0;\n    long paren_level_max_cur_index4 = 0;\n    long paren_level_max_cur_index5\
    \ = 0;\n    long paren_level_max_cur_index6 = 0;\n    long paren_level_max_cur_index7\
    \ = 0;\n    long paren_level_max_cur_index8 = 0;\n    long paren_level_max_cur_index9\
    \ = 0;\n    long paren_level_max_cur_index10 = 0;\n    long paren_level_max_cur_index11\
    \ = 0;\n    long paren_level_max_cur_index12 = 0;\n    long paren_level_max_cur_index13\
    \ = 0;\n    long paren_level_max_cur_index14 = 0;\n    long paren_level_max_cur_index15\
    \ = 0;\n    long paren_level_max_cur_index16 = 0;\n    long paren_level_max_cur_index17\
    \ = 0;\n    long paren_level_max_cur_index18 = 0;\n    long paren_level_max_cur_index19\
    \ = 0;\n    long paren_level_max_cur_index20 = 0;\n    long paren_level_max_cur_index21\
    \ = 0;\n    long paren_level_max_cur_index22 = 0;\n    long paren_level_max_cur_index23\
    \ = 0;\n    long paren_level_max_cur_index24 = 0;\n    long paren_level_max_cur_index25\
    \ = 0;\n    long paren_level_max_cur_index26 = 0;\n    long paren_level_max_cur_index27\
    \ = 0;\n    long paren_level_max_cur_index28 = 0;\n    long paren_level_max_cur_index29\
    \ = 0;\n    long paren_level_max_cur_index30 = 0;\n    long paren_level_max_cur_index31\
    \ = 0;\n    long paren_level_max_cur_index32 = 0;\n    long paren_level_max_cur_index33\
    \ = 0;\n    long paren_level_max_cur_index34 = 0;\n    long paren_level_max_cur_index35\
    \ = 0;\n    long paren_level_max_cur_index36 = 0;\n    long paren_level_max_cur_index37\
    \ = 0;\n    long paren_level_max_cur_index38 = 0;\n    long paren_level_max_cur_index39\
    \ = 0;\n    long paren_level_max_cur_index40 = 0;\n    long paren_level_max_cur_index41\
    \ = 0;\n    long paren\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxbi1hcl.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpdxbi1hcl.cpp:57:1: error: expected initializer before \u2018}\u2019\
    \ token\n   57 | }\n      | ^\n/tmp/tmpdxbi1hcl.cpp:57:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long current_level = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            current_level++;\n\
    \        } else if (c == ')') {\n            current_level--;\n        }\n   \
    \     paren_levels.push_back(current_level);\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp63iu1goj: /tmp/tmp63iu1goj.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  long paren_level = 0;\n  for\
    \ (auto c : paren_string) {\n    if (c == '(') {\n      paren_level++;\n    }\
    \ else if (c == ')') {\n      paren_level--;\n    }\n    paren_levels.push_back(paren_level);\n\
    \  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp8wptdzjl: /tmp/tmp8wptdzjl.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx5fp8afl: /tmp/tmpx5fp8afl.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.push_back(0);\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm85dz1em.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpm85dz1em.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm85dz1em.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm85dz1em.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   15 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm85dz1em.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm85dz1em.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm85dz1em.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm85dz1em.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   17 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm85dz1em.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm85dz1em.cpp:18:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   18 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm85dz1em.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm85dz1em.cpp:19:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   19 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm85dz1em.cpp:13:1"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposc_pobj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmposc_pobj.cpp:13:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   13 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:14:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   14 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:15:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   15 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   16 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:17:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   17 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   18 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min =\
    \ 0;\n    long paren_level_count_sum = 0;\n    long paren_level_count_sum_max\
    \ = 0;\n    long paren_level_count_sum_min = 0;\n    long paren_level_count_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_max = 0;\n    long paren_level_count_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpks9u9gb5.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpks9u9gb5.cpp:33:10: error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_min\u2019\
    \n   33 |     long paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n      |\
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpks9u9gb5.cpp:30:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_min\u2019 previously\
    \ declared here\n   30 |     long paren_level_count_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpks9u9gb5.cpp:35:10:\
    \ error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\u2019\
    \n   35 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  \
    \    |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpks9u9gb5.cpp:32:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\u2019\
    \ previously declared here\n   32 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpks9u9gb5.cpp:39:10:\
    \ error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_min\u2019\
    \n   39 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  \
    \    |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpks9u9gb5.cpp:36:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_min\u2019\
    \ previously declared here\n   36 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpks9u9gb5.cpp:40:10:\
    \ error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\u2019\
    \n   40 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpks9u9gb5.cpp:37:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\u2019\
    \ previously declared here\n   37 |     long paren_"
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    bool is_first_paren\
    \ = true;\n    bool is_last_paren = true;\n    bool is_last_paren_level = true;\n\
    \    long paren_level_count2 = 0;\n    long paren_level_count3 = 0;\n    long\
    \ paren_level_count4 = 0;\n    long paren_level_count5 = 0;\n    long paren_level_count6\
    \ = 0;\n    long paren_level_count7 = 0;\n    long paren_level_count8 = 0;\n \
    \   long paren_level_count9 = 0;\n    long paren_level_count10 = 0;\n    long\
    \ paren_level_count11 = 0;\n    long paren_level_count12 = 0;\n    long paren_level_count13\
    \ = 0;\n    long paren_level_count14 = 0;\n    long paren_level_count15 = 0;\n\
    \    long paren_level_count16 = 0;\n    long paren_level_count17 = 0;\n    long\
    \ paren_level_count18 = 0;\n    long paren_level_count19 = 0;\n    long paren_level_count20\
    \ = 0;\n    long paren_level_count21 = 0;\n    long paren_level_count22 = 0;\n\
    \    long paren_level_count23 = 0;\n    long paren_level_count24 = 0;\n    long\
    \ paren_level_count25 = 0;\n    long paren_level_count26 = 0;\n    long paren_level_count27\
    \ = 0;\n    long paren_level_count28 = 0;\n    long paren_level_count29 = 0;\n\
    \    long paren_level_count30 = 0;\n    long paren_level_count31 = 0;\n    long\
    \ paren_level_count32 = 0;\n    long paren_level_count33 = 0;\n    long paren_level_count34\
    \ = 0;\n    long paren_level_count35 = 0;\n    long paren_level_count36 = 0;\n\
    \    long paren_level_count37 = 0;\n    long paren_level_count38 = 0;\n    long\
    \ paren_level_count39 = 0;\n    long paren_level_count40 = 0;\n    long paren_level_count41\
    \ = 0;\n    long paren_level_count42 = 0;\n    long paren_level_count43 = 0;\n\
    \    long paren_level_count44 = 0;\n    long paren_level_count45 = 0;\n    long\
    \ paren_level_count46 = 0;\n    long paren_level_count47 = 0;\n    long paren_level_count48\
    \ = 0;\n    long paren_level_count49 = 0;\n    long paren_level_count50 = 0;\n\
    \    long paren_level_count51 = 0;\n    long paren_level_count52 = 0;\n    long\
    \ paren_level_count53 = 0;\n    \n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpr86wcgtv: /tmp/tmpr86wcgtv.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long level = 0;\n    long\
    \ paren_level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            paren_level++;\n        } else\
    \ if (paren_string[i] == ')') {\n            paren_level--;\n        }\n     \
    \   if (paren_level == 0) {\n            paren_levels.push_back(level);\n    \
    \        level++;\n        }\n    }\n    return paren_levels;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmppcvccgbt: /tmp/tmppcvccgbt.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.size() == paren_string.size());\n\
    \  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmplemyysp8: /tmp/tmplemyysp8.cpp:17: std::vector<long int> parse_nested_parens(std::string):
    Assertion `paren_levels.size() == paren_string.size()'' failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx5fp8afl: /tmp/tmpx5fp8afl.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_prev = 0;\n\
    \    long paren_level_next = 0;\n    long paren_level_next_prev = 0;\n    long\
    \ paren_level_next_next_prev = 0;\n    long paren_level_next_next_next_prev =\
    \ 0;\n    long paren_level_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev = 0;\n\
    \    long paren_level_next_next_next_next_next_next_next_next_next_prev = 0;\n\
    \    long paren_level_next_next_next_next_next_next_next_next_next_next_prev =\
    \ 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqg7b26kc.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpqg7b26kc.cpp:20:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_prev\u2019\
    \n   20 |     long paren_level_next_next_next_next_next_next_next_next_prev =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqg7b26kc.cpp:19:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   19 |     long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqg7b26kc.cpp:23:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   23 |     long paren_level_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqg7b26kc.cpp:22:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   22 |     long paren_level_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqg7b26kc.cpp:25:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   25 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqg7b26kc.cpp:24:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   24 |     long paren_level_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqg7b26kc.cpp:26:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_nex"
  stdout: ''
  timestamp: 1660113124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   long paren_level_count = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level++;\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            paren_level_count--;\n\
    \        }\n        if (paren_level == 0 && paren_level_count == 0) {\n      \
    \      paren_levels.push_back(paren_level);\n        }\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4ncxziz1: /tmp/tmp4ncxziz1.cpp:27: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113125
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpphyretcm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpphyretcm.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpphyretcm.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposc_pobj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmposc_pobj.cpp:13:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   13 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:14:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   14 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:15:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   15 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   16 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:17:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   17 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   18 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ level) {\n            paren_levels.push_back(paren_level);\n        }\n    \
    \    level++;\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp19cxd4y3: /tmp/tmp19cxd4y3.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (auto &c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level = std::to_string(level);\n\
    \            level++;\n        } else if (c == ')') {\n            level--;\n\
    \            levels[level] = std::stoi(paren_level);\n        }\n    }\n    return\
    \ levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113125
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long level = 0;\n    long\
    \ paren_level = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n        paren_levels.push_back(paren_level);\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp04_oj7hb: /tmp/tmp04_oj7hb.cpp:23: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113125
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level++;\n            if (paren_level > paren_level_max) {\n\
    \                paren_level_max = paren_level;\n                paren_level_max_count\
    \ = paren_level_count;\n            }\n        } else if (c == ')') {\n      \
    \      paren_level_count--;\n            paren_level--;\n            if (paren_level_count\
    \ < 0) {\n                assert(paren_level_count != 0);\n                paren_level_count\
    \ = 0;\n            }\n        }\n    }\n    paren_levels[paren_level_max_count]\
    \ = paren_level;\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113125
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max_count = 1;\n    long paren_level_max_count_index\
    \ = 0;\n    long paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3\
    \ = 0;\n    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren_level_max_count_index43\
    \ = 0;\n    long paren_level_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpx7hxg9.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpnpx7hxg9.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmpnpx7hxg9.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113125
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_level =\
    \ 0;\n    long paren_level_count = 0;\n    long paren_level_max = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count_index = 0;\n    long\
    \ paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3 = 0;\n\
    \    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjgsxbfdj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpjgsxbfdj.cpp:57:1: error: expected initializer before \u2018}\u2019\
    \ token\n   57 | }\n      | ^\n/tmp/tmpjgsxbfdj.cpp:57:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113125
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  long current_level = 0;\n  long\
    \ paren_count = 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_count++;\n    } else if (c == ')') {\n      paren_count--;\n      if\
    \ (paren_count == 0) {\n        paren_levels.push_back(current_level);\n     \
    \ }\n    }\n    current_level++;\n  }\n  return paren_levels;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpsj85r8d6: /tmp/tmpsj85r8d6.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            level--;\n\
    \        } else if (is_open) {\n            level++;\n        }\n        levels.push_back(level);\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpv9e7zwha: /tmp/tmpv9e7zwha.cpp:26: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ level) {\n            paren_levels[paren_levels].push_back(level);\n       \
    \ }\n        level++;\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfl4fq7d2.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpfl4fq7d2.cpp:17:25: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   17 |             paren_levels[paren_levels].push_back(level);\n      | \
    \                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfl4fq7d2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1040:28: note:   no known conversion for\
    \ argument 1 from \u2018std::vector<long int>\u2019 to \u2018std::vector<long\
    \ int>::size_type\u2019 {aka \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type\
    \ __n) _GLIBCXX_NOEXCEPT\n      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018std::vector<long\
    \ int>::size_type\u2019 {aka \u2018long unsigned "
  stdout: ''
  timestamp: 1660113125
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpphyretcm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpphyretcm.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpphyretcm.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpc2zr2htz: /tmp/tmpc2zr2htz.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  long current_level = 0;\n  long max_level = 0;\n  for (auto c : paren_string)\
    \ {\n    if (c == '(') {\n      current_level++;\n    } else if (c == ')') {\n\
    \      current_level--;\n      if (current_level > max_level) {\n        max_level\
    \ = current_level;\n      }\n    }\n    paren_levels.push_back(current_level);\n\
    \  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpioa_lv_c: /tmp/tmpioa_lv_c.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  long paren_level = 0;\n  for\
    \ (auto c : paren_string) {\n    if (c == '(') {\n      paren_level++;\n    }\
    \ else if (c == ')') {\n      paren_level--;\n    }\n    paren_levels.push_back(paren_level);\n\
    \  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp8wptdzjl: /tmp/tmp8wptdzjl.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113124
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpphyretcm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpphyretcm.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpphyretcm.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count_index = 0;\n    long paren_level_max_count_index2\
    \ = 0;\n    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n    long paren_level_max_count_index44\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = parse_nested_parens;\n   \
    \ assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpg1wpl65b: /tmp/tmpg1wpl65b.cpp:59: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph48ka_ek.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmph48ka_ek.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph48ka_ek.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph48ka_ek.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   15 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph48ka_ek.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph48ka_ek.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph48ka_ek.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph48ka_ek.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   17 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph48ka_ek.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph48ka_ek.cpp:18:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   18 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph48ka_ek.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph48ka_ek.cpp:19:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   19 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph48ka_ek.cpp:13:1"
  stdout: ''
  timestamp: 1660113125
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            level++;\n        } else if (c == ')') {\n            is_closed\
    \ = true;\n            level--;\n        } else if (is_open && is_closed) {\n\
    \            paren_levels.push_back(level);\n            is_open = false;\n  \
    \          is_closed = false;\n        }\n    }\n    return paren_levels;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpkn8xiuhc: /tmp/tmpkn8xiuhc.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    long paren_level_count\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   is_open = true;\n            paren_level_count++;\n        } else if (c ==\
    \ ')') {\n            is_open = false;\n            paren_level_count--;\n   \
    \     }\n        if (is_open) {\n            paren_level++;\n        }\n     \
    \   paren_levels[paren_level_count] = paren_level;\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_counter = 0;\n    long paren_level_counter2 = 0;\n    long\
    \ paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n    long paren_level_counter5\
    \ = 0;\n    long paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n\
    \    long paren_level_counter8 = 0;\n    long paren_level_counter9 = 0;\n    long\
    \ paren_level_counter10 = 0;\n    long paren_level_counter11 = 0;\n    long paren_level_counter12\
    \ = 0;\n    long paren_level_counter13 = 0;\n    long paren_level_counter14 =\
    \ 0;\n    long paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n\
    \    long paren_level_counter17 = 0;\n    long paren_level_counter18 = 0;\n  \
    \  long paren_level_counter19 = 0;\n    long paren_level_counter20 = 0;\n    long\
    \ paren_level_counter21 = 0;\n    long paren_level_counter22 = 0;\n    long paren_level_counter23\
    \ = 0;\n    long paren_level_counter24 = 0;\n    long paren_level_counter25 =\
    \ 0;\n    long paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n\
    \    long paren_level_counter28 = 0;\n    long paren_level_counter29 = 0;\n  \
    \  long paren_level_counter30 = 0;\n    long paren_level_counter31 = 0;\n    long\
    \ paren_level_counter32 = 0;\n    long paren_level_counter33 = 0;\n    long paren_level_counter34\
    \ = 0;\n    long paren_level_counter35 = 0;\n    long paren_level_counter36 =\
    \ 0;\n    long paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n\
    \    long paren_level_counter39 = 0;\n    long paren_level_counter40 = 0;\n  \
    \  long paren_level_counter41 = 0;\n    long paren_level_counter42 = 0;\n    long\
    \ paren_level_counter43 = 0;\n    long paren_level_counter44 = 0;\n    long paren_level_counter45\
    \ = 0;\n    long paren_level_counter46 = 0;\n    long paren_level_counter47 =\
    \ 0;\n    long paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n\
    \    long paren_level_counter50 = 0;\n    long paren_level_counter51 = 0;\n  \
    \  long paren_level_counter52 = 0;\n    long paren_level_counter53 = 0;\n    long\
    \ paren_level_counter54 = 0;\n    long paren_\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpphyretcm.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpphyretcm.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpphyretcm.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    long level = 0;\n    long level_of_nesting = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            level++;\n            level_of_nesting\
    \ = level;\n        } else if (c == ')') {\n            level--;\n           \
    \ level_of_nesting = level;\n        }\n        levels.push_back(level_of_nesting);\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp4gtr7jui: /tmp/tmp4gtr7jui.cpp:24: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  long paren_level = 0;\n  for\
    \ (char c : paren_string) {\n    if (c == '(') {\n      paren_levels.push_back(paren_level);\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \  }\n  assert(paren_levels.size() == paren_string.size());\n  return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpw3a9b9n_: /tmp/tmpw3a9b9n_.cpp:18: std::vector<long int> parse_nested_parens(std::string):
    Assertion `paren_levels.size() == paren_string.size()'' failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.push_back(0);\n    long paren_level = 0;\n    for (auto c :\
    \ paren_string) {\n        if (c == '(') {\n            paren_level++;\n     \
    \   } else if (c == ')') {\n            paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp9lp35n0u: /tmp/tmp9lp35n0u.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_count =\
    \ 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min = 0;\n\
    \    long paren_level_count_sum = 0;\n    long paren_level_count_sum_max = 0;\n\
    \    long paren_level_count_sum_min = 0;\n    long paren_level_count_sum_sum =\
    \ 0;\n    long paren_level_count_sum_sum_max = 0;\n    long paren_level_count_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_max = 0;\n    long paren_level_count_sum_sum_sum_sum_min\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_max\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    long\
    \ paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n\
    \    long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    \n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tsfli2k.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp5tsfli2k.cpp:33:10: error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_min\u2019\
    \n   33 |     long paren_level_count_sum_sum_sum_sum_sum_sum_min = 0;\n      |\
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5tsfli2k.cpp:30:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_min\u2019 previously\
    \ declared here\n   30 |     long paren_level_count_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5tsfli2k.cpp:35:10:\
    \ error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\u2019\
    \n   35 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  \
    \    |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5tsfli2k.cpp:32:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\u2019\
    \ previously declared here\n   32 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_max\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5tsfli2k.cpp:39:10:\
    \ error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_min\u2019\
    \n   39 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  \
    \    |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5tsfli2k.cpp:36:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_min\u2019\
    \ previously declared here\n   36 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_min\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5tsfli2k.cpp:40:10:\
    \ error: redeclaration of \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\u2019\
    \n   40 |     long paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5tsfli2k.cpp:37:10:\
    \ note: \u2018long int paren_level_count_sum_sum_sum_sum_sum_sum_sum_sum_sum\u2019\
    \ previously declared here\n   37 |     long paren_"
  stdout: ''
  timestamp: 1660113125
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels[0] = 0;\n    long current_level = 0;\n    long paren_count =\
    \ 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n           \
    \ paren_count++;\n            current_level++;\n        } else if (c == ')') {\n\
    \            paren_count--;\n            current_level--;\n        }\n       \
    \ if (current_level > paren_levels[paren_count]) {\n            paren_levels[paren_count]\
    \ = current_level;\n        }\n    }\n    return paren_levels;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_max = 0;\n\
    \    long paren_level_cur = 0;\n    long paren_level_cur_index = 0;\n    long\
    \ paren_level_cur_index2 = 0;\n    long paren_level_cur_index3 = 0;\n    long\
    \ paren_level_cur_index4 = 0;\n    long paren_level_cur_index5 = 0;\n    long\
    \ paren_level_cur_index6 = 0;\n    long paren_level_cur_index7 = 0;\n    long\
    \ paren_level_cur_index8 = 0;\n    long paren_level_cur_index9 = 0;\n    long\
    \ paren_level_cur_index10 = 0;\n    long paren_level_cur_index11 = 0;\n    long\
    \ paren_level_cur_index12 = 0;\n    long paren_level_cur_index13 = 0;\n    long\
    \ paren_level_cur_index14 = 0;\n    long paren_level_cur_index15 = 0;\n    long\
    \ paren_level_cur_index16 = 0;\n    long paren_level_cur_index17 = 0;\n    long\
    \ paren_level_cur_index18 = 0;\n    long paren_level_cur_index19 = 0;\n    long\
    \ paren_level_cur_index20 = 0;\n    long paren_level_cur_index21 = 0;\n    long\
    \ paren_level_cur_index22 = 0;\n    long paren_level_cur_index23 = 0;\n    long\
    \ paren_level_cur_index24 = 0;\n    long paren_level_cur_index25 = 0;\n    long\
    \ paren_level_cur_index26 = 0;\n    long paren_level_cur_index27 = 0;\n    long\
    \ paren_level_cur_index28 = 0;\n    long paren_level_cur_index29 = 0;\n    long\
    \ paren_level_cur_index30 = 0;\n    long paren_level_cur_index31 = 0;\n    long\
    \ paren_level_cur_index32 = 0;\n    long paren_level_cur_index33 = 0;\n    long\
    \ paren_level_cur_index34 = 0;\n    long paren_level_cur_index35 = 0;\n    long\
    \ paren_level_cur_index36 = 0;\n    long paren_level_cur_index37 = 0;\n    long\
    \ paren_level_cur_index38 = 0;\n    long paren_level_cur_index39 = 0;\n    long\
    \ paren_level_cur_index40 = 0;\n    long paren_level_cur_index41 = 0;\n    long\
    \ paren_level_cur_index42 = 0;\n    long paren_level_cur_index43 = 0;\n    long\
    \ paren_level_cur_index44 = 0;\n    long paren_level_cur_index45 = 0;\n    long\
    \ paren_level_cur_index46 = 0;\n    long paren_level_cur_index47 = 0;\n    long\
    \ paren_level_cur_index48 = 0;\n\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzrb74uuw: /tmp/tmpzrb74uuw.cpp:64: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx5fp8afl: /tmp/tmpx5fp8afl.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_count =\
    \ 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n           \
    \ paren_level_count++;\n            paren_level++;\n        } else if (c == ')')\
    \ {\n            paren_level_count--;\n            paren_level--;\n          \
    \  if (paren_level_count == 0) {\n                paren_levels.push_back(level);\n\
    \                level++;\n            }\n        }\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpa508g0kc: /tmp/tmpa508g0kc.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_count =\
    \ 0;\n    long paren_level = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_count++;\n            paren_level++;\n     \
    \   }\n        else if (c == ')') {\n            paren_count--;\n            paren_level--;\n\
    \        }\n        if (paren_count == 0) {\n            paren_levels[paren_level]\
    \ = current_level;\n            current_level++;\n        }\n        if (current_level\
    \ > max_level) {\n            max_level = current_level;\n        }\n    }\n \
    \   std::vector<long> result;\n    for (long i = 0; i < max_level; i++) {\n  \
    \      result.push_back(paren_levels[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (size_t i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     paren_level = paren_string.substr(0, i);\n            level++;\n       \
    \ } else if (paren_string[i] == ')') {\n            level--;\n            if (level\
    \ == 0) {\n                levels.push_back(level);\n            }\n        }\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpay8ns5g0: /tmp/tmpay8ns5g0.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string curr_paren = paren_string;\n    long level = 0;\n    bool is_open\
    \ = false;\n    bool is_closed = false;\n    long opening_paren_level = 0;\n \
    \   long closing_paren_level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cx0gtor.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp6cx0gtor.cpp:18:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   18 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cx0gtor.cpp:17:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   17 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6cx0gtor.cpp:19:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   19 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6cx0gtor.cpp:17:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   17 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cx0gtor.cpp:20:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   20 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cx0gtor.cpp:17:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   17 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6cx0gtor.cpp:21:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   21 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6cx0gtor.cpp:17:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   17 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cx0gtor.cpp:22:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   22 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cx0gtor.cpp:17:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   17 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6cx0gtor.cpp:23:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   23 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6cx0gtor.cpp:17:1"
  stdout: ''
  timestamp: 1660113125
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_counter_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95ykvy_x.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp95ykvy_x.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmp95ykvy_x.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_max = 0;\n    long paren_level_cur\
    \ = 0;\n    long paren_level_max2 = 0;\n    long paren_level_cur2 = 0;\n    long\
    \ paren_level_max3 = 0;\n    long paren_level_cur3 = 0;\n    long paren_level_max4\
    \ = 0;\n    long paren_level_cur4 = 0;\n    long paren_level_max5 = 0;\n    long\
    \ paren_level_cur5 = 0;\n    long paren_level_max6 = 0;\n    long paren_level_cur6\
    \ = 0;\n    long paren_level_max7 = 0;\n    long paren_level_cur7 = 0;\n    long\
    \ paren_level_max8 = 0;\n    long paren_level_cur8 = 0;\n    long paren_level_max9\
    \ = 0;\n    long paren_level_cur9 = 0;\n    long paren_level_max10 = 0;\n    long\
    \ paren_level_cur10 = 0;\n    long paren_level_max11 = 0;\n    long paren_level_cur11\
    \ = 0;\n    long paren_level_max12 = 0;\n    long paren_level_cur12 = 0;\n   \
    \ long paren_level_max13 = 0;\n    long paren_level_cur13 = 0;\n    long paren_level_max14\
    \ = 0;\n    long paren_level_cur14 = 0;\n    long paren_level_max15 = 0;\n   \
    \ long paren_level_cur15 = 0;\n    long paren_level_max16 = 0;\n    long paren_level_cur16\
    \ = 0;\n    long paren_level_max17 = 0;\n    long paren_level_cur17 = 0;\n   \
    \ long paren_level_max18 = 0;\n    long paren_level_cur18 = 0;\n    long paren_level_max19\
    \ = 0;\n    long paren_level_cur19 = 0;\n    long paren_level_max20 = 0;\n   \
    \ long paren_level_cur20 = 0;\n    long paren_level_max21 = 0;\n    long paren_level_cur21\
    \ = 0;\n    long paren_level_max22 = 0;\n    long paren_level_cur22 = 0;\n   \
    \ long paren_level_max23 = 0;\n    long paren_level_cur23 = 0;\n    long paren_level_max24\
    \ = 0;\n    long paren_level_cur24 = 0;\n    long paren_level_max25 = 0;\n   \
    \ long paren_level_cur25 = 0;\n    long paren_level_max26 = 0;\n    long paren_level_cur26\
    \ = 0;\n    long paren_level_max27 = 0;\n    long paren_level_cur27 = 0;\n   \
    \ long paren_level_max28 = 0;\n    long paren_level_cur28 = 0;\n    long \n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr4nn462c.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpr4nn462c.cpp:66:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpr4nn462c.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            level--;\n\
    \        }\n        if (is_open) {\n            level++;\n        }\n        levels.push_back(level);\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp7m62lzqw: /tmp/tmp7m62lzqw.cpp:27: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            current_level++;\n            if (current_level\
    \ > max_level) {\n                max_level = current_level;\n            }\n\
    \        } else if (c == ')') {\n            current_level--;\n        }\n   \
    \ }\n    paren_levels.push_back(max_level);\n    return paren_levels;\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpfagd2j5m: /tmp/tmpfagd2j5m.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_counter_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95ykvy_x.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp95ykvy_x.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmp95ykvy_x.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    long opening_paren_level = 0;\n    long closing_paren_level = 0;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            is_open = true;\n\
    \            opening_paren_level = level;\n        } else if (c == ')') {\n  \
    \          is_closed = true;\n            closing_paren_level = level;\n     \
    \   } else if (is_open) {\n            level++;\n        } else if (is_closed)\
    \ {\n            level--;\n        }\n        paren_levels.push_back(level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmp3wllg2al: /tmp/tmp3wllg2al.cpp:31: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter_max = 0;\n    long paren_level_counter_max_index\
    \ = 0;\n    long paren_level_counter_max_index2 = 0;\n    long paren_level_counter_max_index3\
    \ = 0;\n    long paren_level_counter_max_index4 = 0;\n    long paren_level_counter_max_index5\
    \ = 0;\n    long paren_level_counter_max_index6 = 0;\n    long paren_level_counter_max_index7\
    \ = 0;\n    long paren_level_counter_max_index8 = 0;\n    long paren_level_counter_max_index9\
    \ = 0;\n    long paren_level_counter_max_index10 = 0;\n    long paren_level_counter_max_index11\
    \ = 0;\n    long paren_level_counter_max_index12 = 0;\n    long paren_level_counter_max_index13\
    \ = 0;\n    long paren_level_counter_max_index14 = 0;\n    long paren_level_counter_max_index15\
    \ = 0;\n    long paren_level_counter_max_index16 = 0;\n    long paren_level_counter_max_index17\
    \ = 0;\n    long paren_level_counter_max_index18 = 0;\n    long paren_level_counter_max_index19\
    \ = 0;\n    long paren_level_counter_max_index20 = 0;\n    long paren_level_counter_max_index21\
    \ = 0;\n    long paren_level_counter_max_index22 = 0;\n    long paren_level_counter_max_index23\
    \ = 0;\n    long paren_level_counter_max_index24 = 0;\n    long paren_level_counter_max_index25\
    \ = 0;\n    long paren_level_counter_max_index26 = 0;\n    long paren_level_counter_max_index27\
    \ = 0;\n    long paren_level_counter_max_index28 = 0;\n    long paren_level_counter_max_index29\
    \ = 0;\n    long paren_level_counter_max_index30 = 0;\n    long paren_level_counter_max_index31\
    \ = 0;\n    long paren_level_counter_max_index32 = 0;\n    long paren_level_counter_max_index33\
    \ = 0;\n    long paren_level_counter_max_index34 = 0;\n    long paren_level_counter_max_index35\
    \ = 0;\n    long paren_level_counter_max_index36 = 0;\n    long paren_level_counter_max_index37\
    \ = 0;\n    long paren_level_counter_max_index38 = 0;\n    long paren_level_counter_max_index39\
    \ = 0;\n    long paren_level_counter_max_index40 = 0;\n    long paren_level_counter_max_index41\
    \ = 0;\n    long paren_level_counter_max_index42 = 0;\n    long paren_level_counter_max_index43\
    \ = 0;\n    long paren_level_counter_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95ykvy_x.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp95ykvy_x.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmp95ykvy_x.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count_index\
    \ = 0;\n    long paren_level_max_count_index2 = 0;\n    long paren_level_max_count_index3\
    \ = 0;\n    long paren_level_max_count_index4 = 0;\n    long paren_level_max_count_index5\
    \ = 0;\n    long paren_level_max_count_index6 = 0;\n    long paren_level_max_count_index7\
    \ = 0;\n    long paren_level_max_count_index8 = 0;\n    long paren_level_max_count_index9\
    \ = 0;\n    long paren_level_max_count_index10 = 0;\n    long paren_level_max_count_index11\
    \ = 0;\n    long paren_level_max_count_index12 = 0;\n    long paren_level_max_count_index13\
    \ = 0;\n    long paren_level_max_count_index14 = 0;\n    long paren_level_max_count_index15\
    \ = 0;\n    long paren_level_max_count_index16 = 0;\n    long paren_level_max_count_index17\
    \ = 0;\n    long paren_level_max_count_index18 = 0;\n    long paren_level_max_count_index19\
    \ = 0;\n    long paren_level_max_count_index20 = 0;\n    long paren_level_max_count_index21\
    \ = 0;\n    long paren_level_max_count_index22 = 0;\n    long paren_level_max_count_index23\
    \ = 0;\n    long paren_level_max_count_index24 = 0;\n    long paren_level_max_count_index25\
    \ = 0;\n    long paren_level_max_count_index26 = 0;\n    long paren_level_max_count_index27\
    \ = 0;\n    long paren_level_max_count_index28 = 0;\n    long paren_level_max_count_index29\
    \ = 0;\n    long paren_level_max_count_index30 = 0;\n    long paren_level_max_count_index31\
    \ = 0;\n    long paren_level_max_count_index32 = 0;\n    long paren_level_max_count_index33\
    \ = 0;\n    long paren_level_max_count_index34 = 0;\n    long paren_level_max_count_index35\
    \ = 0;\n    long paren_level_max_count_index36 = 0;\n    long paren_level_max_count_index37\
    \ = 0;\n    long paren_level_max_count_index38 = 0;\n    long paren_level_max_count_index39\
    \ = 0;\n    long paren_level_max_count_index40 = 0;\n    long paren_level_max_count_index41\
    \ = 0;\n    long paren_level_max_count_index42 = 0;\n    long paren_level_max_count_index43\
    \ = 0;\n    long paren_level_max_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq106oo8d.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpq106oo8d.cpp:56:1: error: expected initializer before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmpq106oo8d.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    std::string paren_level_string;\n    long paren_level = 0;\n    for (char\
    \ c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n \
    \           paren_level_string = std::to_string(paren_level);\n        } else\
    \ if (c == ')') {\n            paren_level--;\n            paren_level_string\
    \ = std::to_string(paren_level);\n        } else {\n            paren_level_string\
    \ = std::to_string(paren_level);\n        }\n        paren_levels.push_back(paren_level_string);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbpc_gwol.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpbpc_gwol.cpp:20:50: error: no matching function for call to \u2018\
    std::vector<long int>::push_back(std::string&)\u2019\n   20 |         paren_levels.push_back(paren_level_string);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbpc_gwol.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposc_pobj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmposc_pobj.cpp:13:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   13 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:14:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   14 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:15:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   15 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   16 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:17:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   17 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   18 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_level =\
    \ 0;\n    long paren_level_count = 0;\n    long paren_level_max = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count2 = 0;\n    long paren_level_max_count3\
    \ = 0;\n    long paren_level_max_count4 = 0;\n    long paren_level_max_count5\
    \ = 0;\n    long paren_level_max_count6 = 0;\n    long paren_level_max_count7\
    \ = 0;\n    long paren_level_max_count8 = 0;\n    long paren_level_max_count9\
    \ = 0;\n    long paren_level_max_count10 = 0;\n    long paren_level_max_count11\
    \ = 0;\n    long paren_level_max_count12 = 0;\n    long paren_level_max_count13\
    \ = 0;\n    long paren_level_max_count14 = 0;\n    long paren_level_max_count15\
    \ = 0;\n    long paren_level_max_count16 = 0;\n    long paren_level_max_count17\
    \ = 0;\n    long paren_level_max_count18 = 0;\n    long paren_level_max_count19\
    \ = 0;\n    long paren_level_max_count20 = 0;\n    long paren_level_max_count21\
    \ = 0;\n    long paren_level_max_count22 = 0;\n    long paren_level_max_count23\
    \ = 0;\n    long paren_level_max_count24 = 0;\n    long paren_level_max_count25\
    \ = 0;\n    long paren_level_max_count26 = 0;\n    long paren_level_max_count27\
    \ = 0;\n    long paren_level_max_count28 = 0;\n    long paren_level_max_count29\
    \ = 0;\n    long paren_level_max_count30 = 0;\n    long paren_level_max_count31\
    \ = 0;\n    long paren_level_max_count32 = 0;\n    long paren_level_max_count33\
    \ = 0;\n    long paren_level_max_count34 = 0;\n    long paren_level_max_count35\
    \ = 0;\n    long paren_level_max_count36 = 0;\n    long paren_level_max_count37\
    \ = 0;\n    long paren_level_max_count38 = 0;\n    long paren_level_max_count39\
    \ = 0;\n    long paren_level_max_count40 = 0;\n    long paren_level_max_count41\
    \ = 0;\n    long paren_level_max_count42 = 0;\n    long paren_level_max_count43\
    \ = 0;\n    long paren_level_max_count44 = 0;\n    long paren_level_max_count45\
    \ = 0;\n    long paren_level_max_count46 = 0;\n    long paren_level_max_count47\
    \ = 0;\n    long paren_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpup0qw2u7.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpup0qw2u7.cpp:61:1: error: expected initializer before \u2018}\u2019\
    \ token\n   61 | }\n      | ^\n/tmp/tmpup0qw2u7.cpp:61:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n  std::vector<long> paren_levels;\n\
    \  paren_levels[0] = 0;\n  long level = 0;\n  for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      paren_levels[level] = level;\n\
    \      level++;\n    } else if (paren_string[i] == ')') {\n      level--;\n  \
    \  }\n  }\n  return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113126
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level = std::to_string(level);\n\
    \            level++;\n        } else if (c == ')') {\n            level--;\n\
    \            levels[level] = std::stoi(paren_level);\n        }\n    }\n    return\
    \ levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count_index = 0;\n    long paren_level_max_count_index2\
    \ = 0;\n    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n    long paren_level_max_count_index44\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = parse_nested_parens;\n   \
    \ assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpg1wpl65b: /tmp/tmpg1wpl65b.cpp:59: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp9au1pg8: /tmp/tmpp9au1pg8.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_count =\
    \ 0;\n    long paren_level_max = 0;\n    long paren_level_max_count = 0;\n   \
    \ long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12emxlgx.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp12emxlgx.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp12emxlgx.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12emxlgx.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   15 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12emxlgx.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp12emxlgx.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp12emxlgx.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12emxlgx.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   17 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12emxlgx.cpp:13:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   13 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp12emxlgx.cpp:18:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   18 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp12emxlgx.cpp:12:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   12 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12emxlgx.cpp:19:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   19 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp12emxlgx.cpp:13:1"
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_index = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_index = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_index = 0;\n    long paren_\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposc_pobj.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmposc_pobj.cpp:13:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   13 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:14:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   14 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:15:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   15 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:16:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   16 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:10: note:\
    \ \u2018long int paren_level_max_index\u2019 previously declared here\n   12 |\
    \     long paren_level_max_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:17:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   17 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmposc_pobj.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:18:10: error: redeclaration of\
    \ \u2018long int paren_level_max_index\u2019\n   18 |     long paren_level_max_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmposc_pobj.cpp:12:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count_index = 0;\n    long paren_level_max_count_index2\
    \ = 0;\n    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n    long paren_level_max_count_index44\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = parse_nested_parens;\n   \
    \ assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpg1wpl65b: /tmp/tmpg1wpl65b.cpp:59: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long current_level = 0;\n\
    \    long paren_count = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_count++;\n            current_level++;\n        }\
    \ else if (c == ')') {\n            paren_count--;\n            current_level--;\n\
    \        }\n        paren_levels.push_back(current_level);\n    }\n    return\
    \ paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpzczmkmwj: /tmp/tmpzczmkmwj.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   for (auto &c : paren_string) {\n        if (c == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmp644bftrs: /tmp/tmp644bftrs.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpc2zr2htz: /tmp/tmpc2zr2htz.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long paren_level =\
    \ 0;\n    long paren_level_count = 0;\n    long paren_level_max_count = 0;\n \
    \   long paren_level_max_count_index = 0;\n    long paren_level_max_count_index2\
    \ = 0;\n    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpca8bskyg: /tmp/tmpca8bskyg.cpp:60: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count2 =\
    \ 0;\n    long paren_level_max_count3 = 0;\n    long paren_level_max_count4 =\
    \ 0;\n    long paren_level_max_count5 = 0;\n    long paren_level_max_count6 =\
    \ 0;\n    long paren_level_max_count7 = 0;\n    long paren_level_max_count8 =\
    \ 0;\n    long paren_level_max_count9 = 0;\n    long paren_level_max_count10 =\
    \ 0;\n    long paren_level_max_count11 = 0;\n    long paren_level_max_count12\
    \ = 0;\n    long paren_level_max_count13 = 0;\n    long paren_level_max_count14\
    \ = 0;\n    long paren_level_max_count15 = 0;\n    long paren_level_max_count16\
    \ = 0;\n    long paren_level_max_count17 = 0;\n    long paren_level_max_count18\
    \ = 0;\n    long paren_level_max_count19 = 0;\n    long paren_level_max_count20\
    \ = 0;\n    long paren_level_max_count21 = 0;\n    long paren_level_max_count22\
    \ = 0;\n    long paren_level_max_count23 = 0;\n    long paren_level_max_count24\
    \ = 0;\n    long paren_level_max_count25 = 0;\n    long paren_level_max_count26\
    \ = 0;\n    long paren_level_max_count27 = 0;\n    long paren_level_max_count28\
    \ = 0;\n    long paren_level_max_count29 = 0;\n    long paren_level_max_count30\
    \ = 0;\n    long paren_level_max_count31 = 0;\n    long paren_level_max_count32\
    \ = 0;\n    long paren_level_max_count33 = 0;\n    long paren_level_max_count34\
    \ = 0;\n    long paren_level_max_count35 = 0;\n    long paren_level_max_count36\
    \ = 0;\n    long paren_level_max_count37 = 0;\n    long paren_level_max_count38\
    \ = 0;\n    long paren_level_max_count39 = 0;\n    long paren_level_max_count40\
    \ = 0;\n    long paren_level_max_count41 = 0;\n    long paren_level_max_count42\
    \ = 0;\n    long paren_level_max_count43 = 0;\n    long paren_level_max_count44\
    \ = 0;\n    long paren_level_max_count45 = 0;\n    long paren_level_max_count46\
    \ = 0;\n    long paren_level_max_count47 = 0;\n    long paren_level_max_count48\
    \ = 0;\n    long paren_level_max_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabswa_sn.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpabswa_sn.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmpabswa_sn.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    for (auto &c : paren_string) {\n        if\
    \ (c == '(') {\n            paren_level = paren_level + c;\n        } else if\
    \ (c == ')') {\n            levels[levels.size() - 1]++;\n            paren_level\
    \ = paren_level.substr(0, paren_level.size() - 1);\n        } else {\n       \
    \     paren_level = paren_level + c;\n        }\n    }\n    return levels;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx5fp8afl: /tmp/tmpx5fp8afl.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    std::string paren_char;\n    std::string paren_chars;\n\
    \    std::string paren_chars_temp;\n    std::string paren_chars_temp_temp;\n \
    \   std::string paren_chars_temp_temp_temp;\n    std::string paren_chars_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp;\n    std::string paren_chars_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp;\n    std::string\
    \ paren_chars_temp_temp_temp_temp_temp_temp_temp_temp;\n    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39j6_8lc.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp39j6_8lc.cpp:23:17: error: redeclaration of \u2018std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   23 |     std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp39j6_8lc.cpp:22:17: note: \u2018std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   22 |     std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp39j6_8lc.cpp:26:17: error: redeclaration of \u2018std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   26 |     std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp39j6_8lc.cpp:25:17: note: \u2018std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \ previously declared here\n   25 |     std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp39j6_8lc.cpp:27:17: error: redeclaration of \u2018std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\u2019\
    \n   27 |     std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp39j6_8lc.cpp:25:17: note: \u2018std::string paren_chars_temp_temp_temp_temp_temp_temp_temp_te"
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto &c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpfluspot3: /tmp/tmpfluspot3.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmphzxy2hap: /tmp/tmphzxy2hap.cpp:69: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    bool is_open = false;\n   \
    \ bool is_closed = false;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            is_open = true;\n            level++;\n        } else if\
    \ (c == ')') {\n            is_closed = true;\n            level--;\n        }\
    \ else if (c == ' ') {\n            if (is_open && is_closed) {\n            \
    \    paren_levels.push_back(level);\n                is_open = false;\n      \
    \          is_closed = false;\n            }\n        }\n    }\n    if (is_open\
    \ || is_closed) {\n        paren_levels.push_back(level);\n    }\n    return paren_levels;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpx96twb6c: /tmp/tmpx96twb6c.cpp:34: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n  \
    \  long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long\
    \ paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count =\
    \ 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count = 0;\n\
    \    long paren_level_max_count = 0;\n\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lar2hs.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp86lar2hs.cpp:12:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   12 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:13:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   13 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:14:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   14 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:15:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   15 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:10: note:\
    \ \u2018long int paren_level_max_count\u2019 previously declared here\n   11 |\
    \     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:16:10: error: redeclaration of \u2018long int paren_level_max_count\u2019\
    \n   16 |     long paren_level_max_count = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86lar2hs.cpp:11:10: note: \u2018long int paren_level_max_count\u2019 previously\
    \ declared here\n   11 |     long paren_level_max_count = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:17:10: error: redeclaration of\
    \ \u2018long int paren_level_max_count\u2019\n   17 |     long paren_level_max_count\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp86lar2hs.cpp:11:1"
  stdout: ''
  timestamp: 1660113120
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_count = 0;\n    long paren_level_count_max = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_diff = 0;\n    long paren_level_count_diff_max\
    \ = 0;\n    long paren_level_count_diff_min = 0;\n    long paren_level_count_diff_sum\
    \ = 0;\n    long paren_level_count_diff_sum_max = 0;\n    long paren_level_count_diff_sum_min\
    \ = 0;\n    long paren_level_count_diff_sum_diff = 0;\n    long paren_level_count_diff_sum_diff_max\
    \ = 0;\n    long paren_level_count_diff_sum_diff_min = 0;\n    long paren_level_count_diff_sum_diff_sum\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_max = 0;\n    long paren_level_count_diff_sum_diff_sum_min\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_diff = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_max\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_min = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_max = 0;\n    long\
    \ paren_level_count_diff_sum_diff_sum_diff_sum_min = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_diff\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_max = 0;\n\
    \    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_min = 0;\n    long\
    \ paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_max\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_min = 0;\n\
    \    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff = 0;\n  \
    \  long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff_max = 0;\n\
    \    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff_min = 0;\n\
    \    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum = 0;\n\
    \    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_max =\
    \ 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_min\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff\
    \ = 0;\n    long paren_level_count_diff_sum_diff_sum_diff_sum_diff_sum_diff_\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo5c_8g6p.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpo5c_8g6p.cpp:46:1: error: expected initializer before \u2018}\u2019\
    \ token\n   46 | }\n      | ^\n/tmp/tmpo5c_8g6p.cpp:46:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    std::string paren_level;\n    long paren_level_count = 0;\n    for (auto\
    \ &c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level = std::to_string(paren_level_count);\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n            paren_level =\
    \ std::to_string(paren_level_count);\n        }\n        paren_levels[paren_level_count].push_back(std::stoi(paren_level));\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jmvq0h4.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp5jmvq0h4.cpp:18:41: error: request for member \u2018push_back\u2019\
    \ in \u2018paren_levels.std::vector<long int>::operator[](((std::vector<long int>::size_type)paren_level_count))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   18 |      \
    \   paren_levels[paren_level_count].push_back(std::stoi(paren_level));\n     \
    \ |                                         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto &c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpfluspot3: /tmp/tmpfluspot3.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ level) {\n            paren_level++;\n        }\n        level++;\n    }\n \
    \   return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpkzrh61i2: /tmp/tmpkzrh61i2.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    for (auto &c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpqf3t0bzj: /tmp/tmpqf3t0bzj.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long max_level = 0;\n    long level = 0;\n \
    \   long pos = 0;\n    long paren_pos = 0;\n    long paren_level = 0;\n    long\
    \ paren_level_count = 0;\n    long paren_level_pos = 0;\n    long paren_level_end\
    \ = 0;\n    long paren_level_start = 0;\n    long paren_level_end = 0;\n    long\
    \ paren_level_start = 0;\n    long paren_level_end = 0;\n    long paren_level_start\
    \ = 0;\n    long paren_level_end = 0;\n    long paren_level_start = 0;\n    long\
    \ paren_level_end = 0;\n    long paren_level_start = 0;\n    long paren_level_end\
    \ = 0;\n    long paren_level_start = 0;\n    long paren_level_end = 0;\n    long\
    \ paren_level_start = 0;\n    long paren_level_end = 0;\n    long paren_level_start\
    \ = 0;\n    long paren_level_end = 0;\n    long paren_level_start = 0;\n    long\
    \ paren_level_end = 0;\n    long paren_level_start = 0;\n    long paren_level_end\
    \ = 0;\n    long paren_level_start = 0;\n    long paren_level_end = 0;\n    long\
    \ paren_level_start = 0;\n    long paren_level_end = 0;\n    long paren_level_start\
    \ = 0;\n    long paren_level_end = 0;\n    long paren_level_start = 0;\n    long\
    \ paren_level_end = 0;\n    long paren_level_start = 0;\n    long paren_level_end\
    \ = 0;\n    long paren_level_start = 0;\n    long paren_level_end = 0;\n    long\
    \ paren_level_start = 0;\n    long paren_level_end = 0;\n    long paren_level_start\
    \ = 0;\n    long paren_level_end = 0;\n    long paren_level_start = 0;\n    long\
    \ paren_level_end = 0;\n    long paren_level_start = 0;\n    long paren_level_end\
    \ = 0;\n    long paren_level_start = 0;\n    long paren_level_end = 0;\n    long\
    \ paren_level_start = 0;\n    long paren_level_end = 0;\n    long paren_level_start\
    \ = 0;\n    long paren_level_end = 0;\n    long paren_level_start = 0;\n    long\
    \ paren_level_end = 0;\n    long paren_level_start = 0;\n    long paren_level_end\
    \ = 0;\n    long paren_level_start = 0;\n    long paren_level_end = 0;\n    long\
    \ paren_level_start = 0;\n    long paren_level_end = 0;\n    long paren_level_start\
    \ = 0;\n    long paren\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm07zlwj3.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmpm07zlwj3.cpp:18:10: error: redeclaration of \u2018long int paren_level_end\u2019\
    \n   18 |     long paren_level_end = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:16:10:\
    \ note: \u2018long int paren_level_end\u2019 previously declared here\n   16 |\
    \     long paren_level_end = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:19:10:\
    \ error: redeclaration of \u2018long int paren_level_start\u2019\n   19 |    \
    \ long paren_level_start = 0;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:17:10:\
    \ note: \u2018long int paren_level_start\u2019 previously declared here\n   17\
    \ |     long paren_level_start = 0;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:20:10:\
    \ error: redeclaration of \u2018long int paren_level_end\u2019\n   20 |     long\
    \ paren_level_end = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:16:10:\
    \ note: \u2018long int paren_level_end\u2019 previously declared here\n   16 |\
    \     long paren_level_end = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:21:10:\
    \ error: redeclaration of \u2018long int paren_level_start\u2019\n   21 |    \
    \ long paren_level_start = 0;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:17:10:\
    \ note: \u2018long int paren_level_start\u2019 previously declared here\n   17\
    \ |     long paren_level_start = 0;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:22:10:\
    \ error: redeclaration of \u2018long int paren_level_end\u2019\n   22 |     long\
    \ paren_level_end = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:16:10:\
    \ note: \u2018long int paren_level_end\u2019 previously declared here\n   16 |\
    \     long paren_level_end = 0;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:23:10:\
    \ error: redeclaration of \u2018long int paren_level_start\u2019\n   23 |    \
    \ long paren_level_start = 0;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:17:10:\
    \ note: \u2018long int paren_level_start\u2019 previously declared here\n   17\
    \ |     long paren_level_start = 0;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmpm07zlwj3.cpp:24:10"
  stdout: ''
  timestamp: 1660113126
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    long paren_level = 0;\n    long paren_level_prev = 0;\n\
    \    long paren_level_next = 0;\n    long paren_level_next_prev = 0;\n    long\
    \ paren_level_next_next = 0;\n    long paren_level_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next = 0;\n    long paren_level_next_next_next_prev =\
    \ 0;\n    long paren_level_next_next_next_next = 0;\n    long paren_level_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next = 0;\n    long paren_level_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next = 0;\n    long paren_level_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_prev = 0;\n    long paren_level_next_next_next_next_next_next_next_next\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_prev = 0;\n  \
    \  long paren_level_next_next_next_next_next_next_next_next = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next = 0;\n\
    \    long paren_level_next_next_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_next_next = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next = 0;\n\
    \    long paren_level_next_next_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_next_next = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next = 0;\n\
    \    long paren_level_next_next_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_next_next = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_next_next_next_next_next_next_next_next_next = 0;\n\
    \    long paren_level_next_next_next_next_next_next_next_next_prev = 0;\n    long\
    \ paren_level_next_next_next_next_next_next_next_next_next = 0;\n    long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n    long paren_level_\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5nhtwcbi.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp5nhtwcbi.cpp:26:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_prev\u2019\
    \n   26 |     long paren_level_next_next_next_next_next_next_next_prev = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5nhtwcbi.cpp:24:10:\
    \ note: \u2018long int paren_level_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   24 |     long paren_level_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5nhtwcbi.cpp:27:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next\u2019\
    \n   27 |     long paren_level_next_next_next_next_next_next_next_next = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5nhtwcbi.cpp:25:10:\
    \ note: \u2018long int paren_level_next_next_next_next_next_next_next_next\u2019\
    \ previously declared here\n   25 |     long paren_level_next_next_next_next_next_next_next_next\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5nhtwcbi.cpp:30:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_prev\u2019\
    \n   30 |     long paren_level_next_next_next_next_next_next_next_next_prev =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5nhtwcbi.cpp:28:10: note: \u2018long int paren_level_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   28 |     long paren_level_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5nhtwcbi.cpp:31:10: error: redeclaration of \u2018long int paren_level_next_next_next_next_next_next_next_next_next\u2019\
    \n   31 |     long paren_level_next_next_next_next_next_next_next_next_next =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5nhtwcbi.cpp:29:10: note: \u2018long int paren_"
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long level = 0;\n    for (auto &c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpfluspot3: /tmp/tmpfluspot3.cpp:22: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (size_t i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     paren_level = paren_string.substr(0, i);\n            level++;\n       \
    \ } else if (paren_string[i] == ')') {\n            level--;\n            if (level\
    \ == 0) {\n                levels.push_back(level);\n            }\n        }\n\
    \    }\n    return levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpay8ns5g0: /tmp/tmpay8ns5g0.cpp:25: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113121
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_index =\
    \ 0;\n    long paren_level_max_index2 = 0;\n    long paren_level_max_index3 =\
    \ 0;\n    long paren_level_max_index4 = 0;\n    long paren_level_max_index5 =\
    \ 0;\n    long paren_level_max_index6 = 0;\n    long paren_level_max_index7 =\
    \ 0;\n    long paren_level_max_index8 = 0;\n    long paren_level_max_index9 =\
    \ 0;\n    long paren_level_max_index10 = 0;\n    long paren_level_max_index11\
    \ = 0;\n    long paren_level_max_index12 = 0;\n    long paren_level_max_index13\
    \ = 0;\n    long paren_level_max_index14 = 0;\n    long paren_level_max_index15\
    \ = 0;\n    long paren_level_max_index16 = 0;\n    long paren_level_max_index17\
    \ = 0;\n    long paren_level_max_index18 = 0;\n    long paren_level_max_index19\
    \ = 0;\n    long paren_level_max_index20 = 0;\n    long paren_level_max_index21\
    \ = 0;\n    long paren_level_max_index22 = 0;\n    long paren_level_max_index23\
    \ = 0;\n    long paren_level_max_index24 = 0;\n    long paren_level_max_index25\
    \ = 0;\n    long paren_level_max_index26 = 0;\n    long paren_level_max_index27\
    \ = 0;\n    long paren_level_max_index28 = 0;\n    long paren_level_max_index29\
    \ = 0;\n    long paren_level_max_index30 = 0;\n    long paren_level_max_index31\
    \ = 0;\n    long paren_level_max_index32 = 0;\n    long paren_level_max_index33\
    \ = 0;\n    long paren_level_max_index34 = 0;\n    long paren_level_max_index35\
    \ = 0;\n    long paren_level_max_index36 = 0;\n    long paren_level_max_index37\
    \ = 0;\n    long paren_level_max_index38 = 0;\n    long paren_level_max_index39\
    \ = 0;\n    long paren_level_max_index40 = 0;\n    long paren_level_max_index41\
    \ = 0;\n    long paren_level_max_index42 = 0;\n    long paren_level_max_index43\
    \ = 0;\n    long paren_level_max_index44 = 0;\n    long paren_level_max_index45\
    \ = 0;\n    long paren_level_max_index46 = 0;\n    long paren_level_max_index47\
    \ = 0;\n    long paren_level_max_index\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppj3ym6zr.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmppj3ym6zr.cpp:60:1: error: expected initializer before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmppj3ym6zr.cpp:60:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113123
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_levels.push_back(level);\n   \
    \         level++;\n        } else if (c == ')') {\n            level--;\n   \
    \         assert(level >= 0);\n            assert(level < max_level);\n      \
    \      paren_levels.push_back(level);\n            max_level = std::max(max_level,\
    \ level);\n        }\n    }\n    return paren_levels;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: Exception
  stderr: 'tmpegk23f_5: /tmp/tmpegk23f_5.cpp:17: std::vector<long int> parse_nested_parens(std::string):
    Assertion `level < max_level'' failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level = std::to_string(level);\n\
    \            level++;\n        } else if (c == ')') {\n            level--;\n\
    \            levels[level] = std::stoi(paren_level);\n        }\n    }\n    return\
    \ levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660113121
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            level++;\n            if (paren_level > max_level) {\n          \
    \      max_level = paren_level;\n            }\n        } else if (c == ')') {\n\
    \            paren_level--;\n            level--;\n        }\n    }\n    paren_levels.push_back(max_level);\n\
    \    return paren_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpehbmjgps: /tmp/tmpehbmjgps.cpp:28: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    long paren_level = 0;\n   \
    \ long paren_level_prev = 0;\n    long paren_level_next = 0;\n    long paren_level_next2\
    \ = 0;\n    long paren_level_next3 = 0;\n    long paren_level_next4 = 0;\n   \
    \ long paren_level_next5 = 0;\n    long paren_level_next6 = 0;\n    long paren_level_next7\
    \ = 0;\n    long paren_level_next8 = 0;\n    long paren_level_next9 = 0;\n   \
    \ long paren_level_next10 = 0;\n    long paren_level_next11 = 0;\n    long paren_level_next12\
    \ = 0;\n    long paren_level_next13 = 0;\n    long paren_level_next14 = 0;\n \
    \   long paren_level_next15 = 0;\n    long paren_level_next16 = 0;\n    long paren_level_next17\
    \ = 0;\n    long paren_level_next18 = 0;\n    long paren_level_next19 = 0;\n \
    \   long paren_level_next20 = 0;\n    long paren_level_next21 = 0;\n    long paren_level_next22\
    \ = 0;\n    long paren_level_next23 = 0;\n    long paren_level_next24 = 0;\n \
    \   long paren_level_next25 = 0;\n    long paren_level_next26 = 0;\n    long paren_level_next27\
    \ = 0;\n    long paren_level_next28 = 0;\n    long paren_level_next29 = 0;\n \
    \   long paren_level_next30 = 0;\n    long paren_level_next31 = 0;\n    long paren_level_next32\
    \ = 0;\n    long paren_level_next33 = 0;\n    long paren_level_next34 = 0;\n \
    \   long paren_level_next35 = 0;\n    long paren_level_next36 = 0;\n    long paren_level_next37\
    \ = 0;\n    long paren_level_next38 = 0;\n    long paren_level_next39 = 0;\n \
    \   long paren_level_next40 = 0;\n    long paren_level_next41 = 0;\n    long paren_level_next42\
    \ = 0;\n    long paren_level_next43 = 0;\n    long paren_level_next44 = 0;\n \
    \   long paren_level_next45 = 0;\n    long paren_level_next46 = 0;\n    long paren_level_next47\
    \ = 0;\n    long paren_level_next48 = 0;\n    long paren_level_next49 = 0;\n \
    \   long paren_level_next50 = 0;\n    long paren_level_next51 = 0;\n    long paren_level_next52\
    \ = 0;\n    long paren_level_next53 = 0;\n    long paren_level_\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9i4f18sb.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmp9i4f18sb.cpp:66:1: error: expected initializer before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmp9i4f18sb.cpp:66:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113126
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\nstd::vector<long>\
    \ parse_nested_parens(std::string paren_string) {\n    std::vector<long> levels;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            level++;\n        } else if (c == ')') {\n            level--;\n\
    \        }\n        levels.push_back(level);\n    }\n    return levels;\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: Exception
  stderr: 'tmpup7lrj5l: /tmp/tmpup7lrj5l.cpp:21: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))''
    failed.

    '
  stdout: ''
  timestamp: 1660113127
