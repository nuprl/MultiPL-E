language: cpp
name: HumanEval_105_by_length
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long l = arr.size();\n    long m = l /\
    \ 10;\n    long n = l % 10;\n    long count = 0;\n    for (long i = 0; i < m;\
    \ i++) {\n        long count = 0;\n        for (long j = 0; j < n; j++) {\n  \
    \          count += arr[i * 10 + j];\n        }\n        if (count > 9) {\n  \
    \          ans.push_back(\"Nine\");\n            count -= 9;\n        } else {\n\
    \            ans.push_back(\"One\");\n            count++;\n        }\n    }\n\
    \    for (long i = m; i < l; i++) {\n        long count = 0;\n        for (long\
    \ j = 0; j < n; j++) {\n            count += arr[i * 10 + j];\n        }\n   \
    \     if (count > 9) {\n            ans.push_back(\"Nine\");\n            count\
    \ -= 9;\n        } else {\n            ans.push_back(\"One\");\n            count++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp78sw3hli: /tmp/tmp78sw3hli.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push_back(by_length(arr));\n\
    \    } else {\n      res.push_back(std::to_string(arr[i]));\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3430hfv1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3430hfv1.cpp:20:35: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   20 |\
    \       res.push_back(by_length(arr));\n      |                              \
    \     ^\nIn file included from /usr/include/c++/9/vector:67,\n               \
    \  from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp3430hfv1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char> >::value_typ"
  stdout: ''
  timestamp: 1660136023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long diff = max - min;\n    long mod = diff % 10;\n    if (mod\
    \ == 0) {\n        mod = 10;\n    }\n    long rem = diff / 10;\n    long start\
    \ = min + rem;\n    long end = max - rem;\n    long cur = start;\n    while (cur\
    \ < end) {\n        res.push_back(\"One\");\n        cur++;\n    }\n    while\
    \ (cur > 0) {\n        res.push_back(\"Nine\");\n        cur--;\n    }\n    while\
    \ (cur < mod) {\n        res.push_back(\"Two\");\n        cur++;\n    }\n    while\
    \ (cur > 0) {\n        res.push_back(\"Three\");\n        cur--;\n    }\n    while\
    \ (cur < mod) {\n        res.push_back(\"Four\");\n        cur++;\n    }\n   \
    \ while (cur > 0) {\n        res.push_back(\"Five\");\n        cur--;\n    }\n\
    \    while (cur < mod) {\n        res.push_back(\"Six\");\n        cur++;\n  \
    \  }\n    while (cur > 0) {\n        res.push_back(\"Seven\");\n        cur--;\n\
    \    }\n    while (cur < mod) {\n        res.push_back(\"Eight\");\n        cur++;\n\
    \    }\n    while (cur > 0) {\n        res.push_back(\"One\");\n        cur--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpuoxye3d4: /tmp/tmpuoxye3d4.cpp:80: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = 0;\n\
    \    for (long i : arr) {\n        if (i > prev) {\n            res.push_back(by_length(std::vector<long>{prev,\
    \ curr}));\n            prev = curr;\n            curr = i;\n        } else {\n\
    \            curr += i;\n        }\n    }\n    res.push_back(by_length(std::vector<long>{prev,\
    \ curr}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26ymyp2b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp26ymyp2b.cpp:20:67: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   20 |\
    \             res.push_back(by_length(std::vector<long>{prev, curr}));\n     \
    \ |                                                                   ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp26ymyp2b.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long l = arr[0];\n    long r = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            l = i;\n       \
    \ } else {\n            ans.push_back(to_string(l));\n            l = i;\n   \
    \     }\n    }\n    ans.push_back(to_string(l));\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcs2d0dmg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpcs2d0dmg.cpp:22:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |             ans.push_back(to_string(l));\n      |                 \
    \          ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpcs2d0dmg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpcs2d0dmg.cpp:26:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     ans.push_back(to_string(l));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcs2d0dmg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_s"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty())\n        return res;\n    long lower = 1;\n    long upper = 9;\n\
    \    long mid = (lower + upper) / 2;\n    long length = arr.size();\n    while\
    \ (lower < upper) {\n        if (arr[mid] < lower)\n            lower = mid +\
    \ 1;\n        else if (arr[mid] > upper)\n            upper = mid - 1;\n     \
    \   else\n            res.push_back(names[mid]);\n        mid = (lower + upper)\
    \ / 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6dc4u_t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpe6dc4u_t.cpp:27:27: error:\
    \ \u2018names\u2019 was not declared in this scope\n   27 |             res.push_back(names[mid]);\n\
    \      |                           ^~~~~\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = 1;\n    for (long long\
    \ i = 0; i < n; ++i) {\n        while (m <= 9) {\n            if (arr[i] >= m\
    \ && arr[i] <= 9) {\n                res.push_back(\"One\");\n               \
    \ res.push_back(\"Two\");\n                res.push_back(\"Three\");\n       \
    \         res.push_back(\"Four\");\n                res.push_back(\"Five\");\n\
    \                res.push_back(\"Six\");\n                res.push_back(\"Seven\"\
    );\n                res.push_back(\"Eight\");\n                res.push_back(\"\
    Nine\");\n                res.push_back(\"Ten\");\n                res.push_back(\"\
    Eleven\");\n                res.push_back(\"Twelve\");\n                res.push_back(\"\
    Thirteen\");\n                res.push_back(\"Fourteen\");\n                res.push_back(\"\
    Fifteen\");\n                res.push_back(\"Sixteen\");\n                res.push_back(\"\
    Seventeen\");\n                res.push_back(\"Eighteen\");\n                res.push_back(\"\
    Nineteen\");\n                res.push_back(\"Twenty\");\n                res.push_back(\"\
    Twenty one\");\n                res.push_back(\"Twenty two\");\n             \
    \   res.push_back(\"Twenty three\");\n                res.push_back(\"Twenty four\"\
    );\n                res.push_back(\"Twenty five\");\n                res.push_back(\"\
    Twenty six\");\n                res.push_back(\"Twenty seven\");\n           \
    \     res.push_back(\"Twenty eight\");\n                res.push_back(\"Twenty\
    \ nine\");\n                res.push_back(\"Twenty ten\");\n                res.push_back(\"\
    Twenty eleven\");\n                res.push_back(\"Twenty twelve\");\n       \
    \         res.push_back(\"Twenty thirteen\");\n                res.push_back(\"\
    Twenty fourteen\");\n                res.push_back(\"Twenty fifteen\");\n    \
    \            res.push_back(\"Twenty sixteen\");\n                res.push_back(\"\
    Twenty seventeen\");\n                res.push_back(\"Twenty eighteen\");\n  \
    \              res.push_back(\"Twenty nineteen\");\n                res.push_back(\"\
    Twenty twenty\");\n                res.push_back(\"Twenty twenty one\");\n   \
    \             res.push_back(\"Twenty twenty two\");\n                res.push_back(\"\
    Twenty twenty three\");\n                res.push_back(\"Twenty twenty four\"\
    );\n                res.push_back(\"Twenty twenty five\");\n                res.push_back(\"\
    Twenty twenty six\");\n                \n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd99xftl_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpd99xftl_.cpp:69:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   69\
    \ | int main() {\n      |            ^\n/tmp/tmpd99xftl_.cpp:76:1: error: expected\
    \ \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmpd99xftl_.cpp:19:24:\
    \ note: to match this \u2018{\u2019\n   19 |         while (m <= 9) {\n      |\
    \                        ^\n/tmp/tmpd99xftl_.cpp:76:1: error: expected \u2018\
    }\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmpd99xftl_.cpp:18:39: note:\
    \ to match this \u2018{\u2019\n   18 |     for (long long i = 0; i < n; ++i) {\n\
    \      |                                       ^\n/tmp/tmpd99xftl_.cpp:76:1: error:\
    \ expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmpd99xftl_.cpp:13:59:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpd99xftl_.cpp:76:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   76 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) return res;\n    long max = *std::max_element(arr.begin(), arr.end())\
    \ + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) + 1;\n    long\
    \ mid = max / 10;\n    long rem = max % 10;\n    long start = mid - 1;\n    long\
    \ end = mid + 1;\n    long cur = min;\n    while (cur <= max) {\n        if (cur\
    \ > 9) {\n            res.push_back(\"Nine\");\n            cur = cur - 10;\n\
    \        } else if (cur > 0) {\n            res.push_back(\"Zero\");\n       \
    \     cur = cur - 1;\n        } else {\n            res.push_back(\"One\");\n\
    \            cur = cur + 1;\n        }\n    }\n    while (start >= 1) {\n    \
    \    res.push_back(\"One\");\n        start = start - 1;\n    }\n    while (end\
    \ < 10) {\n        res.push_back(\"Ten\");\n        end = end + 1;\n    }\n  \
    \  while (start < end) {\n        res.push_back(\"Ten\");\n        start = start\
    \ + 1;\n    }\n    while (cur < min) {\n        res.push_back(\"One\");\n    \
    \    cur = cur + 1;\n    }\n    while (cur < max) {\n        res.push_back(\"\
    One\");\n        cur = cur + 1;\n    }\n    while (cur > 0) {\n        res.push_back(\"\
    Zero\");\n        cur = cur - 1;\n    }\n    while (cur > 1) {\n        res.push_back(\"\
    One\");\n        cur = cur - 1;\n    }\n    while (cur > 9) {\n        res.push_back(\"\
    Nine\");\n        cur = cur - 10;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660136028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    for (long i : arr) {\n  \
    \      if (i >= 1 && i <= 9) {\n            res.push_back(\"One\");\n        }\
    \ else if (i >= 10 && i <= 99) {\n            res.push_back(\"Two\");\n      \
    \  } else if (i >= 100 && i <= 999) {\n            res.push_back(\"Three\");\n\
    \        } else if (i >= 1000 && i <= 9999) {\n            res.push_back(\"Four\"\
    );\n        } else if (i >= 10000 && i <= 99999) {\n            res.push_back(\"\
    Five\");\n        } else if (i >= 100000 && i <= 999999) {\n            res.push_back(\"\
    Six\");\n        } else if (i >= 1000000 && i <= 9999999) {\n            res.push_back(\"\
    Seven\");\n        } else if (i >= 10000000 && i <= 99999999) {\n            res.push_back(\"\
    Eight\");\n        } else if (i >= 100000000 && i <= 999999999) {\n          \
    \  res.push_back(\"Nine\");\n        } else {\n            res.push_back(\"Zero\"\
    );\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpvhh1qy7s: /tmp/tmpvhh1qy7s.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    long\
    \ n = arr.size();\n    if (n == 0)\n        return ans;\n    long max_len = 0,\
    \ min_len = INT_MAX;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] <\
    \ min_len)\n            min_len = arr[i];\n        if (arr[i] > max_len)\n   \
    \         max_len = arr[i];\n    }\n    long mid = max_len;\n    long mid2 = max_len;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] < mid) {\n           \
    \ mid = arr[i];\n            mid2 = mid;\n        } else if (arr[i] > mid2) {\n\
    \            mid2 = arr[i];\n        }\n    }\n    long mid3 = mid;\n    long\
    \ mid4 = mid;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] < mid3)\
    \ {\n            mid3 = arr[i];\n            mid4 = mid3;\n        } else if (arr[i]\
    \ > mid4) {\n            mid4 = arr[i];\n        }\n    }\n    long mid5 = mid3;\n\
    \    long mid6 = mid3;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ < mid5) {\n            mid5 = arr[i];\n            mid6 = mid5;\n        } else\
    \ if (arr[i] > mid6) {\n            mid6 = arr[i];\n        }\n    }\n    long\
    \ mid7 = mid5;\n    long mid8 = mid5;\n    for (long i = 0; i < n; i++) {\n  \
    \      if (arr[i] < mid7) {\n            mid7 = arr[i];\n            mid8 = mid7;\n\
    \        } else if (arr[i] > mid8) {\n            mid8 = arr[i];\n        }\n\
    \    }\n    long mid9 = mid7;\n    long mid10 = mid7;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (arr[i] < mid9) {\n            mid9 = arr[i];\n    \
    \        mid10 = mid9;\n        } else if (arr[i] > mid10) {\n            mid10\
    \ = arr[i];\n        }\n    }\n    long mid11 = mid9;\n    long mid12 = mid9;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] < mid11) {\n         \
    \   mid11 = arr[i];\n            mid12 = mid11;\n        } else if (arr[i] > mid12)\
    \ {\n            mid12 = arr[i];\n        }\n    }\n    long mid13 = mid11;\n\
    \    long mid14 = mid11;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ < mid13) {\n            mid13 = arr[i];\n            mid14 = mid13;\n      \
    \  } else if (arr[i] > mid14) {\n            mid14 = arr[i];\n        }\n    }\n\
    \    long mid15 = mid13;\n    long mid16 = mid13;\n    for (long i = 0; i < n;\
    \ i++) {\n        if (arr[i] < mid15) {\n            mid15 = arr[i];\n       \
    \     mid16 = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnhugjmut.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpnhugjmut.cpp:101:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  101 | }\n      | ^\n\
    /tmp/tmpnhugjmut.cpp:102:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  102 | int main() {\n      |            ^\n/tmp/tmpnhugjmut.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmpnhugjmut.cpp:97:34:\
    \ note: to match this \u2018{\u2019\n   97 |     for (long i = 0; i < n; i++)\
    \ {\n      |                                  ^\n/tmp/tmpnhugjmut.cpp:109:1: error:\
    \ expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmpnhugjmut.cpp:13:59:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpnhugjmut.cpp:109:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  109 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) {\n        return res;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min > 9 || max < 1) {\n        return res;\n    }\n    long mid = min +\
    \ (max - min) / 2;\n    long left = mid;\n    long right = mid;\n    long mid2\
    \ = mid + 1;\n    long mid3 = mid + 2;\n    long mid4 = mid + 3;\n    long mid5\
    \ = mid + 4;\n    long mid6 = mid + 5;\n    long mid7 = mid + 6;\n    long mid8\
    \ = mid + 7;\n    long mid9 = mid + 8;\n    long mid10 = mid + 9;\n    long mid11\
    \ = mid + 10;\n    long mid12 = mid + 11;\n    long mid13 = mid + 12;\n    long\
    \ mid14 = mid + 13;\n    long mid15 = mid + 14;\n    long mid16 = mid + 15;\n\
    \    long mid17 = mid + 16;\n    long mid18 = mid + 17;\n    long mid19 = mid\
    \ + 18;\n    long mid20 = mid + 19;\n    long mid21 = mid + 20;\n    long mid22\
    \ = mid + 21;\n    long mid23 = mid + 22;\n    long mid24 = mid + 23;\n    long\
    \ mid25 = mid + 24;\n    long mid26 = mid + 25;\n    long mid27 = mid + 26;\n\
    \    long mid28 = mid + 27;\n    long mid29 = mid + 28;\n    long mid30 = mid\
    \ + 29;\n    long mid31 = mid + 30;\n    long mid32 = mid + 31;\n    long mid33\
    \ = mid + 32;\n    long mid34 = mid + 33;\n    long mid35 = mid + 34;\n    long\
    \ mid36 = mid + 35;\n    long mid37 = mid + 36;\n    long mid38 = mid + 37;\n\
    \    long mid39 = mid + 38;\n    long mid40 = mid + 39;\n    long mid41 = mid\
    \ + 40;\n    long mid42 = mid + 41;\n    long mid43 = mid + 42;\n    long mid44\
    \ = mid + 43;\n    long mid45 = mid + 44;\n    long mid46 = mid + 45;\n    long\
    \ mid47 = mid + 46;\n    long mid48 = mid + 47;\n    long mid49 = mid + 48;\n\
    \    long mid50 = mid + 49;\n    long mid5\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3m2f2ks.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpa3m2f2ks.cpp:76:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmpa3m2f2ks.cpp:76:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   76 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i >= min && i <= max) {\n            std::string s = std::to_string(i);\n\
    \            std::string temp = s;\n            std::reverse(temp.begin(), temp.end());\n\
    \            res.push_back(temp);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpe_p8lo34: /tmp/tmpe_p8lo34.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ long mid = max / 10;\n    long rem = max % 10;\n    if (min == 1) {\n      \
    \  res.push_back(\"One\");\n    }\n    if (min == 2) {\n        res.push_back(\"\
    Two\");\n    }\n    if (min == 3) {\n        res.push_back(\"Three\");\n    }\n\
    \    if (min == 4) {\n        res.push_back(\"Four\");\n    }\n    if (min ==\
    \ 5) {\n        res.push_back(\"Five\");\n    }\n    if (min == 6) {\n       \
    \ res.push_back(\"Six\");\n    }\n    if (min == 7) {\n        res.push_back(\"\
    Seven\");\n    }\n    if (min == 8) {\n        res.push_back(\"Eight\");\n   \
    \ }\n    if (min == 9) {\n        res.push_back(\"Nine\");\n    }\n    if (rem\
    \ == 1) {\n        res.push_back(\"One\");\n    }\n    if (rem == 2) {\n     \
    \   res.push_back(\"Two\");\n    }\n    if (rem == 3) {\n        res.push_back(\"\
    Three\");\n    }\n    if (rem == 4) {\n        res.push_back(\"Four\");\n    }\n\
    \    if (rem == 5) {\n        res.push_back(\"Five\");\n    }\n    if (rem ==\
    \ 6) {\n        res.push_back(\"Six\");\n    }\n    if (rem == 7) {\n        res.push_back(\"\
    Seven\");\n    }\n    if (rem == 8) {\n        res.push_back(\"Eight\");\n   \
    \ }\n    if (rem == 9) {\n        res.push_back(\"Nine\");\n    }\n    if (mid\
    \ == 1) {\n        res.push_back(\"One\");\n    }\n    if (mid == 2) {\n     \
    \   res.push_back(\"Two\");\n    }\n    if (mid == 3) {\n        res.push_back(\"\
    Three\");\n    }\n    if (mid == 4) {\n        res.push_back(\"Four\");\n    }\n\
    \    if (mid == 5) {\n        res.push_back(\"Five\");\n    }\n    if (mid ==\
    \ 6) {\n        res.push_back(\"Six\");\n    }\n    if (mid == 7) {\n        res.push_back(\"\
    Seven\");\n    }\n    if (mid == 8) {\n        res.push_back(\"Eight\");\n   \
    \ }\n    if (mid == 9) {\n        res.push_back(\"Nine\");\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp_t7091zm: /tmp/tmp_t7091zm.cpp:107: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long l = arr[0];\n    long\
    \ r = arr[0];\n    for (size_t i = 1; i < arr.size(); i++) {\n        l = arr[i];\n\
    \        r = arr[i];\n        if (l > 9) {\n            l = l - 10;\n        }\n\
    \        if (r > 9) {\n            r = r - 10;\n        }\n        if (l < 1 &&\
    \ r < 1) {\n            continue;\n        }\n        if (l > r) {\n         \
    \   std::swap(l, r);\n        }\n        ans.push_back(to_string(l));\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpei_ptvp9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpei_ptvp9.cpp:35:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   35 |         ans.push_back(to_string(l));\n      |                     \
    \  ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpei_ptvp9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            if (curr == last)\
    \ res.push_back(std::to_string(curr));\n            else res.push_back(std::to_string(curr)\
    \ + \"-\" + std::to_string(last));\n            curr++;\n            last = i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpcdchm764: /tmp/tmpcdchm764.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty())\n        return ans;\n    if (arr.size() == 1)\n        return\
    \ ans;\n    long first = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\n\
    \        if (i < first || i > last)\n            continue;\n        last = i;\n\
    \    ans.push_back(to_string(first));\n    for (auto i : arr)\n        if (i <\
    \ first || i > last)\n            continue;\n        ans.push_back(to_string(last));\n\
    \    return ans;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdws7at0c.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpdws7at0c.cpp:24:16: error:\
    \ \u2018i\u2019 was not declared in this scope\n   24 |         last = i;\n  \
    \    |                ^\n/tmp/tmpdws7at0c.cpp:25:19: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     ans.push_back(to_string(first));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdws7at0c.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    long min = *std::min_element(arr.begin(), arr.end()); // find min value\n\
    \    long max = *std::max_element(arr.begin(), arr.end()); // find max value\n\
    \    long mid = (min + max) / 2;\n    std::vector<std::string> result;\n    for\
    \ (long i = min; i <= max; i++) {\n        if (arr.find(i) != arr.end()) result.push_back(names[i]);\n\
    \    }\n    for (long i = min; i <= max; i++) {\n        if (arr.find(i) == arr.end())\
    \ result.push_back(names[i]);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzhz20aai.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpzhz20aai.cpp:20:17: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   20 |         if (arr.find(i) != arr.end()) result.push_back(names[i]);\n\
    \      |                 ^~~~\n/tmp/tmpzhz20aai.cpp:20:56: error: \u2018names\u2019\
    \ was not declared in this scope\n   20 |         if (arr.find(i) != arr.end())\
    \ result.push_back(names[i]);\n      |                                       \
    \                 ^~~~~\n/tmp/tmpzhz20aai.cpp:23:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   23 |         if (arr.find(i)\
    \ == arr.end()) result.push_back(names[i]);\n      |                 ^~~~\n/tmp/tmpzhz20aai.cpp:23:56:\
    \ error: \u2018names\u2019 was not declared in this scope\n   23 |         if\
    \ (arr.find(i) == arr.end()) result.push_back(names[i]);\n      |            \
    \                                            ^~~~~\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7mme6s_o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp7mme6s_o.cpp:74:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   74 |\
    \ }\n      | ^\n/tmp/tmp7mme6s_o.cpp:74:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    long min = *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    std::vector<std::string> res;\n    for (long i = min; i <=\
    \ max; i++) {\n        long index = arr.size() - 1 - i;\n        std::string name\
    \ = std::to_string(index);\n        res.push_back(name);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpk_0l7y3x: /tmp/tmpk_0l7y3x.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long count = 0;\n    for (long i = min;\
    \ i <= max; i++) {\n        if (i == mid) count++;\n    }\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp4n3eboy8: /tmp/tmp4n3eboy8.cpp:72: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (arr[i] > max_len)\
    \ max_len = arr[i];\n        if (arr[i] < min_len) min_len = arr[i];\n    }\n\
    \    if (max_len == min_len) return std::vector<std::string>();\n    long mid\
    \ = max_len >> 1;\n    long mid2 = max_len >> 1;\n    long mid3 = max_len >> 1;\n\
    \    long mid4 = max_len >> 1;\n    long mid5 = max_len >> 1;\n    long mid6 =\
    \ max_len >> 1;\n    long mid7 = max_len >> 1;\n    long mid8 = max_len >> 1;\n\
    \    long mid9 = max_len >> 1;\n    long mid10 = max_len >> 1;\n    long mid11\
    \ = max_len >> 1;\n    long mid12 = max_len >> 1;\n    long mid13 = max_len >>\
    \ 1;\n    long mid14 = max_len >> 1;\n    long mid15 = max_len >> 1;\n    long\
    \ mid16 = max_len >> 1;\n    long mid17 = max_len >> 1;\n    long mid18 = max_len\
    \ >> 1;\n    long mid19 = max_len >> 1;\n    long mid20 = max_len >> 1;\n    long\
    \ mid21 = max_len >> 1;\n    long mid22 = max_len >> 1;\n    long mid23 = max_len\
    \ >> 1;\n    long mid24 = max_len >> 1;\n    long mid25 = max_len >> 1;\n    long\
    \ mid26 = max_len >> 1;\n    long mid27 = max_len >> 1;\n    long mid28 = max_len\
    \ >> 1;\n    long mid29 = max_len >> 1;\n    long mid30 = max_len >> 1;\n    long\
    \ mid31 = max_len >> 1;\n    long mid32 = max_len >> 1;\n    long mid33 = max_len\
    \ >> 1;\n    long mid34 = max_len >> 1;\n    long mid35 = max_len >> 1;\n    long\
    \ mid36 = max_len >> 1;\n    long mid37 = max_len >> 1;\n    long mid38 = max_len\
    \ >> 1;\n    long mid39 = max_len >> 1;\n    long mid40 = max_len >> 1;\n    long\
    \ mid41 = max_len >> 1;\n    long mid42 = max_len >> 1;\n    long mid43 = max_len\
    \ >> 1;\n    long mid44 = max_len >> 1;\n\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpntz9feq8: /tmp/tmpntz9feq8.cpp:73: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136025
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()); // get the max number\n    long min = *std::min_element(arr.begin(),\
    \ arr.end()); // get the min number\n    long mid = (max + min) / 2;\n    long\
    \ mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n  \
    \  long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 %\
    \ 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10\
    \ = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n   \
    \ long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid47 = mid23 % 10;\n    long \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn2gybfwq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpn2gybfwq.cpp:68:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   68 | }\n      | ^\n/tmp/tmpn2gybfwq.cpp:68:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   68 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        long num = arr[0];\n        if (num < 1 || num > 9) {\n            return\
    \ res;\n        }\n        res.push_back(\"One\");\n        res.push_back(\"Two\"\
    );\n        res.push_back(\"Three\");\n        res.push_back(\"Four\");\n    \
    \    res.push_back(\"Five\");\n        res.push_back(\"Six\");\n        res.push_back(\"\
    Seven\");\n        res.push_back(\"Eight\");\n        res.push_back(\"Nine\");\n\
    \        return res;\n    }\n    long num = arr[0];\n    long maxnum = 9 - num;\n\
    \    long minnum = num - 1;\n    long mid = maxnum / 2;\n    long left = minnum\
    \ - mid;\n    long right = maxnum - mid;\n    std::vector<std::string> leftres;\n\
    \    std::vector<std::string> rightres;\n    leftres = by_length(arr);\n    rightres\
    \ = by_length(arr);\n    std::vector<std::string> res;\n    res.push_back(\"One\"\
    );\n    res.push_back(\"Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"\
    Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"Six\");\n    res.push_back(\"\
    Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"Nine\");\n    std::vector<std::string>\
    \ leftres2;\n    std::vector<std::string> rightres2;\n    leftres2 = by_length(leftres);\n\
    \    rightres2 = by_length(rightres);\n    std::vector<std::string> res2;\n  \
    \  res2.push_back(\"One\");\n    res2.push_back(\"Two\");\n    res2.push_back(\"\
    Three\");\n    res2.push_back(\"Four\");\n    res2.push_back(\"Five\");\n    res2.push_back(\"\
    Six\");\n    res2.push_back(\"Seven\");\n    res2.push_back(\"Eight\");\n    res2.push_back(\"\
    Nine\");\n    std::vector<std::string> leftres3;\n    std::vector<std::string>\
    \ rightres3;\n    leftres3 = by_length(leftres2);\n    rightres3 = by_length(rightres2);\n\
    \    std::vector<std::string> res3;\n    res3.push_back(\"One\");\n    res3.push_back(\"\
    Two\");\n    res3.push_back(\"Three\");\n    res3.push_back(\"Four\");\n    res3.push_back(\"\
    Five\");\n    res3.push_back(\"Six\");\n    res3.push_back(\"Seven\");\n    res3.push_back(\"\
    Eight\");\n    res3.push_back(\"Nine\");\n    std::vector<std::string> leftres4;\n\
    \    std::vector<std::string> rightres\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp51y_gpb1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp51y_gpb1.cpp:44:30: error:\
    \ redeclaration of \u2018std::vector<std::__cxx11::basic_string<char> > res\u2019\
    \n   44 |     std::vector<std::string> res;\n      |                         \
    \     ^~~\n/tmp/tmp51y_gpb1.cpp:14:30: note: \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > res\u2019 previously declared here\n   14 |     std::vector<std::string> res;\n\
    \      |                              ^~~\n/tmp/tmp51y_gpb1.cpp:56:26: error:\
    \ could not convert \u2018leftres\u2019 from \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \ to \u2018vector<long int>\u2019\n   56 |     leftres2 = by_length(leftres);\n\
    \      |                          ^~~~~~~\n      |                          |\n\
    \      |                          vector<std::__cxx11::basic_string<char>>\n/tmp/tmp51y_gpb1.cpp:57:27:\
    \ error: could not convert \u2018rightres\u2019 from \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \ to \u2018vector<long int>\u2019\n   57 |     rightres2 = by_length(rightres);\n\
    \      |                           ^~~~~~~~\n      |                         \
    \  |\n      |                           vector<std::__cxx11::basic_string<char>>\n\
    /tmp/tmp51y_gpb1.cpp:70:26: error: could not convert \u2018leftres2\u2019 from\
    \ \u2018vector<std::__cxx11::basic_string<char>>\u2019 to \u2018vector<long int>\u2019\
    \n   70 |     leftres3 = by_length(leftres2);\n      |                       \
    \   ^~~~~~~~\n      |                          |\n      |                    \
    \      vector<std::__cxx11::basic_string<char>>\n/tmp/tmp51y_gpb1.cpp:71:27: error:\
    \ could not convert \u2018rightres2\u2019 from \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \ to \u2018vector<long int>\u2019\n   71 |     rightres3 = by_length(rightres2);\n\
    \      |                           ^~~~~~~~~\n      |                        \
    \   |\n      |                           vector<std::__cxx11::basic_string<char>>\n\
    /tmp/tmp51y_gpb1.cpp:84:1: error: expected initializer before \u2018}\u2019 token\n\
    \   84 | }\n      | ^\n/tmp/tmp51y_gpb1.cpp:84:1: warning: control reaches end\
    \ of non-void "
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long\
    \ len = arr.size();\n    long cnt = 0;\n    for (long i = 1; i < len; i++) {\n\
    \        if (arr[i] > cur) {\n            cnt += 1;\n        }\n        cur =\
    \ arr[i];\n    }\n    if (cnt > 0) {\n        std::vector<std::string> tmp;\n\
    \        for (long i = 0; i < cnt; i++) {\n            tmp.push_back(\"One\");\n\
    \        }\n        tmp.push_back(\"One\");\n        for (long i = cnt; i < len;\
    \ i++) {\n            tmp.push_back(\"Two\");\n        }\n        tmp.push_back(\"\
    Two\");\n        for (long i = cnt + 1; i < len; i++) {\n            tmp.push_back(\"\
    Three\");\n        }\n        tmp.push_back(\"Three\");\n        for (long i =\
    \ cnt + 2; i < len; i++) {\n            tmp.push_back(\"Four\");\n        }\n\
    \        tmp.push_back(\"Four\");\n        for (long i = cnt + 3; i < len; i++)\
    \ {\n            tmp.push_back(\"Five\");\n        }\n        tmp.push_back(\"\
    Five\");\n        for (long i = cnt + 4; i < len; i++) {\n            tmp.push_back(\"\
    Six\");\n        }\n        tmp.push_back(\"Six\");\n        for (long i = cnt\
    \ + 5; i < len; i++) {\n            tmp.push_back(\"Seven\");\n        }\n   \
    \     tmp.push_back(\"Seven\");\n        for (long i = cnt + 6; i < len; i++)\
    \ {\n            tmp.push_back(\"Eight\");\n        }\n        tmp.push_back(\"\
    Eight\");\n        for (long i = cnt + 7; i < len; i++) {\n            tmp.push_back(\"\
    Nine\");\n        }\n        tmp.push_back(\"Nine\");\n        for (long i = cnt\
    \ + 8; i < len; i++) {\n            tmp.push_back(\"Ten\");\n        }\n     \
    \   tmp.push_back(\"Ten\");\n        for (long i = cnt + 9; i < len; i++) {\n\
    \            tmp.push_back(\"Eleven\");\n        }\n        tmp.push_back(\"Eleven\"\
    );\n        for (long i = cnt + 10; i < len; i++) {\n            tmp.push_back(\"\
    Twelve\");\n        }\n        tmp.push_back(\"Twelve\");\n        for (long i\
    \ = cnt + 11; i < len; i++) {\n            tmp.push_back(\"Thirteen\");\n    \
    \    }\n        tmp.push_back(\"Thirteen\");\n        for (long i = cnt + 12;\
    \ i < len; i++) {\n            tmp.push_back(\"Fourteen\");\n        }\n     \
    \   tmp.push_back(\"Fourteen\");\n        for (long i = cnt + 13; i < len; i++)\
    \ {\n            tmp.push_back(\"Fifteen\");\n        }\n        tmp.push_back(\"\
    Fifteen\");\n        for (long i = cnt + 14; i < len; i++) {\n            tmp.push_back(\"\
    Sixteen\");\n        }\n        tmp.push_back(\"Sixteen\");\n        for (long\
    \ i = cnt + 15; i < len; i++) {\n            tmp.push_back(\"Seventeen\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6bki7jx3.cpp:94:27: warning: missing terminating \" character\n\
    \   94 |             tmp.push_back(\"Seventeen\n      |                      \
    \     ^\n/tmp/tmp6bki7jx3.cpp:94:27: error: missing terminating \" character\n\
    \   94 |             tmp.push_back(\"Seventeen\n      |                      \
    \     ^~~~~~~~~~\n/tmp/tmp6bki7jx3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6bki7jx3.cpp:95:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   95 | }\n      | ^\n\
    /tmp/tmp6bki7jx3.cpp:96:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   96 | int main() {\n      |            ^\n/tmp/tmp6bki7jx3.cpp:103:1:\
    \ error: expected \u2018}\u2019 at end of input\n  103 | }\n      | ^\n/tmp/tmp6bki7jx3.cpp:27:18:\
    \ note: to match this \u2018{\u2019\n   27 |     if (cnt > 0) {\n      |     \
    \             ^\n/tmp/tmp6bki7jx3.cpp:103:1: error: expected \u2018}\u2019 at\
    \ end of input\n  103 | }\n      | ^\n/tmp/tmp6bki7jx3.cpp:13:59: note: to match\
    \ this \u2018{\u2019\n   13 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp6bki7jx3.cpp:103:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  103 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == curr) continue;\n        if (i ==\
    \ prev) {\n            res.push_back(std::to_string(curr));\n        } else {\n\
    \            res.push_back(std::to_string(prev));\n        }\n        prev = i;\n\
    \        curr = i;\n    }\n    res.push_back(std::to_string(curr));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpq7b0zjaw: /tmp/tmpq7b0zjaw.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    for (auto i :\
    \ arr) {\n        if (i <= 9) {\n            res.push_back(by_length({cur, i,\
    \ 0}));\n            cur = i;\n        } else {\n            res.push_back(by_length({cur,\
    \ i - 10, i - 10}));\n            cur = i;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedjgaeqq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpedjgaeqq.cpp:19:49: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   19 |\
    \             res.push_back(by_length({cur, i, 0}));\n      |                \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpedjgaeqq.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::bas"
  stdout: ''
  timestamp: 1660136022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) {\n        return res;\n    }\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 /\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 / 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 /\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 / 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplm0fzfov.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmplm0fzfov.cpp:69:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmplm0fzfov.cpp:69:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   69 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(cur));\n\
    \            cur = i;\n        }\n        last = i;\n    }\n    res.push_back(to_string(cur));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpglzsqd_v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpglzsqd_v.cpp:20:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             res.push_back(to_string(cur));\n      |               \
    \            ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpglzsqd_v.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpglzsqd_v.cpp:25:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     res.push_back(to_string(cur));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpglzsqd_v.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   "
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ < min_len) min_len = arr[i];\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetsmjvbm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpetsmjvbm.cpp:22:10: error:\
    \ redeclaration of \u2018long int min_len\u2019\n   22 |     long min_len = 9000000000;\n\
    \      |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:17:23: note: \u2018long int min_len\u2019\
    \ previously declared here\n   17 |     long max_len = 0, min_len = 9000000000;\n\
    \      |                       ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:26:10: error: redeclaration\
    \ of \u2018long int max_len\u2019\n   26 |     long max_len = 9000000000;\n  \
    \    |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:17:10: note: \u2018long int max_len\u2019\
    \ previously declared here\n   17 |     long max_len = 0, min_len = 9000000000;\n\
    \      |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:30:10: error: redeclaration of\
    \ \u2018long int min_len\u2019\n   30 |     long min_len = 9000000000;\n     \
    \ |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:17:23: note: \u2018long int min_len\u2019\
    \ previously declared here\n   17 |     long max_len = 0, min_len = 9000000000;\n\
    \      |                       ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:34:10: error: redeclaration\
    \ of \u2018long int max_len\u2019\n   34 |     long max_len = 9000000000;\n  \
    \    |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:17:10: note: \u2018long int max_len\u2019\
    \ previously declared here\n   17 |     long max_len = 0, min_len = 9000000000;\n\
    \      |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:38:10: error: redeclaration of\
    \ \u2018long int min_len\u2019\n   38 |     long min_len = 9000000000;\n     \
    \ |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:17:23: note: \u2018long int min_len\u2019\
    \ previously declared here\n   17 |     long max_len = 0, min_len = 9000000000;\n\
    \      |                       ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:42:10: error: redeclaration\
    \ of \u2018long int max_len\u2019\n   42 |     long max_len = 9000000000;\n  \
    \    |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:17:10: note: \u2018long int max_len\u2019\
    \ previously declared here\n   17 |     long max_len = 0, min_len = 9000000000;\n\
    \      |          ^~~~~~~\n/tmp/tmpetsmjvbm.cpp:46:10: error: redeclaration of\
    \ \u2018long int min_len\u2019\n   46 |     long min_len "
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \       continue;\n        }\n        if (cur > 9) {\n            std::swap(cur,\
    \ last);\n            ++cur;\n        }\n        res.push_back(to_string(last));\n\
    \        last = i;\n    }\n    res.push_back(to_string(last));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7swl3hmp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp7swl3hmp.cpp:27:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |         res.push_back(to_string(last));\n      |                  \
    \     ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp7swl3hmp.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp7swl3hmp.cpp:30:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |     res.push_back(to_string(last));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7swl3hmp.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string("
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3f6tohz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpq3f6tohz.cpp:74:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   74 |\
    \ }\n      | ^\n/tmp/tmpq3f6tohz.cpp:74:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return {};\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] > curr) {\n        \
    \    res.push_back(by_length(arr[i:]));\n            curr = arr[i];\n        }\n\
    \    }\n    res.push_back(by_length(arr));\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjehvlsym.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjehvlsym.cpp:21:42: error:\
    \ expected \u2018]\u2019 before \u2018:\u2019 token\n   21 |             res.push_back(by_length(arr[i:]));\n\
    \      |                                          ^\n      |                 \
    \                         ]\n/tmp/tmpjehvlsym.cpp:21:42: error: expected \u2018\
    )\u2019 before \u2018:\u2019 token\n   21 |             res.push_back(by_length(arr[i:]));\n\
    \      |                                    ~     ^\n      |                 \
    \                         )\n/tmp/tmpjehvlsym.cpp:25:33: error: no matching function\
    \ for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019\n   25 |     res.push_back(by_length(arr));\n      |              \
    \                   ^\nIn file included from /usr/include/c++/9/vector:67,\n \
    \                from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjehvlsym.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [w"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long length = max - min + 1;\n\
    \    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid * 2;\n\
    \    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n\
    \    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n\
    \    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long mid12 = mid *\
    \ 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n    long mid15\
    \ = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid * 16;\n    long\
    \ mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20 = mid * 19;\n\
    \    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long mid23 = mid\
    \ * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n    long mid26\
    \ = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid * 27;\n    long\
    \ mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31 = mid * 30;\n\
    \    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long mid34 = mid\
    \ * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n    long mid37\
    \ = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid * 38;\n    long\
    \ mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42 = mid * 41;\n\
    \    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long mid45 = mid\
    \ * 44;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdaumg8z.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpzdaumg8z.cpp:75:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmpzdaumg8z.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = std::max(arr.begin(),\
    \ arr.end()) + 1;\n    long min = std::min(arr.begin(), arr.end()) - 1;\n    long\
    \ mid = max / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long\
    \ mid4 = mid3 / 2;\n    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n   \
    \ long mid7 = mid6 / 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n\
    \    long mid10 = mid9 / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11\
    \ / 2;\n    long mid13 = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15\
    \ = mid14 / 2;\n    long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n   \
    \ long mid18 = mid17 / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19\
    \ / 2;\n    long mid21 = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23\
    \ = mid22 / 2;\n    long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n   \
    \ long mid26 = mid25 / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27\
    \ / 2;\n    long mid29 = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31\
    \ = mid30 / 2;\n    long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n   \
    \ long mid34 = mid33 / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35\
    \ / 2;\n    long mid37 = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39\
    \ = mid38 / 2;\n    long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n   \
    \ long mid42 = mid41 / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43\
    \ / 2;\n    long mid45 = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47\
    \ = mid46 / 2;\n    long mid48 = mid47 / 2;\n    long mid\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1jeluauc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp1jeluauc.cpp:18:49: error:\
    \ cannot convert \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018long int\u2019 in initialization\n   18 |     long max\
    \ = std::max(arr.begin(), arr.end()) + 1;\n      |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \      |                                                 |\n      |          \
    \                                       __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\n/tmp/tmp1jeluauc.cpp:19:49: error: cannot convert \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in initialization\n   19 |     long min = std::min(arr.begin(),\
    \ arr.end()) - 1;\n      |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \      |                                                 |\n      |          \
    \                                       __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\n/tmp/tmp1jeluauc.cpp:69:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmp1jeluauc.cpp:69:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   69 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovcijjrs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpovcijjrs.cpp:75:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   75 | }\n      | ^\n\
    /tmp/tmpovcijjrs.cpp:75:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   75 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(last));\n\
    \            last += cur;\n            cur = i;\n        }\n    }\n    res.push_back(to_string(last));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2uvlstnd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2uvlstnd.cpp:20:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             res.push_back(to_string(last));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2uvlstnd.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp2uvlstnd.cpp:25:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     res.push_back(to_string(last));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2uvlstnd.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ {};\n    std::vector<std::string> ans;\n    long cur = arr[0];\n    long len\
    \ = arr.size();\n    for (long i = 1; i < len; i++) {\n        if (cur < arr[i])\
    \ {\n            ans.push_back(\"One\");\n            cur = arr[i];\n        }\
    \ else if (cur > arr[i]) {\n            ans.push_back(\"Nine\");\n           \
    \ cur = arr[i];\n        } else {\n            ans.push_back(\"Two\");\n     \
    \       cur = arr[i];\n        }\n    }\n    ans.push_back(\"One\");\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpf3wychi8: /tmp/tmpf3wychi8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136024
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max = (n>9)\
    \ ? 9 : n;\n    long min = (n>9) ? 0 : 1;\n    long mid = (n>9) ? 9 : n/2;\n \
    \   long mid1 = (n>9) ? 0 : n/2;\n    long mid2 = (n>9) ? 9 : n/2;\n    long mid3\
    \ = (n>9) ? 18 : n/2;\n    long mid4 = (n>9) ? 27 : n/2;\n    long mid5 = (n>9)\
    \ ? 36 : n/2;\n    long mid6 = (n>9) ? 45 : n/2;\n    long mid7 = (n>9) ? 54 :\
    \ n/2;\n    long mid8 = (n>9) ? 63 : n/2;\n    long mid9 = (n>9) ? 72 : n/2;\n\
    \    long mid10 = (n>9) ? 81 : n/2;\n    long mid11 = (n>9) ? 90 : n/2;\n    long\
    \ mid12 = (n>9) ? 99 : n/2;\n    long mid13 = (n>9) ? 108 : n/2;\n    long mid14\
    \ = (n>9) ? 117 : n/2;\n    long mid15 = (n>9) ? 126 : n/2;\n    long mid16 =\
    \ (n>9) ? 135 : n/2;\n    long mid17 = (n>9) ? 144 : n/2;\n    long mid18 = (n>9)\
    \ ? 153 : n/2;\n    long mid19 = (n>9) ? 162 : n/2;\n    long mid20 = (n>9) ?\
    \ 171 : n/2;\n    long mid21 = (n>9) ? 180 : n/2;\n    long mid22 = (n>9) ? 189\
    \ : n/2;\n    long mid23 = (n>9) ? 198 : n/2;\n    long mid24 = (n>9) ? 207 :\
    \ n/2;\n    long mid25 = (n>9) ? 216 : n/2;\n    long mid26 = (n>9) ? 225 : n/2;\n\
    \    long mid27 = (n>9) ? 234 : n/2;\n    long mid28 = (n>9) ? 243 : n/2;\n  \
    \  long mid29 = (n>9) ? 252 : n/2;\n    long mid30 = (n>9) ? 261 : n/2;\n    long\
    \ mid31 = (n>9) ? 270 : n/2;\n    long mid32 = (n>9) ? 279 : n/2;\n    long mid33\
    \ = (n>\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7vawblh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpo7vawblh.cpp:53:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n\
    /tmp/tmpo7vawblh.cpp:52:21: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   52 |     long mid33 = (n>\n      |                  ~  ^\n      |\
    \                     )\n   53 | }\n      | ~                    \n/tmp/tmpo7vawblh.cpp:53:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i >= min && i <= max) {\n            res.push_back(\"One\");\n  \
    \      } else if (i < min) {\n            res.push_back(\"Two\");\n        } else\
    \ if (i > max) {\n            res.push_back(\"Three\");\n        } else {\n  \
    \          res.push_back(\"Four\");\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpm8d4c0sh: /tmp/tmpm8d4c0sh.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // get the smallest number\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // get the largest number\n\
    \  long mid = (min + max) / 2;\n  std::vector<std::string> res;\n  for (long i\
    \ = min; i <= max; i++) {\n    if (i >= 1 && i <= 9) {\n      res.push_back(\"\
    One\");\n    } else if (i >= 10 && i <= 99) {\n      res.push_back(\"Two\");\n\
    \    } else if (i >= 100 && i <= 999) {\n      res.push_back(\"Three\");\n   \
    \ } else if (i >= 1000 && i <= 9999) {\n      res.push_back(\"Four\");\n    }\
    \ else if (i >= 10000 && i <= 99999) {\n      res.push_back(\"Five\");\n    }\
    \ else if (i >= 100000 && i <= 999999) {\n      res.push_back(\"Six\");\n    }\
    \ else if (i >= 1000000 && i <= 9999999) {\n      res.push_back(\"Seven\");\n\
    \    } else if (i >= 10000000 && i <= 99999999) {\n      res.push_back(\"Eight\"\
    );\n    } else if (i >= 100000000 && i <= 999999999) {\n      res.push_back(\"\
    Nine\");\n    } else if (i == mid) {\n      res.push_back(\"One\");\n    } else\
    \ {\n      res.push_back(\"Zero\");\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpey1c4nzw: /tmp/tmpey1c4nzw.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \       continue;\n        }\n        if (cur > 9) {\n            long tmp = cur;\n\
    \            cur = last;\n            last = tmp;\n        }\n        res.push_back(to_string(cur));\n\
    \        cur = i;\n    }\n    res.push_back(to_string(cur));\n    res.push_back(to_string(last));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ut93991.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2ut93991.cpp:28:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |         res.push_back(to_string(cur));\n      |                   \
    \    ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2ut93991.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp2ut93991.cpp:31:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   31 |     res.push_back(to_string(cur));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2ut93991.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(lo"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    if (min == max) {\n        res.push_back(\"One\");\n   \
    \     return res;\n    }\n    long mid = min + (max - min) / 2;\n    std::vector<std::string>\
    \ left, big;\n    by_length(arr, left, mid);\n    by_length(arr, big, mid);\n\
    \    std::vector<std::string> right;\n    by_length(arr, big, max);\n    res.insert(res.end(),\
    \ left.begin(), left.end());\n    res.insert(res.end(), right.begin(), right.end());\n\
    \    res.insert(res.end(), big.begin(), big.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpasokd8qq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpasokd8qq.cpp:34:29: error:\
    \ too many arguments to function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019\n   34 |     by_length(arr, left, mid);\n\
    \      |                             ^\n/tmp/tmpasokd8qq.cpp:13:26: note: declared\
    \ here\n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n\
    \      |                          ^~~~~~~~~\n/tmp/tmpasokd8qq.cpp:35:28: error:\
    \ too many arguments to function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019\n   35 |     by_length(arr, big, mid);\n\
    \      |                            ^\n/tmp/tmpasokd8qq.cpp:13:26: note: declared\
    \ here\n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n\
    \      |                          ^~~~~~~~~\n/tmp/tmpasokd8qq.cpp:37:28: error:\
    \ too many arguments to function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019\n   37 |     by_length(arr, big, max);\n\
    \      |                            ^\n/tmp/tmpasokd8qq.cpp:13:26: note: declared\
    \ here\n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n\
    \      |                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] > cur) {\n         \
    \   res.push_back(to_string(cur));\n            cur = arr[i];\n        } else\
    \ {\n            res.push_back(to_string(arr[i]));\n        }\n    }\n    res.push_back(to_string(cur));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk8mv11mz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpk8mv11mz.cpp:20:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             res.push_back(to_string(cur));\n      |               \
    \            ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk8mv11mz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpk8mv11mz.cpp:23:27: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |             res.push_back(to_string(arr[i]));\n      |            \
    \               ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk8mv11mz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i < min || i > max) {\n            continue;\n        }\n       \
    \ res.push_back(by_length(std::vector<long>{i, i + 1, i + 2, i + 3, i + 4, i +\
    \ 5, i + 6, i + 7, i + 8}));\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9jnxsv_e.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp9jnxsv_e.cpp:24:110: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   24 |\
    \         res.push_back(by_length(std::vector<long>{i, i + 1, i + 2, i + 3, i\
    \ + 4, i + 5, i + 6, i + 7, i + 8}));\n      |                               \
    \                                                                            \
    \   ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9jnxsv_e.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no kn"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max = (n\
    \ / 10) + 1;\n    long min = (n % 10) + 1;\n    for (long i = 0; i < max; i++)\
    \ {\n        long count = 0;\n        for (long j = 0; j < n; j++) {\n       \
    \     if (arr[j] >= min && arr[j] <= max) {\n                count++;\n      \
    \      }\n        }\n        if (count == 0) {\n            res.push_back(\"\"\
    );\n        } else {\n            std::string num = \"\";\n            for (long\
    \ j = 0; j < n; j++) {\n                if (arr[j] >= min && arr[j] <= max) {\n\
    \                    num += to_string(arr[j]);\n                }\n          \
    \  }\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpozwt3l8o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpozwt3l8o.cpp:32:28: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   32 |                     num += to_string(arr[j]);\n      |            \
    \                ^~~~~~~~~\n      |                            std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpozwt3l8o.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    long\
    \ long n = arr.size();\n    if (n == 0) return res;\n    long long max = (long\
    \ long)pow(10, 9) - 1;\n    long long min = (long long)pow(10, 9) - 1;\n    long\
    \ long mid = max / 2;\n    long long mid2 = min / 2;\n    long long mid3 = mid\
    \ / 10;\n    long long mid4 = mid3 / 10;\n    long long mid5 = mid4 / 10;\n  \
    \  long long mid6 = mid5 / 10;\n    long long mid7 = mid6 / 10;\n    long long\
    \ mid8 = mid7 / 10;\n    long long mid9 = mid8 / 10;\n    long long mid10 = mid9\
    \ / 10;\n    long long mid11 = mid10 / 10;\n    long long mid12 = mid11 / 10;\n\
    \    long long mid13 = mid12 / 10;\n    long long mid14 = mid13 / 10;\n    long\
    \ long mid15 = mid14 / 10;\n    long long mid16 = mid15 / 10;\n    long long mid17\
    \ = mid16 / 10;\n    long long mid18 = mid17 / 10;\n    long long mid19 = mid18\
    \ / 10;\n    long long mid20 = mid19 / 10;\n    long long mid21 = mid20 / 10;\n\
    \    long long mid22 = mid21 / 10;\n    long long mid23 = mid22 / 10;\n    long\
    \ long mid24 = mid23 / 10;\n    long long mid25 = mid24 / 10;\n    long long mid26\
    \ = mid25 / 10;\n    long long mid27 = mid26 / 10;\n    long long mid28 = mid27\
    \ / 10;\n    long long mid29 = mid28 / 10;\n    long long mid30 = mid29 / 10;\n\
    \    long long mid31 = mid30 / 10;\n    long long mid32 = mid31 / 10;\n    long\
    \ long mid33 = mid32 / 10;\n    long long mid34 = mid33 / 10;\n    long long mid35\
    \ = mid34 / 10;\n    long long mid36 = mid35 / 10;\n    long long mid37 = mid36\
    \ / 10;\n    long long mid38 = mid37 / 10;\n    long long mid39 = mid38 / 10;\n\
    \    long long mid40 = mid39 / 10;\n    long long mid41 = mid40 / 10;\n    long\
    \ long mid42 = mid41 / 10;\n    long long mid43 = mid42 / 10;\n    long long mid44\
    \ = mid43 / \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphhfmn62p.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphhfmn62p.cpp:63:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n\
    /tmp/tmphhfmn62p.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min == max) {\n        ans.push_back(\"One\");\n        return ans;\n  \
    \  }\n    long mid = (min + max) / 2;\n    std::vector<std::string> left  = by_length(arr);\n\
    \    std::vector<std::string> right = by_length(arr);\n    left.erase(std::remove(left.begin(),\
    \ left.end(), mid), left.end());\n    right.erase(std::remove(right.begin(), right.end(),\
    \ mid), right.end());\n    std::vector<std::string> result;\n    for (auto i :\
    \ left) {\n        result.push_back(\"One\");\n    }\n    for (auto i : right)\
    \ {\n        result.push_back(\"Two\");\n    }\n    for (auto i : arr) {\n   \
    \     if (i < mid) {\n            result.push_back(\"One\");\n        } else if\
    \ (i > mid) {\n            result.push_back(\"Two\");\n        } else {\n    \
    \        result.push_back(\"Three\");\n        }\n    }\n    return ans.insert(ans.end(),\
    \ result.begin(), result.end());\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuidmr74a.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpuidmr74a.cpp:45:22: error:\
    \ could not convert \u2018ans.std::vector<std::__cxx11::basic_string<char> >::insert<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > > >(__gnu_cxx::__normal_iterator<const\
    \ std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >(ans.std::vector<std::__cxx11::basic_string<char> >::end()), result.std::vector<std::__cxx11::basic_string<char>\
    \ >::begin(), result.std::vector<std::__cxx11::basic_string<char> >::end())\u2019\
    \ from \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019} to \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\n \
    \  45 |     return ans.insert(ans.end(), result.begin(), result.end());\n    \
    \  |            ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      | \
    \                     |\n      |                      std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpuidmr74a.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Value = const long int]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:875:13:   required from \u2018_ForwardIterator\
    \ std::__remove_if(_ForwardIterator, _ForwardIterator, _Predicate) [with _ForwardIterat"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    while (len) {\n        while (cur < 9 && cur < arr[len - 1]) cur *= 10;\n\
    \        res.push_back(by_digit(cur));\n        cur /= 10;\n        len--;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmjdzf7w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpkmjdzf7w.cpp:20:23: error:\
    \ \u2018by_digit\u2019 was not declared in this scope\n   20 |         res.push_back(by_digit(cur));\n\
    \      |                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (i < 1 || i > 9) continue;\n        if (i\
    \ == min) res.push_back(\"One\");\n        else if (i == max) res.push_back(\"\
    Nine\");\n        else res.push_back(\"Two\"+ std::to_string(i));\n    }\n   \
    \ std::reverse(std::begin(res), std::end(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpxmniy3o6: /tmp/tmpxmniy3o6.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid /\
    \ 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 =\
    \ mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbsc5n0e1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbsc5n0e1.cpp:75:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmpbsc5n0e1.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return {};\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            prev = i;\n  \
    \      } else {\n            long next = cur;\n            if (next > 9)\n   \
    \             next -= 10;\n            res.push_back(to_string(prev) + to_string(next));\n\
    \            prev = i;\n            cur = next;\n        }\n    }\n    res.push_back(to_string(prev)\
    \ + to_string(cur));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp814dje8h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp814dje8h.cpp:26:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |             res.push_back(to_string(prev) + to_string(next));\n   \
    \   |                           ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp814dje8h.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp814dje8h.cpp:31:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   31 |     res.push_back(to_string(prev) + to_string(cur));\n      |     \
    \              ^~~~~~~~~\n      |                   std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp814dje8h.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ std::vector<std::string>();\n    std::vector<std::string> res;\n    long max\
    \ = *std::max_element(arr.begin(), arr.end()); // max number in the array\n  \
    \  long min = *std::min_element(arr.begin(), arr.end()); // min number in the\
    \ array\n    long mid = (max + min) / 2;\n    long mid2 = mid / 10;\n    long\
    \ mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5 = mid % 100;\n \
    \   long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n    long mid8 = mid\
    \ / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid / 1000000;\n\
    \    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n    long mid13\
    \ = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long mid15 = mid\
    \ % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17 = mid % 10000000000;\n\
    \    long mid18 = mid / 100000000000;\n    long mid19 = mid % 100000000000;\n\
    \    long mid20 = mid / 10000000000000;\n    long mid21 = mid % 10000000000000;\n\
    \    long mid22 = mid / 100000000000000;\n    long mid23 = mid % 100000000000000;\n\
    \    long mid24 = mid / 1000000000000000;\n    long mid25 = mid % 1000000000000000;\n\
    \    long mid26 = mid / 100000000000000000;\n    long mid27 = mid % 100000000000000000;\n\
    \    long mid28 = mid / 1000000000000000000;\n    long mid29 = mid % 1000000000000000000;\n\
    \    long mid30 = mid / 1000000000000000000;\n    long mid31 = mid % 1000000000000000000;\n\
    \    long mid32 = mid / 10000000000000000000;\n    long mid33 = mid % 10000000000000000000;\n\
    \    long mid34 = mid / 100000000000000000000;\n    long mid35 = mid % 100000000000000000000;\n\
    \    long mid36 = mid / 10000000000000000000000;\n    long mid37 = mid % 10000000000000000000000;\n\
    \    long mid38 = mid / 100000000000000000000000;\n    long mid39 = mid % 100000000000000000000000;\n\
    \    long mid40 = mid / 10000000000000000000000000;\n    long mid41 = mid % 10000000000000000000000000;\n\
    \    long mid42 = mid / \n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpea8zmdss.cpp:50:24: warning: integer constant is so large that\
    \ it is unsigned\n   50 |     long mid32 = mid / 10000000000000000000;\n     \
    \ |                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpea8zmdss.cpp:51:24: warning:\
    \ integer constant is so large that it is unsigned\n   51 |     long mid33 = mid\
    \ % 10000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpea8zmdss.cpp:52:24: warning: integer constant is too large for its type\n\
    \   52 |     long mid34 = mid / 100000000000000000000;\n      |              \
    \          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpea8zmdss.cpp:53:24: warning: integer\
    \ constant is too large for its type\n   53 |     long mid35 = mid % 100000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpea8zmdss.cpp:54:24:\
    \ warning: integer constant is too large for its type\n   54 |     long mid36\
    \ = mid / 10000000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpea8zmdss.cpp:55:24: warning: integer constant is too large for its type\n\
    \   55 |     long mid37 = mid % 10000000000000000000000;\n      |            \
    \            ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpea8zmdss.cpp:56:24: warning: integer\
    \ constant is too large for its type\n   56 |     long mid38 = mid / 100000000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpea8zmdss.cpp:57:24:\
    \ warning: integer constant is too large for its type\n   57 |     long mid39\
    \ = mid % 100000000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpea8zmdss.cpp:58:24: warning: integer constant is too large for its type\n\
    \   58 |     long mid40 = mid / 10000000000000000000000000;\n      |         \
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpea8zmdss.cpp:59:24: warning:\
    \ integer constant is too large for its type\n   59 |     long mid41 = mid % 10000000000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpea8zmdss.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long len\
    \ = arr.size();\n    long cur_index = 0;\n    while (cur_index < len) {\n    \
    \    while (cur < 9) {\n            long tmp = arr[cur_index];\n            arr[cur_index]\
    \ = cur;\n            cur = tmp;\n            cur_index++;\n        }\n      \
    \  res.push_back(arr[cur_index]);\n        cur++;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn2qj9r01.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpn2qj9r01.cpp:28:37: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   28 |         res.push_back(arr[cur_index]);\n      |                    \
    \                 ^\nIn file included from /usr/include/c++/9/vector:67,\n   \
    \              from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpn2qj9r01.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::al"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n  \
    \  long right = mid;\n    long mid2 = mid;\n    while (left < max) {\n       \
    \ mid2 = mid + 1;\n        while (right < max) {\n            if (arr[right] <\
    \ mid2) {\n                mid2 = mid + 1;\n            } else {\n           \
    \     res.push_back(arr[right]);\n                right++;\n            }\n  \
    \      }\n        mid = mid2;\n        left = mid;\n        right = mid;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapzf8614.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpapzf8614.cpp:37:41: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   37 |                 res.push_back(arr[right]);\n      |                \
    \                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpapzf8614.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = *std::min_element(arr.begin(), arr.end()); // get min value\n\
    \    long max = *std::max_element(arr.begin(), arr.end()); // get max value\n\
    \    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid\
    \ % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6\
    \ = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long\
    \ mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n\
    \    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7\
    \ / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17\
    \ = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n   \
    \ long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11\
    \ / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long\
    \ mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 %\
    \ 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30\
    \ = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n\
    \    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 =\
    \ mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n  \
    \  long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20\
    \ / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long\
    \ mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 %\
    \ 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 % 10;\n    long mid48\
    \ = mid24 / \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfpmf15cd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpfpmf15cd.cpp:66:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   66 | }\n      | ^\n\
    /tmp/tmpfpmf15cd.cpp:66:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    long\
    \ n = arr.size();\n    if (n == 0)\n        return ans;\n    long max_len = 0,\
    \ min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > 9)\n\
    \            ans.push_back(\"Nine\");\n        else if (arr[i] > 0)\n        \
    \    ans.push_back(\"One\");\n        else if (arr[i] < 0)\n            ans.push_back(\"\
    Nine\");\n        else if (arr[i] < 1)\n            ans.push_back(\"Zero\");\n\
    \        else if (arr[i] < 10)\n            ans.push_back(\"Ten\");\n        else\
    \ if (arr[i] < 100)\n            ans.push_back(\"Eleven\");\n        else if (arr[i]\
    \ < 1000)\n            ans.push_back(\"Twelve\");\n        else if (arr[i] < 10000)\n\
    \            ans.push_back(\"Thirteen\");\n        else if (arr[i] < 100000)\n\
    \            ans.push_back(\"Fourteen\");\n        else if (arr[i] < 1000000)\n\
    \            ans.push_back(\"Fifteen\");\n        else if (arr[i] < 10000000)\n\
    \            ans.push_back(\"Sixteen\");\n        else if (arr[i] < 100000000)\n\
    \            ans.push_back(\"Seventeen\");\n        else if (arr[i] < 1000000000)\n\
    \            ans.push_back(\"Eighteen\");\n        else if (arr[i] < 10000000000)\n\
    \            ans.push_back(\"Nineteen\");\n        else\n            ans.push_back(\"\
    Zero\");\n        if (arr[i] > max_len)\n            max_len = arr[i];\n     \
    \   if (arr[i] < min_len)\n            min_len = arr[i];\n    }\n    long diff\
    \ = max_len - min_len;\n    for (long i = 0; i < n; i++) {\n        long val =\
    \ arr[i] - min_len;\n        long pos = val / diff;\n        ans[pos] += \" \"\
    ;\n        ans[pos] += (val % diff);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpjnyh1gh4: /tmp/tmpjnyh1gh4.cpp:66: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] > cur) {\n         \
    \   res.push_back(by_length(arr[i:]));\n            cur = arr[i];\n        } else\
    \ {\n            res.push_back(std::to_string(cur));\n            cur = arr[i];\n\
    \        }\n    }\n    res.push_back(std::to_string(cur));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5n__ho4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpm5n__ho4.cpp:20:42: error:\
    \ expected \u2018]\u2019 before \u2018:\u2019 token\n   20 |             res.push_back(by_length(arr[i:]));\n\
    \      |                                          ^\n      |                 \
    \                         ]\n/tmp/tmpm5n__ho4.cpp:20:42: error: expected \u2018\
    )\u2019 before \u2018:\u2019 token\n   20 |             res.push_back(by_length(arr[i:]));\n\
    \      |                                    ~     ^\n      |                 \
    \                         )\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid /\
    \ 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 =\
    \ mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbsc5n0e1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbsc5n0e1.cpp:75:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmpbsc5n0e1.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long curr = arr[0];\n   \
    \ for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] > curr) {\n  \
    \          res.push_back(to_string(curr));\n            curr = arr[i];\n     \
    \   } else {\n            curr += arr[i];\n        }\n    }\n    res.push_back(to_string(curr));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvd_n66gm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvd_n66gm.cpp:21:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |             res.push_back(to_string(curr));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvd_n66gm.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpvd_n66gm.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(curr));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvd_n66gm.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i == first) {\n\
    \            first = i;\n        }\n        if (i == last) {\n            last\
    \ = i;\n        }\n    }\n    long mid = (first + last) / 2;\n    long mid2 =\
    \ mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\
    \ = mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6_cceo3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpj6_cceo3.cpp:75:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   75 |\
    \ }\n      | ^\n/tmp/tmpj6_cceo3.cpp:75:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   75 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long len = arr.size();\n    for (long i =\
    \ 1; i < len; i++) {\n        if (arr[i] < cur) {\n            res.push_back(\"\
    One\");\n        } else if (arr[i] > cur) {\n            res.push_back(\"Nine\"\
    );\n        } else {\n            long tmp = arr[i];\n            while (tmp >\
    \ 9) {\n                res.push_back(\"Ten\");\n                tmp -= 10;\n\
    \            }\n            res.push_back(\"One\");\n            while (tmp >\
    \ 0) {\n                res.push_back(\"Two\");\n                tmp -= 2;\n \
    \           }\n            while (tmp > 0) {\n                res.push_back(\"\
    Three\");\n                tmp -= 3;\n            }\n            while (tmp >\
    \ 0) {\n                res.push_back(\"Four\");\n                tmp -= 4;\n\
    \            }\n            while (tmp > 0) {\n                res.push_back(\"\
    Five\");\n                tmp -= 5;\n            }\n            while (tmp > 0)\
    \ {\n                res.push_back(\"Six\");\n                tmp -= 6;\n    \
    \        }\n            while (tmp > 0) {\n                res.push_back(\"Seven\"\
    );\n                tmp -= 7;\n            }\n            while (tmp > 0) {\n\
    \                res.push_back(\"Eight\");\n                tmp -= 8;\n      \
    \      }\n            while (tmp > 0) {\n                res.push_back(\"Nine\"\
    );\n                tmp -= 9;\n            }\n        }\n        cur = arr[i];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmphaswl9t6: /tmp/tmphaswl9t6.cpp:69: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::vector<std::string>();\n\
    \    }\n    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev\
    \ = arr[0];\n    for (long i : arr) {\n        if (i > curr) {\n            long\
    \ tmp = curr;\n            curr = prev;\n            prev = tmp;\n        }\n\
    \        res.push_back(to_string(curr));\n        curr = i;\n    }\n    res.push_back(to_string(curr));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tg8mffv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8tg8mffv.cpp:26:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |         res.push_back(to_string(curr));\n      |                  \
    \     ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8tg8mffv.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp8tg8mffv.cpp:29:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |     res.push_back(to_string(curr));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8tg8mffv.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string("
  stdout: ''
  timestamp: 1660136026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long curr = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            ans.push_back(\"\
    One\");\n        } else if (i <= 99) {\n            ans.push_back(\"Two\");\n\
    \        } else if (i <= 999) {\n            ans.push_back(\"Three\");\n     \
    \   } else if (i <= 9999) {\n            ans.push_back(\"Four\");\n        } else\
    \ if (i <= 99999) {\n            ans.push_back(\"Five\");\n        } else if (i\
    \ <= 999999) {\n            ans.push_back(\"Six\");\n        } else if (i <= 9999999)\
    \ {\n            ans.push_back(\"Seven\");\n        } else if (i <= 999999999)\
    \ {\n            ans.push_back(\"Eight\");\n        } else if (i <= 99999999999)\
    \ {\n            ans.push_back(\"Nine\");\n        } else {\n            ans.push_back(\"\
    Zero\");\n        }\n        last = i;\n    }\n    ans.push_back(\"One\");\n \
    \   ans.push_back(\"Two\");\n    ans.push_back(\"Three\");\n    ans.push_back(\"\
    Four\");\n    ans.push_back(\"Five\");\n    ans.push_back(\"Six\");\n    ans.push_back(\"\
    Seven\");\n    ans.push_back(\"Eight\");\n    ans.push_back(\"Nine\");\n    ans.push_back(\"\
    Zero\");\n    ans.push_back(\"One\");\n    ans.push_back(\"Two\");\n    ans.push_back(\"\
    Three\");\n    ans.push_back(\"Four\");\n    ans.push_back(\"Five\");\n    ans.push_back(\"\
    Six\");\n    ans.push_back(\"Seven\");\n    ans.push_back(\"Eight\");\n    ans.push_back(\"\
    Nine\");\n    ans.push_back(\"Zero\");\n    ans.push_back(\"One\");\n    ans.push_back(\"\
    Two\");\n    ans.push_back(\"Three\");\n    ans.push_back(\"Four\");\n    ans.push_back(\"\
    Five\");\n    ans.push_back(\"Six\");\n    ans.push_back(\"Seven\");\n    ans.push_back(\"\
    Eight\");\n    ans.push_back(\"Nine\");\n    ans.push_back(\"Zero\");\n    ans.push_back(\"\
    One\");\n    ans.push_back(\"Two\");\n    ans.push_back(\"Three\");\n    ans.push_back(\"\
    Four\");\n    ans.push_back(\"Five\");\n    ans.push_back(\"Six\");\n    ans.push_back(\"\
    Seven\");\n    ans.push_back(\"Eight\");\n    ans.push_back(\"Nine\");\n    \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpc5r8u4og: /tmp/tmpc5r8u4og.cpp:85: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = 0, min_len = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        if (max_len < arr[i]) max_len = arr[i];\n\
    \        if (min_len > arr[i]) min_len = arr[i];\n    }\n    if (max_len == min_len)\
    \ return {};\n    long mid = max_len >> 1;\n    long left = 0, right = max_len;\n\
    \    while (left < right) {\n        long mid = (left + right) >> 1;\n       \
    \ if (arr[mid] >= mid) left = mid + 1;\n        else right = mid - 1;\n    }\n\
    \    long mid = max_len >> 1;\n    long left = 0, right = max_len;\n    while\
    \ (left < right) {\n        long mid = (left + right) >> 1;\n        if (arr[mid]\
    \ >= mid) left = mid + 1;\n        else right = mid - 1;\n    }\n    long mid\
    \ = max_len >> 1;\n    long left = 0, right = max_len;\n    while (left < right)\
    \ {\n        long mid = (left + right) >> 1;\n        if (arr[mid] >= mid) left\
    \ = mid + 1;\n        else right = mid - 1;\n    }\n    long mid = max_len >>\
    \ 1;\n    long left = 0, right = max_len;\n    while (left < right) {\n      \
    \  long mid = (left + right) >> 1;\n        if (arr[mid] >= mid) left = mid +\
    \ 1;\n        else right = mid - 1;\n    }\n    long mid = max_len >> 1;\n   \
    \ long left = 0, right = max_len;\n    while (left < right) {\n        long mid\
    \ = (left + right) >> 1;\n        if (arr[mid] >= mid) left = mid + 1;\n     \
    \   else right = mid - 1;\n    }\n    long mid = max_len >> 1;\n    long left\
    \ = 0, right = max_len;\n    while (left < right) {\n        long mid = (left\
    \ + right) >> 1;\n        if (arr[mid] >= mid) left = mid + 1;\n        else right\
    \ = mid - 1;\n    }\n    long mid = max_len >> 1;\n    long left = 0, right =\
    \ max_len;\n    while (left < right) {\n        long mid = (left + right) >> 1;\n\
    \        if (arr[mid] >= mid) left = mid + 1;\n        else right = mid - 1;\n\
    \    }\n    long mid = max_len >> 1;\n    long left = 0, right = max_len;\n  \
    \  while (left < right) {\n        long mid = (left + right) >> 1;\n        if\
    \ (arr[mid] >= mid) left = mid + 1;\n        else right = mid - 1;\n    }\n  \
    \  long mid = max_len >> 1;\n    long left = 0, right = max_len;\n    while (left\
    \ < right\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvry89gk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbvry89gk.cpp:30:10: error:\
    \ redeclaration of \u2018long int mid\u2019\n   30 |     long mid = max_len >>\
    \ 1;\n      |          ^~~\n/tmp/tmpbvry89gk.cpp:23:10: note: \u2018long int mid\u2019\
    \ previously declared here\n   23 |     long mid = max_len >> 1;\n      |    \
    \      ^~~\n/tmp/tmpbvry89gk.cpp:31:10: error: redeclaration of \u2018long int\
    \ left\u2019\n   31 |     long left = 0, right = max_len;\n      |          ^~~~\n\
    /tmp/tmpbvry89gk.cpp:24:10: note: \u2018long int left\u2019 previously declared\
    \ here\n   24 |     long left = 0, right = max_len;\n      |          ^~~~\n/tmp/tmpbvry89gk.cpp:31:20:\
    \ error: redeclaration of \u2018long int right\u2019\n   31 |     long left =\
    \ 0, right = max_len;\n      |                    ^~~~~\n/tmp/tmpbvry89gk.cpp:24:20:\
    \ note: \u2018long int right\u2019 previously declared here\n   24 |     long\
    \ left = 0, right = max_len;\n      |                    ^~~~~\n/tmp/tmpbvry89gk.cpp:37:10:\
    \ error: redeclaration of \u2018long int mid\u2019\n   37 |     long mid = max_len\
    \ >> 1;\n      |          ^~~\n/tmp/tmpbvry89gk.cpp:23:10: note: \u2018long int\
    \ mid\u2019 previously declared here\n   23 |     long mid = max_len >> 1;\n \
    \     |          ^~~\n/tmp/tmpbvry89gk.cpp:38:10: error: redeclaration of \u2018\
    long int left\u2019\n   38 |     long left = 0, right = max_len;\n      |    \
    \      ^~~~\n/tmp/tmpbvry89gk.cpp:24:10: note: \u2018long int left\u2019 previously\
    \ declared here\n   24 |     long left = 0, right = max_len;\n      |        \
    \  ^~~~\n/tmp/tmpbvry89gk.cpp:38:20: error: redeclaration of \u2018long int right\u2019\
    \n   38 |     long left = 0, right = max_len;\n      |                    ^~~~~\n\
    /tmp/tmpbvry89gk.cpp:24:20: note: \u2018long int right\u2019 previously declared\
    \ here\n   24 |     long left = 0, right = max_len;\n      |                 \
    \   ^~~~~\n/tmp/tmpbvry89gk.cpp:44:10: error: redeclaration of \u2018long int\
    \ mid\u2019\n   44 |     long mid = max_len >> 1;\n      |          ^~~\n/tmp/tmpbvry89gk.cpp:23:10:\
    \ note: \u2018long int mid\u2019 previously declared here\n   23 |   "
  stdout: ''
  timestamp: 1660136027
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpipqrc6et: /tmp/tmpipqrc6et.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n  \
    \  long right = mid;\n    long temp;\n    while (left < max) {\n        temp =\
    \ left;\n        left = right;\n        right = temp + right;\n    }\n    long\
    \ length = right - left + 1;\n    ans.reserve(length);\n    for (long i = left;\
    \ i <= right; i++) {\n        ans.push_back(by_length({i - 1, i}));\n    }\n \
    \   for (long i = left; i <= right; i++) {\n        ans.push_back(by_length({i,\
    \ i + 9}));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn9nn_tor.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpn9nn_tor.cpp:39:44: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   39 |\
    \         ans.push_back(by_length({i - 1, i}));\n      |                     \
    \                       ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn9nn_tor.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::basic_string<"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] < num) {\n         \
    \   num = arr[i];\n        }\n    }\n    long cur = num;\n    long next = 1;\n\
    \    while (next < 10) {\n        long cnt = 0;\n        for (long i = 0; i <\
    \ len; i++) {\n            if (arr[i] < cur) {\n                cnt++;\n     \
    \       }\n        }\n        if (cnt > 0) {\n            std::string tmp;\n \
    \           tmp.reserve(cnt);\n            for (long i = 0; i < len; i++) {\n\
    \                if (arr[i] < cur) {\n                    tmp += to_string(arr[i]);\n\
    \                }\n            }\n            res.push_back(tmp);\n        }\n\
    \        next++;\n        cur = next*10;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_89ryv6w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp_89ryv6w.cpp:37:28: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   37 |                     tmp += to_string(arr[i]);\n      |            \
    \                ^~~~~~~~~\n      |                            std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_89ryv6w.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i < 1 || i > 9)\
    \ {\n            continue;\n        }\n        long mid = (first + last) / 2;\n\
    \        if (mid > 9) {\n            mid = mid - 10;\n        }\n        if (mid\
    \ < 1) {\n            mid = mid + 10;\n        }\n        if (mid == last) {\n\
    \            ans.push_back(\"One\");\n            last = mid + 1;\n        } else\
    \ if (mid == first) {\n            ans.push_back(\"Zero\");\n            first\
    \ = mid - 1;\n        } else {\n            ans.push_back(\"Two\");\n        \
    \    last = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmphlz9ku4c: /tmp/tmphlz9ku4c.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (max < 1 || max > 9) {\n        return res;\n    }\n   \
    \ long min = *std::min_element(arr.begin(), arr.end());\n    if (min < 1 || min\
    \ > 9) {\n        return res;\n    }\n    long mid = max / 10;\n    long left\
    \ = max - mid * 10;\n    long right = min - mid * 10;\n    std::vector<std::string>\
    \ arr_reversed;\n    for (long i = left; i <= right; i++) {\n        arr_reversed.push_back(to_string(mid)\
    \ + to_string(i));\n    }\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   std::string name = to_string(arr[i]);\n        for (auto &it : arr_reversed)\
    \ {\n            if (name == it) {\n                res.push_back(name);\n   \
    \             break;\n            }\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg2dbq9s7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpg2dbq9s7.cpp:31:32: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   31 |         arr_reversed.push_back(to_string(mid) + to_string(i));\n  \
    \    |                                ^~~~~~~~~\n      |                     \
    \           std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpg2dbq9s7.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpg2dbq9s7.cpp:34:28: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   34 |         std::string name = to_string(arr[i]);\n      |            \
    \                ^~~~~~~~~\n      |                            std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpg2dbq9s7.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: n"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long temp = num;\n\
    \    long reverse = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > 9) {\n            reverse = reverse * 10 + arr[i] - 10;\n        }\
    \ else {\n            reverse = reverse * 10 + arr[i];\n        }\n    }\n   \
    \ res.push_back(\"One\");\n    res.push_back(\"Two\");\n    res.push_back(\"Three\"\
    );\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"Minus\");\n    res.push_back(\"\
    Plus\");\n    res.push_back(\"Divide\");\n    res.push_back(\"Multiply\");\n \
    \   res.push_back(\"Power\");\n    res.push_back(\"Mod\");\n    res.push_back(\"\
    Equal\");\n    res.push_back(\"Greater\");\n    res.push_back(\"Less\");\n   \
    \ res.push_back(\"GreaterOrEqual\");\n    res.push_back(\"LessOrEqual\");\n  \
    \  res.push_back(\"And\");\n    res.push_back(\"Or\");\n    res.push_back(\"Not\"\
    );\n    res.push_back(\"Xor\");\n    res.push_back(\"AndNot\");\n    res.push_back(\"\
    OrNot\");\n    res.push_back(\"NotEqual\");\n    res.push_back(\"EqualOrGreater\"\
    );\n    res.push_back(\"EqualOrLess\");\n    res.push_back(\"GreaterOrEqualOrNot\"\
    );\n    res.push_back(\"LessOrEqualOrNot\");\n    res.push_back(\"AndOrNot\");\n\
    \    res.push_back(\"OrOrNot\");\n    res.push_back(\"NotAndNot\");\n    res.push_back(\"\
    NotOrNot\");\n    res.push_back(\"NotEqualOrGreaterOrNot\");\n    res.push_back(\"\
    NotEqualOrLessOrNot\");\n    res.push_back(\"NotGreaterOrEqualOrNot\");\n    res.push_back(\"\
    NotLessOrEqualOrNot\");\n    res.push_back(\"NotAndOrNot\");\n    res.push_back(\"\
    NotOrOrNot\");\n    res.push_back(\"NotNotEqualOrGreaterOrNot\");\n    res.push_back(\"\
    NotNotEqualOrLessOrNot\");\n    res.push_back(\"NotNotGreaterOrEqualOrNot\");\n\
    \    res.push_back(\"NotNotLessOrEqualOrNot\");\n    res.push_back(\"NotNotAndOrNot\"\
    );\n    res.push_back(\"NotNotOrOrNot\");\n    res.\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrh2iv1h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphrh2iv1h.cpp:75:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmphrh2iv1h.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = 0, r = 0;\n    for (auto i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            l = i;\n        } else\
    \ {\n            res.push_back(by_length(std::vector<long>{l, i}));\n        \
    \    l = i;\n        }\n    }\n    res.push_back(by_length(std::vector<long>{l,\
    \ r}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3r3o28az.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3r3o28az.cpp:21:61: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   21 |\
    \             res.push_back(by_length(std::vector<long>{l, i}));\n      |    \
    \                                                         ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3r3o28az.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) {\n        return result;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min > 9 || max < 1) {\n        return result;\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    long length = max - min + 1;\n    long mid_index = 0;\n\
    \    long left_index = 0;\n    long right_index = 0;\n    long left_length = mid_index\
    \ + 1;\n    long right_length = length + mid_index;\n    long left_mid = arr[left_index];\n\
    \    long right_mid = arr[right_index];\n    long left_length = left_length -\
    \ mid_index;\n    long right_length = right_length + mid_index;\n    long left_mid_index\
    \ = 0;\n    long right_mid_index = 0;\n    long left_left_index = 0;\n    long\
    \ left_right_index = 0;\n    long right_left_index = 0;\n    long right_right_index\
    \ = 0;\n    while (left_left_index < left_length && left_right_index < left_length)\
    \ {\n        if (left_mid > left_mid) {\n            left_mid_index = left_left_index;\n\
    \            left_mid = arr[left_left_index];\n            left_left_index++;\n\
    \        } else {\n            left_mid_index = left_right_index;\n          \
    \  left_mid = arr[left_right_index];\n            left_right_index++;\n      \
    \  }\n    }\n    while (right_left_index < right_length && right_right_index <\
    \ right_length) {\n        if (right_mid > right_mid) {\n            right_mid_index\
    \ = right_left_index;\n            right_mid = arr[right_left_index];\n      \
    \      right_left_index++;\n        } else {\n            right_mid_index = right_right_index;\n\
    \            right_mid = arr[right_right_index];\n            right_right_index++;\n\
    \        }\n    }\n    while (left_left_index < left_length) {\n        result.push_back(\"\
    One\");\n        left_left_index++;\n    }\n    while (left_right_index < left_length)\
    \ {\n        result.push_back(\"Two\");\n        left_right_index++;\n    }\n\
    \    while (right_left_index < right_length) {\n        result.push_back(\"Three\"\
    );\n        right_left_index++;\n    }\n    while (right_right_index < right_length)\
    \ {\n        result.push_back(\"Four\");\n        right_right_index++;\n    }\n\
    \    while (left_mid_index < left_length) {\n        result.push_back(\"Five\"\
    );\n        left_mid_index++;\n    }\n    while (right_mid_index < right_length)\
    \ {\n        result.push_back(\"Six\");\n        right_mid_index++;\n    }\n \
    \   while (left_mid_index < left_length) {\n        result.push_back(\"Seven\"\
    );\n        left_mid_index++;\n    }\n    while (right_mid_index < right_length)\
    \ {\n        result.push_back(\"E\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptmkgxazy.cpp:91:26: warning: missing terminating \" character\n\
    \   91 |         result.push_back(\"E\n      |                          ^\n/tmp/tmptmkgxazy.cpp:91:26:\
    \ error: missing terminating \" character\n   91 |         result.push_back(\"\
    E\n      |                          ^~\n/tmp/tmptmkgxazy.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long int>)\u2019\
    :\n/tmp/tmptmkgxazy.cpp:32:10: error: redeclaration of \u2018long int left_length\u2019\
    \n   32 |     long left_length = left_length - mid_index;\n      |          ^~~~~~~~~~~\n\
    /tmp/tmptmkgxazy.cpp:28:10: note: \u2018long int left_length\u2019 previously\
    \ declared here\n   28 |     long left_length = mid_index + 1;\n      |      \
    \    ^~~~~~~~~~~\n/tmp/tmptmkgxazy.cpp:33:10: error: redeclaration of \u2018long\
    \ int right_length\u2019\n   33 |     long right_length = right_length + mid_index;\n\
    \      |          ^~~~~~~~~~~~\n/tmp/tmptmkgxazy.cpp:29:10: note: \u2018long int\
    \ right_length\u2019 previously declared here\n   29 |     long right_length =\
    \ length + mid_index;\n      |          ^~~~~~~~~~~~\n/tmp/tmptmkgxazy.cpp:92:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   92 | }\n \
    \     | ^\n/tmp/tmptmkgxazy.cpp:93:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   93 | int main() {\n      |            ^\n\
    /tmp/tmptmkgxazy.cpp:100:1: error: expected \u2018}\u2019 at end of input\n  100\
    \ | }\n      | ^\n/tmp/tmptmkgxazy.cpp:13:59: note: to match this \u2018{\u2019\
    \n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n      |\
    \                                                           ^\n/tmp/tmptmkgxazy.cpp:100:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  100 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136026
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long length = arr.size();\n    for (long i = 0; i < length; i++)\
    \ {\n        if (arr[i] < mid) {\n            res.push_back(to_string(arr[i]));\n\
    \        } else if (arr[i] > mid) {\n            res.push_back(to_string(arr[i]\
    \ + 10));\n        } else {\n            res.push_back(to_string(arr[i] - 10));\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaeei51o2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpaeei51o2.cpp:22:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |             res.push_back(to_string(arr[i]));\n      |            \
    \               ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpaeei51o2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpaeei51o2.cpp:24:27: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |             res.push_back(to_string(arr[i] + 10));\n      |       \
    \                    ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpaeei51o2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to"
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ if (max < 1 || min > 9) {\n        return res;\n    }\n    long mid = max /\
    \ 10;\n    long left = max - mid * 10;\n    long right = min - mid * 10;\n   \
    \ std::vector<std::string> left_by_length(by_length(arr));\n    std::vector<std::string>\
    \ right_by_length(left_by_length);\n    std::vector<std::string> left_by_length_and_right(left_by_length);\n\
    \    std::vector<std::string> right_by_length_and_left(right_by_length);\n   \
    \ std::vector<std::string> left_by_length_and_right_and_left(left_by_length_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right(right_by_length_and_left);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right(left_by_length_and_right_and_left);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left(right_by_length_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right(right_by_length_and_left_and_right_and_left);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_left(right_by_length_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_right_and_left(right_by_length_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left(right_by_length_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left(right_by_\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi44brolq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpi44brolq.cpp:37:93: error:\
    \ \u2018left_by_length_and_right_and_left_and_right_and_left_and_right\u2019 was\
    \ not declared in this scope; did you mean \u2018left_by_length_and_right_and_left_and_right_and_left_and_left\u2019\
    ?\n   37 |     std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right);\n\
    \      |                                                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                        left_by_length_and_right_and_left_and_right_and_left_and_left\n\
    /tmp/tmpi44brolq.cpp:38:102: error: \u2018right_by_length_and_left_and_right_and_left_and_right_and_left_and_right\u2019\
    \ was not declared in this scope; did you mean \u2018right_by_length_and_left_and_right_and_left_and_right_and_left\u2019\
    ?\n   38 |     std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_right_and_left(right_by_length_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \      |                                                                     \
    \                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                 right_by_length_and_left_and_right_and_left_and_right_and_left\n\
    /tmp/tmpi44brolq.cpp:39:112: error: \u2018left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right\u2019\
    \ was not declared in this scope; did you mean \u2018left_by_length_and_right_and_left_and_right_and_left_and_right_and_left\u2019\
    ?\n   39 |     std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right);\n"
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i > 9) {\n            long next = cur + i;\n            while\
    \ (next > 9) {\n                res.emplace_back(to_string(prev));\n         \
    \       prev = next;\n                next = cur + next;\n            }\n    \
    \        res.emplace_back(to_string(prev));\n            prev = next;\n      \
    \  } else {\n            prev = cur;\n            cur = i;\n        }\n    }\n\
    \    res.emplace_back(to_string(prev));\n    return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf525facg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpf525facg.cpp:22:34: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |                 res.emplace_back(to_string(prev));\n      |       \
    \                           ^~~~~~~~~\n      |                               \
    \   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf525facg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpf525facg.cpp:26:30: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |             res.emplace_back(to_string(prev));\n      |           \
    \                   ^~~~~~~~~\n      |                              std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpf525facg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note"
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long\
    \ len = arr.size();\n    for (long i = 1; i < len; i++) {\n        if (arr[i]\
    \ < cur) {\n            res.emplace_back(\"One\");\n        } else if (arr[i]\
    \ > cur) {\n            res.emplace_back(\"Nine\");\n        } else {\n      \
    \      res.emplace_back(to_string(arr[i]));\n        }\n        cur = arr[i];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimptx2sn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpimptx2sn.cpp:26:30: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |             res.emplace_back(to_string(arr[i]));\n      |         \
    \                     ^~~~~~~~~\n      |                              std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpimptx2sn.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long curr = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == curr) continue;\n        if (curr > 9) {\n            long\
    \ tmp = curr;\n            curr = prev;\n            prev = tmp;\n        }\n\
    \        res.push_back(by_length_helper(curr, prev, i, res));\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3syna6zn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3syna6zn.cpp:25:23: error:\
    \ \u2018by_length_helper\u2019 was not declared in this scope\n   25 |       \
    \  res.push_back(by_length_helper(curr, prev, i, res));\n      |             \
    \          ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long last = arr[arr.size() - 1];\n    long\
    \ cur2 = 1;\n    long last2 = 1;\n    long cur3 = 1;\n    long last3 = 1;\n  \
    \  long cur4 = 1;\n    long last4 = 1;\n    long cur5 = 1;\n    long last5 = 1;\n\
    \    long cur6 = 1;\n    long last6 = 1;\n    long cur7 = 1;\n    long last7 =\
    \ 1;\n    long cur8 = 1;\n    long last8 = 1;\n    long cur9 = 1;\n    long last9\
    \ = 1;\n    while (cur != last) {\n        while (cur2 <= 9 && cur2 <= last &&\
    \ cur2 <= last2) {\n            while (cur3 <= 9 && cur3 <= last && cur3 <= last3)\
    \ {\n                while (cur4 <= 9 && cur4 <= last && cur4 <= last4) {\n  \
    \                  while (cur5 <= 9 && cur5 <= last && cur5 <= last5) {\n    \
    \                    while (cur6 <= 9 && cur6 <= last && cur6 <= last6) {\n  \
    \                          while (cur7 <= 9 && cur7 <= last && cur7 <= last7)\
    \ {\n                                while (cur8 <= 9 && cur8 <= last && cur8\
    \ <= last8) {\n                                    while (cur9 <= 9 && cur9 <=\
    \ last && cur9 <= last9) {\n                                        res.push_back(\"\
    One\");\n                                        res.push_back(\"Two\");\n   \
    \                                     res.push_back(\"Three\");\n            \
    \                            res.push_back(\"Four\");\n                      \
    \                  res.push_back(\"Five\");\n                                \
    \        res.push_back(\"Six\");\n                                        res.push_back(\"\
    Seven\");\n                                        res.push_back(\"Eight\");\n\
    \                                        res.push_back(\"Nine\");\n          \
    \                              res.push_back(\"Ten\");\n                     \
    \                   res.push_back(\"Eleven\");\n                             \
    \           res.push_back(\"Twelve\");\n                                     \
    \   res.push_back(\"Thirteen\");\n                                        res.push_back(\"\
    Fourteen\");\n                                        res.push_back(\"Fifteen\"\
    );\n                                        res.push_back(\"Sixteen\");\n    \
    \                                    res.push_back(\"Seventeen\");\n         \
    \                               res.push_back(\"Eighteen\");\n               \
    \                         res.push_back(\"Nineteen\");\n                     \
    \                   res.push_back(\"Twenty\");\n                             \
    \           res.push_back(\"Twenty-one\");\n                                 \
    \       res.push_back(\"Twenty-two\");\n                                     \
    \   res.push_back(\"Twenty-three\");\n                                       \
    \ res.push_back(\"Twenty-four\");\n                                        res.push_back(\"\
    Twenty-five\");\n                                        res.push_back(\"Twenty-six\"\
    );\n                                        res.push_back(\"Twenty-seven\");\n\
    \                                        \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53_pgnxg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp53_pgnxg.cpp:72:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   72\
    \ | int main() {\n      |            ^\n/tmp/tmp53_pgnxg.cpp:79:1: error: expected\
    \ \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp53_pgnxg.cpp:41:84:\
    \ note: to match this \u2018{\u2019\n   41 |                                 while\
    \ (cur8 <= 9 && cur8 <= last && cur8 <= last8) {\n      |                    \
    \                                                                ^\n/tmp/tmp53_pgnxg.cpp:79:1:\
    \ error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp53_pgnxg.cpp:40:80:\
    \ note: to match this \u2018{\u2019\n   40 |                             while\
    \ (cur7 <= 9 && cur7 <= last && cur7 <= last7) {\n      |                    \
    \                                                            ^\n/tmp/tmp53_pgnxg.cpp:79:1:\
    \ error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp53_pgnxg.cpp:39:76:\
    \ note: to match this \u2018{\u2019\n   39 |                         while (cur6\
    \ <= 9 && cur6 <= last && cur6 <= last6) {\n      |                          \
    \                                                  ^\n/tmp/tmp53_pgnxg.cpp:79:1:\
    \ error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp53_pgnxg.cpp:38:72:\
    \ note: to match this \u2018{\u2019\n   38 |                     while (cur5 <=\
    \ 9 && cur5 <= last && cur5 <= last5) {\n      |                             \
    \                                           ^\n/tmp/tmp53_pgnxg.cpp:79:1: error:\
    \ expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp53_pgnxg.cpp:37:68:\
    \ note: to match this \u2018{\u2019\n   37 |                 while (cur4 <= 9\
    \ && cur4 <= last && cur4 <= last4) {\n      |                               \
    \                                     ^\n/tmp/tmp53_pgnxg.cpp:79:1: error: expected\
    \ \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp53_pgnxg.cpp:36:64:\
    \ note: to match this \u2018{\u2019\n   36 |             while (cur3 <= 9 && cur3\
    \ <= last && cur3 <= last3) {\n      "
  stdout: ''
  timestamp: 1660136027
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    long min = *std::min_element(arr.begin(), arr.end()); // get min value\n\
    \    long max = *std::max_element(arr.begin(), arr.end()); // get max value\n\
    \    std::vector<std::string> res;\n    for (long i = min; i <= max; i++) {\n\
    \        std::string name = \"\";\n        switch (i) {\n            case 1:\n\
    \                name = \"One\";\n                break;\n            case 2:\n\
    \                name = \"Two\";\n                break;\n            case 3:\n\
    \                name = \"Three\";\n                break;\n            case 4:\n\
    \                name = \"Four\";\n                break;\n            case 5:\n\
    \                name = \"Five\";\n                break;\n            case 6:\n\
    \                name = \"Six\";\n                break;\n            case 7:\n\
    \                name = \"Seven\";\n                break;\n            case 8:\n\
    \                name = \"Eight\";\n                break;\n            case 9:\n\
    \                name = \"Nine\";\n                break;\n            default:\n\
    \                break;\n        }\n        res.push_back(name);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpl0m_8sxp: /tmp/tmpl0m_8sxp.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i <= 9 && i >= 1) {\n            long index = i - 1;\n          \
    \  if (index < min) {\n                min = index;\n            }\n         \
    \   if (index > max) {\n                max = index;\n            }\n        }\n\
    \    }\n    if (min == max) {\n        res.push_back(\"One\");\n        return\
    \ res;\n    }\n    long mid = (min + max) / 2;\n    std::vector<std::string> left\
    \ = by_length(arr);\n    std::vector<std::string> right = by_length(arr);\n  \
    \  left.erase(std::remove(left.begin(), left.end(), mid), left.end());\n    right.erase(std::remove(right.begin(),\
    \ right.end(), mid), right.end());\n    std::vector<std::string> result;\n   \
    \ for (long i : arr) {\n        if (i <= 9 && i >= 1) {\n            long index\
    \ = i - 1;\n            if (index < min) {\n                result.push_back(\"\
    One\");\n            } else if (index > max) {\n                result.push_back(\"\
    Nine\");\n            } else {\n                result.push_back(by_name[index]);\n\
    \            }\n        }\n    }\n    for (auto i : left) {\n        result.push_back(i);\n\
    \    }\n    for (auto i : right) {\n        result.push_back(i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf4iqsakw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpf4iqsakw.cpp:49:34: error:\
    \ \u2018by_name\u2019 was not declared in this scope\n   49 |                \
    \ result.push_back(by_name[index]);\n      |                                 \
    \ ^~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpf4iqsakw.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Value = const long int]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:875:13:   required from \u2018_ForwardIterator\
    \ std::__remove_if(_ForwardIterator, _ForwardIterator, _Predicate) [with _ForwardIterator\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const long int>]\u2019\n\
    /usr/include/c++/9/bits/stl_algo.h:912:30:   required from \u2018_FIter std::remove(_FIter,\
    \ _FIter, const _Tp&) [with _FIter = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Tp = long int]\u2019\n/tmp/tmpf4iqsakw.cpp:38:57:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018const long int\u2019)\n  241 |  { return *__it == _M_value; }\n  \
    \    |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/"
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i > cur) {\n            long tmp = cur;\n            cur = prev;\n\
    \            prev = tmp;\n        }\n        res.push_back(to_string(prev));\n\
    \        prev = i;\n    }\n    res.push_back(to_string(cur));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk7hdrwi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjk7hdrwi.cpp:24:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |         res.push_back(to_string(prev));\n      |                  \
    \     ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjk7hdrwi.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpjk7hdrwi.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(cur));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjk7hdrwi.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(l"
  stdout: ''
  timestamp: 1660136027
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == curr) continue;\n        if (i > curr)\
    \ {\n            res.push_back(\"One\");\n            prev = curr;\n         \
    \   curr = i;\n        } else if (i < prev) {\n            res.push_back(\"Nine\"\
    );\n            prev = i;\n        }\n    }\n    res.push_back(\"One\");\n   \
    \ res.push_back(\"Nine\");\n    res.push_back(\"Two\");\n    res.push_back(\"\
    Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpp52j0tt5: /tmp/tmpp52j0tt5.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = (min + max)\
    \ / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4 =\
    \ mid3 / 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 /\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 / 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 /\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 / 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid49 = mid\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzzqnljz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpuzzqnljz.cpp:67:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   67 |\
    \ }\n      | ^\n/tmp/tmpuzzqnljz.cpp:67:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136027
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long length = max - min;\n\
    \    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid * 2;\n\
    \    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n\
    \    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n\
    \    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long mid12 = mid *\
    \ 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n    long mid15\
    \ = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid * 16;\n    long\
    \ mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20 = mid * 19;\n\
    \    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long mid23 = mid\
    \ * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n    long mid26\
    \ = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid * 27;\n    long\
    \ mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31 = mid * 30;\n\
    \    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long mid34 = mid\
    \ * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n    long mid37\
    \ = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid * 38;\n    long\
    \ mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42 = mid * 41;\n\
    \    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long mid45 = mid\
    \ * 44;\n    long mid4\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm56415ia.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpm56415ia.cpp:75:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmpm56415ia.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i > curr) break;\n        long next = i;\n\
    \        while (next > 9) {\n            next /= 10;\n        }\n        res.push_back(by_length(std::vector<long>{prev,\
    \ next}));\n        prev = next;\n        curr = next;\n    }\n    res.push_back(by_length(std::vector<long>{prev,\
    \ curr}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpugoc04ih.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpugoc04ih.cpp:24:63: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   24 |\
    \         res.push_back(by_length(std::vector<long>{prev, next}));\n      |  \
    \                                                             ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpugoc04ih.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018s"
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    long\
    \ long n = arr.size();\n    long long m = 1;\n    long long k = 0;\n    long long\
    \ temp;\n    long long temp2;\n    long long temp3;\n    long long temp4;\n  \
    \  long long temp5;\n    long long temp6;\n    long long temp7;\n    long long\
    \ temp8;\n    long long temp9;\n    long long temp10;\n    long long temp11;\n\
    \    long long temp12;\n    long long temp13;\n    long long temp14;\n    long\
    \ long temp15;\n    long long temp16;\n    long long temp17;\n    long long temp18;\n\
    \    long long temp19;\n    long long temp20;\n    long long temp21;\n    long\
    \ long temp22;\n    long long temp23;\n    long long temp24;\n    long long temp25;\n\
    \    long long temp26;\n    long long temp27;\n    long long temp28;\n    long\
    \ long temp29;\n    long long temp30;\n    long long temp31;\n    long long temp32;\n\
    \    long long temp33;\n    long long temp34;\n    long long temp35;\n    long\
    \ long temp36;\n    long long temp37;\n    long long temp38;\n    long long temp39;\n\
    \    long long temp40;\n    long long temp41;\n    long long temp42;\n    long\
    \ long temp43;\n    long long temp44;\n    long long temp45;\n    long long temp46;\n\
    \    long long temp47;\n    long long temp48;\n    long long temp49;\n    long\
    \ long temp50;\n    long long temp51;\n    long long temp52;\n    long long temp53;\n\
    \    long long temp54;\n    long long temp55;\n    long long temp56;\n    long\
    \ long temp57;\n    long long temp58;\n    long long temp59;\n    long long temp60;\n\
    \    long long temp61;\n    long long temp62;\n    long long temp63;\n    long\
    \ long temp64;\n    long long temp65;\n    long long temp66;\n    long long temp67;\n\
    \    long long temp68;\n    long long temp69;\n    long long temp70;\n    long\
    \ long temp71;\n    long long temp72;\n    long long \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvzp032bc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvzp032bc.cpp:91:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   91 | }\n      | ^\n/tmp/tmpvzp032bc.cpp:91:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty()) return ans;\n    long l = arr.size();\n    if (l == 1) return\
    \ ans;\n    long mid = l / 2;\n    long left = arr[0];\n    long right = arr[1];\n\
    \    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long mid4 = mid3 / 2;\n\
    \    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n    long mid7 = mid6 /\
    \ 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n    long mid10 = mid9\
    \ / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11 / 2;\n    long mid13\
    \ = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15 = mid14 / 2;\n   \
    \ long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n    long mid18 = mid17\
    \ / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19 / 2;\n    long mid21\
    \ = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23 = mid22 / 2;\n   \
    \ long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n    long mid26 = mid25\
    \ / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27 / 2;\n    long mid29\
    \ = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31 = mid30 / 2;\n   \
    \ long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n    long mid34 = mid33\
    \ / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35 / 2;\n    long mid37\
    \ = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39 = mid38 / 2;\n   \
    \ long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n    long mid42 = mid41\
    \ / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43 / 2;\n    long mid45\
    \ = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47 = mid46 / 2;\n   \
    \ long mid48 = mid47 / 2;\n    long mid49\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1f869oqu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp1f869oqu.cpp:69:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmp1f869oqu.cpp:69:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   69 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = n;\n    for (long i = 0; i < n; ++i) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (arr[i] > max_len)\
    \ max_len = arr[i];\n        if (arr[i] < min_len) min_len = arr[i];\n    }\n\
    \    if (max_len == min_len) return std::vector<std::string>();\n    long mid\
    \ = min_len + (max_len - min_len) / 2;\n    long mid2 = mid + 1;\n    long mid3\
    \ = mid + 2;\n    long mid4 = mid + 3;\n    long mid5 = mid + 4;\n    long mid6\
    \ = mid + 5;\n    long mid7 = mid + 6;\n    long mid8 = mid + 7;\n    long mid9\
    \ = mid + 8;\n    long mid10 = mid + 9;\n    long mid11 = mid + 10;\n    long\
    \ mid12 = mid + 11;\n    long mid13 = mid + 12;\n    long mid14 = mid + 13;\n\
    \    long mid15 = mid + 14;\n    long mid16 = mid + 15;\n    long mid17 = mid\
    \ + 16;\n    long mid18 = mid + 17;\n    long mid19 = mid + 18;\n    long mid20\
    \ = mid + 19;\n    long mid21 = mid + 20;\n    long mid22 = mid + 21;\n    long\
    \ mid23 = mid + 22;\n    long mid24 = mid + 23;\n    long mid25 = mid + 24;\n\
    \    long mid26 = mid + 25;\n    long mid27 = mid + 26;\n    long mid28 = mid\
    \ + 27;\n    long mid29 = mid + 28;\n    long mid30 = mid + 29;\n    long mid31\
    \ = mid + 30;\n    long mid32 = mid + 31;\n    long mid33 = mid + 32;\n    long\
    \ mid34 = mid + 33;\n    long mid35 = mid + 34;\n    long mid36 = mid + 35;\n\
    \    long mid37 = mid + 36;\n    long mid38 = mid + 37;\n    long mid39 = mid\
    \ + 38;\n    long mid40 = mid + 39;\n    long mid41 = mid + 40;\n    long mid42\
    \ = mid + 41;\n    long mid43 = mid + 42;\n    long mid44 = mid + 43;\n    long\
    \ mid45 = mid + 44;\n    long mid46 = mid + 45;\n    long mid47 = mid + 46;\n\
    \    long mid48 = mid + 47;\n    long mid49\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jy_sz9b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2jy_sz9b.cpp:74:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp2jy_sz9b.cpp:74:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n   \
    \ long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpra7dq1bw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpra7dq1bw.cpp:74:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   74 |\
    \ }\n      | ^\n/tmp/tmpra7dq1bw.cpp:74:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n   \
    \ long mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5 = mid % 100;\n\
    \    long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n    long mid8 = mid\
    \ / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid / 1000000;\n\
    \    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n    long mid13\
    \ = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long mid15 = mid\
    \ % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17 = mid % 10000000000;\n\
    \    long mid18 = mid / 100000000000;\n    long mid19 = mid % 100000000000;\n\
    \    long mid20 = mid / 10000000000000;\n    long mid21 = mid % 10000000000000;\n\
    \    long mid22 = mid / 100000000000000;\n    long mid23 = mid % 100000000000000;\n\
    \    long mid24 = mid / 1000000000000000;\n    long mid25 = mid % 1000000000000000;\n\
    \    long mid26 = mid / 1000000000000000000;\n    long mid27 = mid % 1000000000000000000;\n\
    \    long mid28 = mid / 10000000000000000000;\n    long mid29 = mid % 10000000000000000000;\n\
    \    long mid30 = mid / 1000000000000000000000;\n    long mid31 = mid % 1000000000000000000000;\n\
    \    long mid32 = mid / 10000000000000000000000;\n    long mid33 = mid % 10000000000000000000000;\n\
    \    long mid34 = mid / 100000000000000000000000;\n    long mid35 = mid % 100000000000000000000000;\n\
    \    long mid36 = mid / 10000000000000000000000000;\n    long mid37 = mid % 10000000000000000000000000;\n\
    \    long mid38 = mid / 100000000000000000000000000;\n    long mid39 = mid % 100000000000000000000000000;\n\
    \    long mid40 = mid / 1000000000000000000000000000;\n    long mid41 = mid %\
    \ 1000000000000000000000000000;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpyw45dzj5: /tmp/tmpyw45dzj5.cpp:72: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] < prev) {\n\
    \            res.push_back(cur);\n            cur = arr[i];\n        }\n     \
    \   prev = arr[i];\n    }\n    res.push_back(cur);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnsqhh_r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwnsqhh_r.cpp:20:30: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(long int&)\u2019\n   20 |             res.push_back(cur);\n   \
    \   |                              ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwnsqhh_r.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::value_type&&\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ long mid = max / 10;\n    long start = mid - 1;\n    long end = mid + 1;\n \
    \   while (start >= 0) {\n        long curr = arr[start];\n        while (curr\
    \ > 0) {\n            long temp = curr % 10;\n            arr[start] = arr[start]\
    \ / 10;\n            arr[start + 1] = names[temp];\n            curr = (curr -\
    \ temp) / 10;\n            start -= 1;\n        }\n        start += 1;\n    }\n\
    \    while (end < arr.size()) {\n        long curr = arr[end];\n        while\
    \ (curr > 0) {\n            long temp = curr % 10;\n            arr[end] = arr[end]\
    \ / 10;\n            arr[end - 1] = names[temp];\n            curr = (curr - temp)\
    \ / 10;\n            end += 1;\n        }\n        end += 1;\n    }\n    for (size_t\
    \ i = 0; i < arr.size(); i++) {\n        long curr = arr[i];\n        while (curr\
    \ > 0) {\n            long temp = curr % 10;\n            arr[i] = arr[i / 10];\n\
    \            arr[i + 1] = names[temp];\n            curr = (curr - temp) / 10;\n\
    \            i += 1;\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb0mdvr29.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpb0mdvr29.cpp:26:30: error:\
    \ \u2018names\u2019 was not declared in this scope\n   26 |             arr[start\
    \ + 1] = names[temp];\n      |                              ^~~~~\n/tmp/tmpb0mdvr29.cpp:37:28:\
    \ error: \u2018names\u2019 was not declared in this scope\n   37 |           \
    \  arr[end - 1] = names[temp];\n      |                            ^~~~~\n/tmp/tmpb0mdvr29.cpp:48:26:\
    \ error: \u2018names\u2019 was not declared in this scope\n   48 |           \
    \  arr[i + 1] = names[temp];\n      |                          ^~~~~\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] > prev) {\n\
    \            ans.push_back(to_string(prev));\n            prev = arr[i];\n   \
    \     } else {\n            ans.push_back(to_string(cur));\n            cur =\
    \ arr[i];\n        }\n    }\n    ans.push_back(to_string(cur));\n    return ans;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcxjwh4d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmplcxjwh4d.cpp:20:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             ans.push_back(to_string(prev));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmplcxjwh4d.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmplcxjwh4d.cpp:23:27: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |             ans.push_back(to_string(cur));\n      |               \
    \            ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmplcxjwh4d.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i == first) {\n\
    \            first = i;\n        }\n        if (i == last) {\n            last\
    \ = i;\n        }\n    }\n    long mid = first + (last - first) / 2;\n    long\
    \ mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n  \
    \  long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 %\
    \ 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10\
    \ = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n   \
    \ long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcna6u7i.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphcna6u7i.cpp:75:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmphcna6u7i.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ if (max == min) {\n        long mid = max / 10;\n        long rest = max % 10;\n\
    \        if (rest == 0) {\n            std::string s = to_string(mid);\n     \
    \       res.push_back(s);\n        } else {\n            std::string s = to_string(mid)\
    \ + to_string(min);\n            res.push_back(s);\n        }\n    } else {\n\
    \        std::string s = to_string(min) + to_string(max);\n        res.push_back(s);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_s6h2sg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpd_s6h2sg.cpp:24:29: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |             std::string s = to_string(mid);\n      |              \
    \               ^~~~~~~~~\n      |                             std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpd_s6h2sg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpd_s6h2sg.cpp:27:29: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |             std::string s = to_string(mid) + to_string(min);\n    \
    \  |                             ^~~~~~~~~\n      |                          \
    \   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpd_s6h2sg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018"
  stdout: ''
  timestamp: 1660136029
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i == first) {\n\
    \            first = i;\n        } else if (i == last) {\n            last = i;\n\
    \        } else {\n            result.push_back((first - last) + 1 + \" \" + (i\
    \ - first));\n            first = i;\n            last = i;\n        }\n    }\n\
    \    if (first != last) {\n        result.push_back((first - last) + 1 + \" \"\
    \ + (last - first));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp0vh3v13q: /tmp/tmp0vh3v13q.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // get the smallest number\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // get the largest number\n\
    \  long mid = (min + max) / 2;\n  std::vector<std::string> res;\n  while (min\
    \ <= max) {\n    if (arr[mid] == mid) {\n      res.push_back(names[mid]);\n  \
    \  } else {\n      res.push_back(\"One\");\n    }\n    mid = (min + max) / 2;\n\
    \  }\n  std::reverse(arr.begin(), arr.end()); // reverse the array\n  for (auto\
    \ &i : arr) {\n    i = names[i - 1];\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o4alg5q.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp9o4alg5q.cpp:21:21: error:\
    \ \u2018names\u2019 was not declared in this scope\n   21 |       res.push_back(names[mid]);\n\
    \      |                     ^~~~~\n/tmp/tmp9o4alg5q.cpp:29:9: error: \u2018names\u2019\
    \ was not declared in this scope\n   29 |     i = names[i - 1];\n      |     \
    \    ^~~~~\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (arr[i] > max_len)\
    \ max_len = arr[i];\n        if (arr[i] < min_len) min_len = arr[i];\n    }\n\
    \    if (max_len == min_len) return std::vector<std::string>();\n    long mid\
    \ = (max_len + min_len) / 2;\n    long mid_index = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (arr[i] > 9) continue;\n        if (arr[i] < 1) continue;\n\
    \        if (arr[i] > max_len) mid_index = i;\n    }\n    long left_len = mid\
    \ - min_len;\n    long right_len = max_len - mid;\n    std::vector<std::string>\
    \ left_res;\n    std::vector<std::string> right_res;\n    for (long i = 0; i <\
    \ left_len; i++) {\n        left_res.push_back(\"One\");\n    }\n    for (long\
    \ i = 0; i < right_len; i++) {\n        right_res.push_back(\"One\");\n    }\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > 9) continue;\n     \
    \   if (arr[i] < 1) continue;\n        if (arr[i] > max_len) mid_index = i;\n\
    \        if (arr[i] < min_len) mid_index = i;\n        if (arr[i] == mid) {\n\
    \            left_res.push_back(by_length(arr.substr(0, mid_index)));\n      \
    \      right_res.push_back(by_length(arr.substr(mid_index + 1, n)));\n       \
    \     break;\n        }\n    }\n    for (long i = 0; i < left_res.size(); i++)\
    \ {\n        res.push_back(left_res[i]);\n    }\n    for (long i = 0; i < right_res.size();\
    \ i++) {\n        res.push_back(right_res[i]);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3hn7pm89.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3hn7pm89.cpp:48:46: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   48 |             left_res.push_back(by_length(arr.substr(0, mid_index)));\n\
    \      |                                              ^~~~~~\n/tmp/tmp3hn7pm89.cpp:49:47:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   49 |             right_res.push_back(by_length(arr.substr(mid_index + 1,\
    \ n)));\n      |                                               ^~~~~~\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        if (arr[0] == 1) {\n            res.push_back(\"One\");\n        } else\
    \ {\n            res.push_back(\"Zero\");\n        }\n        return res;\n  \
    \  }\n    long max_num = *std::max_element(arr.begin(), arr.end());\n    long\
    \ min_num = *std::min_element(arr.begin(), arr.end());\n    long max_len = max_num\
    \ - min_num + 1;\n    long min_len = min_num - 1;\n    long mid = max_len / 2;\n\
    \    long mid2 = max_len / 2;\n    long mid3 = max_len / 2;\n    long mid4 = max_len\
    \ / 2;\n    long mid5 = max_len / 2;\n    long mid6 = max_len / 2;\n    long mid7\
    \ = max_len / 2;\n    long mid8 = max_len / 2;\n    long mid9 = max_len / 2;\n\
    \    long mid10 = max_len / 2;\n    long mid11 = max_len / 2;\n    long mid12\
    \ = max_len / 2;\n    long mid13 = max_len / 2;\n    long mid14 = max_len / 2;\n\
    \    long mid15 = max_len / 2;\n    long mid16 = max_len / 2;\n    long mid17\
    \ = max_len / 2;\n    long mid18 = max_len / 2;\n    long mid19 = max_len / 2;\n\
    \    long mid20 = max_len / 2;\n    long mid21 = max_len / 2;\n    long mid22\
    \ = max_len / 2;\n    long mid23 = max_len / 2;\n    long mid24 = max_len / 2;\n\
    \    long mid25 = max_len / 2;\n    long mid26 = max_len / 2;\n    long mid27\
    \ = max_len / 2;\n    long mid28 = max_len / 2;\n    long mid29 = max_len / 2;\n\
    \    long mid30 = max_len / 2;\n    long mid31 = max_len / 2;\n    long mid32\
    \ = max_len / 2;\n    long mid33 = max_len / 2;\n    long mid34 = max_len / 2;\n\
    \    long mid35 = max_len / 2;\n    long mid36 = max_len / 2;\n    long mid37\
    \ = max_len / 2;\n    long mid38 = max_len / 2;\n    long mid39 = max_len / 2;\n\
    \    long mid40 = max_len / 2;\n    long mid41 = max_len / 2;\n    long mid42\
    \ = max_len / 2;\n    long mid4\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqu67h08w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqu67h08w.cpp:73:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   73 | }\n      | ^\n/tmp/tmpqu67h08w.cpp:73:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   73 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max_len = 0, min_len = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (max_len < i) {\n            max_len = i;\n\
    \        }\n        if (min_len > i) {\n            min_len = i;\n        }\n\
    \    }\n    long diff = max_len - min_len;\n    for (long i : arr) {\n       \
    \ long diff = i - min_len;\n        if (diff > 9) {\n            long temp = diff;\n\
    \            diff = diff - 10;\n            std::string temp = to_string(temp);\n\
    \            std::string res = temp + to_string(diff);\n            res.push_back('\
    \ ');\n            res.push_back(names[diff]);\n            res.push_back(' ');\n\
    \            res.push_back(names[temp]);\n            res.push_back(' ');\n  \
    \          res.push_back(names[max_len]);\n            res.push_back(' ');\n \
    \           res.push_back(names[min_len]);\n            res.push_back(' ');\n\
    \            res.push_back(names[max_len - diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[min_len + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[min_len + diff + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff - diff]);\n     \
    \       res.push_back(' ');\n            res.push_back(names[min_len + diff +\
    \ diff + diff]);\n            res.push_back(' ');\n            res.push_back(names[max_len\
    \ - diff - diff - diff - diff]);\n            res.push_back(' ');\n          \
    \  res.push_back(names[min_len + diff + diff + diff + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff - diff - diff - diff]);\n\
    \            res.push_back(' ');\n            res.push_back(names[min_len + diff\
    \ + diff + diff + diff + diff]);\n            res.push_back(' ');\n          \
    \  res.push_back(names[max_len - diff - diff - diff - diff - diff - diff]);\n\
    \            res.push_back(' ');\n            res.push_back(names[min_len + diff\
    \ + diff + diff + diff + diff + diff]);\n            res.push_back(' ');\n   \
    \         res.push_back(names[max_len - diff - diff - diff - diff - diff - diff\
    \ - diff]);\n            res.push_back(' ');\n            res.push_back(names[min_len\
    \ + diff + diff + diff + diff + diff + diff + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff - diff - diff \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqkzpggue.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqkzpggue.cpp:32:25: error:\
    \ conflicting declaration \u2018std::string temp\u2019\n   32 |             std::string\
    \ temp = to_string(temp);\n      |                         ^~~~\n/tmp/tmpqkzpggue.cpp:30:18:\
    \ note: previous declaration as \u2018long int temp\u2019\n   30 |           \
    \  long temp = diff;\n      |                  ^~~~\n/tmp/tmpqkzpggue.cpp:32:32:\
    \ error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::to_string\u2019?\n   32 |             std::string temp = to_string(temp);\n\
    \      |                                ^~~~~~~~~\n      |                   \
    \             std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqkzpggue.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpqkzpggue.cpp:35:27: error: \u2018\
    names\u2019 was not declared in this scope\n   35 |             res.push_back(names[diff]);\n\
    \      |                           ^~~~~\n/tmp/tmpqkzpggue.cpp:71:68: error: expected\
    \ \u2018]\u2019 before \u2018}\u2019 token\n   71 |             res.push_back(names[max_len\
    \ - diff - diff - diff - diff\n      |                                       \
    \                             ^\n      |                                     \
    \                               ]\n   72 | }\n      | ~                      \
    \                                             \n/tmp/tmpqkzpggue.cpp:73:12: error: "
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    if (arr.size() == 1) {\n        return std::vector<std::string>{\"\
    One\"};\n    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n  \
    \  long prev = arr[0];\n    for (size_t i = 1; i < arr.size(); i++) {\n      \
    \  if (arr[i] < prev) {\n            res.push_back(\"One\");\n        } else if\
    \ (arr[i] > prev) {\n            res.push_back(\"Nine\");\n        } else {\n\
    \            res.push_back(by_length(arr.substr(0, i)));\n        }\n        prev\
    \ = arr[i];\n        cur = arr[i];\n    }\n    res.push_back(by_length(arr.substr(0,\
    \ i)));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10xrs5w_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp10xrs5w_.cpp:29:41: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   29 |             res.push_back(by_length(arr.substr(0, i)));\n      |   \
    \                                      ^~~~~~\n/tmp/tmp10xrs5w_.cpp:34:33: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   34 |     res.push_back(by_length(arr.substr(0, i)));\n      |           \
    \                      ^~~~~~\n/tmp/tmp10xrs5w_.cpp:34:43: error: \u2018i\u2019\
    \ was not declared in this scope\n   34 |     res.push_back(by_length(arr.substr(0,\
    \ i)));\n      |                                           ^\n"
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            if (cur == last)\
    \ res.push_back(to_string(cur));\n            else res.push_back(to_string(cur));\n\
    \            cur = i;\n            last = i;\n        }\n    }\n    if (cur ==\
    \ last) res.push_back(to_string(cur));\n    return res;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp620nwg4v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp620nwg4v.cpp:20:44: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             if (cur == last) res.push_back(to_string(cur));\n     \
    \ |                                            ^~~~~~~~~\n      |            \
    \                                std::__cxx11::to_string\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp620nwg4v.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp620nwg4v.cpp:21:32: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |             else res.push_back(to_string(cur));\n      |          \
    \                      ^~~~~~~~~\n      |                                std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp620nwg4v.cpp:2:\n/usr/include/c++/"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (max_len < arr[i])\
    \ max_len = arr[i];\n        if (min_len > arr[i]) min_len = arr[i];\n    }\n\
    \    long mid = max_len;\n    long start = 0, end = 0, mid_index = 0;\n    while\
    \ (start < n) {\n        while (arr[start] < mid) {\n            mid_index++;\n\
    \            start++;\n        }\n        while (arr[end] > mid) {\n         \
    \   mid_index--;\n            end--;\n        }\n        if (start > end) break;\n\
    \        res.push_back(arr[mid_index]);\n        mid_index++;\n        mid = arr[mid_index];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtmkevh0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpmtmkevh0.cpp:36:37: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   36 |         res.push_back(arr[mid_index]);\n      |                    \
    \                 ^\nIn file included from /usr/include/c++/9/vector:67,\n   \
    \              from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpmtmkevh0.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::al"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return {};\n  if (arr.size()\
    \ <= 9) return {};\n  std::vector<std::string> res;\n  for (long i : arr) {\n\
    \    if (i >= 1 && i <= 9) {\n      res.push_back(\"One\");\n      res.push_back(\"\
    Two\");\n      res.push_back(\"Three\");\n      res.push_back(\"Four\");\n   \
    \   res.push_back(\"Five\");\n      res.push_back(\"Six\");\n      res.push_back(\"\
    Seven\");\n      res.push_back(\"Eight\");\n      res.push_back(\"Nine\");\n \
    \     res.push_back(\"Ten\");\n      res.push_back(\"Eleven\");\n      res.push_back(\"\
    Twelve\");\n      res.push_back(\"Thirteen\");\n      res.push_back(\"Fourteen\"\
    );\n      res.push_back(\"Fifteen\");\n      res.push_back(\"Sixteen\");\n   \
    \   res.push_back(\"Seventeen\");\n      res.push_back(\"Eighteen\");\n      res.push_back(\"\
    Nineteen\");\n      res.push_back(\"Twenty\");\n      res.push_back(\"Twenty one\"\
    );\n      res.push_back(\"Twenty two\");\n      res.push_back(\"Twenty three\"\
    );\n      res.push_back(\"Twenty four\");\n      res.push_back(\"Twenty five\"\
    );\n      res.push_back(\"Twenty six\");\n      res.push_back(\"Twenty seven\"\
    );\n      res.push_back(\"Twenty eight\");\n      res.push_back(\"Twenty nine\"\
    );\n      res.push_back(\"Twenty ten\");\n      res.push_back(\"Twenty eleven\"\
    );\n      res.push_back(\"Twenty twelve\");\n      res.push_back(\"Twenty thirteen\"\
    );\n      res.push_back(\"Twenty fourteen\");\n      res.push_back(\"Twenty fifteen\"\
    );\n      res.push_back(\"Twenty sixteen\");\n      res.push_back(\"Twenty seventeen\"\
    );\n      res.push_back(\"Twenty eighteen\");\n      res.push_back(\"Twenty nineteen\"\
    );\n      res.push_back(\"Twenty twenty\");\n      res.push_back(\"Twenty twenty\
    \ one\");\n      res.push_back(\"Twenty twenty two\");\n      res.push_back(\"\
    Twenty twenty three\");\n      res.push_back(\"Twenty twenty four\");\n      res.push_back(\"\
    Twenty twenty five\");\n      res.push_back(\"Twenty twenty six\");\n      res.push_back(\"\
    Twenty twenty seven\");\n      res.push_back\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpagd9069t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpagd9069t.cpp:66:20: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   66 |       res.push_back\n\
    \      |                    ^\n      |                    ;\n   67 | }\n     \
    \ | ~                   \n/tmp/tmpagd9069t.cpp:66:11: error: statement cannot\
    \ resolve address of overloaded function\n   66 |       res.push_back\n      |\
    \       ~~~~^~~~~~~~~\n/tmp/tmpagd9069t.cpp:68:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   68 | int main() {\n     \
    \ |            ^\n/tmp/tmpagd9069t.cpp:75:1: error: expected \u2018}\u2019 at\
    \ end of input\n   75 | }\n      | ^\n/tmp/tmpagd9069t.cpp:17:22: note: to match\
    \ this \u2018{\u2019\n   17 |   for (long i : arr) {\n      |                \
    \      ^\n/tmp/tmpagd9069t.cpp:75:1: error: expected \u2018}\u2019 at end of input\n\
    \   75 | }\n      | ^\n/tmp/tmpagd9069t.cpp:13:59: note: to match this \u2018\
    {\u2019\n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n\
    \      |                                                           ^\n/tmp/tmpagd9069t.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long len = arr.size();\n\
    \    long start = 1;\n    while (start < len) {\n        long mid = (start + len)\
    \ / 2;\n        if (arr[mid] > num) {\n            len = mid;\n        } else\
    \ {\n            start = mid + 1;\n        }\n    }\n    long end = len;\n   \
    \ while (end > start) {\n        long mid = (start + end) / 2;\n        if (arr[mid]\
    \ < num) {\n            end = mid;\n        } else {\n            start = mid\
    \ + 1;\n        }\n    }\n    std::vector<std::string> temp;\n    for (long i\
    \ = start; i <= end; i++) {\n        temp.push_back(to_string(arr[i]));\n    }\n\
    \    for (long i = 0; i < temp.size(); i++) {\n        res.push_back(temp[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuphnppxk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpuphnppxk.cpp:38:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   38 |         temp.push_back(to_string(arr[i]));\n      |               \
    \         ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpuphnppxk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> result;\n    long curr = arr[0];\n    long\
    \ len = arr.size();\n    long index = 0;\n    while (index < len) {\n        if\
    \ (curr == 1) {\n            result.push_back(\"One\");\n        } else if (curr\
    \ == 2) {\n            result.push_back(\"Two\");\n        } else if (curr ==\
    \ 3) {\n            result.push_back(\"Three\");\n        } else if (curr == 4)\
    \ {\n            result.push_back(\"Four\");\n        } else if (curr == 5) {\n\
    \            result.push_back(\"Five\");\n        } else if (curr == 6) {\n  \
    \          result.push_back(\"Six\");\n        } else if (curr == 7) {\n     \
    \       result.push_back(\"Seven\");\n        } else if (curr == 8) {\n      \
    \      result.push_back(\"Eight\");\n        } else if (curr == 9) {\n       \
    \     result.push_back(\"Nine\");\n        }\n        curr = arr[index];\n   \
    \     index++;\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp2ku78eh4: /tmp/tmp2ku78eh4.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == curr) continue;\n        if (i > curr)\
    \ {\n            long tmp = curr;\n            curr = prev;\n            prev\
    \ = tmp;\n        }\n        res.push_back(std::to_string(curr));\n        curr\
    \ = i;\n    }\n    res.push_back(std::to_string(curr));\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp_h2ns4i3: /tmp/tmp_h2ns4i3.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136031
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long curr = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\
    \ {\n        if (curr != i) {\n            res.push_back(by_length(std::vector<long>{curr,\
    \ i}));\n            curr = i;\n        } else {\n            last += i;\n   \
    \     }\n    }\n    res.push_back(by_length(std::vector<long>{curr, last}));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpppsttqv4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpppsttqv4.cpp:20:64: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   20 |\
    \             res.push_back(by_length(std::vector<long>{curr, i}));\n      | \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpppsttqv4.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to "
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long curr = arr[0];\n    long prev = 0;\n    for (auto i : arr) {\n\
    \        if (i == curr) continue;\n        if (curr < prev) {\n            long\
    \ tmp = curr;\n            curr = prev;\n            prev = tmp;\n        }\n\
    \        res.push_back(to_string(curr));\n        curr = i;\n    }\n    res.push_back(to_string(curr));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphg14ns7_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphg14ns7_.cpp:25:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |         res.push_back(to_string(curr));\n      |                  \
    \     ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphg14ns7_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmphg14ns7_.cpp:28:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |     res.push_back(to_string(curr));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphg14ns7_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string("
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::vector<std::string>();\n\
    \    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev\
    \ = arr[0];\n    for (long i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(prev));\n\
    \            prev = i;\n        }\n        cur = i;\n    }\n    res.push_back(to_string(prev));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffes9v8l.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpffes9v8l.cpp:22:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |             res.push_back(to_string(prev));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpffes9v8l.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpffes9v8l.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(prev));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpffes9v8l.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  for (long i : arr) {\n    if (i > max || i < min) continue;\n    std::string\
    \ name = to_string(static_cast<int>(i));\n    arr.erase(std::remove(arr.begin(),\
    \ arr.end(), name), arr.end());\n    arr.push_back(name);\n  }\n  return arr;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe50ba7il.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpe50ba7il.cpp:19:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |     std::string name = to_string(static_cast<int>(i));\n      |   \
    \                     ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpe50ba7il.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpe50ba7il.cpp:21:23: error: no matching\
    \ function for call to \u2018std::vector<long int>::push_back(std::string&)\u2019\
    \n   21 |     arr.push_back(name);\n      |                       ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe50ba7il.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion"
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    if (min == max) {\n        res.push_back(\"One\");\n       \
    \ return res;\n    }\n    long mid = min + (max - min) / 2;\n    std::vector<std::string>\
    \ left{by_length(arr - {min, mid})};\n    std::vector<std::string> right{by_length(arr\
    \ - {mid, max})};\n    res.insert(res.end(), left.begin(), left.end());\n    res.insert(res.end(),\
    \ right.begin(), right.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqd6_u4xg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqd6_u4xg.cpp:32:51: error:\
    \ expected primary-expression before \u2018{\u2019 token\n   32 |     std::vector<std::string>\
    \ left{by_length(arr - {min, mid})};\n      |                                \
    \                   ^\n/tmp/tmpqd6_u4xg.cpp:32:62: error: no matching function\
    \ for call to \u2018std::vector<std::__cxx11::basic_string<char> >::vector(<brace-enclosed\
    \ initializer list>)\u2019\n   32 |     std::vector<std::string> left{by_length(arr\
    \ - {min, mid})};\n      |                                                   \
    \           ^\nIn file included from /usr/include/c++/9/vector:67,\n         \
    \        from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpqd6_u4xg.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2: note: candidate:\
    \ \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator\
    \ __first, _InputIterator __last,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n  622 |       vector(initializer_list<value_type>\
    \ __l,\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:622:7: note:\
    \   conversion of argument 1 would be ill-formed:\n/usr/include/c++/9/bits/stl_vector.h:604:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::vector<_Tp, _Alloc>&&,\
    \ const allocator_type&) ["
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) return res;\n    long min = *std::min_element(arr.begin(), arr.end());\
    \ // get the smallest number\n    long max = *std::max_element(arr.begin(), arr.end());\
    \ // get the biggest number\n    long mid = (min + max) / 2;\n    long length\
    \ = max - min + 1;\n    long digit = min % 10;\n    long reverse = 0;\n    while\
    \ (length > 0) {\n        reverse = reverse * 10 + digit;\n        digit = arr[mid\
    \ - 1] % 10;\n        long temp = reverse;\n        reverse = reverse * 10 + digit;\n\
    \        arr[mid - 1] = temp;\n        mid = (mid - 1) >> 1;\n        length--;\n\
    \    }\n    long reverse1 = reverse;\n    long reverse2 = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        reverse2 = reverse2 * 10 + arr[i];\n  \
    \  }\n    res.push_back(\"One\");\n    res.push_back(\"Two\");\n    res.push_back(\"\
    Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"One\");\n    res.push_back(\"\
    Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"\
    Five\");\n    res.push_back(\"Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"\
    Eight\");\n    res.push_back(\"Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"\
    One\");\n    res.push_back(\"Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"\
    Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"Six\");\n    res.push_back(\"\
    Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"Nine\");\n    res.push_back(\"\
    Zero\");\n    res.push_back(\"One\");\n    res.push_back(\"Two\");\n    res.push_back(\"\
    Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"One\");\n    res.push_back(\"\
    Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"\
    Five\");\n    res.\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_4p_oalp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp_4p_oalp.cpp:82:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmp_4p_oalp.cpp:82:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   82 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = std::max(std::max(arr[0],\
    \ arr[1]), arr[2]);\n    long min_len = std::min(std::min(arr[0], arr[1]), arr[2]);\n\
    \    long mid = max_len / 2;\n    long mid2 = min_len / 2;\n    long mid3 = mid\
    \ / 3;\n    long mid4 = mid3 / 3;\n    long mid5 = mid4 / 3;\n    long mid6 =\
    \ mid5 / 3;\n    long mid7 = mid6 / 3;\n    long mid8 = mid7 / 3;\n    long mid9\
    \ = mid8 / 3;\n    long mid10 = mid9 / 3;\n    long mid11 = mid10 / 3;\n    long\
    \ mid12 = mid11 / 3;\n    long mid13 = mid12 / 3;\n    long mid14 = mid13 / 3;\n\
    \    long mid15 = mid14 / 3;\n    long mid16 = mid15 / 3;\n    long mid17 = mid16\
    \ / 3;\n    long mid18 = mid17 / 3;\n    long mid19 = mid18 / 3;\n    long mid20\
    \ = mid19 / 3;\n    long mid21 = mid20 / 3;\n    long mid22 = mid21 / 3;\n   \
    \ long mid23 = mid22 / 3;\n    long mid24 = mid23 / 3;\n    long mid25 = mid24\
    \ / 3;\n    long mid26 = mid25 / 3;\n    long mid27 = mid26 / 3;\n    long mid28\
    \ = mid27 / 3;\n    long mid29 = mid28 / 3;\n    long mid30 = mid29 / 3;\n   \
    \ long mid31 = mid30 / 3;\n    long mid32 = mid31 / 3;\n    long mid33 = mid32\
    \ / 3;\n    long mid34 = mid33 / 3;\n    long mid35 = mid34 / 3;\n    long mid36\
    \ = mid35 / 3;\n    long mid37 = mid36 / 3;\n    long mid38 = mid37 / 3;\n   \
    \ long mid39 = mid38 / 3;\n    long mid40 = mid39 / 3;\n    long mid41 = mid40\
    \ / 3;\n    long mid42 = mid41 / 3;\n    long mid43 = mid42 / 3;\n    long mid44\
    \ = mid43 / 3;\n    long mid45 = mid44 / 3;\n    long mid46 = mid45 / 3;\n   \
    \ long mid47 = mid46 / 3;\n    long mid\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6092p661.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6092p661.cpp:67:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmp6092p661.cpp:67:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   67 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (i < 1 || i > 9) continue;\n        long\
    \ mid = (min + max) / 2;\n        if (mid > i) mid = i;\n        if (mid < 1)\
    \ mid = 1;\n        if (mid > 9) mid = 9;\n        std::string s = to_string(mid);\n\
    \        res.push_back(s);\n        min = mid;\n        max = mid;\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoy2rjvxr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpoy2rjvxr.cpp:24:25: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |         std::string s = to_string(mid);\n      |                  \
    \       ^~~~~~~~~\n      |                         std::__cxx11::to_string\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpoy2rjvxr.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i > cur) {\n            res.push_back(to_string(prev));\n\
    \            prev = i;\n        } else {\n            prev = i;\n        }\n \
    \   }\n    res.push_back(to_string(prev));\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7fxtf6f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpv7fxtf6f.cpp:20:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             res.push_back(to_string(prev));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv7fxtf6f.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpv7fxtf6f.cpp:26:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     res.push_back(to_string(prev));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv7fxtf6f.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    long index = 0;\n    while (index < len) {\n        while (cur < 9 && index\
    \ < len) {\n            long tmp = arr[index];\n            arr[index] = cur;\n\
    \            cur = tmp;\n            index++;\n        }\n        res.push_back(to_string(cur));\n\
    \        cur++;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoad0poh7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpoad0poh7.cpp:26:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |         res.push_back(to_string(cur));\n      |                   \
    \    ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpoad0poh7.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        res.push_back(\"One\");\n        return res;\n    }\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5\
    \ = mid % 100;\n    long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n   \
    \ long mid8 = mid / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid\
    \ / 1000000;\n    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n\
    \    long mid13 = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long\
    \ mid15 = mid % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17\
    \ = mid % 10000000000;\n    long mid18 = mid / 100000000000;\n    long mid19 =\
    \ mid % 100000000000;\n    long mid20 = mid / 10000000000000;\n    long mid21\
    \ = mid % 10000000000000;\n    long mid22 = mid / 100000000000000;\n    long mid23\
    \ = mid % 100000000000000;\n    long mid24 = mid / 1000000000000000;\n    long\
    \ mid25 = mid % 1000000000000000;\n    long mid26 = mid / 100000000000000000;\n\
    \    long mid27 = mid % 100000000000000000;\n    long mid28 = mid / 1000000000000000000;\n\
    \    long mid29 = mid % 1000000000000000000;\n    long mid30 = mid / 100000000000000000;\n\
    \    long mid31 = mid % 100000000000000000;\n    long mid32 = mid / 1000000000000000000;\n\
    \    long mid33 = mid % 1000000000000000000;\n    long mid34 = mid / 10000000000000000000;\n\
    \    long mid35 = mid % 10000000000000000000;\n    long mid36 = mid / 100000000000000000000;\n\
    \    long mid37 = mid % 100000000000000000000;\n    long mid38 = mid / 1000000000000000000000;\n\
    \    long mid39 = mid % 1000000000000000000000;\n    long mid40 = mid \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprxzkm25n.cpp:65:24: warning: integer constant is so large that\
    \ it is unsigned\n   65 |     long mid34 = mid / 10000000000000000000;\n     \
    \ |                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmprxzkm25n.cpp:66:24: warning:\
    \ integer constant is so large that it is unsigned\n   66 |     long mid35 = mid\
    \ % 10000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprxzkm25n.cpp:67:24: warning: integer constant is too large for its type\n\
    \   67 |     long mid36 = mid / 100000000000000000000;\n      |              \
    \          ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprxzkm25n.cpp:68:24: warning: integer\
    \ constant is too large for its type\n   68 |     long mid37 = mid % 100000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprxzkm25n.cpp:69:24:\
    \ warning: integer constant is too large for its type\n   69 |     long mid38\
    \ = mid / 1000000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprxzkm25n.cpp:70:24: warning: integer constant is too large for its type\n\
    \   70 |     long mid39 = mid % 1000000000000000000000;\n      |             \
    \           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprxzkm25n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmprxzkm25n.cpp:72:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   72 |\
    \ }\n      | ^\n/tmp/tmprxzkm25n.cpp:72:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   72 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long len\
    \ = arr.size();\n    for (long i = 1; i < len; i++) {\n        if (arr[i] > cur)\
    \ {\n            while (cur > 9) {\n                res.push_back(\"Nine\");\n\
    \                cur -= 10;\n            }\n            res.push_back(by_length({cur}));\n\
    \            cur = arr[i];\n        } else {\n            res.push_back(by_length({cur}));\n\
    \            cur = arr[i];\n        }\n    }\n    res.push_back(by_length({cur}));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjecokjzc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjecokjzc.cpp:26:43: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   26 |\
    \             res.push_back(by_length({cur}));\n      |                      \
    \                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjecokjzc.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::basic_string<ch"
  stdout: ''
  timestamp: 1660136031
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long l = arr[0];\n    for\
    \ (long i : arr) {\n        if (i >= 1 && i <= 9) {\n            l = i;\n    \
    \    }\n    }\n    long r = arr[0];\n    for (long i : arr) {\n        if (i >=\
    \ 1 && i <= 9) {\n            r = i;\n        }\n    }\n    long m = l;\n    for\
    \ (long i : arr) {\n        if (i >= 1 && i <= 9) {\n            m = i;\n    \
    \    }\n    }\n    long n = r;\n    for (long i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            n = i;\n        }\n    }\n    long q = m;\n    for (long\
    \ i : arr) {\n        if (i >= 1 && i <= 9) {\n            q = i;\n        }\n\
    \    }\n    long r = n;\n    for (long i : arr) {\n        if (i >= 1 && i <=\
    \ 9) {\n            r = i;\n        }\n    }\n    long s = q;\n    for (long i\
    \ : arr) {\n        if (i >= 1 && i <= 9) {\n            s = i;\n        }\n \
    \   }\n    long t = r;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            t = i;\n        }\n    }\n    long u = s;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            u = i;\n        }\n   \
    \ }\n    long v = t;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            v = i;\n        }\n    }\n    long w = u;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            w = i;\n        }\n   \
    \ }\n    long x = v;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            x = i;\n        }\n    }\n    long y = w;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            y = i;\n        }\n   \
    \ }\n    long z = x;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            z = i;\n        }\n    }\n    long a = y;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            a = i;\n        }\n   \
    \ }\n    long b = z;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            b = i;\n        }\n    }\n    long c = a;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            c = i;\n        }\n   \
    \ }\n    long d = b;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            d = i;\n        }\n    }\n    long e = c;\n    for (long i :\
    \ arr) {\n        if (i >= \n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgnffay_g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgnffay_g.cpp:48:10: error:\
    \ redeclaration of \u2018long int r\u2019\n   48 |     long r = n;\n      |  \
    \        ^\n/tmp/tmpgnffay_g.cpp:24:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   24 |     long r = arr[0];\n      |          ^\n/tmp/tmpgnffay_g.cpp:129:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  129 | }\n \
    \     | ^\n/tmp/tmpgnffay_g.cpp:128:17: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  128 |         if (i >=\n      |            ~    ^\n      |  \
    \               )\n  129 | }\n      | ~                \n/tmp/tmpgnffay_g.cpp:129:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  129 | }\n \
    \     | ^\n/tmp/tmpgnffay_g.cpp:130:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  130 | int main() {\n      |            ^\n\
    /tmp/tmpgnffay_g.cpp:137:1: error: expected \u2018}\u2019 at end of input\n  137\
    \ | }\n      | ^\n/tmp/tmpgnffay_g.cpp:13:59: note: to match this \u2018{\u2019\
    \n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n      |\
    \                                                           ^\n/tmp/tmpgnffay_g.cpp:137:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  137 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    for (long i :\
    \ arr) {\n        if (i <= 9) {\n            while (cur < i) {\n             \
    \   res.push_back(\"One\");\n                cur++;\n            }\n         \
    \   while (cur > i) {\n                res.push_back(\"Nine\");\n            \
    \    cur--;\n            }\n        } else {\n            while (cur >= i) {\n\
    \                res.push_back(\"Ten\");\n                cur--;\n           \
    \ }\n            while (cur < i) {\n                res.push_back(\"Nine\");\n\
    \                cur++;\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpcccj8agg: /tmp/tmpcccj8agg.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            prev = cur;\n\
    \        } else {\n            res.push_back(to_string(prev));\n            prev\
    \ = i;\n            cur = i;\n        }\n    }\n    res.push_back(to_string(prev));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjlexf070.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjlexf070.cpp:22:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |             res.push_back(to_string(prev));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjlexf070.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpjlexf070.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(prev));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjlexf070.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n          \
    \  std::string s = std::to_string(i);\n            std::reverse(s.begin(), s.end());\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmplokoncwr: /tmp/tmplokoncwr.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long rest = arr[1];\n\
    \    long rest2 = rest;\n    long rest3 = rest2;\n    long rest4 = rest3;\n  \
    \  long rest5 = rest4;\n    long rest6 = rest5;\n    long rest7 = rest6;\n   \
    \ long rest8 = rest7;\n    long rest9 = rest8;\n    long rest10 = rest9;\n   \
    \ long rest11 = rest10;\n    long rest12 = rest11;\n    long rest13 = rest12;\n\
    \    long rest14 = rest13;\n    long rest15 = rest14;\n    long rest16 = rest15;\n\
    \    long rest17 = rest16;\n    long rest18 = rest17;\n    long rest19 = rest18;\n\
    \    long rest20 = rest19;\n    long rest21 = rest20;\n    long rest22 = rest21;\n\
    \    long rest23 = rest22;\n    long rest24 = rest23;\n    long rest25 = rest24;\n\
    \    long rest26 = rest25;\n    long rest27 = rest26;\n    long rest28 = rest27;\n\
    \    long rest29 = rest28;\n    long rest30 = rest29;\n    long rest31 = rest30;\n\
    \    long rest32 = rest31;\n    long rest33 = rest32;\n    long rest34 = rest33;\n\
    \    long rest35 = rest34;\n    long rest36 = rest35;\n    long rest37 = rest36;\n\
    \    long rest38 = rest37;\n    long rest39 = rest38;\n    long rest40 = rest39;\n\
    \    long rest41 = rest40;\n    long rest42 = rest41;\n    long rest43 = rest42;\n\
    \    long rest44 = rest43;\n    long rest45 = rest44;\n    long rest46 = rest45;\n\
    \    long rest47 = rest46;\n    long rest48 = rest47;\n    long rest49 = rest48;\n\
    \    long rest50 = rest49;\n    long rest51 = rest50;\n    long rest52 = rest51;\n\
    \    long rest53 = rest52;\n    long rest54 = rest53;\n    long rest55 = rest54;\n\
    \    long rest56 = rest55;\n    long rest57 = rest56;\n    long rest58 = rest57;\n\
    \    long rest\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4tf43rtm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp4tf43rtm.cpp:76:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmp4tf43rtm.cpp:76:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   76 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136031
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5\
    \ = mid % 100;\n    long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n   \
    \ long mid8 = mid / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid\
    \ / 1000000;\n    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n\
    \    long mid13 = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long\
    \ mid15 = mid % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17\
    \ = mid % 10000000000;\n    long mid18 = mid / 100000000000;\n    long mid19 =\
    \ mid % 100000000000;\n    long mid20 = mid / 10000000000000;\n    long mid21\
    \ = mid % 10000000000000;\n    long mid22 = mid / 100000000000000;\n    long mid23\
    \ = mid % 100000000000000;\n    long mid24 = mid / 1000000000000000;\n    long\
    \ mid25 = mid % 1000000000000000;\n    long mid26 = mid / 100000000000000000;\n\
    \    long mid27 = mid % 100000000000000000;\n    long mid28 = mid / 1000000000000000000;\n\
    \    long mid29 = mid % 1000000000000000000;\n    long mid30 = mid / 100000000000000000;\n\
    \    long mid31 = mid % 100000000000000000;\n    long mid32 = mid / 1000000000000000000;\n\
    \    long mid33 = mid % 1000000000000000000;\n    long mid34 = mid / 100000000000000000;\n\
    \    long mid35 = mid % 100000000000000000;\n    long mid36 = mid / 1000000000000000000;\n\
    \    long mid37 = mid % 1000000000000000000;\n    long mid38 = mid / 100000000000000000;\n\
    \    long mid39 = mid % 100000000000000000;\n    long mid40 = mid / 1000000000000000000;\n\
    \    long mid41 = m\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqie_yr4t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqie_yr4t.cpp:68:18: error:\
    \ \u2018m\u2019 was not declared in this scope; did you mean \u2018tm\u2019?\n\
    \   68 |     long mid41 = m\n      |                  ^\n      |             \
    \     tm\n/tmp/tmpqie_yr4t.cpp:69:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return {};\n  long min\
    \ = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      continue;\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpjs98njs_: /tmp/tmpjs98njs_.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i <= 9) {\n            if (i == cur)\n\
    \                res.push_back(to_string(last));\n            else\n         \
    \       res.push_back(to_string(cur));\n            last += i;\n            cur\
    \ = i;\n        } else {\n            res.push_back(to_string(cur));\n       \
    \     last += i;\n            cur = i;\n        }\n    }\n    res.push_back(to_string(cur));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36tco6kj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp36tco6kj.cpp:22:31: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |                 res.push_back(to_string(last));\n      |          \
    \                     ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp36tco6kj.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp36tco6kj.cpp:24:31: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |                 res.push_back(to_string(cur));\n      |           \
    \                    ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp36tco6kj.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018st"
  stdout: ''
  timestamp: 1660136031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (cur < arr[i]) {\n         \
    \   res.push_back(\"One\");\n            cur = arr[i];\n        } else if (cur\
    \ > arr[i]) {\n            res.push_back(\"Nine\");\n            cur = arr[i];\n\
    \        } else {\n            res.push_back(\"Two\");\n            cur = arr[i];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp9jpaa4g2: /tmp/tmp9jpaa4g2.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long n = arr.size();\n    long\
    \ max_len = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ > 9) {\n            long tmp = arr[i];\n            arr[i] = arr[i] - 10;\n\
    \            arr[i] = tmp + 10;\n        }\n        if (arr[i] > max_len) {\n\
    \            max_len = arr[i];\n        }\n        if (arr[i] < min_len) {\n \
    \           min_len = arr[i];\n        }\n    }\n    long mid = max_len;\n   \
    \ long start = min_len + 1;\n    long end = max_len;\n    long mid2 = max_len;\n\
    \    while (start < end) {\n        mid = (start + end) / 2;\n        mid2 = (start\
    \ + end) / 2;\n        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n\
    \            arr[mid] = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n   \
    \     }\n        if (arr[mid] > mid2) {\n            mid2 = arr[mid];\n      \
    \  }\n        if (arr[mid] < mid) {\n            mid = arr[mid];\n        }\n\
    \        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n            arr[mid]\
    \ = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n        }\n        if (arr[mid]\
    \ < mid2) {\n            mid2 = arr[mid];\n        }\n        if (arr[mid] < start)\
    \ {\n            start = arr[mid];\n        }\n        if (arr[mid] > end) {\n\
    \            end = arr[mid];\n        }\n    }\n    std::vector<std::string> temp;\n\
    \    long i = min_len;\n    long j = max_len;\n    while (i < j) {\n        long\
    \ mid = (i + j) / 2;\n        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n\
    \            arr[mid] = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n   \
    \     }\n        if (arr[mid] < 9) {\n            long tmp = arr[mid];\n     \
    \       arr[mid] = arr[mid] + 10;\n            arr[mid] = tmp - 10;\n        }\n\
    \        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n            arr[mid]\
    \ = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n        }\n        if (arr[mid]\
    \ < 9) {\n            long tmp = arr[mid];\n            arr[mid] = arr[mid] +\
    \ 10;\n            arr[mid] = tmp - 10;\n        }\n        long mid2 = (start\
    \ + end) / 2;\n        if (arr[mid2] > 9) {\n            long tmp = arr[mid2];\n\
    \            arr[mid2] = arr[mid2] - 10;\n            arr[mid2] = tmp + 10;\n\
    \        }\n        if (arr[mid2] < 9) {\n            long tmp = arr[\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxva3cr5t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpxva3cr5t.cpp:99:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   99 | }\n      | ^\n\
    /tmp/tmpxva3cr5t.cpp:98:28: error: expected \u2018]\u2019 before \u2018}\u2019\
    \ token\n   98 |             long tmp = arr[\n      |                        \
    \    ^\n      |                            ]\n   99 | }\n      | ~           \
    \                \n/tmp/tmpxva3cr5t.cpp:100:12: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 token\n  100 | int main() {\n      | \
    \           ^\n/tmp/tmpxva3cr5t.cpp:107:1: error: expected \u2018}\u2019 at end\
    \ of input\n  107 | }\n      | ^\n/tmp/tmpxva3cr5t.cpp:69:19: note: to match this\
    \ \u2018{\u2019\n   69 |     while (i < j) {\n      |                   ^\n/tmp/tmpxva3cr5t.cpp:107:1:\
    \ error: expected \u2018}\u2019 at end of input\n  107 | }\n      | ^\n/tmp/tmpxva3cr5t.cpp:13:59:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpxva3cr5t.cpp:107:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  107 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == curr) continue;\n        if (i ==\
    \ prev) {\n            long next = arr[i + 1];\n            if (next == curr)\
    \ continue;\n            long diff = next - curr;\n            if (diff == 1)\
    \ res.push_back(std::to_string(curr));\n            else if (diff == -1) res.push_back(std::to_string(curr)\
    \ + \"One\");\n            else if (diff == -2) res.push_back(std::to_string(curr)\
    \ + \"Two\");\n            else if (diff == -3) res.push_back(std::to_string(curr)\
    \ + \"Three\");\n            else if (diff == -4) res.push_back(std::to_string(curr)\
    \ + \"Four\");\n            else if (diff == -5) res.push_back(std::to_string(curr)\
    \ + \"Five\");\n            else if (diff == -6) res.push_back(std::to_string(curr)\
    \ + \"Six\");\n            else if (diff == -7) res.push_back(std::to_string(curr)\
    \ + \"Seven\");\n            else if (diff == -8) res.push_back(std::to_string(curr)\
    \ + \"Eight\");\n            else if (diff == -9) res.push_back(std::to_string(curr)\
    \ + \"Nine\");\n            else res.push_back(std::to_string(curr) + \"Nine\"\
    );\n        }\n        prev = curr;\n        curr = i;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpom8aaii_: /tmp/tmpom8aaii_.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 2;\n    long l = 0, r = max - 1;\n    while (l <= r)\
    \ {\n        long mid = l + (r - l) / 2;\n        if (arr[mid] >= min && arr[mid]\
    \ <= max) {\n            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpux6h_tqh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpux6h_tqh.cpp:23:41: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   23 |\
    \             ans.push_back(by_length(arr));\n      |                        \
    \                 ^\nIn file included from /usr/include/c++/9/vector:67,\n   \
    \              from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpux6h_tqh.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char> "
  stdout: ''
  timestamp: 1660136032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ ans;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : arr) {\n        min = std::min(i, min);\n        max = std::max(i,\
    \ max);\n    }\n    for (long i = min; i <= max; i++) {\n        std::string s\
    \ = \"\";\n        for (auto j : arr) {\n            if (j == i) s += \"One\"\
    ;\n            else if (j == i + 1) s += \"Two\";\n            else if (j == i\
    \ + 2) s += \"Three\";\n            else if (j == i + 3) s += \"Four\";\n    \
    \        else if (j == i + 4) s += \"Five\";\n            else if (j == i + 5)\
    \ s += \"Six\";\n            else if (j == i + 6) s += \"Seven\";\n          \
    \  else if (j == i + 7) s += \"Eight\";\n            else if (j == i + 8) s +=\
    \ \"Nine\";\n        }\n        ans.push_back(s);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpku5zea40: /tmp/tmpku5zea40.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (max < 1 || max > 9) {\n        return res;\n    }\n   \
    \ long min = *std::min_element(arr.begin(), arr.end());\n    if (min > 9) {\n\
    \        return res;\n    }\n    long mid = max / 10;\n    long left = max - 10\
    \ * mid;\n    long right = max - 10 * mid + 1;\n    std::vector<std::string> leftRes\
    \ = by_length(arr);\n    std::vector<std::string> rightRes = by_length(arr);\n\
    \    std::vector<std::string> res;\n    res.reserve(leftRes.size() + rightRes.size());\n\
    \    for (long i = left; i <= right; i++) {\n        res.push_back(std::to_string(mid)\
    \ + leftRes[i - left] + rightRes[i - left]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjyi7djd2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjyi7djd2.cpp:31:30: error:\
    \ redeclaration of \u2018std::vector<std::__cxx11::basic_string<char> > res\u2019\
    \n   31 |     std::vector<std::string> res;\n      |                         \
    \     ^~~\n/tmp/tmpjyi7djd2.cpp:14:30: note: \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > res\u2019 previously declared here\n   14 |     std::vector<std::string> res;\n\
    \      |                              ^~~\n"
  stdout: ''
  timestamp: 1660136032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = 0, r = 0;\n    for (auto i :\
    \ arr) {\n        if (i < 1 || i > 9) continue;\n        l = i;\n        r = i;\n\
    \        while (l > r) {\n            long mid = (l + r) / 2;\n            if\
    \ (mid < 1) mid = 1;\n            if (mid > 9) mid = 9;\n            if (arr[mid]\
    \ > i) r = mid;\n            else l = mid;\n        }\n        res.push_back(\"\
    One\");\n        res.push_back(\"Two\");\n        res.push_back(\"Three\");\n\
    \        res.push_back(\"Four\");\n        res.push_back(\"Five\");\n        res.push_back(\"\
    Six\");\n        res.push_back(\"Seven\");\n        res.push_back(\"Eight\");\n\
    \        res.push_back(\"Nine\");\n        res.push_back(\"Ten\");\n        res.push_back(\"\
    Eleven\");\n        res.push_back(\"Twelve\");\n        res.push_back(\"Thirteen\"\
    );\n        res.push_back(\"Fourteen\");\n        res.push_back(\"Fifteen\");\n\
    \        res.push_back(\"Sixteen\");\n        res.push_back(\"Seventeen\");\n\
    \        res.push_back(\"Eighteen\");\n        res.push_back(\"Nineteen\");\n\
    \        res.push_back(\"Twenty\");\n        res.push_back(\"Twenty one\");\n\
    \        res.push_back(\"Twenty two\");\n        res.push_back(\"Twenty three\"\
    );\n        res.push_back(\"Twenty four\");\n        res.push_back(\"Twenty five\"\
    );\n        res.push_back(\"Twenty six\");\n        res.push_back(\"Twenty seven\"\
    );\n        res.push_back(\"Twenty eight\");\n        res.push_back(\"Twenty nine\"\
    );\n        res.push_back(\"Twenty ten\");\n        res.push_back(\"Twenty eleven\"\
    );\n        res.push_back(\"Twenty twelve\");\n        res.push_back(\"Twenty\
    \ thirteen\");\n        res.push_back(\"Twenty fourteen\");\n        res.push_back(\"\
    Twenty fifteen\");\n        res.push_back(\"Twenty sixteen\");\n        res.push_back(\"\
    Twenty seventeen\");\n        res.push_back(\"Twenty eighteen\");\n        res.push_back(\"\
    Twenty nineteen\");\n        res.push_back(\"Twenty twenty\");\n        res.push_back(\"\
    Twenty twenty one\");\n        res.push_back(\"Twenty twenty two\");\n       \
    \ res.push_back(\"Twenty twenty three\");\n        res.push_back(\"\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2vuons4.cpp:71:23: warning: missing terminating \" character\n\
    \   71 |         res.push_back(\"\n      |                       ^\n/tmp/tmp_2vuons4.cpp:71:23:\
    \ error: missing terminating \" character\n/tmp/tmp_2vuons4.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long int>)\u2019\
    :\n/tmp/tmp_2vuons4.cpp:72:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   72 | }\n      | ^\n/tmp/tmp_2vuons4.cpp:73:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n     \
    \ |            ^\n/tmp/tmp_2vuons4.cpp:80:1: error: expected \u2018}\u2019 at\
    \ end of input\n   80 | }\n      | ^\n/tmp/tmp_2vuons4.cpp:13:59: note: to match\
    \ this \u2018{\u2019\n   13 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp_2vuons4.cpp:80:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    if (arr.size() == 1) {\n        return std::vector<std::string>{\"\
    One\"};\n    }\n    if (arr.size() == 2) {\n        return std::vector<std::string>{\"\
    Two\", \"One\"};\n    }\n    if (arr.size() == 3) {\n        return std::vector<std::string>{\"\
    Three\", \"Two\", \"One\"};\n    }\n    if (arr.size() == 4) {\n        return\
    \ std::vector<std::string>{\"Four\", \"Three\", \"Two\", \"One\"};\n    }\n  \
    \  if (arr.size() == 5) {\n        return std::vector<std::string>{\"Five\", \"\
    Four\", \"Three\", \"Two\", \"One\"};\n    }\n    if (arr.size() == 6) {\n   \
    \     return std::vector<std::string>{\"Six\", \"Five\", \"Four\", \"Three\",\
    \ \"Two\", \"One\"};\n    }\n    if (arr.size() == 7) {\n        return std::vector<std::string>{\"\
    Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"};\n    }\n \
    \   if (arr.size() == 8) {\n        return std::vector<std::string>{\"Eight\"\
    , \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"};\n    }\n\
    \    if (arr.size() == 9) {\n        return std::vector<std::string>{\"Nine\"\
    , \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    };\n    }\n    return {};\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp06a2i6hr: /tmp/tmp06a2i6hr.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 % 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 % 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 % 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 % 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 % 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 % 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 % 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 %\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 % 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 % 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 % 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 % 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 % 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 % 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 % 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 % 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 %\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 % 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 % 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 % 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 % 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 % 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 % 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_sg1ir0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpk_sg1ir0.cpp:67:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmpk_sg1ir0.cpp:67:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   67 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return {};\n  long min\
    \ = *std::min_element(arr.begin(), arr.end()); // get min value\n  long max =\
    \ *std::max_element(arr.begin(), arr.end()); // get max value\n  long mid = (min\
    \ + max) / 2;\n  std::vector<std::string> result;\n  while (min <= max) {\n  \
    \  long mid = (min + max) / 2;\n    if (arr[mid] >= 1 && arr[mid] <= 9) {\n  \
    \    result.push_back(to_string(arr[mid]));\n      min = mid + 1;\n    } else\
    \ {\n      max = mid - 1;\n    }\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv0hjizq5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpv0hjizq5.cpp:22:24: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |       result.push_back(to_string(arr[mid]));\n      |             \
    \           ^~~~~~~~~\n      |                        std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0hjizq5.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) {\n        return result;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min == max) {\n        result.push_back(\"One\");\n        return result;\n\
    \    }\n    if (min > 9 || max < 1) {\n        return result;\n    }\n    long\
    \ mid = (min + max) / 2;\n    std::vector<std::string> left, big;\n    by_length(arr,\
    \ left, mid);\n    by_length(arr, big, max);\n    std::reverse(left.begin(), left.end());\n\
    \    std::reverse(big.begin(), big.end());\n    for (auto &i : left) {\n     \
    \   result.push_back(i);\n    }\n    for (auto &i : big) {\n        result.push_back(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ogh_xvz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5ogh_xvz.cpp:29:29: error:\
    \ too many arguments to function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019\n   29 |     by_length(arr, left, mid);\n\
    \      |                             ^\n/tmp/tmp5ogh_xvz.cpp:13:26: note: declared\
    \ here\n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n\
    \      |                          ^~~~~~~~~\n/tmp/tmp5ogh_xvz.cpp:30:28: error:\
    \ too many arguments to function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019\n   30 |     by_length(arr, big, max);\n\
    \      |                            ^\n/tmp/tmp5ogh_xvz.cpp:13:26: note: declared\
    \ here\n   13 | std::vector<std::string> by_length(std::vector<long> arr) {\n\
    \      |                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == cur) {\n            prev = i;\n  \
    \      } else {\n            long tmp = cur;\n            cur = prev;\n      \
    \      prev = tmp;\n            res.push_back(std::to_string(prev));\n       \
    \ }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmph4l4eyvy: /tmp/tmph4l4eyvy.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(last));\n\
    \            cur = i;\n            last = i;\n        } else {\n            last\
    \ = i;\n        }\n    }\n    res.push_back(to_string(last));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcakptbzv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpcakptbzv.cpp:20:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             res.push_back(to_string(last));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpcakptbzv.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpcakptbzv.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(last));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcakptbzv.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    std::string temp;\n    while (left < max) {\n    \
    \    temp = names[left];\n        names[left] = names[right];\n        names[right]\
    \ = temp;\n        left++;\n        right--;\n    }\n    for (auto i : arr) {\n\
    \        ans.push_back(names[i]);\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9xwxmmn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmps9xwxmmn.cpp:33:16: error:\
    \ \u2018names\u2019 was not declared in this scope\n   33 |         temp = names[left];\n\
    \      |                ^~~~~\n/tmp/tmps9xwxmmn.cpp:40:23: error: \u2018names\u2019\
    \ was not declared in this scope\n   40 |         ans.push_back(names[i]);\n \
    \     |                       ^~~~~\n"
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 10;\n    long rem = max % 10;\n    long start = mid\
    \ - 1;\n    long end = mid + 1;\n    long mid2 = mid * 10;\n    long mid3 = mid2\
    \ * 10;\n    long mid4 = mid3 * 10;\n    long mid5 = mid4 * 10;\n    long mid6\
    \ = mid5 * 10;\n    long mid7 = mid6 * 10;\n    long mid8 = mid7 * 10;\n    long\
    \ mid9 = mid8 * 10;\n    long mid10 = mid9 * 10;\n    long mid11 = mid10 * 10;\n\
    \    long mid12 = mid11 * 10;\n    long mid13 = mid12 * 10;\n    long mid14 =\
    \ mid13 * 10;\n    long mid15 = mid14 * 10;\n    long mid16 = mid15 * 10;\n  \
    \  long mid17 = mid16 * 10;\n    long mid18 = mid17 * 10;\n    long mid19 = mid18\
    \ * 10;\n    long mid20 = mid19 * 10;\n    long mid21 = mid20 * 10;\n    long\
    \ mid22 = mid21 * 10;\n    long mid23 = mid22 * 10;\n    long mid24 = mid23 *\
    \ 10;\n    long mid25 = mid24 * 10;\n    long mid26 = mid25 * 10;\n    long mid27\
    \ = mid26 * 10;\n    long mid28 = mid27 * 10;\n    long mid29 = mid28 * 10;\n\
    \    long mid30 = mid29 * 10;\n    long mid31 = mid30 * 10;\n    long mid32 =\
    \ mid31 * 10;\n    long mid33 = mid32 * 10;\n    long mid34 = mid33 * 10;\n  \
    \  long mid35 = mid34 * 10;\n    long mid36 = mid35 * 10;\n    long mid37 = mid36\
    \ * 10;\n    long mid38 = mid37 * 10;\n    long mid39 = mid38 * 10;\n    long\
    \ mid40 = mid39 * 10;\n    long mid41 = mid40 * 10;\n    long mid42 = mid41 *\
    \ 10;\n    long mid43 = mid42 * 10;\n    long mid44 = mid43 * 10;\n    long mid45\
    \ = mid44 * 10;\n    long mid46 = mid45 * 10;\n    long mid47 = \n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqn99n0j3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqn99n0j3.cpp:68:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   68 | }\n      | ^\n\
    /tmp/tmpqn99n0j3.cpp:68:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   68 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = min + (max - min) / 2;\n    long length = arr.size();\n    for\
    \ (long i = 0; i < length; i++) {\n        if (arr[i] >= min && arr[i] <= max)\
    \ {\n            long index = arr[i] - mid;\n            std::string name = to_string(index);\n\
    \            res.push_back(name);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmya385j.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgmya385j.cpp:23:32: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |             std::string name = to_string(index);\n      |         \
    \                       ^~~~~~~~~\n      |                                std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgmya385j.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = arr.size();\n    long m = l /\
    \ 10;\n    long n = l % 10;\n    long sum = 0;\n    for (long i = 0; i < m; i++)\
    \ {\n        sum += arr[i];\n    }\n    long sum_reverse = 0;\n    for (long i\
    \ = 0; i < n; i++) {\n        sum_reverse += arr[m * 10 + i];\n    }\n    long\
    \ sum_reverse_2 = sum_reverse / 10;\n    long sum_reverse_3 = sum_reverse % 10;\n\
    \    long sum_reverse_4 = sum_reverse_2 * 10;\n    long sum_reverse_5 = sum_reverse_3\
    \ * 10;\n    long sum_reverse_6 = sum_reverse_4 * 10;\n    long sum_reverse_7\
    \ = sum_reverse_5 * 10;\n    long sum_reverse_8 = sum_reverse_6 * 10;\n    long\
    \ sum_reverse_9 = sum_reverse_7 * 10;\n    long sum_reverse_10 = sum_reverse_8\
    \ * 10;\n    long sum_reverse_11 = sum_reverse_9 * 10;\n    long sum_reverse_12\
    \ = sum_reverse_10 * 10;\n    long sum_reverse_13 = sum_reverse_11 * 10;\n   \
    \ long sum_reverse_14 = sum_reverse_12 * 10;\n    long sum_reverse_15 = sum_reverse_13\
    \ * 10;\n    long sum_reverse_16 = sum_reverse_14 * 10;\n    long sum_reverse_17\
    \ = sum_reverse_15 * 10;\n    long sum_reverse_18 = sum_reverse_16 * 10;\n   \
    \ long sum_reverse_19 = sum_reverse_17 * 10;\n    long sum_reverse_20 = sum_reverse_18\
    \ * 10;\n    long sum_reverse_21 = sum_reverse_19 * 10;\n    long sum_reverse_22\
    \ = sum_reverse_20 * 10;\n    long sum_reverse_23 = sum_reverse_21 * 10;\n   \
    \ long sum_reverse_24 = sum_reverse_22 * 10;\n    long sum_reverse_25 = sum_reverse_23\
    \ * 10;\n    long sum_reverse_26 = sum_reverse_24 * 10;\n    long sum_reverse_27\
    \ = sum_reverse_25 * 10;\n    long sum_reverse_28 = sum_reverse_26 * 10;\n   \
    \ long sum_reverse_29 = sum_reverse_27 * 10;\n    long sum_reverse_30 = sum_reverse_28\
    \ * 10;\n    long sum_reverse_31 = sum_reverse_29 * 10;\n    long sum_reverse_32\
    \ = sum_reverse_30 * 10;\n    long sum_reverse_33 = sum_reverse_31 * 10;\n   \
    \ long sum\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpide9o5r5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpide9o5r5.cpp:60:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpide9o5r5.cpp:60:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    while (len) {\n        if (cur < 1 || cur > 9) break;\n        res.push_back(by_length[cur]);\n\
    \        cur /= 10;\n        len--;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjbuj2yv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmptjbuj2yv.cpp:20:36: warning:\
    \ pointer to a function used in arithmetic [-Wpointer-arith]\n   20 |        \
    \ res.push_back(by_length[cur]);\n      |                                    ^\n\
    /tmp/tmptjbuj2yv.cpp:20:37: error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> > (&)(std::vector<long\
    \ int>))\u2019\n   20 |         res.push_back(by_length[cur]);\n      |      \
    \                               ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptjbuj2yv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >(std::vector<long int>)\u2019 to \u2018const value_type&\u2019 {aka \u2018\
    const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type"
  stdout: ''
  timestamp: 1660136033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ std::vector<std::string>();\n    std::vector<long> sorted_arr(arr.begin(), arr.end());\n\
    \    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<std::string>\
    \ ans;\n    for (long i : sorted_arr) {\n        if (i >= 1 && i <= 9)\n     \
    \       ans.push_back(\"One\");\n        else if (i >= 10 && i <= 99)\n      \
    \      ans.push_back(\"Two\");\n        else if (i >= 100 && i <= 999)\n     \
    \       ans.push_back(\"Three\");\n        else if (i >= 1000 && i <= 9999)\n\
    \            ans.push_back(\"Four\");\n        else if (i >= 10000 && i <= 99999)\n\
    \            ans.push_back(\"Five\");\n        else if (i >= 100000 && i <= 999999)\n\
    \            ans.push_back(\"Six\");\n        else if (i >= 1000000 && i <= 9999999)\n\
    \            ans.push_back(\"Seven\");\n        else if (i >= 10000000 && i <=\
    \ 99999999)\n            ans.push_back(\"Eight\");\n        else if (i >= 100000000\
    \ && i <= 999999999)\n            ans.push_back(\"Nine\");\n        else\n   \
    \         ans.push_back(\"Unknown\");\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpvrbxb7ao: /tmp/tmpvrbxb7ao.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i > cur) {\n            res.push_back(to_string(prev));\n\
    \            cur = i;\n        }\n        prev = i;\n    }\n    res.push_back(to_string(prev));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86lg2aiq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp86lg2aiq.cpp:20:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |             res.push_back(to_string(prev));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp86lg2aiq.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp86lg2aiq.cpp:25:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   25 |     res.push_back(to_string(prev));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp86lg2aiq.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \   } else {\n            while (cur != last) {\n                res.push_back(to_string(cur));\n\
    \                cur = last;\n            }\n            while (cur != i) {\n\
    \                res.push_back(to_string(cur));\n                cur = i;\n  \
    \          }\n            while (cur != i) {\n                last = cur;\n  \
    \              cur = i;\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6hs30r8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpa6hs30r8.cpp:23:31: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |                 res.push_back(to_string(cur));\n      |           \
    \                    ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpa6hs30r8.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpa6hs30r8.cpp:27:31: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |                 res.push_back(to_string(cur));\n      |           \
    \                    ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpa6hs30r8.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std"
  stdout: ''
  timestamp: 1660136033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    for (long i = 0; i < n;\
    \ i++) {\n        while (m <= 9 && arr[i] >= m) m *= 10;\n        while (m > 9\
    \ && arr[i] < m) m /= 10;\n        if (m == 1) res.push_back(\"One\");\n     \
    \   else if (m == 2) res.push_back(\"Two\");\n        else if (m == 3) res.push_back(\"\
    Three\");\n        else if (m == 4) res.push_back(\"Four\");\n        else if\
    \ (m == 5) res.push_back(\"Five\");\n        else if (m == 6) res.push_back(\"\
    Six\");\n        else if (m == 7) res.push_back(\"Seven\");\n        else if (m\
    \ == 8) res.push_back(\"Eight\");\n        else if (m == 9) res.push_back(\"Nine\"\
    );\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp4fh0t3u3: /tmp/tmp4fh0t3u3.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136034
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = 0, r = 0;\n    for (long i :\
    \ arr) {\n        if (i <= 9) l = i;\n        else r = i;\n        if (l <= r)\
    \ res.push_back(\"One\");\n        else if (l > r) res.push_back(\"Two\");\n \
    \       else if (l == r) res.push_back(\"Three\");\n        else if (l < r) res.push_back(\"\
    Four\");\n        else if (l == r) res.push_back(\"Five\");\n        else if (l\
    \ > r) res.push_back(\"Six\");\n        else if (l == r) res.push_back(\"Seven\"\
    );\n        else if (l > r) res.push_back(\"Eight\");\n        else if (l == r)\
    \ res.push_back(\"Nine\");\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp8e5kwg4p: /tmp/tmp8e5kwg4p.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136034
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    for (long i : arr) {\n        if (i <=\
    \ 9) {\n            std::string s = std::to_string(i);\n            std::string\
    \ t = std::to_string(i - 1);\n            std::string u = std::to_string(9 - i);\n\
    \            res.push_back(u + s);\n            res.push_back(t);\n        } else\
    \ {\n            std::string s = std::to_string(i);\n            std::string t\
    \ = std::to_string(i - 1);\n            std::string u = std::to_string(9 - i);\n\
    \            res.push_back(u + s);\n            res.push_back(t);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpfgsqbbxu: /tmp/tmpfgsqbbxu.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = n;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) {\n            arr[i] = arr[i] % 10;\n            arr[i] /= 10;\n       \
    \     arr[i] = arr[i] + 1;\n        }\n        if (arr[i] > max_len) {\n     \
    \       max_len = arr[i];\n        }\n        if (arr[i] < min_len) {\n      \
    \      min_len = arr[i];\n        }\n    }\n    long mid = min_len + max_len /\
    \ 2;\n    long mid2 = max_len - mid;\n    long mid3 = max_len;\n    long mid4\
    \ = max_len;\n    long mid5 = max_len;\n    long mid6 = max_len;\n    long mid7\
    \ = max_len;\n    long mid8 = max_len;\n    long mid9 = max_len;\n    long mid10\
    \ = max_len;\n    long mid11 = max_len;\n    long mid12 = max_len;\n    long mid13\
    \ = max_len;\n    long mid14 = max_len;\n    long mid15 = max_len;\n    long mid16\
    \ = max_len;\n    long mid17 = max_len;\n    long mid18 = max_len;\n    long mid19\
    \ = max_len;\n    long mid20 = max_len;\n    long mid21 = max_len;\n    long mid22\
    \ = max_len;\n    long mid23 = max_len;\n    long mid24 = max_len;\n    long mid25\
    \ = max_len;\n    long mid26 = max_len;\n    long mid27 = max_len;\n    long mid28\
    \ = max_len;\n    long mid29 = max_len;\n    long mid30 = max_len;\n    long mid31\
    \ = max_len;\n    long mid32 = max_len;\n    long mid33 = max_len;\n    long mid34\
    \ = max_len;\n    long mid35 = max_len;\n    long mid36 = max_len;\n    long mid37\
    \ = max_len;\n    long mid38 = max_len;\n    long mid39 = max_len;\n    long mid40\
    \ = max_len;\n    long mid41 = max_len;\n    long mid42 = max_len;\n    long mid43\
    \ = max_len;\n    long mid44 = max_len;\n    long mid45 = max_len;\n    long mid46\
    \ = max_len;\n    long mid47 = max_len;\n    long mid48 = max_len;\n    long mid49\
    \ = max_len;\n    long mid50 = max_len;\n    long mid51 = max_len;\n    long mid52\
    \ = max_len;\n    long mid53 = max_\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2m7em510.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2m7em510.cpp:83:18: error:\
    \ \u2018max_\u2019 was not declared in this scope\n   83 |     long mid53 = max_\n\
    \      |                  ^~~~\n/tmp/tmp2m7em510.cpp:84:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \   } else {\n            res.push_back(to_string(last));\n            ++cur;\n\
    \            last = i;\n        }\n    }\n    res.push_back(to_string(last));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprn2cdsm0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmprn2cdsm0.cpp:22:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |             res.push_back(to_string(last));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmprn2cdsm0.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmprn2cdsm0.cpp:27:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |     res.push_back(to_string(last));\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprn2cdsm0.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 | "
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = std::min(n, 9);\n   \
    \ long long k = std::max(n, 9);\n    long long count = 0;\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < k; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < k; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < k; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpna924eh8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpna924eh8.cpp:17:32: error:\
    \ no matching function for call to \u2018min(long long int&, int)\u2019\n   17\
    \ |     long long m = std::min(n, 9);\n      |                               \
    \ ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n           \
    \      from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpna924eh8.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpna924eh8.cpp:17:32: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018int\u2019)\n   17 |     long long m = std::min(n, 9);\n\
    \      |                                ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpna924eh8.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpna924eh8.cpp:17:32:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018int\u2019)\n   17 |     long long m = std::min(n,\
    \ 9);\n      |                                ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpna924eh8.cpp:2:\n/usr/include/"
  stdout: ''
  timestamp: 1660136033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long m = 1;\n\
    \    for (long i = 0; i < n; ++i) {\n        while (m <= 9 && arr[i] < m) ++m;\n\
    \        res.push_back(to_string(m));\n    }\n    for (long i = 0; i < n; ++i)\
    \ {\n        while (m <= 9 && arr[i] >= m) --m;\n        res.push_back(to_string(m));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt8wd0pgz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpt8wd0pgz.cpp:20:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   20 |         res.push_back(to_string(m));\n      |                     \
    \  ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpt8wd0pgz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpt8wd0pgz.cpp:24:23: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |         res.push_back(to_string(m));\n      |                     \
    \  ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpt8wd0pgz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_s"
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long min_value\
    \ = std::numeric_limits<long>::min();\n    long max_value = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (i >= 1 && i <= 9) {\n            long value\
    \ = i - 1;\n            if (min_value > value) {\n                min_value =\
    \ value;\n            }\n            if (max_value < value) {\n              \
    \  max_value = value;\n            }\n        }\n    }\n    long length = max_value\
    \ - min_value + 1;\n    for (long i = 0; i < length; i++) {\n        long value\
    \ = min_value + i;\n        std::string name = \"\";\n        if (value >= 1 &&\
    \ value <= 9) {\n            name = to_string(value - 1);\n        }\n       \
    \ result.push_back(name);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp77fgzcig.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp77fgzcig.cpp:36:20: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   36 |             name = to_string(value - 1);\n      |                 \
    \   ^~~~~~~~~\n      |                    std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp77fgzcig.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    for (long i : arr) {\n  \
    \      if (i >= 1 && i <= 9) {\n            std::string s = std::to_string(i);\n\
    \            std::string t = \"\";\n            for (auto c : s) {\n         \
    \       t += names[c];\n            }\n            res.push_back(t);\n       \
    \ }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8inrmu2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpb8inrmu2.cpp:23:22: error:\
    \ \u2018names\u2019 was not declared in this scope\n   23 |                 t\
    \ += names[c];\n      |                      ^~~~~\n"
  stdout: ''
  timestamp: 1660136034
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // get the minimum value\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // get the maximum value\n\
    \  std::vector<std::string> result;\n  for (long i = min; i <= max; i++) {\n \
    \   std::string name = \"\";\n    if (i < 10) {\n      name = \"One\";\n    }\
    \ else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n      name\
    \ = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n    } else if\
    \ (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n      name = \"\
    Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n    } else if (i <\
    \ 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n      name = \"Nine\"\
    ;\n    } else {\n      continue;\n    }\n    result.push_back(name);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpx7o3_d4d: /tmp/tmpx7o3_d4d.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) return result;\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid_index = std::distance(arr.begin(),\
    \ std::lower_bound(arr.begin(), arr.end(), mid));\n    long left_index = std::distance(arr.begin(),\
    \ mid_index);\n    long right_index = std::distance(arr.begin(), std::upper_bound(arr.begin(),\
    \ arr.end(), mid));\n    long left_mid = arr[left_index];\n    long right_mid\
    \ = arr[right_index];\n    long left_name = by_length(std::vector<long>{left_mid,\
    \ arr[left_index - 1]});\n    long right_name = by_length(std::vector<long>{right_mid,\
    \ arr[right_index + 1]});\n    result.push_back(left_name);\n    result.push_back(right_name);\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvzv78rq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpyvzv78rq.cpp:20:59: error:\
    \ no matching function for call to \u2018distance(std::vector<long int>::iterator,\
    \ long int&)\u2019\n   20 |     long left_index = std::distance(arr.begin(), mid_index);\n\
    \      |                                                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:66,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpyvzv78rq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note: candidate: \u2018template<class _InputIterator> constexpr typename std::iterator_traits<_Iterator>::difference_type\
    \ std::distance(_InputIterator, _InputIterator)\u2019\n  138 |     distance(_InputIterator\
    \ __first, _InputIterator __last)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyvzv78rq.cpp:20:59:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 and \u2018\
    long int\u2019)\n   20 |     long left_index = std::distance(arr.begin(), mid_index);\n\
    \      |                                                           ^\nIn file\
    \ included from /usr/include/c++/9/filesystem:37,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpyvzv78rq.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:1274:1:\
    \ note: candidate: \u2018std::ptrdiff_t std::distance(std::filesystem::__cxx11::path::iterator,\
    \ std::filesystem::__cxx11::path::iterator)\u2019\n 1274 | distance(filesystem::path::iterator\
    \ __first, filesystem::path::iterator __last)\n      | ^~~~~~~~\n/usr/include/c++/9/bits/fs_path.h:1274:37:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::"
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (max < 1 || max > 9) {\n        return result;\n    }\n\
    \    long min = *std::min_element(arr.begin(), arr.end());\n    if (min < 1 ||\
    \ min > 9) {\n        return result;\n    }\n    long mid = (max + min) / 2;\n\
    \    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 /\
    \ 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 =\
    \ mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long\
    \ mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n\
    \    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long \n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo288i8t1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpo288i8t1.cpp:72:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmpo288i8t1.cpp:72:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   72 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long num = arr[0];\n    long len = arr.size();\n    long digit = num\
    \ / 10;\n    long rest = num % 10;\n    if (len == 1) {\n        res.push_back(\"\
    One\");\n        return res;\n    }\n    if (len == 2) {\n        res.push_back(\"\
    Two\");\n        return res;\n    }\n    if (len == 3) {\n        res.push_back(\"\
    Three\");\n        return res;\n    }\n    if (len == 4) {\n        res.push_back(\"\
    Four\");\n        return res;\n    }\n    if (len == 5) {\n        res.push_back(\"\
    Five\");\n        return res;\n    }\n    if (len == 6) {\n        res.push_back(\"\
    Six\");\n        return res;\n    }\n    if (len == 7) {\n        res.push_back(\"\
    Seven\");\n        return res;\n    }\n    if (len == 8) {\n        res.push_back(\"\
    Eight\");\n        return res;\n    }\n    if (len == 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len > 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len == 1) {\n        res.push_back(\"\
    One\");\n        return res;\n    }\n    if (len == 2) {\n        res.push_back(\"\
    Two\");\n        return res;\n    }\n    if (len == 3) {\n        res.push_back(\"\
    Three\");\n        return res;\n    }\n    if (len == 4) {\n        res.push_back(\"\
    Four\");\n        return res;\n    }\n    if (len == 5) {\n        res.push_back(\"\
    Five\");\n        return res;\n    }\n    if (len == 6) {\n        res.push_back(\"\
    Six\");\n        return res;\n    }\n    if (len == 7) {\n        res.push_back(\"\
    Seven\");\n        return res;\n    }\n    if (len == 8) {\n        res.push_back(\"\
    Eight\");\n        return res;\n    }\n    if (len == 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len > 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len == 1) {\n        res.push_back(\"\
    One\");\n        return res;\n    }\n    if (len == 2) {\n        res.push_back(\"\
    Two\");\n        return res;\n    }\n    if (len == 3) {\n        res.push_back(\"\
    Three\");\n        return res;\n    }\n    if (len == 4) {\n        res.push_back(\"\
    Four\");\n        return res;\n    }\n    if (len == 5) {\n        res.push_back(\"\
    Five\");\n        return res;\n    }\n    if (len == 6) {\n        res.push_back(\"\
    Six\");\n        return res;\n    }\n    if (len == 7) {\n        res.push_back(\"\
    Seven\");\n\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1p0yw3s8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp1p0yw3s8.cpp:128:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  128\
    \ | int main() {\n      |            ^\n/tmp/tmp1p0yw3s8.cpp:135:1: error: expected\
    \ \u2018}\u2019 at end of input\n  135 | }\n      | ^\n/tmp/tmp1p0yw3s8.cpp:13:59:\
    \ note: to match this \u2018{\u2019\n   13 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp1p0yw3s8.cpp:135:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  135 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuf76g9lj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpuf76g9lj.cpp:74:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmpuf76g9lj.cpp:74:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136034
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ {};\n    std::vector<long> arr_rev(arr.size());\n    std::iota(arr_rev.begin(),\
    \ arr_rev.end(), 0);\n    std::sort(arr_rev.begin(), arr_rev.end(), [&arr](int\
    \ a, int b) { return a < b; });\n    std::vector<std::string> ans;\n    for (long\
    \ i : arr_rev) {\n        std::string s = \"\";\n        while (i > 0) {\n   \
    \         s =  s[s.length() - 1] + std::to_string(i%10);\n            i /= 10;\n\
    \        }\n        ans.push_back(s);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpsisrhlq4: /tmp/tmpsisrhlq4.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 10;\n    long rem = max % 10;\n    long cur = min;\n\
    \    long cnt = 0;\n    while (cur < max) {\n        if (arr[cur] >= min && arr[cur]\
    \ <= mid) {\n            std::string str = to_string(arr[cur]);\n            std::string\
    \ rev_str = str + to_string(10 - cnt);\n            res.push_back(rev_str);\n\
    \            cnt += 1;\n        }\n        cur += 1;\n    }\n    if (cnt > 0)\
    \ res.push_back(\"One\");\n    if (rem > 0) res.push_back(\"One\");\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn5qd518i.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpn5qd518i.cpp:24:31: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |             std::string str = to_string(arr[cur]);\n      |       \
    \                        ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpn5qd518i.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    for (long i :\
    \ arr) {\n        if (i <= 9 && i >= 1) {\n            res.push_back(\"One\");\n\
    \        } else if (i <= 99 && i >= 10) {\n            res.push_back(\"Two\");\n\
    \        } else if (i <= 999 && i >= 100) {\n            res.push_back(\"Three\"\
    );\n        } else if (i <= 9999 && i >= 1000) {\n            res.push_back(\"\
    Four\");\n        } else if (i <= 99999 && i >= 10000) {\n            res.push_back(\"\
    Five\");\n        } else if (i <= 999999 && i >= 100000) {\n            res.push_back(\"\
    Six\");\n        } else if (i <= 9999999 && i >= 1000000) {\n            res.push_back(\"\
    Seven\");\n        } else if (i <= 999999999 && i >= 10000000) {\n           \
    \ res.push_back(\"Eight\");\n        } else if (i <= 99999999999 && i >= 100000000)\
    \ {\n            res.push_back(\"Nine\");\n        } else {\n            res.push_back(to_string(cur));\n\
    \        }\n        cur = i;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrez6iff.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpmrez6iff.cpp:37:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   37 |             res.push_back(to_string(cur));\n      |               \
    \            ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmrez6iff.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        std::string one = \"One\";\n        res.push_back(one);\n        return\
    \ res;\n    }\n    long min = arr[0];\n    long max = arr[0];\n    for (long i\
    \ : arr) {\n        if (i < min) {\n            min = i;\n        }\n        if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    std::vector<std::string> arr2 = by_length(arr);\n    std::vector<std::string>\
    \ arr3 = by_length(arr2);\n    std::vector<std::string> arr4 = by_length(arr3);\n\
    \    std::vector<std::string> arr5 = by_length(arr4);\n    std::vector<std::string>\
    \ arr6 = by_length(arr5);\n    std::vector<std::string> arr7 = by_length(arr6);\n\
    \    std::vector<std::string> arr8 = by_length(arr7);\n    std::vector<std::string>\
    \ arr9 = by_length(arr8);\n    std::vector<std::string> arr10 = by_length(arr9);\n\
    \    std::vector<std::string> arr11 = by_length(arr10);\n    std::vector<std::string>\
    \ arr12 = by_length(arr11);\n    std::vector<std::string> arr13 = by_length(arr12);\n\
    \    std::vector<std::string> arr14 = by_length(arr13);\n    std::vector<std::string>\
    \ arr15 = by_length(arr14);\n    std::vector<std::string> arr16 = by_length(arr15);\n\
    \    std::vector<std::string> arr17 = by_length(arr16);\n    std::vector<std::string>\
    \ arr18 = by_length(arr17);\n    std::vector<std::string> arr19 = by_length(arr18);\n\
    \    std::vector<std::string> arr20 = by_length(arr19);\n    std::vector<std::string>\
    \ arr21 = by_length(arr20);\n    std::vector<std::string> arr22 = by_length(arr21);\n\
    \    std::vector<std::string> arr23 = by_length(arr22);\n    std::vector<std::string>\
    \ arr24 = by_length(arr23);\n    std::vector<std::string> arr25 = by_length(arr24);\n\
    \    std::vector<std::string> arr26 = by_length(arr25);\n    std::vector<std::string>\
    \ arr27 = by_length(arr26);\n    std::vector<std::string> arr28 = by_length(arr27);\n\
    \    std::vector<std::string> arr29 = by_length(arr28);\n    std::vector<std::string>\
    \ arr30 = by_length(arr29);\n    std::vector<std::string> arr31 = by_length(arr30);\n\
    \    std::vector<std::string> arr32 = by_length(arr31);\n    std::vector<std::string>\
    \ arr33 = by_length(arr32);\n    std::vector<std::string> arr34 = by_length(arr33);\n\
    \    std::vector<std::string> arr35 = by_length(arr34);\n    std::vector<std::string>\
    \ arr36 = by_length(arr35);\n    std::vector<std::string> arr37 = by_length(arr36);\n\
    \    std::vector<std::string> arr38 = by_length(arr37);\n    std::vector<std::string>\
    \ arr\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntv7qtej.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpntv7qtej.cpp:35:47: error:\
    \ could not convert \u2018arr2\u2019 from \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \ to \u2018vector<long int>\u2019\n   35 |     std::vector<std::string> arr3 =\
    \ by_length(arr2);\n      |                                               ^~~~\n\
    \      |                                               |\n      |            \
    \                                   vector<std::__cxx11::basic_string<char>>\n\
    /tmp/tmpntv7qtej.cpp:36:47: error: could not convert \u2018arr3\u2019 from \u2018\
    vector<std::__cxx11::basic_string<char>>\u2019 to \u2018vector<long int>\u2019\
    \n   36 |     std::vector<std::string> arr4 = by_length(arr3);\n      |      \
    \                                         ^~~~\n      |                      \
    \                         |\n      |                                         \
    \      vector<std::__cxx11::basic_string<char>>\n/tmp/tmpntv7qtej.cpp:37:47: error:\
    \ could not convert \u2018arr4\u2019 from \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \ to \u2018vector<long int>\u2019\n   37 |     std::vector<std::string> arr5 =\
    \ by_length(arr4);\n      |                                               ^~~~\n\
    \      |                                               |\n      |            \
    \                                   vector<std::__cxx11::basic_string<char>>\n\
    /tmp/tmpntv7qtej.cpp:38:47: error: could not convert \u2018arr5\u2019 from \u2018\
    vector<std::__cxx11::basic_string<char>>\u2019 to \u2018vector<long int>\u2019\
    \n   38 |     std::vector<std::string> arr6 = by_length(arr5);\n      |      \
    \                                         ^~~~\n      |                      \
    \                         |\n      |                                         \
    \      vector<std::__cxx11::basic_string<char>>\n/tmp/tmpntv7qtej.cpp:39:47: error:\
    \ could not convert \u2018arr6\u2019 from \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \ to \u2018vector<long int>\u2019\n   39 |     std::vector<std::string> arr7 =\
    \ by_length(arr6);\n      |                                               ^~~~\n\
    \      |      "
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n  \
    \      if (arr[i] < n && arr[i] > 9) {\n            n = arr[i];\n        }\n \
    \   }\n    long m = n;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] < m) {\n            m += arr[i];\n        } else {\n            res.push_back(by_length(std::vector<long>{m,\
    \ arr[i]}));\n            m = arr[i];\n        }\n    }\n    res.push_back(by_length(std::vector<long>{m,\
    \ n}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt9y2top4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpt9y2top4.cpp:27:66: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   27 |\
    \             res.push_back(by_length(std::vector<long>{m, arr[i]}));\n      |\
    \                                                                  ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt9y2top4.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 t"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long first = arr[0];\n  long last = arr[0];\n  for (long i : arr) {\n    if\
    \ (i <= 9) last = i;\n  }\n  std::vector<std::string> res;\n  while (first <=\
    \ last) {\n    long mid = (first + last) / 2;\n    res.push_back(by_length(arr).at(mid));\n\
    \    first = mid;\n  }\n  reverse(arr.begin(), arr.end());\n  for (long i : arr)\
    \ {\n    long index = i - 1;\n    std::string name = by_length(arr).at(index);\n\
    \    arr[index] = name;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xo8aydh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6xo8aydh.cpp:30:18: error:\
    \ cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} in assignment\n   30 |     arr[index] = name;\n \
    \     |                  ^~~~\n      |                  |\n      |           \
    \       std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovcijjrs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpovcijjrs.cpp:75:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   75 | }\n      | ^\n\
    /tmp/tmpovcijjrs.cpp:75:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   75 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136023
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) return result;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 % 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 % 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 % 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 % 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 % 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 % 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 % 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 %\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 % 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 % 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 % 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 % 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 % 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 % 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 % 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 % 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 %\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 % 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 % 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 % 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 % 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 % 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 % 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid49\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphoykk12l.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphoykk12l.cpp:67:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmphoykk12l.cpp:67:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   67 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = arr[0];\n    for (long i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            l = i;\n        }\n    }\n \
    \   long r = l;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9) {\n \
    \           r %= 10;\n            r /= 10;\n            std::string s = std::to_string(i);\n\
    \            std::string t = std::to_string(r);\n            std::string u = std::to_string(l\
    \ - r);\n            std::string v = std::to_string(l - i);\n            std::string\
    \ w = std::to_string(l - r - i);\n            std::string x = std::to_string(l\
    \ - r - r - i);\n            std::string y = std::to_string(l - r - r - r - i);\n\
    \            std::string z = std::to_string(l - r - r - r - r - i);\n        \
    \    std::string aa = std::to_string(l - r - r - r - r - r - i);\n           \
    \ std::string bb = std::to_string(l - r - r - r - r - r - r - i);\n          \
    \  std::string cc = std::to_string(l - r - r - r - r - r - r - r - i);\n     \
    \       std::string dd = std::to_string(l - r - r - r - r - r - r - r - r - i);\n\
    \            std::string ee = std::to_string(l - r - r - r - r - r - r - r - r\
    \ - r - i);\n            std::string ff = std::to_string(l - r - r - r - r - r\
    \ - r - r - r - r - r - i);\n            std::string gg = std::to_string(l - r\
    \ - r - r - r - r - r - r - r - r - r - r - i);\n            std::string hh =\
    \ std::to_string(l - r - r - r - r - r - r - r - r - r - r - r - r - i);\n   \
    \         std::string ii = std::to_string(l - r - r - r - r - r - r - r - r -\
    \ r - r - r - r - r - i);\n            std::string jj = std::to_string(l - r -\
    \ r - r - r - r - r - r - r - r - r - r - r - r - r - i);\n            std::string\
    \ kk = std::to_string(l - r - r - r - r - r - r - r - r - r - r - r - r - r -\
    \ r - i);\n            std::string ll = std::to_string(l \n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnr78tnvs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpnr78tnvs.cpp:46:46: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n   46 |             std::string\
    \ ll = std::to_string(l\n      |                                            ~\
    \ ^\n      |                                              )\n   47 | }\n     \
    \ | ~                                             \n/tmp/tmpnr78tnvs.cpp:47:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   47 | }\n      | ^\n/tmp/tmpnr78tnvs.cpp:48:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   48 | int main() {\n     \
    \ |            ^\n/tmp/tmpnr78tnvs.cpp:55:1: error: expected \u2018}\u2019 at\
    \ end of input\n   55 | }\n      | ^\n/tmp/tmpnr78tnvs.cpp:23:24: note: to match\
    \ this \u2018{\u2019\n   23 |     for (long i : arr) {\n      |              \
    \          ^\n/tmp/tmpnr78tnvs.cpp:55:1: error: expected \u2018}\u2019 at end\
    \ of input\n   55 | }\n      | ^\n/tmp/tmpnr78tnvs.cpp:13:59: note: to match this\
    \ \u2018{\u2019\n   13 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpnr78tnvs.cpp:55:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty()) return ans;\n    long max = *std::max_element(arr.begin(), arr.end());\n\
    \    long min = *std::min_element(arr.begin(), arr.end());\n    long mid = max/10;\n\
    \    long remain = max-mid*10;\n    long count = 0;\n    for (long i : arr) {\n\
    \        if (i >= min && i <= mid) {\n            ans.push_back(\"One\");\n  \
    \          count++;\n        } else if (i >= mid && i <= max) {\n            ans.push_back(\"\
    Two\");\n            count++;\n        } else if (i >= max && i <= remain) {\n\
    \            ans.push_back(\"Three\");\n            count++;\n        } else if\
    \ (i >= remain && i <= max) {\n            ans.push_back(\"Four\");\n        \
    \    count++;\n        } else if (i >= max && i <= mid) {\n            ans.push_back(\"\
    Five\");\n            count++;\n        } else if (i >= mid && i <= remain) {\n\
    \            ans.push_back(\"Six\");\n            count++;\n        } else if\
    \ (i >= remain && i <= mid) {\n            ans.push_back(\"Seven\");\n       \
    \     count++;\n        } else if (i >= mid && i <= max) {\n            ans.push_back(\"\
    Eight\");\n            count++;\n        } else if (i >= max && i <= mid) {\n\
    \            ans.push_back(\"Nine\");\n            count++;\n        }\n    }\n\
    \    if (count == 0) return ans;\n    ans.resize(count);\n    for (long i : arr)\
    \ {\n        if (i >= min && i <= mid) {\n            ans[count-1] = \"One\";\n\
    \            count--;\n        } else if (i >= mid && i <= max) {\n          \
    \  ans[count-1] = \"Two\";\n            count--;\n        } else if (i >= max\
    \ && i <= remain) {\n            ans[count-1] = \"Three\";\n            count--;\n\
    \        } else if (i >= remain && i <= max) {\n            ans[count-1] = \"\
    Four\";\n            count--;\n        } else if (i >= max && i <= mid) {\n  \
    \          ans[count-1] = \"Five\";\n            count--;\n        } else if (i\
    \ >= mid && i <= remain) {\n            ans[count-1] = \"Six\";\n            count--;\n\
    \        } else if (i >= remain && i <= mid) {\n            ans[count-1] = \"\
    Seven\";\n            count--;\n        } else if (i >= mid && i <= max) {\n \
    \           ans[count-1] = \"Eight\";\n            count--;\n        } else if\
    \ (i >= max && i <= mid) {\n            ans[count-1] = \"Nine\";\n           \
    \ count--;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpzm2w5hj4: /tmp/tmpzm2w5hj4.cpp:87: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (auto i : arr) {\n\
    \        if (i <= min || i >= max) continue;\n        long temp = i;\n       \
    \ while (temp > 0) {\n            long digit = temp % 10;\n            std::string\
    \ name = to_string(digit);\n            res.push_back(name);\n            temp\
    \ /= 10;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdj0vhc8m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpdj0vhc8m.cpp:23:32: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   23 |             std::string name = to_string(digit);\n      |         \
    \                       ^~~~~~~~~\n      |                                std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdj0vhc8m.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max_len = 0, min_len = std::numeric_limits<long>::max();\n\
    \    for (auto i : arr) {\n        if (i < 1 || i > 9) continue;\n        max_len\
    \ = std::max(max_len, i);\n        min_len = std::min(min_len, i);\n    }\n  \
    \  std::vector<std::string> names = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    for (long i = min_len;\
    \ i <= max_len; ++i) {\n        std::string name = names[i - min_len];\n     \
    \   for (auto j : arr) {\n            if (j == i) res.push_back(name);\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpfb0aexwc: /tmp/tmpfb0aexwc.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        std::string one = \"One\";\n        res.push_back(one);\n        return\
    \ res;\n    }\n    long min = arr[0];\n    long max = arr[0];\n    for (auto i\
    \ : arr) {\n        if (i < min) {\n            min = i;\n        } else if (i\
    \ > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    long length = max - min;\n    std::vector<std::string> arr_reversed;\n\
    \    long reversed_min = mid;\n    long reversed_max = mid;\n    for (auto i :\
    \ arr) {\n        if (i < reversed_min) {\n            arr_reversed.push_back(\"\
    One\");\n            reversed_min = i;\n        } else if (i > reversed_max) {\n\
    \            arr_reversed.push_back(\"One\");\n            reversed_max = i;\n\
    \        } else {\n            arr_reversed.push_back(by_length(std::vector<long>{i\
    \ - mid, i + mid}));\n        }\n    }\n    for (auto i : arr_reversed) {\n  \
    \      res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x5gu0qt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2x5gu0qt.cpp:45:82: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   45 |\
    \             arr_reversed.push_back(by_length(std::vector<long>{i - mid, i +\
    \ mid}));\n      |                                                           \
    \                       ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2x5gu0qt.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    if (min > 9) {\n        return res;\n    }\n    if (max\
    \ < 1) {\n        return res;\n    }\n    long mid = min + (max - min) / 2;\n\
    \    std::vector<std::string> res2;\n    while (min <= max) {\n        res2.push_back(by_length(arr));\n\
    \        long mid2 = min + (max - min) / 2;\n        if (mid2 == mid) {\n    \
    \        res2.push_back(by_length(arr));\n            mid = mid2;\n        } else\
    \ {\n            mid = mid2;\n        }\n    }\n    std::vector<std::string> res3;\n\
    \    for (auto i : res2) {\n        res3.push_back(by_length(arr));\n    }\n \
    \   std::vector<std::string> res4;\n    for (auto i : res3) {\n        res4.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res5;\n    for (auto i : res4) {\n      \
    \  res5.push_back(by_length(arr));\n    }\n    std::vector<std::string> res6;\n\
    \    for (auto i : res5) {\n        res6.push_back(by_length(arr));\n    }\n \
    \   std::vector<std::string> res7;\n    for (auto i : res6) {\n        res7.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res8;\n    for (auto i : res7) {\n      \
    \  res8.push_back(by_length(arr));\n    }\n    std::vector<std::string> res9;\n\
    \    for (auto i : res8) {\n        res9.push_back(by_length(arr));\n    }\n \
    \   std::vector<std::string> res10;\n    for (auto i : res9) {\n        res10.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res11;\n    for (auto i : res10) {\n    \
    \    res11.push_back(by_length(arr));\n    }\n    std::vector<std::string> res12;\n\
    \    for (auto i : res11) {\n        res12.push_back(by_length(arr));\n    }\n\
    \    std::vector<std::string> res13;\n    for (auto i : res12) {\n        res13.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res14;\n    for (auto i : res13) {\n    \
    \    res14.push_back(by_length(arr));\n    }\n    std::vector<std::string> res15;\n\
    \    for (auto i : res14) {\n        res15.push_back(by_length(arr));\n    }\n\
    \    std::vector<std::string> res16;\n    for (auto i : res15) {\n        res16.push_back(b\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhbsosyi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpfhbsosyi.cpp:37:38: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   37 |\
    \         res2.push_back(by_length(arr));\n      |                           \
    \           ^\nIn file included from /usr/include/c++/9/vector:67,\n         \
    \        from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpfhbsosyi.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char> >::val"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (curr == 1 && i == 1) continue;\n      \
    \  if (curr > 9) continue;\n        if (curr < 1) continue;\n        if (curr\
    \ > last) res.push_back(to_string(curr));\n        last = curr;\n        curr\
    \ = i;\n    }\n    if (curr > 9) res.push_back(to_string(curr));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcaknow1a.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpcaknow1a.cpp:22:40: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |         if (curr > last) res.push_back(to_string(curr));\n      | \
    \                                       ^~~~~~~~~\n      |                   \
    \                     std::__cxx11::to_string\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcaknow1a.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpcaknow1a.cpp:26:33: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |     if (curr > 9) res.push_back(to_string(curr));\n      |        \
    \                         ^~~~~~~~~\n      |                                 std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpcaknow1a.cpp:2:\n/usr/include/c++/9/bits/"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == cur) {\n            prev = i;\n        } else {\n      \
    \      long next = cur;\n            if (next > 9) {\n                next = next\
    \ % 10;\n            }\n            res.push_back(by_length_helper(prev, next,\
    \ cur));\n            prev = cur;\n            cur = i;\n        }\n    }\n  \
    \  res.push_back(by_length_helper(prev, cur, cur));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp97gw0dh7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp97gw0dh7.cpp:26:27: error:\
    \ \u2018by_length_helper\u2019 was not declared in this scope\n   26 |       \
    \      res.push_back(by_length_helper(prev, next, cur));\n      |            \
    \               ^~~~~~~~~~~~~~~~\n/tmp/tmp97gw0dh7.cpp:31:19: error: \u2018by_length_helper\u2019\
    \ was not declared in this scope\n   31 |     res.push_back(by_length_helper(prev,\
    \ cur, cur));\n      |                   ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 /\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 / 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 /\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 / 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid49 = \n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6bbl4jm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpl6bbl4jm.cpp:67:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   67 | }\n      | ^\n\
    /tmp/tmpl6bbl4jm.cpp:67:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long max_len = 0, min_len\
    \ = std::numeric_limits<long>::max();\n    for (auto i : arr) {\n        if (max_len\
    \ < i) {\n            max_len = i;\n        }\n        if (min_len > i) {\n  \
    \          min_len = i;\n        }\n    }\n    long mid = (max_len + min_len)\
    \ / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 =\
    \ mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long\
    \ mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n\
    \    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6\
    \ / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15\
    \ = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n   \
    \ long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10\
    \ / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long\
    \ mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 %\
    \ 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28\
    \ = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n\
    \    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 =\
    \ mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n  \
    \  long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19\
    \ / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long\
    \ mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 %\
    \ 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46\
    \ = mid23 / 10;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp9zs7fpz0: /tmp/tmp9zs7fpz0.cpp:76: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long len = arr.size();\n    if (len <\
    \ 10) return res;\n    long max_len = len / 10;\n    long min_len = len % 10;\n\
    \    long max_num = max_len;\n    long min_num = min_len;\n    long max_pos =\
    \ 0;\n    long min_pos = 0;\n    long pos = 0;\n    long num = max_num;\n    long\
    \ pos = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (num\
    \ > 0) {\n        while (pos < num) {\n            if (arr[pos] >= min_num &&\
    \ arr[pos] <= max_num) {\n                res.push_back(arr[pos]);\n         \
    \       pos++;\n            }\n            pos++;\n        }\n        num = num\
    \ / 10;\n    }\n    pos = 0;\n    while (pos < len) {\n        if (arr[pos] >=\
    \ min_num && arr[pos] <= max_num) {\n            res.push_back(arr[pos]);\n  \
    \          pos++;\n        }\n        pos++;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi4_yofqe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpi4_yofqe.cpp:26:10: error:\
    \ redeclaration of \u2018long int pos\u2019\n   26 |     long pos = 0;\n     \
    \ |          ^~~\n/tmp/tmpi4_yofqe.cpp:24:10: note: \u2018long int pos\u2019 previously\
    \ declared here\n   24 |     long pos = 0;\n      |          ^~~\n/tmp/tmpi4_yofqe.cpp:33:39:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   33 |                 res.push_back(arr[pos]);\n      |                  \
    \                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi4_yofqe.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>:"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 2;\n    long mid2 = max / 2;\n    long mid3 = max /\
    \ 2;\n    long mid4 = max / 2;\n    long mid5 = max / 2;\n    long mid6 = max\
    \ / 2;\n    long mid7 = max / 2;\n    long mid8 = max / 2;\n    long mid9 = max\
    \ / 2;\n    long mid10 = max / 2;\n    long mid11 = max / 2;\n    long mid12 =\
    \ max / 2;\n    long mid13 = max / 2;\n    long mid14 = max / 2;\n    long mid15\
    \ = max / 2;\n    long mid16 = max / 2;\n    long mid17 = max / 2;\n    long mid18\
    \ = max / 2;\n    long mid19 = max / 2;\n    long mid20 = max / 2;\n    long mid21\
    \ = max / 2;\n    long mid22 = max / 2;\n    long mid23 = max / 2;\n    long mid24\
    \ = max / 2;\n    long mid25 = max / 2;\n    long mid26 = max / 2;\n    long mid27\
    \ = max / 2;\n    long mid28 = max / 2;\n    long mid29 = max / 2;\n    long mid30\
    \ = max / 2;\n    long mid31 = max / 2;\n    long mid32 = max / 2;\n    long mid33\
    \ = max / 2;\n    long mid34 = max / 2;\n    long mid35 = max / 2;\n    long mid36\
    \ = max / 2;\n    long mid37 = max / 2;\n    long mid38 = max / 2;\n    long mid39\
    \ = max / 2;\n    long mid40 = max / 2;\n    long mid41 = max / 2;\n    long mid42\
    \ = max / 2;\n    long mid43 = max / 2;\n    long mid44 = max / 2;\n    long mid45\
    \ = max / 2;\n    long mid46 = max / 2;\n    long mid47 = max / 2;\n    long mid48\
    \ = max / 2;\n    long mid49 = max / 2;\n    long mid50 = max / 2;\n    long mid51\
    \ = max / 2;\n    long mid52 = max / 2;\n    long mid53 = max / 2;\n    long mid\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsycunrkf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpsycunrkf.cpp:72:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmpsycunrkf.cpp:72:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   72 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i <= 9) {\n            long next = i;\n\
    \            if (curr == prev) {\n                res.push_back(to_string(curr));\n\
    \            } else {\n                res.push_back(to_string(prev));\n     \
    \       }\n            prev = next;\n            curr = next;\n        } else\
    \ {\n            long next = curr + 10;\n            if (curr == prev) {\n   \
    \             res.push_back(to_string(curr));\n            } else {\n        \
    \        res.push_back(to_string(prev));\n            }\n            prev = next;\n\
    \            curr = next;\n        }\n    }\n    if (curr == prev) {\n       \
    \ res.push_back(to_string(curr));\n    } else {\n        res.push_back(to_string(prev));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwzx91wef.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwzx91wef.cpp:22:31: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   22 |                 res.push_back(to_string(curr));\n      |          \
    \                     ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwzx91wef.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpwzx91wef.cpp:24:31: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   24 |                 res.push_back(to_string(prev));\n      |          \
    \                     ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwzx91wef.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018s"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()); // get the max number\n    long min = *std::min_element(arr.begin(),\
    \ arr.end()); // get the min number\n    long mid = max / 10; // get the middle\
    \ number\n    long left = (max - mid) / 10; // get the left number\n    long right\
    \ = (max - mid) % 10; // get the right number\n    long mid2 = min / 10; // get\
    \ the middle number\n    long left2 = (min - mid2) / 10; // get the left number\n\
    \    long right2 = (min - mid2) % 10; // get the right number\n    long mid3 =\
    \ mid / 10; // get the middle number\n    long left3 = (mid - mid3) / 10; // get\
    \ the left number\n    long right3 = (mid - mid3) % 10; // get the right number\n\
    \    long mid4 = mid / 10; // get the middle number\n    long left4 = (mid - mid4)\
    \ / 10; // get the left number\n    long right4 = (mid - mid4) % 10; // get the\
    \ right number\n    long mid5 = mid / 10; // get the middle number\n    long left5\
    \ = (mid - mid5) / 10; // get the left number\n    long right5 = (mid - mid5)\
    \ % 10; // get the right number\n    long mid6 = mid / 10; // get the middle number\n\
    \    long left6 = (mid - mid6) / 10; // get the left number\n    long right6 =\
    \ (mid - mid6) % 10; // get the right number\n    long mid7 = mid / 10; // get\
    \ the middle number\n    long left7 = (mid - mid7) / 10; // get the left number\n\
    \    long right7 = (mid - mid7) % 10; // get the right number\n    long mid8 =\
    \ mid / 10; // get the middle number\n    long left8 = (mid - mid8) / 10; // get\
    \ the left number\n    long right8 = (mid - mid8) % 10; // get the right number\n\
    \    long mid9 = mid / 10; // get the middle number\n    long left9 = (mid - mid9)\
    \ / 10; // get the left number\n    long right9 = (mid - mid9) % 10; // get the\
    \ right number\n    long mid10 = mid / 10; // get the middle number\n    long\
    \ left10 = (mid - mid10) / 10; // get the left number\n    long right10 = (mid\
    \ - mid10) % 10; // get the right number\n    long mid11 = mid / 10; // get the\
    \ middle number\n    long left11 = (m\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2t4xjssb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2t4xjssb.cpp:49:20: error:\
    \ \u2018m\u2019 was not declared in this scope; did you mean \u2018tm\u2019?\n\
    \   49 |     long left11 = (m\n      |                    ^\n      |         \
    \           tm\n/tmp/tmp2t4xjssb.cpp:49:21: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   49 |     long left11 = (m\n      |                 \
    \  ~ ^\n      |                     )\n   50 | }\n      | ~                  \
    \  \n/tmp/tmp2t4xjssb.cpp:50:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   50 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) return result;\n    long max_val = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min_val = *std::min_element(arr.begin(), arr.end());\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkuvildln.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpkuvildln.cpp:20:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   20 |     long max_len = max_val\
    \ - min_val + 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:18:10: note:\
    \ \u2018long int max_len\u2019 previously declared here\n   18 |     long max_len\
    \ = max_val - min_val + 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:21:10:\
    \ error: redeclaration of \u2018long int min_len\u2019\n   21 |     long min_len\
    \ = min_val - 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:19:10: note:\
    \ \u2018long int min_len\u2019 previously declared here\n   19 |     long min_len\
    \ = min_val - 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:22:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   22 |     long max_len = max_val\
    \ - min_val + 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:18:10: note:\
    \ \u2018long int max_len\u2019 previously declared here\n   18 |     long max_len\
    \ = max_val - min_val + 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:23:10:\
    \ error: redeclaration of \u2018long int min_len\u2019\n   23 |     long min_len\
    \ = min_val - 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:19:10: note:\
    \ \u2018long int min_len\u2019 previously declared here\n   19 |     long min_len\
    \ = min_val - 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:24:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   24 |     long max_len = max_val\
    \ - min_val + 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:18:10: note:\
    \ \u2018long int max_len\u2019 previously declared here\n   18 |     long max_len\
    \ = max_val - min_val + 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:25:10:\
    \ error: redeclaration of \u2018long int min_len\u2019\n   25 |     long min_len\
    \ = min_val - 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:19:10: note:\
    \ \u2018long int min_len\u2019 previously declared here\n   19 |     long min_len\
    \ = min_val - 1;\n      |          ^~~~~~~\n/tmp/tmpkuvildln.cpp:26:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   26 |     long max_len = max_val\
    \ - min_val + 1;\n      |          ^~~"
  stdout: ''
  timestamp: 1660136036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr[0];\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] < n) res.push_back(\"One\");\n  \
    \      else if (arr[i] > n) res.push_back(\"Nine\");\n        else if (arr[i]\
    \ == n) res.push_back(\"One\");\n        else if (arr[i] < 9) res.push_back(\"\
    Two\");\n        else if (arr[i] < 18) res.push_back(\"Three\");\n        else\
    \ if (arr[i] < 27) res.push_back(\"Four\");\n        else if (arr[i] < 36) res.push_back(\"\
    Five\");\n        else if (arr[i] < 45) res.push_back(\"Six\");\n        else\
    \ if (arr[i] < 54) res.push_back(\"Seven\");\n        else if (arr[i] < 63) res.push_back(\"\
    Eight\");\n        else res.push_back(\"Nine\");\n        n = arr[i];\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmplqqsaa9x: /tmp/tmplqqsaa9x.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long len = arr.size();\n\
    \    long start = 1;\n    long end = len;\n    while (start < end) {\n       \
    \ while (start < end && num < 9) {\n            ++start;\n            ++num;\n\
    \        }\n        while (start < end && num > 9) {\n            --end;\n   \
    \         --num;\n        }\n        if (start < end) {\n            std::string\
    \ tmp = std::to_string(num);\n            std::string name = names[num];\n   \
    \         while (tmp.length() > 0 && tmp[0] == '0') {\n                tmp.pop_back();\n\
    \            }\n            res.push_back(name + tmp);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgu4x5qka.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgu4x5qka.cpp:31:32: error:\
    \ \u2018names\u2019 was not declared in this scope; did you mean \u2018name\u2019\
    ?\n   31 |             std::string name = names[num];\n      |               \
    \                 ^~~~~\n      |                                name\n"
  stdout: ''
  timestamp: 1660136036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long diff = max - min;\n    for (auto i : arr) {\n       \
    \ if (i < min) {\n            result.push_back(\"One\");\n        } else if (i\
    \ > max) {\n            result.push_back(\"Nine\");\n        } else {\n      \
    \      long index = i - min;\n            long mod = pow(10, index);\n       \
    \     long digit = mod % 10;\n            long name = index / 10;\n          \
    \  result.push_back(std::to_string(name) + std::to_string(digit));\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmpy7vjbi_u: /tmp/tmpy7vjbi_u.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i > 9) break;\n        if (i == cur) {\n            ++cur;\n\
    \        } else {\n            res.push_back(by_length(std::vector<long>{cur,\
    \ last}));\n            cur = i;\n        }\n        last = i;\n    }\n    res.push_back(by_length(std::vector<long>{cur,\
    \ last}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmsnstz7c.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpmsnstz7c.cpp:23:66: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   23 |\
    \             res.push_back(by_length(std::vector<long>{cur, last}));\n      |\
    \                                                                  ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmsnstz7c.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 t"
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ ans;\n    long curr = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == curr) continue;\n        if (i > curr) {\n            ans.push_back(to_string(curr));\n\
    \            curr = i;\n            continue;\n        }\n        if (i < prev)\
    \ {\n            ans.push_back(to_string(prev));\n            prev = i;\n    \
    \        continue;\n        }\n        ans.push_back(to_string(curr));\n     \
    \   curr = i;\n    }\n    ans.push_back(to_string(curr));\n    return ans;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo3bdfdx2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpo3bdfdx2.cpp:21:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   21 |             ans.push_back(to_string(curr));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo3bdfdx2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpo3bdfdx2.cpp:26:27: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   26 |             ans.push_back(to_string(prev));\n      |              \
    \             ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo3bdfdx2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string"
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 2;\n    long left = max;\n    long right = min;\n \
    \   long midVal = arr[mid];\n    long leftVal = arr[left];\n    long rightVal\
    \ = arr[right];\n    long leftValVal = arr[left - 1];\n    long rightValVal =\
    \ arr[right + 1];\n    long midValVal = arr[mid-1];\n    long midValValVal = arr[mid+1];\n\
    \    long leftValValValVal = arr[left-1];\n    long rightValValValVal = arr[right+1];\n\
    \    long leftValValValValVal = arr[left+1];\n    long rightValValValValVal =\
    \ arr[right-1];\n    long leftValValValValValVal = arr[left-1];\n    long rightValValValValValVal\
    \ = arr[right+1];\n    long leftValValValValValValVal = arr[left+1];\n    long\
    \ rightValValValValValValVal = arr[right-1];\n    long leftValValValValValValValVal\
    \ = arr[left-1];\n    long rightValValValValValValValVal = arr[right+1];\n   \
    \ long leftValValValValValValValValVal = arr[left+1];\n    long rightValValValValValValValValVal\
    \ = arr[right-1];\n    long leftValValValValValValValValValVal = arr[left-1];\n\
    \    long rightValValValValValValValValValVal = arr[right+1];\n    long leftValValValValValValValValValValVal\
    \ = arr[left+1];\n    long rightValValValValValValValValValVal = arr[right-1];\n\
    \    long leftValValValValValValValValValValVal = arr[left-1];\n    long rightValValValValValValValValValValVal\
    \ = arr[right+1];\n    long leftValValValValValValValValValValValVal = arr[left+1];\n\
    \    long rightValValValValValValValValValValValVal = arr[right-1];\n    long\
    \ leftValValValValValValValValValValValValVal = arr[left-1];\n    long rightValValValValVal\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiln0tjtw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpiln0tjtw.cpp:45:10: error:\
    \ redeclaration of \u2018long int rightValValValValValValValValValVal\u2019\n\
    \   45 |     long rightValValValValValValValValValVal = arr[right-1];\n      |\
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiln0tjtw.cpp:43:10: note:\
    \ \u2018long int rightValValValValValValValValValVal\u2019 previously declared\
    \ here\n   43 |     long rightValValValValValValValValValVal = arr[right+1];\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiln0tjtw.cpp:46:10:\
    \ error: redeclaration of \u2018long int leftValValValValValValValValValValVal\u2019\
    \n   46 |     long leftValValValValValValValValValValVal = arr[left-1];\n    \
    \  |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiln0tjtw.cpp:44:10:\
    \ note: \u2018long int leftValValValValValValValValValValVal\u2019 previously\
    \ declared here\n   44 |     long leftValValValValValValValValValValVal = arr[left+1];\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiln0tjtw.cpp:52:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   52 | }\n      | ^\n\
    /tmp/tmpiln0tjtw.cpp:52:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   52 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == cur) continue;\n        if (i == last) res.push_back(cur);\n\
    \        else res.push_back(to_string(cur));\n        cur = i;\n        last =\
    \ i;\n    }\n    if (cur != last) res.push_back(to_string(cur));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3tb48xd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpm3tb48xd.cpp:20:41: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(long int&)\u2019\n   20 |         if (i == last) res.push_back(cur);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm3tb48xd.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::value_type&&\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n     "
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0)\n        return result;\n    long min = arr[0];\n   \
    \ long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\n       \
    \     min = i;\n        else if (i > max)\n            max = i;\n    }\n    long\
    \ mid = (min + max) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n\
    \    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3\
    \ / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9\
    \ = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n   \
    \ long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7\
    \ / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17\
    \ = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n   \
    \ long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11\
    \ / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long\
    \ mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 %\
    \ 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30\
    \ = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n\
    \    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 =\
    \ mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n  \
    \  long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20\
    \ / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long\
    \ mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 %\
    \ 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 % 10;\n    long mid\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpub3vm_df.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpub3vm_df.cpp:73:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   73 | }\n      | ^\n/tmp/tmpub3vm_df.cpp:73:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   73 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long temp = 0;\n    for (auto\
    \ i : arr) {\n        if (i <= 9) {\n            temp = temp * 10 + i;\n     \
    \   } else {\n            temp = temp * 10 + 9 + i;\n        }\n    }\n    long\
    \ temp = temp % 10;\n    if (temp != 0) {\n        res.push_back(\"One\");\n \
    \   }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"Two\"\
    );\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Three\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Four\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Five\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Six\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Seven\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Eight\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Nine\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmgn3o3ue.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpmgn3o3ue.cpp:26:10: error:\
    \ redeclaration of \u2018long int temp\u2019\n   26 |     long temp = temp % 10;\n\
    \      |          ^~~~\n/tmp/tmpmgn3o3ue.cpp:18:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   18 |     long temp = 0;\n      |          ^~~~\n"
  stdout: ''
  timestamp: 1660136036
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n  \
    \  long right = mid;\n    while (left < max) {\n        mid = (left + right) /\
    \ 2;\n        if (arr[mid] < mid) {\n            left = mid;\n        } else {\n\
    \            right = mid;\n        }\n    }\n    long temp = arr[left];\n    arr[left]\
    \ = arr[right];\n    arr[right] = temp;\n    for (auto i : arr) {\n        std::string\
    \ name;\n        if (i < 10) {\n            name = \"One\";\n        } else if\
    \ (i < 20) {\n            name = \"Two\";\n        } else if (i < 30) {\n    \
    \        name = \"Three\";\n        } else if (i < 40) {\n            name = \"\
    Four\";\n        } else if (i < 50) {\n            name = \"Five\";\n        }\
    \ else if (i < 60) {\n            name = \"Six\";\n        } else if (i < 70)\
    \ {\n            name = \"Seven\";\n        } else if (i < 80) {\n           \
    \ name = \"Eight\";\n        } else if (i < 90) {\n            name = \"Nine\"\
    ;\n        } else {\n            name = \"Zero\";\n        }\n        res.push_back(name);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660136041
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty()) return ans;\n    long min = *std::min_element(arr.begin(), arr.end());\n\
    \    long max = *std::max_element(arr.begin(), arr.end());\n    long mid = min\
    \ + (max - min) / 2;\n    long length = max - min;\n    long mid1 = mid - 1;\n\
    \    long mid2 = mid + 1;\n    long mid3 = mid + 2;\n    long mid4 = mid + 3;\n\
    \    long mid5 = mid + 4;\n    long mid6 = mid + 5;\n    long mid7 = mid + 6;\n\
    \    long mid8 = mid + 7;\n    long mid9 = mid + 8;\n    long mid10 = mid + 9;\n\
    \    long mid11 = mid + 10;\n    long mid12 = mid + 11;\n    long mid13 = mid\
    \ + 12;\n    long mid14 = mid + 13;\n    long mid15 = mid + 14;\n    long mid16\
    \ = mid + 15;\n    long mid17 = mid + 16;\n    long mid18 = mid + 17;\n    long\
    \ mid19 = mid + 18;\n    long mid20 = mid + 19;\n    long mid21 = mid + 20;\n\
    \    long mid22 = mid + 21;\n    long mid23 = mid + 22;\n    long mid24 = mid\
    \ + 23;\n    long mid25 = mid + 24;\n    long mid26 = mid + 25;\n    long mid27\
    \ = mid + 26;\n    long mid28 = mid + 27;\n    long mid29 = mid + 28;\n    long\
    \ mid30 = mid + 29;\n    long mid31 = mid + 30;\n    long mid32 = mid + 31;\n\
    \    long mid33 = mid + 32;\n    long mid34 = mid + 33;\n    long mid35 = mid\
    \ + 34;\n    long mid36 = mid + 35;\n    long mid37 = mid + 36;\n    long mid38\
    \ = mid + 37;\n    long mid39 = mid + 38;\n    long mid40 = mid + 39;\n    long\
    \ mid41 = mid + 40;\n    long mid42 = mid + 41;\n    long mid43 = mid + 42;\n\
    \    long mid44 = mid + 43;\n    long mid45 = mid + 44;\n    long mid46 = mid\
    \ + 45;\n    long mid47 = mid + 46;\n    long mid48 = mid + 47;\n    long mid49\
    \ = mid + 48;\n    long mid50 = mid + 49;\n    long mid51 = mid + 50;\n    long\
    \ mid52 = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibsurfy0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpibsurfy0.cpp:72:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   72 | }\n      | ^\n\
    /tmp/tmpibsurfy0.cpp:72:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   72 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = std::accumulate(arr.begin(),\
    \ arr.end(), 0);\n    if (max > 9) {\n        std::sort(arr.begin(), arr.end());\n\
    \        long reversed = std::accumulate(arr.begin(), arr.end(), 0);\n       \
    \ reversed = reversed % 10;\n        long reversed_arr[] = {reversed};\n     \
    \   std::reverse(arr.begin(), arr.end());\n        std::transform(arr.begin(),\
    \ arr.end(), arr.begin(), reversed_arr);\n        std::transform(arr.begin(),\
    \ arr.end(), arr.begin(), [&](long x) {\n            std::string s = std::to_string(x);\n\
    \            std::string name = \"\";\n            int pos = 0;\n            while\
    \ (pos < s.size()) {\n                name += names[s.at(pos)];\n            \
    \    pos++;\n            }\n            return name;\n        });\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93ps64qo.cpp: In lambda function:\n/tmp/tmp93ps64qo.cpp:31:25:\
    \ error: \u2018names\u2019 was not declared in this scope; did you mean \u2018\
    name\u2019?\n   31 |                 name += names[s.at(pos)];\n      |      \
    \                   ^~~~~\n      |                         name\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp93ps64qo.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation)\
    \ [with _IIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >;\
    \ _UnaryOperation = long int*]\u2019:\n/tmp/tmp93ps64qo.cpp:25:73:   required\
    \ from here\n/usr/include/c++/9/bits/stl_algo.h:4343:24: error: \u2018__unary_op\u2019\
    \ cannot be used as a function\n 4343 |  *__result = __unary_op(*__first);\n \
    \     |              ~~~~~~~~~~^~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation)\
    \ [with _IIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >;\
    \ _UnaryOperation = by_length(std::vector<long int>)::<lambda(long int)>]\u2019\
    :\n/tmp/tmp93ps64qo.cpp:35:10:   required from here\n/usr/include/c++/9/bits/stl_algo.h:4343:12:\
    \ error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018\
    long int\u2019 in assignment\n 4343 |  *__result = __unary_op(*__first);\n   \
    \   |  ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660136036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i >= min && i <= max) {\n            std::string s = std::to_string(i);\n\
    \            std::string name = \"\";\n            int pos = 0;\n            while\
    \ (pos < s.size()) {\n                char c = s[pos];\n                if (c\
    \ == '0') break;\n                name += c;\n                pos++;\n       \
    \     }\n            res.push_back(name);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: Exception
  stderr: 'tmp55900ebb: /tmp/tmp55900ebb.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)"Eight",
    (std::string)"Five", (std::string)"Four", (std::string)"Three", (std::string)"Two",
    (std::string)"Two", (std::string)"One", (std::string)"One"}))'' failed.

    '
  stdout: ''
  timestamp: 1660136036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n   \
    \ long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpra7dq1bw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpra7dq1bw.cpp:74:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   74 |\
    \ }\n      | ^\n/tmp/tmpra7dq1bw.cpp:74:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660136029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = std::max(arr.begin(), arr.end())\
    \ - std::min(arr.begin(), arr.end()) + 1;\n    long max_len = std::max(max_len,\
    \ 9 - 1);\n    long max_len = std::max(max_len, 1);\n    long min_len = std::min(arr.begin(),\
    \ arr.end()) - std::max(arr.begin(), arr.end()) + 1;\n    long min_len = std::min(min_len,\
    \ 9 - 1);\n    long min_len = std::min(min_len, 1);\n    long max_val = std::max(arr.begin(),\
    \ arr.end()) - std::min(arr.begin(), arr.end()) + 1;\n    long min_val = std::min(arr.begin(),\
    \ arr.end()) - std::max(arr.begin(), arr.end()) + 1;\n    long max_val = std::max(max_val,\
    \ 9 - 1);\n    long min_val = std::min(min_val, 9 - 1);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6q2ax5ml.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6q2ax5ml.cpp:18:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   18 |     long max_len = std::max(max_len,\
    \ 9 - 1);\n      |          ^~~~~~~\n/tmp/tmp6q2ax5ml.cpp:17:10: note: \u2018\
    long int max_len\u2019 previously declared here\n   17 |     long max_len = std::max(arr.begin(),\
    \ arr.end()) - std::min(arr.begin(), arr.end()) + 1;\n      |          ^~~~~~~\n\
    /tmp/tmp6q2ax5ml.cpp:18:43: error: no matching function for call to \u2018max(long\
    \ int&, int)\u2019\n   18 |     long max_len = std::max(max_len, 9 - 1);\n   \
    \   |                                           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6q2ax5ml.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6q2ax5ml.cpp:18:43: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018int\u2019)\n   18 |     long max_len = std::max(max_len, 9 - 1);\n\
    \      |                                           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6q2ax5ml.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tm"
  stdout: ''
  timestamp: 1660136036
