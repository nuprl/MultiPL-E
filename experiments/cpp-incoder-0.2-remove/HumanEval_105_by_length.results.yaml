language: cpp
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long l = arr.size();\n    long m = l /\
    \ 10;\n    long n = l % 10;\n    long count = 0;\n    for (long i = 0; i < m;\
    \ i++) {\n        long count = 0;\n        for (long j = 0; j < n; j++) {\n  \
    \          count += arr[i * 10 + j];\n        }\n        if (count > 9) {\n  \
    \          ans.push_back(\"Nine\");\n            count -= 9;\n        } else {\n\
    \            ans.push_back(\"One\");\n            count++;\n        }\n    }\n\
    \    for (long i = m; i < l; i++) {\n        long count = 0;\n        for (long\
    \ j = 0; j < n; j++) {\n            count += arr[i * 10 + j];\n        }\n   \
    \     if (count > 9) {\n            ans.push_back(\"Nine\");\n            count\
    \ -= 9;\n        } else {\n            ans.push_back(\"One\");\n            count++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjv8uszrp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  std::vector<std::string> res;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push_back(by_length(arr));\n\
    \    } else {\n      res.push_back(std::to_string(arr[i]));\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppa3f0ve7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long diff = max - min;\n    long mod = diff % 10;\n    if (mod\
    \ == 0) {\n        mod = 10;\n    }\n    long rem = diff / 10;\n    long start\
    \ = min + rem;\n    long end = max - rem;\n    long cur = start;\n    while (cur\
    \ < end) {\n        res.push_back(\"One\");\n        cur++;\n    }\n    while\
    \ (cur > 0) {\n        res.push_back(\"Nine\");\n        cur--;\n    }\n    while\
    \ (cur < mod) {\n        res.push_back(\"Two\");\n        cur++;\n    }\n    while\
    \ (cur > 0) {\n        res.push_back(\"Three\");\n        cur--;\n    }\n    while\
    \ (cur < mod) {\n        res.push_back(\"Four\");\n        cur++;\n    }\n   \
    \ while (cur > 0) {\n        res.push_back(\"Five\");\n        cur--;\n    }\n\
    \    while (cur < mod) {\n        res.push_back(\"Six\");\n        cur++;\n  \
    \  }\n    while (cur > 0) {\n        res.push_back(\"Seven\");\n        cur--;\n\
    \    }\n    while (cur < mod) {\n        res.push_back(\"Eight\");\n        cur++;\n\
    \    }\n    while (cur > 0) {\n        res.push_back(\"One\");\n        cur--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy6yro5iw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = 0;\n\
    \    for (long i : arr) {\n        if (i > prev) {\n            res.push_back(by_length(std::vector<long>{prev,\
    \ curr}));\n            prev = curr;\n            curr = i;\n        } else {\n\
    \            curr += i;\n        }\n    }\n    res.push_back(by_length(std::vector<long>{prev,\
    \ curr}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppdqr1a33.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long l = arr[0];\n    long r = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            l = i;\n       \
    \ } else {\n            ans.push_back(to_string(l));\n            l = i;\n   \
    \     }\n    }\n    ans.push_back(to_string(l));\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqivypxnz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty())\n        return res;\n    long lower = 1;\n    long upper = 9;\n\
    \    long mid = (lower + upper) / 2;\n    long length = arr.size();\n    while\
    \ (lower < upper) {\n        if (arr[mid] < lower)\n            lower = mid +\
    \ 1;\n        else if (arr[mid] > upper)\n            upper = mid - 1;\n     \
    \   else\n            res.push_back(names[mid]);\n        mid = (lower + upper)\
    \ / 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm108j8wa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = 1;\n    for (long long\
    \ i = 0; i < n; ++i) {\n        while (m <= 9) {\n            if (arr[i] >= m\
    \ && arr[i] <= 9) {\n                res.push_back(\"One\");\n               \
    \ res.push_back(\"Two\");\n                res.push_back(\"Three\");\n       \
    \         res.push_back(\"Four\");\n                res.push_back(\"Five\");\n\
    \                res.push_back(\"Six\");\n                res.push_back(\"Seven\"\
    );\n                res.push_back(\"Eight\");\n                res.push_back(\"\
    Nine\");\n                res.push_back(\"Ten\");\n                res.push_back(\"\
    Eleven\");\n                res.push_back(\"Twelve\");\n                res.push_back(\"\
    Thirteen\");\n                res.push_back(\"Fourteen\");\n                res.push_back(\"\
    Fifteen\");\n                res.push_back(\"Sixteen\");\n                res.push_back(\"\
    Seventeen\");\n                res.push_back(\"Eighteen\");\n                res.push_back(\"\
    Nineteen\");\n                res.push_back(\"Twenty\");\n                res.push_back(\"\
    Twenty one\");\n                res.push_back(\"Twenty two\");\n             \
    \   res.push_back(\"Twenty three\");\n                res.push_back(\"Twenty four\"\
    );\n                res.push_back(\"Twenty five\");\n                res.push_back(\"\
    Twenty six\");\n                res.push_back(\"Twenty seven\");\n           \
    \     res.push_back(\"Twenty eight\");\n                res.push_back(\"Twenty\
    \ nine\");\n                res.push_back(\"Twenty ten\");\n                res.push_back(\"\
    Twenty eleven\");\n                res.push_back(\"Twenty twelve\");\n       \
    \         res.push_back(\"Twenty thirteen\");\n                res.push_back(\"\
    Twenty fourteen\");\n                res.push_back(\"Twenty fifteen\");\n    \
    \            res.push_back(\"Twenty sixteen\");\n                res.push_back(\"\
    Twenty seventeen\");\n                res.push_back(\"Twenty eighteen\");\n  \
    \              res.push_back(\"Twenty nineteen\");\n                res.push_back(\"\
    Twenty twenty\");\n                res.push_back(\"Twenty twenty one\");\n   \
    \             res.push_back(\"Twenty twenty two\");\n                res.push_back(\"\
    Twenty twenty three\");\n                res.push_back(\"Twenty twenty four\"\
    );\n                res.push_back(\"Twenty twenty five\");\n                res.push_back(\"\
    Twenty twenty six\");\n                \n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgpolbcq_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) return res;\n    long max = *std::max_element(arr.begin(), arr.end())\
    \ + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) + 1;\n    long\
    \ mid = max / 10;\n    long rem = max % 10;\n    long start = mid - 1;\n    long\
    \ end = mid + 1;\n    long cur = min;\n    while (cur <= max) {\n        if (cur\
    \ > 9) {\n            res.push_back(\"Nine\");\n            cur = cur - 10;\n\
    \        } else if (cur > 0) {\n            res.push_back(\"Zero\");\n       \
    \     cur = cur - 1;\n        } else {\n            res.push_back(\"One\");\n\
    \            cur = cur + 1;\n        }\n    }\n    while (start >= 1) {\n    \
    \    res.push_back(\"One\");\n        start = start - 1;\n    }\n    while (end\
    \ < 10) {\n        res.push_back(\"Ten\");\n        end = end + 1;\n    }\n  \
    \  while (start < end) {\n        res.push_back(\"Ten\");\n        start = start\
    \ + 1;\n    }\n    while (cur < min) {\n        res.push_back(\"One\");\n    \
    \    cur = cur + 1;\n    }\n    while (cur < max) {\n        res.push_back(\"\
    One\");\n        cur = cur + 1;\n    }\n    while (cur > 0) {\n        res.push_back(\"\
    Zero\");\n        cur = cur - 1;\n    }\n    while (cur > 1) {\n        res.push_back(\"\
    One\");\n        cur = cur - 1;\n    }\n    while (cur > 9) {\n        res.push_back(\"\
    Nine\");\n        cur = cur - 10;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdblghkcd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    for (long i : arr) {\n  \
    \      if (i >= 1 && i <= 9) {\n            res.push_back(\"One\");\n        }\
    \ else if (i >= 10 && i <= 99) {\n            res.push_back(\"Two\");\n      \
    \  } else if (i >= 100 && i <= 999) {\n            res.push_back(\"Three\");\n\
    \        } else if (i >= 1000 && i <= 9999) {\n            res.push_back(\"Four\"\
    );\n        } else if (i >= 10000 && i <= 99999) {\n            res.push_back(\"\
    Five\");\n        } else if (i >= 100000 && i <= 999999) {\n            res.push_back(\"\
    Six\");\n        } else if (i >= 1000000 && i <= 9999999) {\n            res.push_back(\"\
    Seven\");\n        } else if (i >= 10000000 && i <= 99999999) {\n            res.push_back(\"\
    Eight\");\n        } else if (i >= 100000000 && i <= 999999999) {\n          \
    \  res.push_back(\"Nine\");\n        } else {\n            res.push_back(\"Zero\"\
    );\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjn_28u9p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    long\
    \ n = arr.size();\n    if (n == 0)\n        return ans;\n    long max_len = 0,\
    \ min_len = INT_MAX;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] <\
    \ min_len)\n            min_len = arr[i];\n        if (arr[i] > max_len)\n   \
    \         max_len = arr[i];\n    }\n    long mid = max_len;\n    long mid2 = max_len;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] < mid) {\n           \
    \ mid = arr[i];\n            mid2 = mid;\n        } else if (arr[i] > mid2) {\n\
    \            mid2 = arr[i];\n        }\n    }\n    long mid3 = mid;\n    long\
    \ mid4 = mid;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] < mid3)\
    \ {\n            mid3 = arr[i];\n            mid4 = mid3;\n        } else if (arr[i]\
    \ > mid4) {\n            mid4 = arr[i];\n        }\n    }\n    long mid5 = mid3;\n\
    \    long mid6 = mid3;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ < mid5) {\n            mid5 = arr[i];\n            mid6 = mid5;\n        } else\
    \ if (arr[i] > mid6) {\n            mid6 = arr[i];\n        }\n    }\n    long\
    \ mid7 = mid5;\n    long mid8 = mid5;\n    for (long i = 0; i < n; i++) {\n  \
    \      if (arr[i] < mid7) {\n            mid7 = arr[i];\n            mid8 = mid7;\n\
    \        } else if (arr[i] > mid8) {\n            mid8 = arr[i];\n        }\n\
    \    }\n    long mid9 = mid7;\n    long mid10 = mid7;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (arr[i] < mid9) {\n            mid9 = arr[i];\n    \
    \        mid10 = mid9;\n        } else if (arr[i] > mid10) {\n            mid10\
    \ = arr[i];\n        }\n    }\n    long mid11 = mid9;\n    long mid12 = mid9;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] < mid11) {\n         \
    \   mid11 = arr[i];\n            mid12 = mid11;\n        } else if (arr[i] > mid12)\
    \ {\n            mid12 = arr[i];\n        }\n    }\n    long mid13 = mid11;\n\
    \    long mid14 = mid11;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ < mid13) {\n            mid13 = arr[i];\n            mid14 = mid13;\n      \
    \  } else if (arr[i] > mid14) {\n            mid14 = arr[i];\n        }\n    }\n\
    \    long mid15 = mid13;\n    long mid16 = mid13;\n    for (long i = 0; i < n;\
    \ i++) {\n        if (arr[i] < mid15) {\n            mid15 = arr[i];\n       \
    \     mid16 = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpygpr2_un.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) {\n        return res;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min > 9 || max < 1) {\n        return res;\n    }\n    long mid = min +\
    \ (max - min) / 2;\n    long left = mid;\n    long right = mid;\n    long mid2\
    \ = mid + 1;\n    long mid3 = mid + 2;\n    long mid4 = mid + 3;\n    long mid5\
    \ = mid + 4;\n    long mid6 = mid + 5;\n    long mid7 = mid + 6;\n    long mid8\
    \ = mid + 7;\n    long mid9 = mid + 8;\n    long mid10 = mid + 9;\n    long mid11\
    \ = mid + 10;\n    long mid12 = mid + 11;\n    long mid13 = mid + 12;\n    long\
    \ mid14 = mid + 13;\n    long mid15 = mid + 14;\n    long mid16 = mid + 15;\n\
    \    long mid17 = mid + 16;\n    long mid18 = mid + 17;\n    long mid19 = mid\
    \ + 18;\n    long mid20 = mid + 19;\n    long mid21 = mid + 20;\n    long mid22\
    \ = mid + 21;\n    long mid23 = mid + 22;\n    long mid24 = mid + 23;\n    long\
    \ mid25 = mid + 24;\n    long mid26 = mid + 25;\n    long mid27 = mid + 26;\n\
    \    long mid28 = mid + 27;\n    long mid29 = mid + 28;\n    long mid30 = mid\
    \ + 29;\n    long mid31 = mid + 30;\n    long mid32 = mid + 31;\n    long mid33\
    \ = mid + 32;\n    long mid34 = mid + 33;\n    long mid35 = mid + 34;\n    long\
    \ mid36 = mid + 35;\n    long mid37 = mid + 36;\n    long mid38 = mid + 37;\n\
    \    long mid39 = mid + 38;\n    long mid40 = mid + 39;\n    long mid41 = mid\
    \ + 40;\n    long mid42 = mid + 41;\n    long mid43 = mid + 42;\n    long mid44\
    \ = mid + 43;\n    long mid45 = mid + 44;\n    long mid46 = mid + 45;\n    long\
    \ mid47 = mid + 46;\n    long mid48 = mid + 47;\n    long mid49 = mid + 48;\n\
    \    long mid50 = mid + 49;\n    long mid5\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjt81qots.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i >= min && i <= max) {\n            std::string s = std::to_string(i);\n\
    \            std::string temp = s;\n            std::reverse(temp.begin(), temp.end());\n\
    \            res.push_back(temp);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpshwtg5nm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ long mid = max / 10;\n    long rem = max % 10;\n    if (min == 1) {\n      \
    \  res.push_back(\"One\");\n    }\n    if (min == 2) {\n        res.push_back(\"\
    Two\");\n    }\n    if (min == 3) {\n        res.push_back(\"Three\");\n    }\n\
    \    if (min == 4) {\n        res.push_back(\"Four\");\n    }\n    if (min ==\
    \ 5) {\n        res.push_back(\"Five\");\n    }\n    if (min == 6) {\n       \
    \ res.push_back(\"Six\");\n    }\n    if (min == 7) {\n        res.push_back(\"\
    Seven\");\n    }\n    if (min == 8) {\n        res.push_back(\"Eight\");\n   \
    \ }\n    if (min == 9) {\n        res.push_back(\"Nine\");\n    }\n    if (rem\
    \ == 1) {\n        res.push_back(\"One\");\n    }\n    if (rem == 2) {\n     \
    \   res.push_back(\"Two\");\n    }\n    if (rem == 3) {\n        res.push_back(\"\
    Three\");\n    }\n    if (rem == 4) {\n        res.push_back(\"Four\");\n    }\n\
    \    if (rem == 5) {\n        res.push_back(\"Five\");\n    }\n    if (rem ==\
    \ 6) {\n        res.push_back(\"Six\");\n    }\n    if (rem == 7) {\n        res.push_back(\"\
    Seven\");\n    }\n    if (rem == 8) {\n        res.push_back(\"Eight\");\n   \
    \ }\n    if (rem == 9) {\n        res.push_back(\"Nine\");\n    }\n    if (mid\
    \ == 1) {\n        res.push_back(\"One\");\n    }\n    if (mid == 2) {\n     \
    \   res.push_back(\"Two\");\n    }\n    if (mid == 3) {\n        res.push_back(\"\
    Three\");\n    }\n    if (mid == 4) {\n        res.push_back(\"Four\");\n    }\n\
    \    if (mid == 5) {\n        res.push_back(\"Five\");\n    }\n    if (mid ==\
    \ 6) {\n        res.push_back(\"Six\");\n    }\n    if (mid == 7) {\n        res.push_back(\"\
    Seven\");\n    }\n    if (mid == 8) {\n        res.push_back(\"Eight\");\n   \
    \ }\n    if (mid == 9) {\n        res.push_back(\"Nine\");\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg9q_qqz9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long l = arr[0];\n    long\
    \ r = arr[0];\n    for (size_t i = 1; i < arr.size(); i++) {\n        l = arr[i];\n\
    \        r = arr[i];\n        if (l > 9) {\n            l = l - 10;\n        }\n\
    \        if (r > 9) {\n            r = r - 10;\n        }\n        if (l < 1 &&\
    \ r < 1) {\n            continue;\n        }\n        if (l > r) {\n         \
    \   std::swap(l, r);\n        }\n        ans.push_back(to_string(l));\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt9ai8qjr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            if (curr == last)\
    \ res.push_back(std::to_string(curr));\n            else res.push_back(std::to_string(curr)\
    \ + \"-\" + std::to_string(last));\n            curr++;\n            last = i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa508jtg5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty())\n        return ans;\n    if (arr.size() == 1)\n        return\
    \ ans;\n    long first = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\n\
    \        if (i < first || i > last)\n            continue;\n        last = i;\n\
    \    ans.push_back(to_string(first));\n    for (auto i : arr)\n        if (i <\
    \ first || i > last)\n            continue;\n        ans.push_back(to_string(last));\n\
    \    return ans;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7pksln2m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    long min = *std::min_element(arr.begin(), arr.end()); // find min value\n\
    \    long max = *std::max_element(arr.begin(), arr.end()); // find max value\n\
    \    long mid = (min + max) / 2;\n    std::vector<std::string> result;\n    for\
    \ (long i = min; i <= max; i++) {\n        if (arr.find(i) != arr.end()) result.push_back(names[i]);\n\
    \    }\n    for (long i = min; i <= max; i++) {\n        if (arr.find(i) == arr.end())\
    \ result.push_back(names[i]);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcxp549co.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp138vyy1l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    long min = *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    std::vector<std::string> res;\n    for (long i = min; i <=\
    \ max; i++) {\n        long index = arr.size() - 1 - i;\n        std::string name\
    \ = std::to_string(index);\n        res.push_back(name);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm5ih_9us.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long count = 0;\n    for (long i = min;\
    \ i <= max; i++) {\n        if (i == mid) count++;\n    }\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq0ggyy5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (arr[i] > max_len)\
    \ max_len = arr[i];\n        if (arr[i] < min_len) min_len = arr[i];\n    }\n\
    \    if (max_len == min_len) return std::vector<std::string>();\n    long mid\
    \ = max_len >> 1;\n    long mid2 = max_len >> 1;\n    long mid3 = max_len >> 1;\n\
    \    long mid4 = max_len >> 1;\n    long mid5 = max_len >> 1;\n    long mid6 =\
    \ max_len >> 1;\n    long mid7 = max_len >> 1;\n    long mid8 = max_len >> 1;\n\
    \    long mid9 = max_len >> 1;\n    long mid10 = max_len >> 1;\n    long mid11\
    \ = max_len >> 1;\n    long mid12 = max_len >> 1;\n    long mid13 = max_len >>\
    \ 1;\n    long mid14 = max_len >> 1;\n    long mid15 = max_len >> 1;\n    long\
    \ mid16 = max_len >> 1;\n    long mid17 = max_len >> 1;\n    long mid18 = max_len\
    \ >> 1;\n    long mid19 = max_len >> 1;\n    long mid20 = max_len >> 1;\n    long\
    \ mid21 = max_len >> 1;\n    long mid22 = max_len >> 1;\n    long mid23 = max_len\
    \ >> 1;\n    long mid24 = max_len >> 1;\n    long mid25 = max_len >> 1;\n    long\
    \ mid26 = max_len >> 1;\n    long mid27 = max_len >> 1;\n    long mid28 = max_len\
    \ >> 1;\n    long mid29 = max_len >> 1;\n    long mid30 = max_len >> 1;\n    long\
    \ mid31 = max_len >> 1;\n    long mid32 = max_len >> 1;\n    long mid33 = max_len\
    \ >> 1;\n    long mid34 = max_len >> 1;\n    long mid35 = max_len >> 1;\n    long\
    \ mid36 = max_len >> 1;\n    long mid37 = max_len >> 1;\n    long mid38 = max_len\
    \ >> 1;\n    long mid39 = max_len >> 1;\n    long mid40 = max_len >> 1;\n    long\
    \ mid41 = max_len >> 1;\n    long mid42 = max_len >> 1;\n    long mid43 = max_len\
    \ >> 1;\n    long mid44 = max_len >> 1;\n\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyqv9yslp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()); // get the max number\n    long min = *std::min_element(arr.begin(),\
    \ arr.end()); // get the min number\n    long mid = (max + min) / 2;\n    long\
    \ mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n  \
    \  long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 %\
    \ 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10\
    \ = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n   \
    \ long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid47 = mid23 % 10;\n    long \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpemas9w87.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        long num = arr[0];\n        if (num < 1 || num > 9) {\n            return\
    \ res;\n        }\n        res.push_back(\"One\");\n        res.push_back(\"Two\"\
    );\n        res.push_back(\"Three\");\n        res.push_back(\"Four\");\n    \
    \    res.push_back(\"Five\");\n        res.push_back(\"Six\");\n        res.push_back(\"\
    Seven\");\n        res.push_back(\"Eight\");\n        res.push_back(\"Nine\");\n\
    \        return res;\n    }\n    long num = arr[0];\n    long maxnum = 9 - num;\n\
    \    long minnum = num - 1;\n    long mid = maxnum / 2;\n    long left = minnum\
    \ - mid;\n    long right = maxnum - mid;\n    std::vector<std::string> leftres;\n\
    \    std::vector<std::string> rightres;\n    leftres = by_length(arr);\n    rightres\
    \ = by_length(arr);\n    std::vector<std::string> res;\n    res.push_back(\"One\"\
    );\n    res.push_back(\"Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"\
    Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"Six\");\n    res.push_back(\"\
    Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"Nine\");\n    std::vector<std::string>\
    \ leftres2;\n    std::vector<std::string> rightres2;\n    leftres2 = by_length(leftres);\n\
    \    rightres2 = by_length(rightres);\n    std::vector<std::string> res2;\n  \
    \  res2.push_back(\"One\");\n    res2.push_back(\"Two\");\n    res2.push_back(\"\
    Three\");\n    res2.push_back(\"Four\");\n    res2.push_back(\"Five\");\n    res2.push_back(\"\
    Six\");\n    res2.push_back(\"Seven\");\n    res2.push_back(\"Eight\");\n    res2.push_back(\"\
    Nine\");\n    std::vector<std::string> leftres3;\n    std::vector<std::string>\
    \ rightres3;\n    leftres3 = by_length(leftres2);\n    rightres3 = by_length(rightres2);\n\
    \    std::vector<std::string> res3;\n    res3.push_back(\"One\");\n    res3.push_back(\"\
    Two\");\n    res3.push_back(\"Three\");\n    res3.push_back(\"Four\");\n    res3.push_back(\"\
    Five\");\n    res3.push_back(\"Six\");\n    res3.push_back(\"Seven\");\n    res3.push_back(\"\
    Eight\");\n    res3.push_back(\"Nine\");\n    std::vector<std::string> leftres4;\n\
    \    std::vector<std::string> rightres\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp35vor5jk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long\
    \ len = arr.size();\n    long cnt = 0;\n    for (long i = 1; i < len; i++) {\n\
    \        if (arr[i] > cur) {\n            cnt += 1;\n        }\n        cur =\
    \ arr[i];\n    }\n    if (cnt > 0) {\n        std::vector<std::string> tmp;\n\
    \        for (long i = 0; i < cnt; i++) {\n            tmp.push_back(\"One\");\n\
    \        }\n        tmp.push_back(\"One\");\n        for (long i = cnt; i < len;\
    \ i++) {\n            tmp.push_back(\"Two\");\n        }\n        tmp.push_back(\"\
    Two\");\n        for (long i = cnt + 1; i < len; i++) {\n            tmp.push_back(\"\
    Three\");\n        }\n        tmp.push_back(\"Three\");\n        for (long i =\
    \ cnt + 2; i < len; i++) {\n            tmp.push_back(\"Four\");\n        }\n\
    \        tmp.push_back(\"Four\");\n        for (long i = cnt + 3; i < len; i++)\
    \ {\n            tmp.push_back(\"Five\");\n        }\n        tmp.push_back(\"\
    Five\");\n        for (long i = cnt + 4; i < len; i++) {\n            tmp.push_back(\"\
    Six\");\n        }\n        tmp.push_back(\"Six\");\n        for (long i = cnt\
    \ + 5; i < len; i++) {\n            tmp.push_back(\"Seven\");\n        }\n   \
    \     tmp.push_back(\"Seven\");\n        for (long i = cnt + 6; i < len; i++)\
    \ {\n            tmp.push_back(\"Eight\");\n        }\n        tmp.push_back(\"\
    Eight\");\n        for (long i = cnt + 7; i < len; i++) {\n            tmp.push_back(\"\
    Nine\");\n        }\n        tmp.push_back(\"Nine\");\n        for (long i = cnt\
    \ + 8; i < len; i++) {\n            tmp.push_back(\"Ten\");\n        }\n     \
    \   tmp.push_back(\"Ten\");\n        for (long i = cnt + 9; i < len; i++) {\n\
    \            tmp.push_back(\"Eleven\");\n        }\n        tmp.push_back(\"Eleven\"\
    );\n        for (long i = cnt + 10; i < len; i++) {\n            tmp.push_back(\"\
    Twelve\");\n        }\n        tmp.push_back(\"Twelve\");\n        for (long i\
    \ = cnt + 11; i < len; i++) {\n            tmp.push_back(\"Thirteen\");\n    \
    \    }\n        tmp.push_back(\"Thirteen\");\n        for (long i = cnt + 12;\
    \ i < len; i++) {\n            tmp.push_back(\"Fourteen\");\n        }\n     \
    \   tmp.push_back(\"Fourteen\");\n        for (long i = cnt + 13; i < len; i++)\
    \ {\n            tmp.push_back(\"Fifteen\");\n        }\n        tmp.push_back(\"\
    Fifteen\");\n        for (long i = cnt + 14; i < len; i++) {\n            tmp.push_back(\"\
    Sixteen\");\n        }\n        tmp.push_back(\"Sixteen\");\n        for (long\
    \ i = cnt + 15; i < len; i++) {\n            tmp.push_back(\"Seventeen\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptuvcnerx.cpp:94:27: warning: missing terminating \" character [enabled\
    \ by default]\n             tmp.push_back(\"Seventeen\n                      \
    \     ^\n/tmp/tmptuvcnerx.cpp:94:13: error: missing terminating \" character\n\
    \             tmp.push_back(\"Seventeen\n             ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptuvcnerx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-express"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == curr) continue;\n        if (i ==\
    \ prev) {\n            res.push_back(std::to_string(curr));\n        } else {\n\
    \            res.push_back(std::to_string(prev));\n        }\n        prev = i;\n\
    \        curr = i;\n    }\n    res.push_back(std::to_string(curr));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl21lygx0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    for (auto i :\
    \ arr) {\n        if (i <= 9) {\n            res.push_back(by_length({cur, i,\
    \ 0}));\n            cur = i;\n        } else {\n            res.push_back(by_length({cur,\
    \ i - 10, i - 10}));\n            cur = i;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3sctg81e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) {\n        return res;\n    }\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 /\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 / 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 /\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 / 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa3mx78bm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(cur));\n\
    \            cur = i;\n        }\n        last = i;\n    }\n    res.push_back(to_string(cur));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprlwfwq5k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ < min_len) min_len = arr[i];\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long i = 0; i < n; i++) {\n \
    \       if (arr[i] < min_len) min_len = arr[i];\n    }\n    long max_len = 9000000000;\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len) max_len = arr[i];\n\
    \    }\n    long min_len = 9000000000;\n    for (long \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6slrvr79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \       continue;\n        }\n        if (cur > 9) {\n            std::swap(cur,\
    \ last);\n            ++cur;\n        }\n        res.push_back(to_string(last));\n\
    \        last = i;\n    }\n    res.push_back(to_string(last));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9v7gsp88.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcwlq9m07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return {};\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] > curr) {\n        \
    \    res.push_back(by_length(arr[i:]));\n            curr = arr[i];\n        }\n\
    \    }\n    res.push_back(by_length(arr));\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnmdwob08.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long length = max - min + 1;\n\
    \    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid * 2;\n\
    \    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n\
    \    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n\
    \    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long mid12 = mid *\
    \ 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n    long mid15\
    \ = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid * 16;\n    long\
    \ mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20 = mid * 19;\n\
    \    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long mid23 = mid\
    \ * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n    long mid26\
    \ = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid * 27;\n    long\
    \ mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31 = mid * 30;\n\
    \    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long mid34 = mid\
    \ * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n    long mid37\
    \ = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid * 38;\n    long\
    \ mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42 = mid * 41;\n\
    \    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long mid45 = mid\
    \ * 44;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5_eu_mhq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = std::max(arr.begin(),\
    \ arr.end()) + 1;\n    long min = std::min(arr.begin(), arr.end()) - 1;\n    long\
    \ mid = max / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long\
    \ mid4 = mid3 / 2;\n    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n   \
    \ long mid7 = mid6 / 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n\
    \    long mid10 = mid9 / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11\
    \ / 2;\n    long mid13 = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15\
    \ = mid14 / 2;\n    long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n   \
    \ long mid18 = mid17 / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19\
    \ / 2;\n    long mid21 = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23\
    \ = mid22 / 2;\n    long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n   \
    \ long mid26 = mid25 / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27\
    \ / 2;\n    long mid29 = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31\
    \ = mid30 / 2;\n    long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n   \
    \ long mid34 = mid33 / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35\
    \ / 2;\n    long mid37 = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39\
    \ = mid38 / 2;\n    long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n   \
    \ long mid42 = mid41 / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43\
    \ / 2;\n    long mid45 = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47\
    \ = mid46 / 2;\n    long mid48 = mid47 / 2;\n    long mid\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp75_dilz4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxfumbjnb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(last));\n\
    \            last += cur;\n            cur = i;\n        }\n    }\n    res.push_back(to_string(last));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy2eu93s9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ {};\n    std::vector<std::string> ans;\n    long cur = arr[0];\n    long len\
    \ = arr.size();\n    for (long i = 1; i < len; i++) {\n        if (cur < arr[i])\
    \ {\n            ans.push_back(\"One\");\n            cur = arr[i];\n        }\
    \ else if (cur > arr[i]) {\n            ans.push_back(\"Nine\");\n           \
    \ cur = arr[i];\n        } else {\n            ans.push_back(\"Two\");\n     \
    \       cur = arr[i];\n        }\n    }\n    ans.push_back(\"One\");\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5lby78qq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max = (n>9)\
    \ ? 9 : n;\n    long min = (n>9) ? 0 : 1;\n    long mid = (n>9) ? 9 : n/2;\n \
    \   long mid1 = (n>9) ? 0 : n/2;\n    long mid2 = (n>9) ? 9 : n/2;\n    long mid3\
    \ = (n>9) ? 18 : n/2;\n    long mid4 = (n>9) ? 27 : n/2;\n    long mid5 = (n>9)\
    \ ? 36 : n/2;\n    long mid6 = (n>9) ? 45 : n/2;\n    long mid7 = (n>9) ? 54 :\
    \ n/2;\n    long mid8 = (n>9) ? 63 : n/2;\n    long mid9 = (n>9) ? 72 : n/2;\n\
    \    long mid10 = (n>9) ? 81 : n/2;\n    long mid11 = (n>9) ? 90 : n/2;\n    long\
    \ mid12 = (n>9) ? 99 : n/2;\n    long mid13 = (n>9) ? 108 : n/2;\n    long mid14\
    \ = (n>9) ? 117 : n/2;\n    long mid15 = (n>9) ? 126 : n/2;\n    long mid16 =\
    \ (n>9) ? 135 : n/2;\n    long mid17 = (n>9) ? 144 : n/2;\n    long mid18 = (n>9)\
    \ ? 153 : n/2;\n    long mid19 = (n>9) ? 162 : n/2;\n    long mid20 = (n>9) ?\
    \ 171 : n/2;\n    long mid21 = (n>9) ? 180 : n/2;\n    long mid22 = (n>9) ? 189\
    \ : n/2;\n    long mid23 = (n>9) ? 198 : n/2;\n    long mid24 = (n>9) ? 207 :\
    \ n/2;\n    long mid25 = (n>9) ? 216 : n/2;\n    long mid26 = (n>9) ? 225 : n/2;\n\
    \    long mid27 = (n>9) ? 234 : n/2;\n    long mid28 = (n>9) ? 243 : n/2;\n  \
    \  long mid29 = (n>9) ? 252 : n/2;\n    long mid30 = (n>9) ? 261 : n/2;\n    long\
    \ mid31 = (n>9) ? 270 : n/2;\n    long mid32 = (n>9) ? 279 : n/2;\n    long mid33\
    \ = (n>\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv4b1x4dz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i >= min && i <= max) {\n            res.push_back(\"One\");\n  \
    \      } else if (i < min) {\n            res.push_back(\"Two\");\n        } else\
    \ if (i > max) {\n            res.push_back(\"Three\");\n        } else {\n  \
    \          res.push_back(\"Four\");\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl_sagiwo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // get the smallest number\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // get the largest number\n\
    \  long mid = (min + max) / 2;\n  std::vector<std::string> res;\n  for (long i\
    \ = min; i <= max; i++) {\n    if (i >= 1 && i <= 9) {\n      res.push_back(\"\
    One\");\n    } else if (i >= 10 && i <= 99) {\n      res.push_back(\"Two\");\n\
    \    } else if (i >= 100 && i <= 999) {\n      res.push_back(\"Three\");\n   \
    \ } else if (i >= 1000 && i <= 9999) {\n      res.push_back(\"Four\");\n    }\
    \ else if (i >= 10000 && i <= 99999) {\n      res.push_back(\"Five\");\n    }\
    \ else if (i >= 100000 && i <= 999999) {\n      res.push_back(\"Six\");\n    }\
    \ else if (i >= 1000000 && i <= 9999999) {\n      res.push_back(\"Seven\");\n\
    \    } else if (i >= 10000000 && i <= 99999999) {\n      res.push_back(\"Eight\"\
    );\n    } else if (i >= 100000000 && i <= 999999999) {\n      res.push_back(\"\
    Nine\");\n    } else if (i == mid) {\n      res.push_back(\"One\");\n    } else\
    \ {\n      res.push_back(\"Zero\");\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptnxo5pxy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \       continue;\n        }\n        if (cur > 9) {\n            long tmp = cur;\n\
    \            cur = last;\n            last = tmp;\n        }\n        res.push_back(to_string(cur));\n\
    \        cur = i;\n    }\n    res.push_back(to_string(cur));\n    res.push_back(to_string(last));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa0b_gucc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    if (min == max) {\n        res.push_back(\"One\");\n   \
    \     return res;\n    }\n    long mid = min + (max - min) / 2;\n    std::vector<std::string>\
    \ left, big;\n    by_length(arr, left, mid);\n    by_length(arr, big, mid);\n\
    \    std::vector<std::string> right;\n    by_length(arr, big, max);\n    res.insert(res.end(),\
    \ left.begin(), left.end());\n    res.insert(res.end(), right.begin(), right.end());\n\
    \    res.insert(res.end(), big.begin(), big.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6gl5f45t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] > cur) {\n         \
    \   res.push_back(to_string(cur));\n            cur = arr[i];\n        } else\
    \ {\n            res.push_back(to_string(arr[i]));\n        }\n    }\n    res.push_back(to_string(cur));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp758rgftt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i < min || i > max) {\n            continue;\n        }\n       \
    \ res.push_back(by_length(std::vector<long>{i, i + 1, i + 2, i + 3, i + 4, i +\
    \ 5, i + 6, i + 7, i + 8}));\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaxv7a43z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max = (n\
    \ / 10) + 1;\n    long min = (n % 10) + 1;\n    for (long i = 0; i < max; i++)\
    \ {\n        long count = 0;\n        for (long j = 0; j < n; j++) {\n       \
    \     if (arr[j] >= min && arr[j] <= max) {\n                count++;\n      \
    \      }\n        }\n        if (count == 0) {\n            res.push_back(\"\"\
    );\n        } else {\n            std::string num = \"\";\n            for (long\
    \ j = 0; j < n; j++) {\n                if (arr[j] >= min && arr[j] <= max) {\n\
    \                    num += to_string(arr[j]);\n                }\n          \
    \  }\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_ecwjmz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    long\
    \ long n = arr.size();\n    if (n == 0) return res;\n    long long max = (long\
    \ long)pow(10, 9) - 1;\n    long long min = (long long)pow(10, 9) - 1;\n    long\
    \ long mid = max / 2;\n    long long mid2 = min / 2;\n    long long mid3 = mid\
    \ / 10;\n    long long mid4 = mid3 / 10;\n    long long mid5 = mid4 / 10;\n  \
    \  long long mid6 = mid5 / 10;\n    long long mid7 = mid6 / 10;\n    long long\
    \ mid8 = mid7 / 10;\n    long long mid9 = mid8 / 10;\n    long long mid10 = mid9\
    \ / 10;\n    long long mid11 = mid10 / 10;\n    long long mid12 = mid11 / 10;\n\
    \    long long mid13 = mid12 / 10;\n    long long mid14 = mid13 / 10;\n    long\
    \ long mid15 = mid14 / 10;\n    long long mid16 = mid15 / 10;\n    long long mid17\
    \ = mid16 / 10;\n    long long mid18 = mid17 / 10;\n    long long mid19 = mid18\
    \ / 10;\n    long long mid20 = mid19 / 10;\n    long long mid21 = mid20 / 10;\n\
    \    long long mid22 = mid21 / 10;\n    long long mid23 = mid22 / 10;\n    long\
    \ long mid24 = mid23 / 10;\n    long long mid25 = mid24 / 10;\n    long long mid26\
    \ = mid25 / 10;\n    long long mid27 = mid26 / 10;\n    long long mid28 = mid27\
    \ / 10;\n    long long mid29 = mid28 / 10;\n    long long mid30 = mid29 / 10;\n\
    \    long long mid31 = mid30 / 10;\n    long long mid32 = mid31 / 10;\n    long\
    \ long mid33 = mid32 / 10;\n    long long mid34 = mid33 / 10;\n    long long mid35\
    \ = mid34 / 10;\n    long long mid36 = mid35 / 10;\n    long long mid37 = mid36\
    \ / 10;\n    long long mid38 = mid37 / 10;\n    long long mid39 = mid38 / 10;\n\
    \    long long mid40 = mid39 / 10;\n    long long mid41 = mid40 / 10;\n    long\
    \ long mid42 = mid41 / 10;\n    long long mid43 = mid42 / 10;\n    long long mid44\
    \ = mid43 / \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphj7s3nco.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min == max) {\n        ans.push_back(\"One\");\n        return ans;\n  \
    \  }\n    long mid = (min + max) / 2;\n    std::vector<std::string> left  = by_length(arr);\n\
    \    std::vector<std::string> right = by_length(arr);\n    left.erase(std::remove(left.begin(),\
    \ left.end(), mid), left.end());\n    right.erase(std::remove(right.begin(), right.end(),\
    \ mid), right.end());\n    std::vector<std::string> result;\n    for (auto i :\
    \ left) {\n        result.push_back(\"One\");\n    }\n    for (auto i : right)\
    \ {\n        result.push_back(\"Two\");\n    }\n    for (auto i : arr) {\n   \
    \     if (i < mid) {\n            result.push_back(\"One\");\n        } else if\
    \ (i > mid) {\n            result.push_back(\"Two\");\n        } else {\n    \
    \        result.push_back(\"Three\");\n        }\n    }\n    return ans.insert(ans.end(),\
    \ result.begin(), result.end());\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgfsx6fhr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    while (len) {\n        while (cur < 9 && cur < arr[len - 1]) cur *= 10;\n\
    \        res.push_back(by_digit(cur));\n        cur /= 10;\n        len--;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp926zjahg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (i < 1 || i > 9) continue;\n        if (i\
    \ == min) res.push_back(\"One\");\n        else if (i == max) res.push_back(\"\
    Nine\");\n        else res.push_back(\"Two\"+ std::to_string(i));\n    }\n   \
    \ std::reverse(std::begin(res), std::end(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_i9bqujb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid /\
    \ 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 =\
    \ mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj53jgi1u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return {};\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            prev = i;\n  \
    \      } else {\n            long next = cur;\n            if (next > 9)\n   \
    \             next -= 10;\n            res.push_back(to_string(prev) + to_string(next));\n\
    \            prev = i;\n            cur = next;\n        }\n    }\n    res.push_back(to_string(prev)\
    \ + to_string(cur));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplivu6zv6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ std::vector<std::string>();\n    std::vector<std::string> res;\n    long max\
    \ = *std::max_element(arr.begin(), arr.end()); // max number in the array\n  \
    \  long min = *std::min_element(arr.begin(), arr.end()); // min number in the\
    \ array\n    long mid = (max + min) / 2;\n    long mid2 = mid / 10;\n    long\
    \ mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5 = mid % 100;\n \
    \   long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n    long mid8 = mid\
    \ / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid / 1000000;\n\
    \    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n    long mid13\
    \ = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long mid15 = mid\
    \ % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17 = mid % 10000000000;\n\
    \    long mid18 = mid / 100000000000;\n    long mid19 = mid % 100000000000;\n\
    \    long mid20 = mid / 10000000000000;\n    long mid21 = mid % 10000000000000;\n\
    \    long mid22 = mid / 100000000000000;\n    long mid23 = mid % 100000000000000;\n\
    \    long mid24 = mid / 1000000000000000;\n    long mid25 = mid % 1000000000000000;\n\
    \    long mid26 = mid / 100000000000000000;\n    long mid27 = mid % 100000000000000000;\n\
    \    long mid28 = mid / 1000000000000000000;\n    long mid29 = mid % 1000000000000000000;\n\
    \    long mid30 = mid / 1000000000000000000;\n    long mid31 = mid % 1000000000000000000;\n\
    \    long mid32 = mid / 10000000000000000000;\n    long mid33 = mid % 10000000000000000000;\n\
    \    long mid34 = mid / 100000000000000000000;\n    long mid35 = mid % 100000000000000000000;\n\
    \    long mid36 = mid / 10000000000000000000000;\n    long mid37 = mid % 10000000000000000000000;\n\
    \    long mid38 = mid / 100000000000000000000000;\n    long mid39 = mid % 100000000000000000000000;\n\
    \    long mid40 = mid / 10000000000000000000000000;\n    long mid41 = mid % 10000000000000000000000000;\n\
    \    long mid42 = mid / \n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbhln0h0u.cpp:50:24: warning: integer constant is so large that\
    \ it is unsigned [enabled by default]\n     long mid32 = mid / 10000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:50:5: warning: this decimal constant\
    \ is unsigned only in ISO C90 [enabled by default]\n     long mid32 = mid / 10000000000000000000;\n\
    \     ^\n/tmp/tmpbhln0h0u.cpp:51:24: warning: integer constant is so large that\
    \ it is unsigned [enabled by default]\n     long mid33 = mid % 10000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:51:5: warning: this decimal constant\
    \ is unsigned only in ISO C90 [enabled by default]\n     long mid33 = mid % 10000000000000000000;\n\
    \     ^\n/tmp/tmpbhln0h0u.cpp:52:24: warning: integer constant is too large for\
    \ its type [enabled by default]\n     long mid34 = mid / 100000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:53:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid35 = mid % 100000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:54:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid36 = mid / 10000000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:55:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid37 = mid % 10000000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:56:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid38 = mid / 100000000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:57:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid39 = mid % 100000000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:58:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid40 = mid / 10000000000000000000000000;\n\
    \                        ^\n/tmp/tmpbhln0h0u.cpp:59:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid41 = mid % 100000000000"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long len\
    \ = arr.size();\n    long cur_index = 0;\n    while (cur_index < len) {\n    \
    \    while (cur < 9) {\n            long tmp = arr[cur_index];\n            arr[cur_index]\
    \ = cur;\n            cur = tmp;\n            cur_index++;\n        }\n      \
    \  res.push_back(arr[cur_index]);\n        cur++;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr1olrf4g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n  \
    \  long right = mid;\n    long mid2 = mid;\n    while (left < max) {\n       \
    \ mid2 = mid + 1;\n        while (right < max) {\n            if (arr[right] <\
    \ mid2) {\n                mid2 = mid + 1;\n            } else {\n           \
    \     res.push_back(arr[right]);\n                right++;\n            }\n  \
    \      }\n        mid = mid2;\n        left = mid;\n        right = mid;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0kbjycc1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = *std::min_element(arr.begin(), arr.end()); // get min value\n\
    \    long max = *std::max_element(arr.begin(), arr.end()); // get max value\n\
    \    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid\
    \ % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6\
    \ = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long\
    \ mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n\
    \    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7\
    \ / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17\
    \ = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n   \
    \ long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11\
    \ / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long\
    \ mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 %\
    \ 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30\
    \ = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n\
    \    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 =\
    \ mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n  \
    \  long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20\
    \ / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long\
    \ mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 %\
    \ 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 % 10;\n    long mid48\
    \ = mid24 / \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3b8f44ub.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    long\
    \ n = arr.size();\n    if (n == 0)\n        return ans;\n    long max_len = 0,\
    \ min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > 9)\n\
    \            ans.push_back(\"Nine\");\n        else if (arr[i] > 0)\n        \
    \    ans.push_back(\"One\");\n        else if (arr[i] < 0)\n            ans.push_back(\"\
    Nine\");\n        else if (arr[i] < 1)\n            ans.push_back(\"Zero\");\n\
    \        else if (arr[i] < 10)\n            ans.push_back(\"Ten\");\n        else\
    \ if (arr[i] < 100)\n            ans.push_back(\"Eleven\");\n        else if (arr[i]\
    \ < 1000)\n            ans.push_back(\"Twelve\");\n        else if (arr[i] < 10000)\n\
    \            ans.push_back(\"Thirteen\");\n        else if (arr[i] < 100000)\n\
    \            ans.push_back(\"Fourteen\");\n        else if (arr[i] < 1000000)\n\
    \            ans.push_back(\"Fifteen\");\n        else if (arr[i] < 10000000)\n\
    \            ans.push_back(\"Sixteen\");\n        else if (arr[i] < 100000000)\n\
    \            ans.push_back(\"Seventeen\");\n        else if (arr[i] < 1000000000)\n\
    \            ans.push_back(\"Eighteen\");\n        else if (arr[i] < 10000000000)\n\
    \            ans.push_back(\"Nineteen\");\n        else\n            ans.push_back(\"\
    Zero\");\n        if (arr[i] > max_len)\n            max_len = arr[i];\n     \
    \   if (arr[i] < min_len)\n            min_len = arr[i];\n    }\n    long diff\
    \ = max_len - min_len;\n    for (long i = 0; i < n; i++) {\n        long val =\
    \ arr[i] - min_len;\n        long pos = val / diff;\n        ans[pos] += \" \"\
    ;\n        ans[pos] += (val % diff);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf917tx86.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] > cur) {\n         \
    \   res.push_back(by_length(arr[i:]));\n            cur = arr[i];\n        } else\
    \ {\n            res.push_back(std::to_string(cur));\n            cur = arr[i];\n\
    \        }\n    }\n    res.push_back(std::to_string(cur));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0a2ki1_6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid /\
    \ 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 =\
    \ mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj53jgi1u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long curr = arr[0];\n   \
    \ for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] > curr) {\n  \
    \          res.push_back(to_string(curr));\n            curr = arr[i];\n     \
    \   } else {\n            curr += arr[i];\n        }\n    }\n    res.push_back(to_string(curr));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkehqiob9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i == first) {\n\
    \            first = i;\n        }\n        if (i == last) {\n            last\
    \ = i;\n        }\n    }\n    long mid = (first + last) / 2;\n    long mid2 =\
    \ mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\
    \ = mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfo9xsszh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long len = arr.size();\n    for (long i =\
    \ 1; i < len; i++) {\n        if (arr[i] < cur) {\n            res.push_back(\"\
    One\");\n        } else if (arr[i] > cur) {\n            res.push_back(\"Nine\"\
    );\n        } else {\n            long tmp = arr[i];\n            while (tmp >\
    \ 9) {\n                res.push_back(\"Ten\");\n                tmp -= 10;\n\
    \            }\n            res.push_back(\"One\");\n            while (tmp >\
    \ 0) {\n                res.push_back(\"Two\");\n                tmp -= 2;\n \
    \           }\n            while (tmp > 0) {\n                res.push_back(\"\
    Three\");\n                tmp -= 3;\n            }\n            while (tmp >\
    \ 0) {\n                res.push_back(\"Four\");\n                tmp -= 4;\n\
    \            }\n            while (tmp > 0) {\n                res.push_back(\"\
    Five\");\n                tmp -= 5;\n            }\n            while (tmp > 0)\
    \ {\n                res.push_back(\"Six\");\n                tmp -= 6;\n    \
    \        }\n            while (tmp > 0) {\n                res.push_back(\"Seven\"\
    );\n                tmp -= 7;\n            }\n            while (tmp > 0) {\n\
    \                res.push_back(\"Eight\");\n                tmp -= 8;\n      \
    \      }\n            while (tmp > 0) {\n                res.push_back(\"Nine\"\
    );\n                tmp -= 9;\n            }\n        }\n        cur = arr[i];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe0ojf224.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::vector<std::string>();\n\
    \    }\n    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev\
    \ = arr[0];\n    for (long i : arr) {\n        if (i > curr) {\n            long\
    \ tmp = curr;\n            curr = prev;\n            prev = tmp;\n        }\n\
    \        res.push_back(to_string(curr));\n        curr = i;\n    }\n    res.push_back(to_string(curr));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0rkvyhwg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long curr = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            ans.push_back(\"\
    One\");\n        } else if (i <= 99) {\n            ans.push_back(\"Two\");\n\
    \        } else if (i <= 999) {\n            ans.push_back(\"Three\");\n     \
    \   } else if (i <= 9999) {\n            ans.push_back(\"Four\");\n        } else\
    \ if (i <= 99999) {\n            ans.push_back(\"Five\");\n        } else if (i\
    \ <= 999999) {\n            ans.push_back(\"Six\");\n        } else if (i <= 9999999)\
    \ {\n            ans.push_back(\"Seven\");\n        } else if (i <= 999999999)\
    \ {\n            ans.push_back(\"Eight\");\n        } else if (i <= 99999999999)\
    \ {\n            ans.push_back(\"Nine\");\n        } else {\n            ans.push_back(\"\
    Zero\");\n        }\n        last = i;\n    }\n    ans.push_back(\"One\");\n \
    \   ans.push_back(\"Two\");\n    ans.push_back(\"Three\");\n    ans.push_back(\"\
    Four\");\n    ans.push_back(\"Five\");\n    ans.push_back(\"Six\");\n    ans.push_back(\"\
    Seven\");\n    ans.push_back(\"Eight\");\n    ans.push_back(\"Nine\");\n    ans.push_back(\"\
    Zero\");\n    ans.push_back(\"One\");\n    ans.push_back(\"Two\");\n    ans.push_back(\"\
    Three\");\n    ans.push_back(\"Four\");\n    ans.push_back(\"Five\");\n    ans.push_back(\"\
    Six\");\n    ans.push_back(\"Seven\");\n    ans.push_back(\"Eight\");\n    ans.push_back(\"\
    Nine\");\n    ans.push_back(\"Zero\");\n    ans.push_back(\"One\");\n    ans.push_back(\"\
    Two\");\n    ans.push_back(\"Three\");\n    ans.push_back(\"Four\");\n    ans.push_back(\"\
    Five\");\n    ans.push_back(\"Six\");\n    ans.push_back(\"Seven\");\n    ans.push_back(\"\
    Eight\");\n    ans.push_back(\"Nine\");\n    ans.push_back(\"Zero\");\n    ans.push_back(\"\
    One\");\n    ans.push_back(\"Two\");\n    ans.push_back(\"Three\");\n    ans.push_back(\"\
    Four\");\n    ans.push_back(\"Five\");\n    ans.push_back(\"Six\");\n    ans.push_back(\"\
    Seven\");\n    ans.push_back(\"Eight\");\n    ans.push_back(\"Nine\");\n    \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl4w4ex1f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = 0, min_len = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        if (max_len < arr[i]) max_len = arr[i];\n\
    \        if (min_len > arr[i]) min_len = arr[i];\n    }\n    if (max_len == min_len)\
    \ return {};\n    long mid = max_len >> 1;\n    long left = 0, right = max_len;\n\
    \    while (left < right) {\n        long mid = (left + right) >> 1;\n       \
    \ if (arr[mid] >= mid) left = mid + 1;\n        else right = mid - 1;\n    }\n\
    \    long mid = max_len >> 1;\n    long left = 0, right = max_len;\n    while\
    \ (left < right) {\n        long mid = (left + right) >> 1;\n        if (arr[mid]\
    \ >= mid) left = mid + 1;\n        else right = mid - 1;\n    }\n    long mid\
    \ = max_len >> 1;\n    long left = 0, right = max_len;\n    while (left < right)\
    \ {\n        long mid = (left + right) >> 1;\n        if (arr[mid] >= mid) left\
    \ = mid + 1;\n        else right = mid - 1;\n    }\n    long mid = max_len >>\
    \ 1;\n    long left = 0, right = max_len;\n    while (left < right) {\n      \
    \  long mid = (left + right) >> 1;\n        if (arr[mid] >= mid) left = mid +\
    \ 1;\n        else right = mid - 1;\n    }\n    long mid = max_len >> 1;\n   \
    \ long left = 0, right = max_len;\n    while (left < right) {\n        long mid\
    \ = (left + right) >> 1;\n        if (arr[mid] >= mid) left = mid + 1;\n     \
    \   else right = mid - 1;\n    }\n    long mid = max_len >> 1;\n    long left\
    \ = 0, right = max_len;\n    while (left < right) {\n        long mid = (left\
    \ + right) >> 1;\n        if (arr[mid] >= mid) left = mid + 1;\n        else right\
    \ = mid - 1;\n    }\n    long mid = max_len >> 1;\n    long left = 0, right =\
    \ max_len;\n    while (left < right) {\n        long mid = (left + right) >> 1;\n\
    \        if (arr[mid] >= mid) left = mid + 1;\n        else right = mid - 1;\n\
    \    }\n    long mid = max_len >> 1;\n    long left = 0, right = max_len;\n  \
    \  while (left < right) {\n        long mid = (left + right) >> 1;\n        if\
    \ (arr[mid] >= mid) left = mid + 1;\n        else right = mid - 1;\n    }\n  \
    \  long mid = max_len >> 1;\n    long left = 0, right = max_len;\n    while (left\
    \ < right\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps8zmvlnm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      name = \"Ten\";\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprd0ehofl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n  \
    \  long right = mid;\n    long temp;\n    while (left < max) {\n        temp =\
    \ left;\n        left = right;\n        right = temp + right;\n    }\n    long\
    \ length = right - left + 1;\n    ans.reserve(length);\n    for (long i = left;\
    \ i <= right; i++) {\n        ans.push_back(by_length({i - 1, i}));\n    }\n \
    \   for (long i = left; i <= right; i++) {\n        ans.push_back(by_length({i,\
    \ i + 9}));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnklhzjpn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (arr[i] < num) {\n         \
    \   num = arr[i];\n        }\n    }\n    long cur = num;\n    long next = 1;\n\
    \    while (next < 10) {\n        long cnt = 0;\n        for (long i = 0; i <\
    \ len; i++) {\n            if (arr[i] < cur) {\n                cnt++;\n     \
    \       }\n        }\n        if (cnt > 0) {\n            std::string tmp;\n \
    \           tmp.reserve(cnt);\n            for (long i = 0; i < len; i++) {\n\
    \                if (arr[i] < cur) {\n                    tmp += to_string(arr[i]);\n\
    \                }\n            }\n            res.push_back(tmp);\n        }\n\
    \        next++;\n        cur = next*10;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy43zvvao.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i < 1 || i > 9)\
    \ {\n            continue;\n        }\n        long mid = (first + last) / 2;\n\
    \        if (mid > 9) {\n            mid = mid - 10;\n        }\n        if (mid\
    \ < 1) {\n            mid = mid + 10;\n        }\n        if (mid == last) {\n\
    \            ans.push_back(\"One\");\n            last = mid + 1;\n        } else\
    \ if (mid == first) {\n            ans.push_back(\"Zero\");\n            first\
    \ = mid - 1;\n        } else {\n            ans.push_back(\"Two\");\n        \
    \    last = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgocjqmxs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (max < 1 || max > 9) {\n        return res;\n    }\n   \
    \ long min = *std::min_element(arr.begin(), arr.end());\n    if (min < 1 || min\
    \ > 9) {\n        return res;\n    }\n    long mid = max / 10;\n    long left\
    \ = max - mid * 10;\n    long right = min - mid * 10;\n    std::vector<std::string>\
    \ arr_reversed;\n    for (long i = left; i <= right; i++) {\n        arr_reversed.push_back(to_string(mid)\
    \ + to_string(i));\n    }\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   std::string name = to_string(arr[i]);\n        for (auto &it : arr_reversed)\
    \ {\n            if (name == it) {\n                res.push_back(name);\n   \
    \             break;\n            }\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp91r9xx01.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long temp = num;\n\
    \    long reverse = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > 9) {\n            reverse = reverse * 10 + arr[i] - 10;\n        }\
    \ else {\n            reverse = reverse * 10 + arr[i];\n        }\n    }\n   \
    \ res.push_back(\"One\");\n    res.push_back(\"Two\");\n    res.push_back(\"Three\"\
    );\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"Minus\");\n    res.push_back(\"\
    Plus\");\n    res.push_back(\"Divide\");\n    res.push_back(\"Multiply\");\n \
    \   res.push_back(\"Power\");\n    res.push_back(\"Mod\");\n    res.push_back(\"\
    Equal\");\n    res.push_back(\"Greater\");\n    res.push_back(\"Less\");\n   \
    \ res.push_back(\"GreaterOrEqual\");\n    res.push_back(\"LessOrEqual\");\n  \
    \  res.push_back(\"And\");\n    res.push_back(\"Or\");\n    res.push_back(\"Not\"\
    );\n    res.push_back(\"Xor\");\n    res.push_back(\"AndNot\");\n    res.push_back(\"\
    OrNot\");\n    res.push_back(\"NotEqual\");\n    res.push_back(\"EqualOrGreater\"\
    );\n    res.push_back(\"EqualOrLess\");\n    res.push_back(\"GreaterOrEqualOrNot\"\
    );\n    res.push_back(\"LessOrEqualOrNot\");\n    res.push_back(\"AndOrNot\");\n\
    \    res.push_back(\"OrOrNot\");\n    res.push_back(\"NotAndNot\");\n    res.push_back(\"\
    NotOrNot\");\n    res.push_back(\"NotEqualOrGreaterOrNot\");\n    res.push_back(\"\
    NotEqualOrLessOrNot\");\n    res.push_back(\"NotGreaterOrEqualOrNot\");\n    res.push_back(\"\
    NotLessOrEqualOrNot\");\n    res.push_back(\"NotAndOrNot\");\n    res.push_back(\"\
    NotOrOrNot\");\n    res.push_back(\"NotNotEqualOrGreaterOrNot\");\n    res.push_back(\"\
    NotNotEqualOrLessOrNot\");\n    res.push_back(\"NotNotGreaterOrEqualOrNot\");\n\
    \    res.push_back(\"NotNotLessOrEqualOrNot\");\n    res.push_back(\"NotNotAndOrNot\"\
    );\n    res.push_back(\"NotNotOrOrNot\");\n    res.\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplmtppsw0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = 0, r = 0;\n    for (auto i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            l = i;\n        } else\
    \ {\n            res.push_back(by_length(std::vector<long>{l, i}));\n        \
    \    l = i;\n        }\n    }\n    res.push_back(by_length(std::vector<long>{l,\
    \ r}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmputucg9km.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) {\n        return result;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min > 9 || max < 1) {\n        return result;\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    long length = max - min + 1;\n    long mid_index = 0;\n\
    \    long left_index = 0;\n    long right_index = 0;\n    long left_length = mid_index\
    \ + 1;\n    long right_length = length + mid_index;\n    long left_mid = arr[left_index];\n\
    \    long right_mid = arr[right_index];\n    long left_length = left_length -\
    \ mid_index;\n    long right_length = right_length + mid_index;\n    long left_mid_index\
    \ = 0;\n    long right_mid_index = 0;\n    long left_left_index = 0;\n    long\
    \ left_right_index = 0;\n    long right_left_index = 0;\n    long right_right_index\
    \ = 0;\n    while (left_left_index < left_length && left_right_index < left_length)\
    \ {\n        if (left_mid > left_mid) {\n            left_mid_index = left_left_index;\n\
    \            left_mid = arr[left_left_index];\n            left_left_index++;\n\
    \        } else {\n            left_mid_index = left_right_index;\n          \
    \  left_mid = arr[left_right_index];\n            left_right_index++;\n      \
    \  }\n    }\n    while (right_left_index < right_length && right_right_index <\
    \ right_length) {\n        if (right_mid > right_mid) {\n            right_mid_index\
    \ = right_left_index;\n            right_mid = arr[right_left_index];\n      \
    \      right_left_index++;\n        } else {\n            right_mid_index = right_right_index;\n\
    \            right_mid = arr[right_right_index];\n            right_right_index++;\n\
    \        }\n    }\n    while (left_left_index < left_length) {\n        result.push_back(\"\
    One\");\n        left_left_index++;\n    }\n    while (left_right_index < left_length)\
    \ {\n        result.push_back(\"Two\");\n        left_right_index++;\n    }\n\
    \    while (right_left_index < right_length) {\n        result.push_back(\"Three\"\
    );\n        right_left_index++;\n    }\n    while (right_right_index < right_length)\
    \ {\n        result.push_back(\"Four\");\n        right_right_index++;\n    }\n\
    \    while (left_mid_index < left_length) {\n        result.push_back(\"Five\"\
    );\n        left_mid_index++;\n    }\n    while (right_mid_index < right_length)\
    \ {\n        result.push_back(\"Six\");\n        right_mid_index++;\n    }\n \
    \   while (left_mid_index < left_length) {\n        result.push_back(\"Seven\"\
    );\n        left_mid_index++;\n    }\n    while (right_mid_index < right_length)\
    \ {\n        result.push_back(\"E\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkci31dr5.cpp:91:26: warning: missing terminating \" character [enabled\
    \ by default]\n         result.push_back(\"E\n                          ^\n/tmp/tmpkci31dr5.cpp:91:9:\
    \ error: missing terminating \" character\n         result.push_back(\"E\n   \
    \      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkci31dr5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n   "
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long length = arr.size();\n    for (long i = 0; i < length; i++)\
    \ {\n        if (arr[i] < mid) {\n            res.push_back(to_string(arr[i]));\n\
    \        } else if (arr[i] > mid) {\n            res.push_back(to_string(arr[i]\
    \ + 10));\n        } else {\n            res.push_back(to_string(arr[i] - 10));\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpes9_i2b0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ if (max < 1 || min > 9) {\n        return res;\n    }\n    long mid = max /\
    \ 10;\n    long left = max - mid * 10;\n    long right = min - mid * 10;\n   \
    \ std::vector<std::string> left_by_length(by_length(arr));\n    std::vector<std::string>\
    \ right_by_length(left_by_length);\n    std::vector<std::string> left_by_length_and_right(left_by_length);\n\
    \    std::vector<std::string> right_by_length_and_left(right_by_length);\n   \
    \ std::vector<std::string> left_by_length_and_right_and_left(left_by_length_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right(right_by_length_and_left);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right(left_by_length_and_right_and_left);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left(right_by_length_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right(right_by_length_and_left_and_right_and_left);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_left(right_by_length_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_right_and_left(right_by_length_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left(right_by_length_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> right_by_length_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left(left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right);\n\
    \    std::vector<std::string> left_by_length_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left_and_right_and_left(right_by_\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplhhtkskw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i > 9) {\n            long next = cur + i;\n            while\
    \ (next > 9) {\n                res.emplace_back(to_string(prev));\n         \
    \       prev = next;\n                next = cur + next;\n            }\n    \
    \        res.emplace_back(to_string(prev));\n            prev = next;\n      \
    \  } else {\n            prev = cur;\n            cur = i;\n        }\n    }\n\
    \    res.emplace_back(to_string(prev));\n    return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd5arq6gb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long\
    \ len = arr.size();\n    for (long i = 1; i < len; i++) {\n        if (arr[i]\
    \ < cur) {\n            res.emplace_back(\"One\");\n        } else if (arr[i]\
    \ > cur) {\n            res.emplace_back(\"Nine\");\n        } else {\n      \
    \      res.emplace_back(to_string(arr[i]));\n        }\n        cur = arr[i];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoyo_4vzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long curr = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == curr) continue;\n        if (curr > 9) {\n            long\
    \ tmp = curr;\n            curr = prev;\n            prev = tmp;\n        }\n\
    \        res.push_back(by_length_helper(curr, prev, i, res));\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeigtk0z7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long last = arr[arr.size() - 1];\n    long\
    \ cur2 = 1;\n    long last2 = 1;\n    long cur3 = 1;\n    long last3 = 1;\n  \
    \  long cur4 = 1;\n    long last4 = 1;\n    long cur5 = 1;\n    long last5 = 1;\n\
    \    long cur6 = 1;\n    long last6 = 1;\n    long cur7 = 1;\n    long last7 =\
    \ 1;\n    long cur8 = 1;\n    long last8 = 1;\n    long cur9 = 1;\n    long last9\
    \ = 1;\n    while (cur != last) {\n        while (cur2 <= 9 && cur2 <= last &&\
    \ cur2 <= last2) {\n            while (cur3 <= 9 && cur3 <= last && cur3 <= last3)\
    \ {\n                while (cur4 <= 9 && cur4 <= last && cur4 <= last4) {\n  \
    \                  while (cur5 <= 9 && cur5 <= last && cur5 <= last5) {\n    \
    \                    while (cur6 <= 9 && cur6 <= last && cur6 <= last6) {\n  \
    \                          while (cur7 <= 9 && cur7 <= last && cur7 <= last7)\
    \ {\n                                while (cur8 <= 9 && cur8 <= last && cur8\
    \ <= last8) {\n                                    while (cur9 <= 9 && cur9 <=\
    \ last && cur9 <= last9) {\n                                        res.push_back(\"\
    One\");\n                                        res.push_back(\"Two\");\n   \
    \                                     res.push_back(\"Three\");\n            \
    \                            res.push_back(\"Four\");\n                      \
    \                  res.push_back(\"Five\");\n                                \
    \        res.push_back(\"Six\");\n                                        res.push_back(\"\
    Seven\");\n                                        res.push_back(\"Eight\");\n\
    \                                        res.push_back(\"Nine\");\n          \
    \                              res.push_back(\"Ten\");\n                     \
    \                   res.push_back(\"Eleven\");\n                             \
    \           res.push_back(\"Twelve\");\n                                     \
    \   res.push_back(\"Thirteen\");\n                                        res.push_back(\"\
    Fourteen\");\n                                        res.push_back(\"Fifteen\"\
    );\n                                        res.push_back(\"Sixteen\");\n    \
    \                                    res.push_back(\"Seventeen\");\n         \
    \                               res.push_back(\"Eighteen\");\n               \
    \                         res.push_back(\"Nineteen\");\n                     \
    \                   res.push_back(\"Twenty\");\n                             \
    \           res.push_back(\"Twenty-one\");\n                                 \
    \       res.push_back(\"Twenty-two\");\n                                     \
    \   res.push_back(\"Twenty-three\");\n                                       \
    \ res.push_back(\"Twenty-four\");\n                                        res.push_back(\"\
    Twenty-five\");\n                                        res.push_back(\"Twenty-six\"\
    );\n                                        res.push_back(\"Twenty-seven\");\n\
    \                                        \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpseri7a_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    long min = *std::min_element(arr.begin(), arr.end()); // get min value\n\
    \    long max = *std::max_element(arr.begin(), arr.end()); // get max value\n\
    \    std::vector<std::string> res;\n    for (long i = min; i <= max; i++) {\n\
    \        std::string name = \"\";\n        switch (i) {\n            case 1:\n\
    \                name = \"One\";\n                break;\n            case 2:\n\
    \                name = \"Two\";\n                break;\n            case 3:\n\
    \                name = \"Three\";\n                break;\n            case 4:\n\
    \                name = \"Four\";\n                break;\n            case 5:\n\
    \                name = \"Five\";\n                break;\n            case 6:\n\
    \                name = \"Six\";\n                break;\n            case 7:\n\
    \                name = \"Seven\";\n                break;\n            case 8:\n\
    \                name = \"Eight\";\n                break;\n            case 9:\n\
    \                name = \"Nine\";\n                break;\n            default:\n\
    \                break;\n        }\n        res.push_back(name);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8wxazwts.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i <= 9 && i >= 1) {\n            long index = i - 1;\n          \
    \  if (index < min) {\n                min = index;\n            }\n         \
    \   if (index > max) {\n                max = index;\n            }\n        }\n\
    \    }\n    if (min == max) {\n        res.push_back(\"One\");\n        return\
    \ res;\n    }\n    long mid = (min + max) / 2;\n    std::vector<std::string> left\
    \ = by_length(arr);\n    std::vector<std::string> right = by_length(arr);\n  \
    \  left.erase(std::remove(left.begin(), left.end(), mid), left.end());\n    right.erase(std::remove(right.begin(),\
    \ right.end(), mid), right.end());\n    std::vector<std::string> result;\n   \
    \ for (long i : arr) {\n        if (i <= 9 && i >= 1) {\n            long index\
    \ = i - 1;\n            if (index < min) {\n                result.push_back(\"\
    One\");\n            } else if (index > max) {\n                result.push_back(\"\
    Nine\");\n            } else {\n                result.push_back(by_name[index]);\n\
    \            }\n        }\n    }\n    for (auto i : left) {\n        result.push_back(i);\n\
    \    }\n    for (auto i : right) {\n        result.push_back(i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6ugrsvks.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i > cur) {\n            long tmp = cur;\n            cur = prev;\n\
    \            prev = tmp;\n        }\n        res.push_back(to_string(prev));\n\
    \        prev = i;\n    }\n    res.push_back(to_string(cur));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp55zs0mxi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == curr) continue;\n        if (i > curr)\
    \ {\n            res.push_back(\"One\");\n            prev = curr;\n         \
    \   curr = i;\n        } else if (i < prev) {\n            res.push_back(\"Nine\"\
    );\n            prev = i;\n        }\n    }\n    res.push_back(\"One\");\n   \
    \ res.push_back(\"Nine\");\n    res.push_back(\"Two\");\n    res.push_back(\"\
    Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp21m1r4o0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = (min + max)\
    \ / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4 =\
    \ mid3 / 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 /\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 / 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 /\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 / 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid49 = mid\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_4qg42w3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long length = max - min;\n\
    \    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid * 2;\n\
    \    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n\
    \    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n\
    \    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long mid12 = mid *\
    \ 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n    long mid15\
    \ = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid * 16;\n    long\
    \ mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20 = mid * 19;\n\
    \    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long mid23 = mid\
    \ * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n    long mid26\
    \ = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid * 27;\n    long\
    \ mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31 = mid * 30;\n\
    \    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long mid34 = mid\
    \ * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n    long mid37\
    \ = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid * 38;\n    long\
    \ mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42 = mid * 41;\n\
    \    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long mid45 = mid\
    \ * 44;\n    long mid4\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaiipghug.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i > curr) break;\n        long next = i;\n\
    \        while (next > 9) {\n            next /= 10;\n        }\n        res.push_back(by_length(std::vector<long>{prev,\
    \ next}));\n        prev = next;\n        curr = next;\n    }\n    res.push_back(by_length(std::vector<long>{prev,\
    \ curr}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy7p24crs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    long\
    \ long n = arr.size();\n    long long m = 1;\n    long long k = 0;\n    long long\
    \ temp;\n    long long temp2;\n    long long temp3;\n    long long temp4;\n  \
    \  long long temp5;\n    long long temp6;\n    long long temp7;\n    long long\
    \ temp8;\n    long long temp9;\n    long long temp10;\n    long long temp11;\n\
    \    long long temp12;\n    long long temp13;\n    long long temp14;\n    long\
    \ long temp15;\n    long long temp16;\n    long long temp17;\n    long long temp18;\n\
    \    long long temp19;\n    long long temp20;\n    long long temp21;\n    long\
    \ long temp22;\n    long long temp23;\n    long long temp24;\n    long long temp25;\n\
    \    long long temp26;\n    long long temp27;\n    long long temp28;\n    long\
    \ long temp29;\n    long long temp30;\n    long long temp31;\n    long long temp32;\n\
    \    long long temp33;\n    long long temp34;\n    long long temp35;\n    long\
    \ long temp36;\n    long long temp37;\n    long long temp38;\n    long long temp39;\n\
    \    long long temp40;\n    long long temp41;\n    long long temp42;\n    long\
    \ long temp43;\n    long long temp44;\n    long long temp45;\n    long long temp46;\n\
    \    long long temp47;\n    long long temp48;\n    long long temp49;\n    long\
    \ long temp50;\n    long long temp51;\n    long long temp52;\n    long long temp53;\n\
    \    long long temp54;\n    long long temp55;\n    long long temp56;\n    long\
    \ long temp57;\n    long long temp58;\n    long long temp59;\n    long long temp60;\n\
    \    long long temp61;\n    long long temp62;\n    long long temp63;\n    long\
    \ long temp64;\n    long long temp65;\n    long long temp66;\n    long long temp67;\n\
    \    long long temp68;\n    long long temp69;\n    long long temp70;\n    long\
    \ long temp71;\n    long long temp72;\n    long long \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpou99e5ba.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty()) return ans;\n    long l = arr.size();\n    if (l == 1) return\
    \ ans;\n    long mid = l / 2;\n    long left = arr[0];\n    long right = arr[1];\n\
    \    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long mid4 = mid3 / 2;\n\
    \    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n    long mid7 = mid6 /\
    \ 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n    long mid10 = mid9\
    \ / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11 / 2;\n    long mid13\
    \ = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15 = mid14 / 2;\n   \
    \ long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n    long mid18 = mid17\
    \ / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19 / 2;\n    long mid21\
    \ = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23 = mid22 / 2;\n   \
    \ long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n    long mid26 = mid25\
    \ / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27 / 2;\n    long mid29\
    \ = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31 = mid30 / 2;\n   \
    \ long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n    long mid34 = mid33\
    \ / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35 / 2;\n    long mid37\
    \ = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39 = mid38 / 2;\n   \
    \ long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n    long mid42 = mid41\
    \ / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43 / 2;\n    long mid45\
    \ = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47 = mid46 / 2;\n   \
    \ long mid48 = mid47 / 2;\n    long mid49\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpev_pbwo2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749829
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = n;\n    for (long i = 0; i < n; ++i) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (arr[i] > max_len)\
    \ max_len = arr[i];\n        if (arr[i] < min_len) min_len = arr[i];\n    }\n\
    \    if (max_len == min_len) return std::vector<std::string>();\n    long mid\
    \ = min_len + (max_len - min_len) / 2;\n    long mid2 = mid + 1;\n    long mid3\
    \ = mid + 2;\n    long mid4 = mid + 3;\n    long mid5 = mid + 4;\n    long mid6\
    \ = mid + 5;\n    long mid7 = mid + 6;\n    long mid8 = mid + 7;\n    long mid9\
    \ = mid + 8;\n    long mid10 = mid + 9;\n    long mid11 = mid + 10;\n    long\
    \ mid12 = mid + 11;\n    long mid13 = mid + 12;\n    long mid14 = mid + 13;\n\
    \    long mid15 = mid + 14;\n    long mid16 = mid + 15;\n    long mid17 = mid\
    \ + 16;\n    long mid18 = mid + 17;\n    long mid19 = mid + 18;\n    long mid20\
    \ = mid + 19;\n    long mid21 = mid + 20;\n    long mid22 = mid + 21;\n    long\
    \ mid23 = mid + 22;\n    long mid24 = mid + 23;\n    long mid25 = mid + 24;\n\
    \    long mid26 = mid + 25;\n    long mid27 = mid + 26;\n    long mid28 = mid\
    \ + 27;\n    long mid29 = mid + 28;\n    long mid30 = mid + 29;\n    long mid31\
    \ = mid + 30;\n    long mid32 = mid + 31;\n    long mid33 = mid + 32;\n    long\
    \ mid34 = mid + 33;\n    long mid35 = mid + 34;\n    long mid36 = mid + 35;\n\
    \    long mid37 = mid + 36;\n    long mid38 = mid + 37;\n    long mid39 = mid\
    \ + 38;\n    long mid40 = mid + 39;\n    long mid41 = mid + 40;\n    long mid42\
    \ = mid + 41;\n    long mid43 = mid + 42;\n    long mid44 = mid + 43;\n    long\
    \ mid45 = mid + 44;\n    long mid46 = mid + 45;\n    long mid47 = mid + 46;\n\
    \    long mid48 = mid + 47;\n    long mid49\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjv9q2jry.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n   \
    \ long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg103nfb9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n   \
    \ long mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5 = mid % 100;\n\
    \    long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n    long mid8 = mid\
    \ / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid / 1000000;\n\
    \    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n    long mid13\
    \ = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long mid15 = mid\
    \ % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17 = mid % 10000000000;\n\
    \    long mid18 = mid / 100000000000;\n    long mid19 = mid % 100000000000;\n\
    \    long mid20 = mid / 10000000000000;\n    long mid21 = mid % 10000000000000;\n\
    \    long mid22 = mid / 100000000000000;\n    long mid23 = mid % 100000000000000;\n\
    \    long mid24 = mid / 1000000000000000;\n    long mid25 = mid % 1000000000000000;\n\
    \    long mid26 = mid / 1000000000000000000;\n    long mid27 = mid % 1000000000000000000;\n\
    \    long mid28 = mid / 10000000000000000000;\n    long mid29 = mid % 10000000000000000000;\n\
    \    long mid30 = mid / 1000000000000000000000;\n    long mid31 = mid % 1000000000000000000000;\n\
    \    long mid32 = mid / 10000000000000000000000;\n    long mid33 = mid % 10000000000000000000000;\n\
    \    long mid34 = mid / 100000000000000000000000;\n    long mid35 = mid % 100000000000000000000000;\n\
    \    long mid36 = mid / 10000000000000000000000000;\n    long mid37 = mid % 10000000000000000000000000;\n\
    \    long mid38 = mid / 100000000000000000000000000;\n    long mid39 = mid % 100000000000000000000000000;\n\
    \    long mid40 = mid / 1000000000000000000000000000;\n    long mid41 = mid %\
    \ 1000000000000000000000000000;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvn7cjy81.cpp:54:24: warning: integer constant is so large that\
    \ it is unsigned [enabled by default]\n     long mid28 = mid / 10000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:54:5: warning: this decimal constant\
    \ is unsigned only in ISO C90 [enabled by default]\n     long mid28 = mid / 10000000000000000000;\n\
    \     ^\n/tmp/tmpvn7cjy81.cpp:55:24: warning: integer constant is so large that\
    \ it is unsigned [enabled by default]\n     long mid29 = mid % 10000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:55:5: warning: this decimal constant\
    \ is unsigned only in ISO C90 [enabled by default]\n     long mid29 = mid % 10000000000000000000;\n\
    \     ^\n/tmp/tmpvn7cjy81.cpp:56:24: warning: integer constant is too large for\
    \ its type [enabled by default]\n     long mid30 = mid / 1000000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:57:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid31 = mid % 1000000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:58:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid32 = mid / 10000000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:59:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid33 = mid % 10000000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:60:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid34 = mid / 100000000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:61:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid35 = mid % 100000000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:62:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid36 = mid / 10000000000000000000000000;\n\
    \                        ^\n/tmp/tmpvn7cjy81.cpp:63:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid37 = mid % 1000000000"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] < prev) {\n\
    \            res.push_back(cur);\n            cur = arr[i];\n        }\n     \
    \   prev = arr[i];\n    }\n    res.push_back(cur);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4fp0oxey.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ long mid = max / 10;\n    long start = mid - 1;\n    long end = mid + 1;\n \
    \   while (start >= 0) {\n        long curr = arr[start];\n        while (curr\
    \ > 0) {\n            long temp = curr % 10;\n            arr[start] = arr[start]\
    \ / 10;\n            arr[start + 1] = names[temp];\n            curr = (curr -\
    \ temp) / 10;\n            start -= 1;\n        }\n        start += 1;\n    }\n\
    \    while (end < arr.size()) {\n        long curr = arr[end];\n        while\
    \ (curr > 0) {\n            long temp = curr % 10;\n            arr[end] = arr[end]\
    \ / 10;\n            arr[end - 1] = names[temp];\n            curr = (curr - temp)\
    \ / 10;\n            end += 1;\n        }\n        end += 1;\n    }\n    for (size_t\
    \ i = 0; i < arr.size(); i++) {\n        long curr = arr[i];\n        while (curr\
    \ > 0) {\n            long temp = curr % 10;\n            arr[i] = arr[i / 10];\n\
    \            arr[i + 1] = names[temp];\n            curr = (curr - temp) / 10;\n\
    \            i += 1;\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxu20abwa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] > prev) {\n\
    \            ans.push_back(to_string(prev));\n            prev = arr[i];\n   \
    \     } else {\n            ans.push_back(to_string(cur));\n            cur =\
    \ arr[i];\n        }\n    }\n    ans.push_back(to_string(cur));\n    return ans;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkrcdzrc4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i == first) {\n\
    \            first = i;\n        }\n        if (i == last) {\n            last\
    \ = i;\n        }\n    }\n    long mid = first + (last - first) / 2;\n    long\
    \ mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n  \
    \  long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 %\
    \ 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10\
    \ = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n   \
    \ long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdsfizgyy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ if (max == min) {\n        long mid = max / 10;\n        long rest = max % 10;\n\
    \        if (rest == 0) {\n            std::string s = to_string(mid);\n     \
    \       res.push_back(s);\n        } else {\n            std::string s = to_string(mid)\
    \ + to_string(min);\n            res.push_back(s);\n        }\n    } else {\n\
    \        std::string s = to_string(min) + to_string(max);\n        res.push_back(s);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpztijwxsr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long first = arr[0];\n\
    \    long last = arr[0];\n    for (long i : arr) {\n        if (i == first) {\n\
    \            first = i;\n        } else if (i == last) {\n            last = i;\n\
    \        } else {\n            result.push_back((first - last) + 1 + \" \" + (i\
    \ - first));\n            first = i;\n            last = i;\n        }\n    }\n\
    \    if (first != last) {\n        result.push_back((first - last) + 1 + \" \"\
    \ + (last - first));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpilve024d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // get the smallest number\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // get the largest number\n\
    \  long mid = (min + max) / 2;\n  std::vector<std::string> res;\n  while (min\
    \ <= max) {\n    if (arr[mid] == mid) {\n      res.push_back(names[mid]);\n  \
    \  } else {\n      res.push_back(\"One\");\n    }\n    mid = (min + max) / 2;\n\
    \  }\n  std::reverse(arr.begin(), arr.end()); // reverse the array\n  for (auto\
    \ &i : arr) {\n    i = names[i - 1];\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjt699h7s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (arr[i] > max_len)\
    \ max_len = arr[i];\n        if (arr[i] < min_len) min_len = arr[i];\n    }\n\
    \    if (max_len == min_len) return std::vector<std::string>();\n    long mid\
    \ = (max_len + min_len) / 2;\n    long mid_index = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (arr[i] > 9) continue;\n        if (arr[i] < 1) continue;\n\
    \        if (arr[i] > max_len) mid_index = i;\n    }\n    long left_len = mid\
    \ - min_len;\n    long right_len = max_len - mid;\n    std::vector<std::string>\
    \ left_res;\n    std::vector<std::string> right_res;\n    for (long i = 0; i <\
    \ left_len; i++) {\n        left_res.push_back(\"One\");\n    }\n    for (long\
    \ i = 0; i < right_len; i++) {\n        right_res.push_back(\"One\");\n    }\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > 9) continue;\n     \
    \   if (arr[i] < 1) continue;\n        if (arr[i] > max_len) mid_index = i;\n\
    \        if (arr[i] < min_len) mid_index = i;\n        if (arr[i] == mid) {\n\
    \            left_res.push_back(by_length(arr.substr(0, mid_index)));\n      \
    \      right_res.push_back(by_length(arr.substr(mid_index + 1, n)));\n       \
    \     break;\n        }\n    }\n    for (long i = 0; i < left_res.size(); i++)\
    \ {\n        res.push_back(left_res[i]);\n    }\n    for (long i = 0; i < right_res.size();\
    \ i++) {\n        res.push_back(right_res[i]);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2r487n51.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        if (arr[0] == 1) {\n            res.push_back(\"One\");\n        } else\
    \ {\n            res.push_back(\"Zero\");\n        }\n        return res;\n  \
    \  }\n    long max_num = *std::max_element(arr.begin(), arr.end());\n    long\
    \ min_num = *std::min_element(arr.begin(), arr.end());\n    long max_len = max_num\
    \ - min_num + 1;\n    long min_len = min_num - 1;\n    long mid = max_len / 2;\n\
    \    long mid2 = max_len / 2;\n    long mid3 = max_len / 2;\n    long mid4 = max_len\
    \ / 2;\n    long mid5 = max_len / 2;\n    long mid6 = max_len / 2;\n    long mid7\
    \ = max_len / 2;\n    long mid8 = max_len / 2;\n    long mid9 = max_len / 2;\n\
    \    long mid10 = max_len / 2;\n    long mid11 = max_len / 2;\n    long mid12\
    \ = max_len / 2;\n    long mid13 = max_len / 2;\n    long mid14 = max_len / 2;\n\
    \    long mid15 = max_len / 2;\n    long mid16 = max_len / 2;\n    long mid17\
    \ = max_len / 2;\n    long mid18 = max_len / 2;\n    long mid19 = max_len / 2;\n\
    \    long mid20 = max_len / 2;\n    long mid21 = max_len / 2;\n    long mid22\
    \ = max_len / 2;\n    long mid23 = max_len / 2;\n    long mid24 = max_len / 2;\n\
    \    long mid25 = max_len / 2;\n    long mid26 = max_len / 2;\n    long mid27\
    \ = max_len / 2;\n    long mid28 = max_len / 2;\n    long mid29 = max_len / 2;\n\
    \    long mid30 = max_len / 2;\n    long mid31 = max_len / 2;\n    long mid32\
    \ = max_len / 2;\n    long mid33 = max_len / 2;\n    long mid34 = max_len / 2;\n\
    \    long mid35 = max_len / 2;\n    long mid36 = max_len / 2;\n    long mid37\
    \ = max_len / 2;\n    long mid38 = max_len / 2;\n    long mid39 = max_len / 2;\n\
    \    long mid40 = max_len / 2;\n    long mid41 = max_len / 2;\n    long mid42\
    \ = max_len / 2;\n    long mid4\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsir1tycy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max_len = 0, min_len = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (max_len < i) {\n            max_len = i;\n\
    \        }\n        if (min_len > i) {\n            min_len = i;\n        }\n\
    \    }\n    long diff = max_len - min_len;\n    for (long i : arr) {\n       \
    \ long diff = i - min_len;\n        if (diff > 9) {\n            long temp = diff;\n\
    \            diff = diff - 10;\n            std::string temp = to_string(temp);\n\
    \            std::string res = temp + to_string(diff);\n            res.push_back('\
    \ ');\n            res.push_back(names[diff]);\n            res.push_back(' ');\n\
    \            res.push_back(names[temp]);\n            res.push_back(' ');\n  \
    \          res.push_back(names[max_len]);\n            res.push_back(' ');\n \
    \           res.push_back(names[min_len]);\n            res.push_back(' ');\n\
    \            res.push_back(names[max_len - diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[min_len + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[min_len + diff + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff - diff]);\n     \
    \       res.push_back(' ');\n            res.push_back(names[min_len + diff +\
    \ diff + diff]);\n            res.push_back(' ');\n            res.push_back(names[max_len\
    \ - diff - diff - diff - diff]);\n            res.push_back(' ');\n          \
    \  res.push_back(names[min_len + diff + diff + diff + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff - diff - diff - diff]);\n\
    \            res.push_back(' ');\n            res.push_back(names[min_len + diff\
    \ + diff + diff + diff + diff]);\n            res.push_back(' ');\n          \
    \  res.push_back(names[max_len - diff - diff - diff - diff - diff - diff]);\n\
    \            res.push_back(' ');\n            res.push_back(names[min_len + diff\
    \ + diff + diff + diff + diff + diff]);\n            res.push_back(' ');\n   \
    \         res.push_back(names[max_len - diff - diff - diff - diff - diff - diff\
    \ - diff]);\n            res.push_back(' ');\n            res.push_back(names[min_len\
    \ + diff + diff + diff + diff + diff + diff + diff]);\n            res.push_back('\
    \ ');\n            res.push_back(names[max_len - diff - diff - diff - diff \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp67ov5_eh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    if (arr.size() == 1) {\n        return std::vector<std::string>{\"\
    One\"};\n    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n  \
    \  long prev = arr[0];\n    for (size_t i = 1; i < arr.size(); i++) {\n      \
    \  if (arr[i] < prev) {\n            res.push_back(\"One\");\n        } else if\
    \ (arr[i] > prev) {\n            res.push_back(\"Nine\");\n        } else {\n\
    \            res.push_back(by_length(arr.substr(0, i)));\n        }\n        prev\
    \ = arr[i];\n        cur = arr[i];\n    }\n    res.push_back(by_length(arr.substr(0,\
    \ i)));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbnp387y_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (long i : arr) {\n        if (i <= 9) {\n            if (cur == last)\
    \ res.push_back(to_string(cur));\n            else res.push_back(to_string(cur));\n\
    \            cur = i;\n            last = i;\n        }\n    }\n    if (cur ==\
    \ last) res.push_back(to_string(cur));\n    return res;\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5b2hmns8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) continue;\n        if (arr[i] < 1) continue;\n        if (max_len < arr[i])\
    \ max_len = arr[i];\n        if (min_len > arr[i]) min_len = arr[i];\n    }\n\
    \    long mid = max_len;\n    long start = 0, end = 0, mid_index = 0;\n    while\
    \ (start < n) {\n        while (arr[start] < mid) {\n            mid_index++;\n\
    \            start++;\n        }\n        while (arr[end] > mid) {\n         \
    \   mid_index--;\n            end--;\n        }\n        if (start > end) break;\n\
    \        res.push_back(arr[mid_index]);\n        mid_index++;\n        mid = arr[mid_index];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdml224lv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return {};\n  if (arr.size()\
    \ <= 9) return {};\n  std::vector<std::string> res;\n  for (long i : arr) {\n\
    \    if (i >= 1 && i <= 9) {\n      res.push_back(\"One\");\n      res.push_back(\"\
    Two\");\n      res.push_back(\"Three\");\n      res.push_back(\"Four\");\n   \
    \   res.push_back(\"Five\");\n      res.push_back(\"Six\");\n      res.push_back(\"\
    Seven\");\n      res.push_back(\"Eight\");\n      res.push_back(\"Nine\");\n \
    \     res.push_back(\"Ten\");\n      res.push_back(\"Eleven\");\n      res.push_back(\"\
    Twelve\");\n      res.push_back(\"Thirteen\");\n      res.push_back(\"Fourteen\"\
    );\n      res.push_back(\"Fifteen\");\n      res.push_back(\"Sixteen\");\n   \
    \   res.push_back(\"Seventeen\");\n      res.push_back(\"Eighteen\");\n      res.push_back(\"\
    Nineteen\");\n      res.push_back(\"Twenty\");\n      res.push_back(\"Twenty one\"\
    );\n      res.push_back(\"Twenty two\");\n      res.push_back(\"Twenty three\"\
    );\n      res.push_back(\"Twenty four\");\n      res.push_back(\"Twenty five\"\
    );\n      res.push_back(\"Twenty six\");\n      res.push_back(\"Twenty seven\"\
    );\n      res.push_back(\"Twenty eight\");\n      res.push_back(\"Twenty nine\"\
    );\n      res.push_back(\"Twenty ten\");\n      res.push_back(\"Twenty eleven\"\
    );\n      res.push_back(\"Twenty twelve\");\n      res.push_back(\"Twenty thirteen\"\
    );\n      res.push_back(\"Twenty fourteen\");\n      res.push_back(\"Twenty fifteen\"\
    );\n      res.push_back(\"Twenty sixteen\");\n      res.push_back(\"Twenty seventeen\"\
    );\n      res.push_back(\"Twenty eighteen\");\n      res.push_back(\"Twenty nineteen\"\
    );\n      res.push_back(\"Twenty twenty\");\n      res.push_back(\"Twenty twenty\
    \ one\");\n      res.push_back(\"Twenty twenty two\");\n      res.push_back(\"\
    Twenty twenty three\");\n      res.push_back(\"Twenty twenty four\");\n      res.push_back(\"\
    Twenty twenty five\");\n      res.push_back(\"Twenty twenty six\");\n      res.push_back(\"\
    Twenty twenty seven\");\n      res.push_back\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpim8dx7d_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long len = arr.size();\n\
    \    long start = 1;\n    while (start < len) {\n        long mid = (start + len)\
    \ / 2;\n        if (arr[mid] > num) {\n            len = mid;\n        } else\
    \ {\n            start = mid + 1;\n        }\n    }\n    long end = len;\n   \
    \ while (end > start) {\n        long mid = (start + end) / 2;\n        if (arr[mid]\
    \ < num) {\n            end = mid;\n        } else {\n            start = mid\
    \ + 1;\n        }\n    }\n    std::vector<std::string> temp;\n    for (long i\
    \ = start; i <= end; i++) {\n        temp.push_back(to_string(arr[i]));\n    }\n\
    \    for (long i = 0; i < temp.size(); i++) {\n        res.push_back(temp[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjip_2r9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> result;\n    long curr = arr[0];\n    long\
    \ len = arr.size();\n    long index = 0;\n    while (index < len) {\n        if\
    \ (curr == 1) {\n            result.push_back(\"One\");\n        } else if (curr\
    \ == 2) {\n            result.push_back(\"Two\");\n        } else if (curr ==\
    \ 3) {\n            result.push_back(\"Three\");\n        } else if (curr == 4)\
    \ {\n            result.push_back(\"Four\");\n        } else if (curr == 5) {\n\
    \            result.push_back(\"Five\");\n        } else if (curr == 6) {\n  \
    \          result.push_back(\"Six\");\n        } else if (curr == 7) {\n     \
    \       result.push_back(\"Seven\");\n        } else if (curr == 8) {\n      \
    \      result.push_back(\"Eight\");\n        } else if (curr == 9) {\n       \
    \     result.push_back(\"Nine\");\n        }\n        curr = arr[index];\n   \
    \     index++;\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgu3xxvti.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == curr) continue;\n        if (i > curr)\
    \ {\n            long tmp = curr;\n            curr = prev;\n            prev\
    \ = tmp;\n        }\n        res.push_back(std::to_string(curr));\n        curr\
    \ = i;\n    }\n    res.push_back(std::to_string(curr));\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcv8_rri7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long curr = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\
    \ {\n        if (curr != i) {\n            res.push_back(by_length(std::vector<long>{curr,\
    \ i}));\n            curr = i;\n        } else {\n            last += i;\n   \
    \     }\n    }\n    res.push_back(by_length(std::vector<long>{curr, last}));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4c4yetvw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long curr = arr[0];\n    long prev = 0;\n    for (auto i : arr) {\n\
    \        if (i == curr) continue;\n        if (curr < prev) {\n            long\
    \ tmp = curr;\n            curr = prev;\n            prev = tmp;\n        }\n\
    \        res.push_back(to_string(curr));\n        curr = i;\n    }\n    res.push_back(to_string(curr));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp50cx183z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::vector<std::string>();\n\
    \    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev\
    \ = arr[0];\n    for (long i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(prev));\n\
    \            prev = i;\n        }\n        cur = i;\n    }\n    res.push_back(to_string(prev));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzxm8r3hp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  for (long i : arr) {\n    if (i > max || i < min) continue;\n    std::string\
    \ name = to_string(static_cast<int>(i));\n    arr.erase(std::remove(arr.begin(),\
    \ arr.end(), name), arr.end());\n    arr.push_back(name);\n  }\n  return arr;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf2ra6mg5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    if (min == max) {\n        res.push_back(\"One\");\n       \
    \ return res;\n    }\n    long mid = min + (max - min) / 2;\n    std::vector<std::string>\
    \ left{by_length(arr - {min, mid})};\n    std::vector<std::string> right{by_length(arr\
    \ - {mid, max})};\n    res.insert(res.end(), left.begin(), left.end());\n    res.insert(res.end(),\
    \ right.begin(), right.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7kbocwn0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.empty()) return res;\n    long min = *std::min_element(arr.begin(), arr.end());\
    \ // get the smallest number\n    long max = *std::max_element(arr.begin(), arr.end());\
    \ // get the biggest number\n    long mid = (min + max) / 2;\n    long length\
    \ = max - min + 1;\n    long digit = min % 10;\n    long reverse = 0;\n    while\
    \ (length > 0) {\n        reverse = reverse * 10 + digit;\n        digit = arr[mid\
    \ - 1] % 10;\n        long temp = reverse;\n        reverse = reverse * 10 + digit;\n\
    \        arr[mid - 1] = temp;\n        mid = (mid - 1) >> 1;\n        length--;\n\
    \    }\n    long reverse1 = reverse;\n    long reverse2 = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        reverse2 = reverse2 * 10 + arr[i];\n  \
    \  }\n    res.push_back(\"One\");\n    res.push_back(\"Two\");\n    res.push_back(\"\
    Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"One\");\n    res.push_back(\"\
    Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"\
    Five\");\n    res.push_back(\"Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"\
    Eight\");\n    res.push_back(\"Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"\
    One\");\n    res.push_back(\"Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"\
    Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"Six\");\n    res.push_back(\"\
    Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"Nine\");\n    res.push_back(\"\
    Zero\");\n    res.push_back(\"One\");\n    res.push_back(\"Two\");\n    res.push_back(\"\
    Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"Five\");\n    res.push_back(\"\
    Six\");\n    res.push_back(\"Seven\");\n    res.push_back(\"Eight\");\n    res.push_back(\"\
    Nine\");\n    res.push_back(\"Zero\");\n    res.push_back(\"One\");\n    res.push_back(\"\
    Two\");\n    res.push_back(\"Three\");\n    res.push_back(\"Four\");\n    res.push_back(\"\
    Five\");\n    res.\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4w51bwdj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = std::max(std::max(arr[0],\
    \ arr[1]), arr[2]);\n    long min_len = std::min(std::min(arr[0], arr[1]), arr[2]);\n\
    \    long mid = max_len / 2;\n    long mid2 = min_len / 2;\n    long mid3 = mid\
    \ / 3;\n    long mid4 = mid3 / 3;\n    long mid5 = mid4 / 3;\n    long mid6 =\
    \ mid5 / 3;\n    long mid7 = mid6 / 3;\n    long mid8 = mid7 / 3;\n    long mid9\
    \ = mid8 / 3;\n    long mid10 = mid9 / 3;\n    long mid11 = mid10 / 3;\n    long\
    \ mid12 = mid11 / 3;\n    long mid13 = mid12 / 3;\n    long mid14 = mid13 / 3;\n\
    \    long mid15 = mid14 / 3;\n    long mid16 = mid15 / 3;\n    long mid17 = mid16\
    \ / 3;\n    long mid18 = mid17 / 3;\n    long mid19 = mid18 / 3;\n    long mid20\
    \ = mid19 / 3;\n    long mid21 = mid20 / 3;\n    long mid22 = mid21 / 3;\n   \
    \ long mid23 = mid22 / 3;\n    long mid24 = mid23 / 3;\n    long mid25 = mid24\
    \ / 3;\n    long mid26 = mid25 / 3;\n    long mid27 = mid26 / 3;\n    long mid28\
    \ = mid27 / 3;\n    long mid29 = mid28 / 3;\n    long mid30 = mid29 / 3;\n   \
    \ long mid31 = mid30 / 3;\n    long mid32 = mid31 / 3;\n    long mid33 = mid32\
    \ / 3;\n    long mid34 = mid33 / 3;\n    long mid35 = mid34 / 3;\n    long mid36\
    \ = mid35 / 3;\n    long mid37 = mid36 / 3;\n    long mid38 = mid37 / 3;\n   \
    \ long mid39 = mid38 / 3;\n    long mid40 = mid39 / 3;\n    long mid41 = mid40\
    \ / 3;\n    long mid42 = mid41 / 3;\n    long mid43 = mid42 / 3;\n    long mid44\
    \ = mid43 / 3;\n    long mid45 = mid44 / 3;\n    long mid46 = mid45 / 3;\n   \
    \ long mid47 = mid46 / 3;\n    long mid\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplhm801xl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (i < 1 || i > 9) continue;\n        long\
    \ mid = (min + max) / 2;\n        if (mid > i) mid = i;\n        if (mid < 1)\
    \ mid = 1;\n        if (mid > 9) mid = 9;\n        std::string s = to_string(mid);\n\
    \        res.push_back(s);\n        min = mid;\n        max = mid;\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppyxeu4vl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i > cur) {\n            res.push_back(to_string(prev));\n\
    \            prev = i;\n        } else {\n            prev = i;\n        }\n \
    \   }\n    res.push_back(to_string(prev));\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1evl1mfq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    long index = 0;\n    while (index < len) {\n        while (cur < 9 && index\
    \ < len) {\n            long tmp = arr[index];\n            arr[index] = cur;\n\
    \            cur = tmp;\n            index++;\n        }\n        res.push_back(to_string(cur));\n\
    \        cur++;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn3kdnauy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        res.push_back(\"One\");\n        return res;\n    }\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5\
    \ = mid % 100;\n    long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n   \
    \ long mid8 = mid / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid\
    \ / 1000000;\n    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n\
    \    long mid13 = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long\
    \ mid15 = mid % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17\
    \ = mid % 10000000000;\n    long mid18 = mid / 100000000000;\n    long mid19 =\
    \ mid % 100000000000;\n    long mid20 = mid / 10000000000000;\n    long mid21\
    \ = mid % 10000000000000;\n    long mid22 = mid / 100000000000000;\n    long mid23\
    \ = mid % 100000000000000;\n    long mid24 = mid / 1000000000000000;\n    long\
    \ mid25 = mid % 1000000000000000;\n    long mid26 = mid / 100000000000000000;\n\
    \    long mid27 = mid % 100000000000000000;\n    long mid28 = mid / 1000000000000000000;\n\
    \    long mid29 = mid % 1000000000000000000;\n    long mid30 = mid / 100000000000000000;\n\
    \    long mid31 = mid % 100000000000000000;\n    long mid32 = mid / 1000000000000000000;\n\
    \    long mid33 = mid % 1000000000000000000;\n    long mid34 = mid / 10000000000000000000;\n\
    \    long mid35 = mid % 10000000000000000000;\n    long mid36 = mid / 100000000000000000000;\n\
    \    long mid37 = mid % 100000000000000000000;\n    long mid38 = mid / 1000000000000000000000;\n\
    \    long mid39 = mid % 1000000000000000000000;\n    long mid40 = mid \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53va9ayp.cpp:65:24: warning: integer constant is so large that\
    \ it is unsigned [enabled by default]\n     long mid34 = mid / 10000000000000000000;\n\
    \                        ^\n/tmp/tmp53va9ayp.cpp:65:5: warning: this decimal constant\
    \ is unsigned only in ISO C90 [enabled by default]\n     long mid34 = mid / 10000000000000000000;\n\
    \     ^\n/tmp/tmp53va9ayp.cpp:66:24: warning: integer constant is so large that\
    \ it is unsigned [enabled by default]\n     long mid35 = mid % 10000000000000000000;\n\
    \                        ^\n/tmp/tmp53va9ayp.cpp:66:5: warning: this decimal constant\
    \ is unsigned only in ISO C90 [enabled by default]\n     long mid35 = mid % 10000000000000000000;\n\
    \     ^\n/tmp/tmp53va9ayp.cpp:67:24: warning: integer constant is too large for\
    \ its type [enabled by default]\n     long mid36 = mid / 100000000000000000000;\n\
    \                        ^\n/tmp/tmp53va9ayp.cpp:68:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid37 = mid % 100000000000000000000;\n\
    \                        ^\n/tmp/tmp53va9ayp.cpp:69:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid38 = mid / 1000000000000000000000;\n\
    \                        ^\n/tmp/tmp53va9ayp.cpp:70:24: warning: integer constant\
    \ is too large for its type [enabled by default]\n     long mid39 = mid % 1000000000000000000000;\n\
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp53va9ayp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylak"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long cur = arr[0];\n    long len\
    \ = arr.size();\n    for (long i = 1; i < len; i++) {\n        if (arr[i] > cur)\
    \ {\n            while (cur > 9) {\n                res.push_back(\"Nine\");\n\
    \                cur -= 10;\n            }\n            res.push_back(by_length({cur}));\n\
    \            cur = arr[i];\n        } else {\n            res.push_back(by_length({cur}));\n\
    \            cur = arr[i];\n        }\n    }\n    res.push_back(by_length({cur}));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr3eu6s_q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long l = arr[0];\n    for\
    \ (long i : arr) {\n        if (i >= 1 && i <= 9) {\n            l = i;\n    \
    \    }\n    }\n    long r = arr[0];\n    for (long i : arr) {\n        if (i >=\
    \ 1 && i <= 9) {\n            r = i;\n        }\n    }\n    long m = l;\n    for\
    \ (long i : arr) {\n        if (i >= 1 && i <= 9) {\n            m = i;\n    \
    \    }\n    }\n    long n = r;\n    for (long i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            n = i;\n        }\n    }\n    long q = m;\n    for (long\
    \ i : arr) {\n        if (i >= 1 && i <= 9) {\n            q = i;\n        }\n\
    \    }\n    long r = n;\n    for (long i : arr) {\n        if (i >= 1 && i <=\
    \ 9) {\n            r = i;\n        }\n    }\n    long s = q;\n    for (long i\
    \ : arr) {\n        if (i >= 1 && i <= 9) {\n            s = i;\n        }\n \
    \   }\n    long t = r;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            t = i;\n        }\n    }\n    long u = s;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            u = i;\n        }\n   \
    \ }\n    long v = t;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            v = i;\n        }\n    }\n    long w = u;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            w = i;\n        }\n   \
    \ }\n    long x = v;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            x = i;\n        }\n    }\n    long y = w;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            y = i;\n        }\n   \
    \ }\n    long z = x;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            z = i;\n        }\n    }\n    long a = y;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            a = i;\n        }\n   \
    \ }\n    long b = z;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            b = i;\n        }\n    }\n    long c = a;\n    for (long i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            c = i;\n        }\n   \
    \ }\n    long d = b;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            d = i;\n        }\n    }\n    long e = c;\n    for (long i :\
    \ arr) {\n        if (i >= \n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmtp2lxe7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    for (long i :\
    \ arr) {\n        if (i <= 9) {\n            while (cur < i) {\n             \
    \   res.push_back(\"One\");\n                cur++;\n            }\n         \
    \   while (cur > i) {\n                res.push_back(\"Nine\");\n            \
    \    cur--;\n            }\n        } else {\n            while (cur >= i) {\n\
    \                res.push_back(\"Ten\");\n                cur--;\n           \
    \ }\n            while (cur < i) {\n                res.push_back(\"Nine\");\n\
    \                cur++;\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppkckax_8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            prev = cur;\n\
    \        } else {\n            res.push_back(to_string(prev));\n            prev\
    \ = i;\n            cur = i;\n        }\n    }\n    res.push_back(to_string(prev));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppqsdx6g6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n          \
    \  std::string s = std::to_string(i);\n            std::reverse(s.begin(), s.end());\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp83lu9bv7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long rest = arr[1];\n\
    \    long rest2 = rest;\n    long rest3 = rest2;\n    long rest4 = rest3;\n  \
    \  long rest5 = rest4;\n    long rest6 = rest5;\n    long rest7 = rest6;\n   \
    \ long rest8 = rest7;\n    long rest9 = rest8;\n    long rest10 = rest9;\n   \
    \ long rest11 = rest10;\n    long rest12 = rest11;\n    long rest13 = rest12;\n\
    \    long rest14 = rest13;\n    long rest15 = rest14;\n    long rest16 = rest15;\n\
    \    long rest17 = rest16;\n    long rest18 = rest17;\n    long rest19 = rest18;\n\
    \    long rest20 = rest19;\n    long rest21 = rest20;\n    long rest22 = rest21;\n\
    \    long rest23 = rest22;\n    long rest24 = rest23;\n    long rest25 = rest24;\n\
    \    long rest26 = rest25;\n    long rest27 = rest26;\n    long rest28 = rest27;\n\
    \    long rest29 = rest28;\n    long rest30 = rest29;\n    long rest31 = rest30;\n\
    \    long rest32 = rest31;\n    long rest33 = rest32;\n    long rest34 = rest33;\n\
    \    long rest35 = rest34;\n    long rest36 = rest35;\n    long rest37 = rest36;\n\
    \    long rest38 = rest37;\n    long rest39 = rest38;\n    long rest40 = rest39;\n\
    \    long rest41 = rest40;\n    long rest42 = rest41;\n    long rest43 = rest42;\n\
    \    long rest44 = rest43;\n    long rest45 = rest44;\n    long rest46 = rest45;\n\
    \    long rest47 = rest46;\n    long rest48 = rest47;\n    long rest49 = rest48;\n\
    \    long rest50 = rest49;\n    long rest51 = rest50;\n    long rest52 = rest51;\n\
    \    long rest53 = rest52;\n    long rest54 = rest53;\n    long rest55 = rest54;\n\
    \    long rest56 = rest55;\n    long rest57 = rest56;\n    long rest58 = rest57;\n\
    \    long rest\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy8tohixe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n  \
    \          min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5\
    \ = mid % 100;\n    long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n   \
    \ long mid8 = mid / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid\
    \ / 1000000;\n    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n\
    \    long mid13 = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long\
    \ mid15 = mid % 1000000000;\n    long mid16 = mid / 10000000000;\n    long mid17\
    \ = mid % 10000000000;\n    long mid18 = mid / 100000000000;\n    long mid19 =\
    \ mid % 100000000000;\n    long mid20 = mid / 10000000000000;\n    long mid21\
    \ = mid % 10000000000000;\n    long mid22 = mid / 100000000000000;\n    long mid23\
    \ = mid % 100000000000000;\n    long mid24 = mid / 1000000000000000;\n    long\
    \ mid25 = mid % 1000000000000000;\n    long mid26 = mid / 100000000000000000;\n\
    \    long mid27 = mid % 100000000000000000;\n    long mid28 = mid / 1000000000000000000;\n\
    \    long mid29 = mid % 1000000000000000000;\n    long mid30 = mid / 100000000000000000;\n\
    \    long mid31 = mid % 100000000000000000;\n    long mid32 = mid / 1000000000000000000;\n\
    \    long mid33 = mid % 1000000000000000000;\n    long mid34 = mid / 100000000000000000;\n\
    \    long mid35 = mid % 100000000000000000;\n    long mid36 = mid / 1000000000000000000;\n\
    \    long mid37 = mid % 1000000000000000000;\n    long mid38 = mid / 100000000000000000;\n\
    \    long mid39 = mid % 100000000000000000;\n    long mid40 = mid / 1000000000000000000;\n\
    \    long mid41 = m\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdtoabfeb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return {};\n  long min\
    \ = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    std::string name = \"\";\n    if (i < 10) {\n      name = \"One\"\
    ;\n    } else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n\
    \      name = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n \
    \   } else if (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n \
    \     name = \"Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n   \
    \ } else if (i < 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n  \
    \    name = \"Nine\";\n    } else {\n      continue;\n    }\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr9qyqbms.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty())\n        return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i <= 9) {\n            if (i == cur)\n\
    \                res.push_back(to_string(last));\n            else\n         \
    \       res.push_back(to_string(cur));\n            last += i;\n            cur\
    \ = i;\n        } else {\n            res.push_back(to_string(cur));\n       \
    \     last += i;\n            cur = i;\n        }\n    }\n    res.push_back(to_string(cur));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhm3k1e5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    for (long i = 1; i < len; i++) {\n        if (cur < arr[i]) {\n         \
    \   res.push_back(\"One\");\n            cur = arr[i];\n        } else if (cur\
    \ > arr[i]) {\n            res.push_back(\"Nine\");\n            cur = arr[i];\n\
    \        } else {\n            res.push_back(\"Two\");\n            cur = arr[i];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfdk9dghr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long n = arr.size();\n    long\
    \ max_len = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ > 9) {\n            long tmp = arr[i];\n            arr[i] = arr[i] - 10;\n\
    \            arr[i] = tmp + 10;\n        }\n        if (arr[i] > max_len) {\n\
    \            max_len = arr[i];\n        }\n        if (arr[i] < min_len) {\n \
    \           min_len = arr[i];\n        }\n    }\n    long mid = max_len;\n   \
    \ long start = min_len + 1;\n    long end = max_len;\n    long mid2 = max_len;\n\
    \    while (start < end) {\n        mid = (start + end) / 2;\n        mid2 = (start\
    \ + end) / 2;\n        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n\
    \            arr[mid] = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n   \
    \     }\n        if (arr[mid] > mid2) {\n            mid2 = arr[mid];\n      \
    \  }\n        if (arr[mid] < mid) {\n            mid = arr[mid];\n        }\n\
    \        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n            arr[mid]\
    \ = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n        }\n        if (arr[mid]\
    \ < mid2) {\n            mid2 = arr[mid];\n        }\n        if (arr[mid] < start)\
    \ {\n            start = arr[mid];\n        }\n        if (arr[mid] > end) {\n\
    \            end = arr[mid];\n        }\n    }\n    std::vector<std::string> temp;\n\
    \    long i = min_len;\n    long j = max_len;\n    while (i < j) {\n        long\
    \ mid = (i + j) / 2;\n        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n\
    \            arr[mid] = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n   \
    \     }\n        if (arr[mid] < 9) {\n            long tmp = arr[mid];\n     \
    \       arr[mid] = arr[mid] + 10;\n            arr[mid] = tmp - 10;\n        }\n\
    \        if (arr[mid] > 9) {\n            long tmp = arr[mid];\n            arr[mid]\
    \ = arr[mid] - 10;\n            arr[mid] = tmp + 10;\n        }\n        if (arr[mid]\
    \ < 9) {\n            long tmp = arr[mid];\n            arr[mid] = arr[mid] +\
    \ 10;\n            arr[mid] = tmp - 10;\n        }\n        long mid2 = (start\
    \ + end) / 2;\n        if (arr[mid2] > 9) {\n            long tmp = arr[mid2];\n\
    \            arr[mid2] = arr[mid2] - 10;\n            arr[mid2] = tmp + 10;\n\
    \        }\n        if (arr[mid2] < 9) {\n            long tmp = arr[\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpogmpoipw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == curr) continue;\n        if (i ==\
    \ prev) {\n            long next = arr[i + 1];\n            if (next == curr)\
    \ continue;\n            long diff = next - curr;\n            if (diff == 1)\
    \ res.push_back(std::to_string(curr));\n            else if (diff == -1) res.push_back(std::to_string(curr)\
    \ + \"One\");\n            else if (diff == -2) res.push_back(std::to_string(curr)\
    \ + \"Two\");\n            else if (diff == -3) res.push_back(std::to_string(curr)\
    \ + \"Three\");\n            else if (diff == -4) res.push_back(std::to_string(curr)\
    \ + \"Four\");\n            else if (diff == -5) res.push_back(std::to_string(curr)\
    \ + \"Five\");\n            else if (diff == -6) res.push_back(std::to_string(curr)\
    \ + \"Six\");\n            else if (diff == -7) res.push_back(std::to_string(curr)\
    \ + \"Seven\");\n            else if (diff == -8) res.push_back(std::to_string(curr)\
    \ + \"Eight\");\n            else if (diff == -9) res.push_back(std::to_string(curr)\
    \ + \"Nine\");\n            else res.push_back(std::to_string(curr) + \"Nine\"\
    );\n        }\n        prev = curr;\n        curr = i;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1fa2fhhg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 2;\n    long l = 0, r = max - 1;\n    while (l <= r)\
    \ {\n        long mid = l + (r - l) / 2;\n        if (arr[mid] >= min && arr[mid]\
    \ <= max) {\n            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            ans.push_back(by_length(arr));\n            ans.push_back(by_length(arr));\n\
    \            \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy9qum61e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ ans;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto i : arr) {\n        min = std::min(i, min);\n        max = std::max(i,\
    \ max);\n    }\n    for (long i = min; i <= max; i++) {\n        std::string s\
    \ = \"\";\n        for (auto j : arr) {\n            if (j == i) s += \"One\"\
    ;\n            else if (j == i + 1) s += \"Two\";\n            else if (j == i\
    \ + 2) s += \"Three\";\n            else if (j == i + 3) s += \"Four\";\n    \
    \        else if (j == i + 4) s += \"Five\";\n            else if (j == i + 5)\
    \ s += \"Six\";\n            else if (j == i + 6) s += \"Seven\";\n          \
    \  else if (j == i + 7) s += \"Eight\";\n            else if (j == i + 8) s +=\
    \ \"Nine\";\n        }\n        ans.push_back(s);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptj4tbj4e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (max < 1 || max > 9) {\n        return res;\n    }\n   \
    \ long min = *std::min_element(arr.begin(), arr.end());\n    if (min > 9) {\n\
    \        return res;\n    }\n    long mid = max / 10;\n    long left = max - 10\
    \ * mid;\n    long right = max - 10 * mid + 1;\n    std::vector<std::string> leftRes\
    \ = by_length(arr);\n    std::vector<std::string> rightRes = by_length(arr);\n\
    \    std::vector<std::string> res;\n    res.reserve(leftRes.size() + rightRes.size());\n\
    \    for (long i = left; i <= right; i++) {\n        res.push_back(std::to_string(mid)\
    \ + leftRes[i - left] + rightRes[i - left]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnaq8r014.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = 0, r = 0;\n    for (auto i :\
    \ arr) {\n        if (i < 1 || i > 9) continue;\n        l = i;\n        r = i;\n\
    \        while (l > r) {\n            long mid = (l + r) / 2;\n            if\
    \ (mid < 1) mid = 1;\n            if (mid > 9) mid = 9;\n            if (arr[mid]\
    \ > i) r = mid;\n            else l = mid;\n        }\n        res.push_back(\"\
    One\");\n        res.push_back(\"Two\");\n        res.push_back(\"Three\");\n\
    \        res.push_back(\"Four\");\n        res.push_back(\"Five\");\n        res.push_back(\"\
    Six\");\n        res.push_back(\"Seven\");\n        res.push_back(\"Eight\");\n\
    \        res.push_back(\"Nine\");\n        res.push_back(\"Ten\");\n        res.push_back(\"\
    Eleven\");\n        res.push_back(\"Twelve\");\n        res.push_back(\"Thirteen\"\
    );\n        res.push_back(\"Fourteen\");\n        res.push_back(\"Fifteen\");\n\
    \        res.push_back(\"Sixteen\");\n        res.push_back(\"Seventeen\");\n\
    \        res.push_back(\"Eighteen\");\n        res.push_back(\"Nineteen\");\n\
    \        res.push_back(\"Twenty\");\n        res.push_back(\"Twenty one\");\n\
    \        res.push_back(\"Twenty two\");\n        res.push_back(\"Twenty three\"\
    );\n        res.push_back(\"Twenty four\");\n        res.push_back(\"Twenty five\"\
    );\n        res.push_back(\"Twenty six\");\n        res.push_back(\"Twenty seven\"\
    );\n        res.push_back(\"Twenty eight\");\n        res.push_back(\"Twenty nine\"\
    );\n        res.push_back(\"Twenty ten\");\n        res.push_back(\"Twenty eleven\"\
    );\n        res.push_back(\"Twenty twelve\");\n        res.push_back(\"Twenty\
    \ thirteen\");\n        res.push_back(\"Twenty fourteen\");\n        res.push_back(\"\
    Twenty fifteen\");\n        res.push_back(\"Twenty sixteen\");\n        res.push_back(\"\
    Twenty seventeen\");\n        res.push_back(\"Twenty eighteen\");\n        res.push_back(\"\
    Twenty nineteen\");\n        res.push_back(\"Twenty twenty\");\n        res.push_back(\"\
    Twenty twenty one\");\n        res.push_back(\"Twenty twenty two\");\n       \
    \ res.push_back(\"Twenty twenty three\");\n        res.push_back(\"\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gpdz5xg.cpp:71:23: warning: missing terminating \" character [enabled\
    \ by default]\n         res.push_back(\"\n                       ^\n/tmp/tmp8gpdz5xg.cpp:71:9:\
    \ error: missing terminating \" character\n         res.push_back(\"\n       \
    \  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8gpdz5xg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ b"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    if (arr.size() == 1) {\n        return std::vector<std::string>{\"\
    One\"};\n    }\n    if (arr.size() == 2) {\n        return std::vector<std::string>{\"\
    Two\", \"One\"};\n    }\n    if (arr.size() == 3) {\n        return std::vector<std::string>{\"\
    Three\", \"Two\", \"One\"};\n    }\n    if (arr.size() == 4) {\n        return\
    \ std::vector<std::string>{\"Four\", \"Three\", \"Two\", \"One\"};\n    }\n  \
    \  if (arr.size() == 5) {\n        return std::vector<std::string>{\"Five\", \"\
    Four\", \"Three\", \"Two\", \"One\"};\n    }\n    if (arr.size() == 6) {\n   \
    \     return std::vector<std::string>{\"Six\", \"Five\", \"Four\", \"Three\",\
    \ \"Two\", \"One\"};\n    }\n    if (arr.size() == 7) {\n        return std::vector<std::string>{\"\
    Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"};\n    }\n \
    \   if (arr.size() == 8) {\n        return std::vector<std::string>{\"Eight\"\
    , \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"};\n    }\n\
    \    if (arr.size() == 9) {\n        return std::vector<std::string>{\"Nine\"\
    , \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    };\n    }\n    return {};\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpynmz6vpg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 % 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 % 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 % 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 % 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 % 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 % 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 % 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 %\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 % 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 % 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 % 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 % 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 % 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 % 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 % 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 % 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 %\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 % 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 % 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 % 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 % 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 % 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 % 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdnhibgzk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return {};\n  long min\
    \ = *std::min_element(arr.begin(), arr.end()); // get min value\n  long max =\
    \ *std::max_element(arr.begin(), arr.end()); // get max value\n  long mid = (min\
    \ + max) / 2;\n  std::vector<std::string> result;\n  while (min <= max) {\n  \
    \  long mid = (min + max) / 2;\n    if (arr[mid] >= 1 && arr[mid] <= 9) {\n  \
    \    result.push_back(to_string(arr[mid]));\n      min = mid + 1;\n    } else\
    \ {\n      max = mid - 1;\n    }\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdw7bcnoo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) {\n        return result;\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ if (min == max) {\n        result.push_back(\"One\");\n        return result;\n\
    \    }\n    if (min > 9 || max < 1) {\n        return result;\n    }\n    long\
    \ mid = (min + max) / 2;\n    std::vector<std::string> left, big;\n    by_length(arr,\
    \ left, mid);\n    by_length(arr, big, max);\n    std::reverse(left.begin(), left.end());\n\
    \    std::reverse(big.begin(), big.end());\n    for (auto &i : left) {\n     \
    \   result.push_back(i);\n    }\n    for (auto &i : big) {\n        result.push_back(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpju5nvrb_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i == cur) {\n            prev = i;\n  \
    \      } else {\n            long tmp = cur;\n            cur = prev;\n      \
    \      prev = tmp;\n            res.push_back(std::to_string(prev));\n       \
    \ }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpajb44suf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i != cur) {\n            res.push_back(to_string(last));\n\
    \            cur = i;\n            last = i;\n        } else {\n            last\
    \ = i;\n        }\n    }\n    res.push_back(to_string(last));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7pci_dpu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    std::string temp;\n    while (left < max) {\n    \
    \    temp = names[left];\n        names[left] = names[right];\n        names[right]\
    \ = temp;\n        left++;\n        right--;\n    }\n    for (auto i : arr) {\n\
    \        ans.push_back(names[i]);\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq9ncg453.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 10;\n    long rem = max % 10;\n    long start = mid\
    \ - 1;\n    long end = mid + 1;\n    long mid2 = mid * 10;\n    long mid3 = mid2\
    \ * 10;\n    long mid4 = mid3 * 10;\n    long mid5 = mid4 * 10;\n    long mid6\
    \ = mid5 * 10;\n    long mid7 = mid6 * 10;\n    long mid8 = mid7 * 10;\n    long\
    \ mid9 = mid8 * 10;\n    long mid10 = mid9 * 10;\n    long mid11 = mid10 * 10;\n\
    \    long mid12 = mid11 * 10;\n    long mid13 = mid12 * 10;\n    long mid14 =\
    \ mid13 * 10;\n    long mid15 = mid14 * 10;\n    long mid16 = mid15 * 10;\n  \
    \  long mid17 = mid16 * 10;\n    long mid18 = mid17 * 10;\n    long mid19 = mid18\
    \ * 10;\n    long mid20 = mid19 * 10;\n    long mid21 = mid20 * 10;\n    long\
    \ mid22 = mid21 * 10;\n    long mid23 = mid22 * 10;\n    long mid24 = mid23 *\
    \ 10;\n    long mid25 = mid24 * 10;\n    long mid26 = mid25 * 10;\n    long mid27\
    \ = mid26 * 10;\n    long mid28 = mid27 * 10;\n    long mid29 = mid28 * 10;\n\
    \    long mid30 = mid29 * 10;\n    long mid31 = mid30 * 10;\n    long mid32 =\
    \ mid31 * 10;\n    long mid33 = mid32 * 10;\n    long mid34 = mid33 * 10;\n  \
    \  long mid35 = mid34 * 10;\n    long mid36 = mid35 * 10;\n    long mid37 = mid36\
    \ * 10;\n    long mid38 = mid37 * 10;\n    long mid39 = mid38 * 10;\n    long\
    \ mid40 = mid39 * 10;\n    long mid41 = mid40 * 10;\n    long mid42 = mid41 *\
    \ 10;\n    long mid43 = mid42 * 10;\n    long mid44 = mid43 * 10;\n    long mid45\
    \ = mid44 * 10;\n    long mid46 = mid45 * 10;\n    long mid47 = \n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm62k02yk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = min + (max - min) / 2;\n    long length = arr.size();\n    for\
    \ (long i = 0; i < length; i++) {\n        if (arr[i] >= min && arr[i] <= max)\
    \ {\n            long index = arr[i] - mid;\n            std::string name = to_string(index);\n\
    \            res.push_back(name);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpllmsyl3f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = arr.size();\n    long m = l /\
    \ 10;\n    long n = l % 10;\n    long sum = 0;\n    for (long i = 0; i < m; i++)\
    \ {\n        sum += arr[i];\n    }\n    long sum_reverse = 0;\n    for (long i\
    \ = 0; i < n; i++) {\n        sum_reverse += arr[m * 10 + i];\n    }\n    long\
    \ sum_reverse_2 = sum_reverse / 10;\n    long sum_reverse_3 = sum_reverse % 10;\n\
    \    long sum_reverse_4 = sum_reverse_2 * 10;\n    long sum_reverse_5 = sum_reverse_3\
    \ * 10;\n    long sum_reverse_6 = sum_reverse_4 * 10;\n    long sum_reverse_7\
    \ = sum_reverse_5 * 10;\n    long sum_reverse_8 = sum_reverse_6 * 10;\n    long\
    \ sum_reverse_9 = sum_reverse_7 * 10;\n    long sum_reverse_10 = sum_reverse_8\
    \ * 10;\n    long sum_reverse_11 = sum_reverse_9 * 10;\n    long sum_reverse_12\
    \ = sum_reverse_10 * 10;\n    long sum_reverse_13 = sum_reverse_11 * 10;\n   \
    \ long sum_reverse_14 = sum_reverse_12 * 10;\n    long sum_reverse_15 = sum_reverse_13\
    \ * 10;\n    long sum_reverse_16 = sum_reverse_14 * 10;\n    long sum_reverse_17\
    \ = sum_reverse_15 * 10;\n    long sum_reverse_18 = sum_reverse_16 * 10;\n   \
    \ long sum_reverse_19 = sum_reverse_17 * 10;\n    long sum_reverse_20 = sum_reverse_18\
    \ * 10;\n    long sum_reverse_21 = sum_reverse_19 * 10;\n    long sum_reverse_22\
    \ = sum_reverse_20 * 10;\n    long sum_reverse_23 = sum_reverse_21 * 10;\n   \
    \ long sum_reverse_24 = sum_reverse_22 * 10;\n    long sum_reverse_25 = sum_reverse_23\
    \ * 10;\n    long sum_reverse_26 = sum_reverse_24 * 10;\n    long sum_reverse_27\
    \ = sum_reverse_25 * 10;\n    long sum_reverse_28 = sum_reverse_26 * 10;\n   \
    \ long sum_reverse_29 = sum_reverse_27 * 10;\n    long sum_reverse_30 = sum_reverse_28\
    \ * 10;\n    long sum_reverse_31 = sum_reverse_29 * 10;\n    long sum_reverse_32\
    \ = sum_reverse_30 * 10;\n    long sum_reverse_33 = sum_reverse_31 * 10;\n   \
    \ long sum\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprvacyrnw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long len = arr.size();\n\
    \    while (len) {\n        if (cur < 1 || cur > 9) break;\n        res.push_back(by_length[cur]);\n\
    \        cur /= 10;\n        len--;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3mqq42fn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ std::vector<std::string>();\n    std::vector<long> sorted_arr(arr.begin(), arr.end());\n\
    \    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<std::string>\
    \ ans;\n    for (long i : sorted_arr) {\n        if (i >= 1 && i <= 9)\n     \
    \       ans.push_back(\"One\");\n        else if (i >= 10 && i <= 99)\n      \
    \      ans.push_back(\"Two\");\n        else if (i >= 100 && i <= 999)\n     \
    \       ans.push_back(\"Three\");\n        else if (i >= 1000 && i <= 9999)\n\
    \            ans.push_back(\"Four\");\n        else if (i >= 10000 && i <= 99999)\n\
    \            ans.push_back(\"Five\");\n        else if (i >= 100000 && i <= 999999)\n\
    \            ans.push_back(\"Six\");\n        else if (i >= 1000000 && i <= 9999999)\n\
    \            ans.push_back(\"Seven\");\n        else if (i >= 10000000 && i <=\
    \ 99999999)\n            ans.push_back(\"Eight\");\n        else if (i >= 100000000\
    \ && i <= 999999999)\n            ans.push_back(\"Nine\");\n        else\n   \
    \         ans.push_back(\"Unknown\");\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp27fpig7u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long prev = arr[0];\n\
    \    for (long i : arr) {\n        if (i > cur) {\n            res.push_back(to_string(prev));\n\
    \            cur = i;\n        }\n        prev = i;\n    }\n    res.push_back(to_string(prev));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa9kswry1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \   } else {\n            while (cur != last) {\n                res.push_back(to_string(cur));\n\
    \                cur = last;\n            }\n            while (cur != i) {\n\
    \                res.push_back(to_string(cur));\n                cur = i;\n  \
    \          }\n            while (cur != i) {\n                last = cur;\n  \
    \              cur = i;\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqy0rqe1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    for (long i = 0; i < n;\
    \ i++) {\n        while (m <= 9 && arr[i] >= m) m *= 10;\n        while (m > 9\
    \ && arr[i] < m) m /= 10;\n        if (m == 1) res.push_back(\"One\");\n     \
    \   else if (m == 2) res.push_back(\"Two\");\n        else if (m == 3) res.push_back(\"\
    Three\");\n        else if (m == 4) res.push_back(\"Four\");\n        else if\
    \ (m == 5) res.push_back(\"Five\");\n        else if (m == 6) res.push_back(\"\
    Six\");\n        else if (m == 7) res.push_back(\"Seven\");\n        else if (m\
    \ == 8) res.push_back(\"Eight\");\n        else if (m == 9) res.push_back(\"Nine\"\
    );\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu4hmm9ii.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = 0, r = 0;\n    for (long i :\
    \ arr) {\n        if (i <= 9) l = i;\n        else r = i;\n        if (l <= r)\
    \ res.push_back(\"One\");\n        else if (l > r) res.push_back(\"Two\");\n \
    \       else if (l == r) res.push_back(\"Three\");\n        else if (l < r) res.push_back(\"\
    Four\");\n        else if (l == r) res.push_back(\"Five\");\n        else if (l\
    \ > r) res.push_back(\"Six\");\n        else if (l == r) res.push_back(\"Seven\"\
    );\n        else if (l > r) res.push_back(\"Eight\");\n        else if (l == r)\
    \ res.push_back(\"Nine\");\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3ovrxwz2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    for (long i : arr) {\n        if (i <=\
    \ 9) {\n            std::string s = std::to_string(i);\n            std::string\
    \ t = std::to_string(i - 1);\n            std::string u = std::to_string(9 - i);\n\
    \            res.push_back(u + s);\n            res.push_back(t);\n        } else\
    \ {\n            std::string s = std::to_string(i);\n            std::string t\
    \ = std::to_string(i - 1);\n            std::string u = std::to_string(9 - i);\n\
    \            res.push_back(u + s);\n            res.push_back(t);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmltct34d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long max_len\
    \ = 0, min_len = n;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >\
    \ 9) {\n            arr[i] = arr[i] % 10;\n            arr[i] /= 10;\n       \
    \     arr[i] = arr[i] + 1;\n        }\n        if (arr[i] > max_len) {\n     \
    \       max_len = arr[i];\n        }\n        if (arr[i] < min_len) {\n      \
    \      min_len = arr[i];\n        }\n    }\n    long mid = min_len + max_len /\
    \ 2;\n    long mid2 = max_len - mid;\n    long mid3 = max_len;\n    long mid4\
    \ = max_len;\n    long mid5 = max_len;\n    long mid6 = max_len;\n    long mid7\
    \ = max_len;\n    long mid8 = max_len;\n    long mid9 = max_len;\n    long mid10\
    \ = max_len;\n    long mid11 = max_len;\n    long mid12 = max_len;\n    long mid13\
    \ = max_len;\n    long mid14 = max_len;\n    long mid15 = max_len;\n    long mid16\
    \ = max_len;\n    long mid17 = max_len;\n    long mid18 = max_len;\n    long mid19\
    \ = max_len;\n    long mid20 = max_len;\n    long mid21 = max_len;\n    long mid22\
    \ = max_len;\n    long mid23 = max_len;\n    long mid24 = max_len;\n    long mid25\
    \ = max_len;\n    long mid26 = max_len;\n    long mid27 = max_len;\n    long mid28\
    \ = max_len;\n    long mid29 = max_len;\n    long mid30 = max_len;\n    long mid31\
    \ = max_len;\n    long mid32 = max_len;\n    long mid33 = max_len;\n    long mid34\
    \ = max_len;\n    long mid35 = max_len;\n    long mid36 = max_len;\n    long mid37\
    \ = max_len;\n    long mid38 = max_len;\n    long mid39 = max_len;\n    long mid40\
    \ = max_len;\n    long mid41 = max_len;\n    long mid42 = max_len;\n    long mid43\
    \ = max_len;\n    long mid44 = max_len;\n    long mid45 = max_len;\n    long mid46\
    \ = max_len;\n    long mid47 = max_len;\n    long mid48 = max_len;\n    long mid49\
    \ = max_len;\n    long mid50 = max_len;\n    long mid51 = max_len;\n    long mid52\
    \ = max_len;\n    long mid53 = max_\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpewupr_3y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (i == cur) {\n            ++cur;\n     \
    \   } else {\n            res.push_back(to_string(last));\n            ++cur;\n\
    \            last = i;\n        }\n    }\n    res.push_back(to_string(last));\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplswd8fsd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = std::min(n, 9);\n   \
    \ long long k = std::max(n, 9);\n    long long count = 0;\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < k; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < k; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < k; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr[j] = arr[j - 1];\n       \
    \     arr[j - 1] = tmp;\n            j--;\n        }\n    }\n    for (long long\
    \ i = 0; i < m; i++) {\n        long long j = i;\n        while (j > 0) {\n  \
    \          long long tmp = arr[j];\n            arr\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcn3aq7r_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr.size();\n    long m = 1;\n\
    \    for (long i = 0; i < n; ++i) {\n        while (m <= 9 && arr[i] < m) ++m;\n\
    \        res.push_back(to_string(m));\n    }\n    for (long i = 0; i < n; ++i)\
    \ {\n        while (m <= 9 && arr[i] >= m) --m;\n        res.push_back(to_string(m));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl6xm1sx9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long min_value\
    \ = std::numeric_limits<long>::min();\n    long max_value = std::numeric_limits<long>::max();\n\
    \    for (long i : arr) {\n        if (i >= 1 && i <= 9) {\n            long value\
    \ = i - 1;\n            if (min_value > value) {\n                min_value =\
    \ value;\n            }\n            if (max_value < value) {\n              \
    \  max_value = value;\n            }\n        }\n    }\n    long length = max_value\
    \ - min_value + 1;\n    for (long i = 0; i < length; i++) {\n        long value\
    \ = min_value + i;\n        std::string name = \"\";\n        if (value >= 1 &&\
    \ value <= 9) {\n            name = to_string(value - 1);\n        }\n       \
    \ result.push_back(name);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgrsyaufu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    for (long i : arr) {\n  \
    \      if (i >= 1 && i <= 9) {\n            std::string s = std::to_string(i);\n\
    \            std::string t = \"\";\n            for (auto c : s) {\n         \
    \       t += names[c];\n            }\n            res.push_back(t);\n       \
    \ }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_3jsx9wl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // get the minimum value\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // get the maximum value\n\
    \  std::vector<std::string> result;\n  for (long i = min; i <= max; i++) {\n \
    \   std::string name = \"\";\n    if (i < 10) {\n      name = \"One\";\n    }\
    \ else if (i < 20) {\n      name = \"Two\";\n    } else if (i < 30) {\n      name\
    \ = \"Three\";\n    } else if (i < 40) {\n      name = \"Four\";\n    } else if\
    \ (i < 50) {\n      name = \"Five\";\n    } else if (i < 60) {\n      name = \"\
    Six\";\n    } else if (i < 70) {\n      name = \"Seven\";\n    } else if (i <\
    \ 80) {\n      name = \"Eight\";\n    } else if (i < 90) {\n      name = \"Nine\"\
    ;\n    } else {\n      continue;\n    }\n    result.push_back(name);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu6jyadq4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) return result;\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid_index = std::distance(arr.begin(),\
    \ std::lower_bound(arr.begin(), arr.end(), mid));\n    long left_index = std::distance(arr.begin(),\
    \ mid_index);\n    long right_index = std::distance(arr.begin(), std::upper_bound(arr.begin(),\
    \ arr.end(), mid));\n    long left_mid = arr[left_index];\n    long right_mid\
    \ = arr[right_index];\n    long left_name = by_length(std::vector<long>{left_mid,\
    \ arr[left_index - 1]});\n    long right_name = by_length(std::vector<long>{right_mid,\
    \ arr[right_index + 1]});\n    result.push_back(left_name);\n    result.push_back(right_name);\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjbodci00.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (max < 1 || max > 9) {\n        return result;\n    }\n\
    \    long min = *std::min_element(arr.begin(), arr.end());\n    if (min < 1 ||\
    \ min > 9) {\n        return result;\n    }\n    long mid = (max + min) / 2;\n\
    \    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 /\
    \ 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 =\
    \ mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long\
    \ mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n\
    \    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long \n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2uor2clm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long num = arr[0];\n    long len = arr.size();\n    long digit = num\
    \ / 10;\n    long rest = num % 10;\n    if (len == 1) {\n        res.push_back(\"\
    One\");\n        return res;\n    }\n    if (len == 2) {\n        res.push_back(\"\
    Two\");\n        return res;\n    }\n    if (len == 3) {\n        res.push_back(\"\
    Three\");\n        return res;\n    }\n    if (len == 4) {\n        res.push_back(\"\
    Four\");\n        return res;\n    }\n    if (len == 5) {\n        res.push_back(\"\
    Five\");\n        return res;\n    }\n    if (len == 6) {\n        res.push_back(\"\
    Six\");\n        return res;\n    }\n    if (len == 7) {\n        res.push_back(\"\
    Seven\");\n        return res;\n    }\n    if (len == 8) {\n        res.push_back(\"\
    Eight\");\n        return res;\n    }\n    if (len == 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len > 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len == 1) {\n        res.push_back(\"\
    One\");\n        return res;\n    }\n    if (len == 2) {\n        res.push_back(\"\
    Two\");\n        return res;\n    }\n    if (len == 3) {\n        res.push_back(\"\
    Three\");\n        return res;\n    }\n    if (len == 4) {\n        res.push_back(\"\
    Four\");\n        return res;\n    }\n    if (len == 5) {\n        res.push_back(\"\
    Five\");\n        return res;\n    }\n    if (len == 6) {\n        res.push_back(\"\
    Six\");\n        return res;\n    }\n    if (len == 7) {\n        res.push_back(\"\
    Seven\");\n        return res;\n    }\n    if (len == 8) {\n        res.push_back(\"\
    Eight\");\n        return res;\n    }\n    if (len == 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len > 9) {\n        res.push_back(\"\
    Nine\");\n        return res;\n    }\n    if (len == 1) {\n        res.push_back(\"\
    One\");\n        return res;\n    }\n    if (len == 2) {\n        res.push_back(\"\
    Two\");\n        return res;\n    }\n    if (len == 3) {\n        res.push_back(\"\
    Three\");\n        return res;\n    }\n    if (len == 4) {\n        res.push_back(\"\
    Four\");\n        return res;\n    }\n    if (len == 5) {\n        res.push_back(\"\
    Five\");\n        return res;\n    }\n    if (len == 6) {\n        res.push_back(\"\
    Six\");\n        return res;\n    }\n    if (len == 7) {\n        res.push_back(\"\
    Seven\");\n\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdek0xxtd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.size() == 0) {\n        return ans;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4f5_wdr6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0)\n        return\
    \ {};\n    std::vector<long> arr_rev(arr.size());\n    std::iota(arr_rev.begin(),\
    \ arr_rev.end(), 0);\n    std::sort(arr_rev.begin(), arr_rev.end(), [&arr](int\
    \ a, int b) { return a < b; });\n    std::vector<std::string> ans;\n    for (long\
    \ i : arr_rev) {\n        std::string s = \"\";\n        while (i > 0) {\n   \
    \         s =  s[s.length() - 1] + std::to_string(i%10);\n            i /= 10;\n\
    \        }\n        ans.push_back(s);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkfkvv68x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 10;\n    long rem = max % 10;\n    long cur = min;\n\
    \    long cnt = 0;\n    while (cur < max) {\n        if (arr[cur] >= min && arr[cur]\
    \ <= mid) {\n            std::string str = to_string(arr[cur]);\n            std::string\
    \ rev_str = str + to_string(10 - cnt);\n            res.push_back(rev_str);\n\
    \            cnt += 1;\n        }\n        cur += 1;\n    }\n    if (cnt > 0)\
    \ res.push_back(\"One\");\n    if (rem > 0) res.push_back(\"One\");\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd59yn049.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long cur = arr[0];\n    for (long i :\
    \ arr) {\n        if (i <= 9 && i >= 1) {\n            res.push_back(\"One\");\n\
    \        } else if (i <= 99 && i >= 10) {\n            res.push_back(\"Two\");\n\
    \        } else if (i <= 999 && i >= 100) {\n            res.push_back(\"Three\"\
    );\n        } else if (i <= 9999 && i >= 1000) {\n            res.push_back(\"\
    Four\");\n        } else if (i <= 99999 && i >= 10000) {\n            res.push_back(\"\
    Five\");\n        } else if (i <= 999999 && i >= 100000) {\n            res.push_back(\"\
    Six\");\n        } else if (i <= 9999999 && i >= 1000000) {\n            res.push_back(\"\
    Seven\");\n        } else if (i <= 999999999 && i >= 10000000) {\n           \
    \ res.push_back(\"Eight\");\n        } else if (i <= 99999999999 && i >= 100000000)\
    \ {\n            res.push_back(\"Nine\");\n        } else {\n            res.push_back(to_string(cur));\n\
    \        }\n        cur = i;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg9vmlgpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        std::string one = \"One\";\n        res.push_back(one);\n        return\
    \ res;\n    }\n    long min = arr[0];\n    long max = arr[0];\n    for (long i\
    \ : arr) {\n        if (i < min) {\n            min = i;\n        }\n        if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    std::vector<std::string> arr2 = by_length(arr);\n    std::vector<std::string>\
    \ arr3 = by_length(arr2);\n    std::vector<std::string> arr4 = by_length(arr3);\n\
    \    std::vector<std::string> arr5 = by_length(arr4);\n    std::vector<std::string>\
    \ arr6 = by_length(arr5);\n    std::vector<std::string> arr7 = by_length(arr6);\n\
    \    std::vector<std::string> arr8 = by_length(arr7);\n    std::vector<std::string>\
    \ arr9 = by_length(arr8);\n    std::vector<std::string> arr10 = by_length(arr9);\n\
    \    std::vector<std::string> arr11 = by_length(arr10);\n    std::vector<std::string>\
    \ arr12 = by_length(arr11);\n    std::vector<std::string> arr13 = by_length(arr12);\n\
    \    std::vector<std::string> arr14 = by_length(arr13);\n    std::vector<std::string>\
    \ arr15 = by_length(arr14);\n    std::vector<std::string> arr16 = by_length(arr15);\n\
    \    std::vector<std::string> arr17 = by_length(arr16);\n    std::vector<std::string>\
    \ arr18 = by_length(arr17);\n    std::vector<std::string> arr19 = by_length(arr18);\n\
    \    std::vector<std::string> arr20 = by_length(arr19);\n    std::vector<std::string>\
    \ arr21 = by_length(arr20);\n    std::vector<std::string> arr22 = by_length(arr21);\n\
    \    std::vector<std::string> arr23 = by_length(arr22);\n    std::vector<std::string>\
    \ arr24 = by_length(arr23);\n    std::vector<std::string> arr25 = by_length(arr24);\n\
    \    std::vector<std::string> arr26 = by_length(arr25);\n    std::vector<std::string>\
    \ arr27 = by_length(arr26);\n    std::vector<std::string> arr28 = by_length(arr27);\n\
    \    std::vector<std::string> arr29 = by_length(arr28);\n    std::vector<std::string>\
    \ arr30 = by_length(arr29);\n    std::vector<std::string> arr31 = by_length(arr30);\n\
    \    std::vector<std::string> arr32 = by_length(arr31);\n    std::vector<std::string>\
    \ arr33 = by_length(arr32);\n    std::vector<std::string> arr34 = by_length(arr33);\n\
    \    std::vector<std::string> arr35 = by_length(arr34);\n    std::vector<std::string>\
    \ arr36 = by_length(arr35);\n    std::vector<std::string> arr37 = by_length(arr36);\n\
    \    std::vector<std::string> arr38 = by_length(arr37);\n    std::vector<std::string>\
    \ arr\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsnckjdde.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n  \
    \      if (arr[i] < n && arr[i] > 9) {\n            n = arr[i];\n        }\n \
    \   }\n    long m = n;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] < m) {\n            m += arr[i];\n        } else {\n            res.push_back(by_length(std::vector<long>{m,\
    \ arr[i]}));\n            m = arr[i];\n        }\n    }\n    res.push_back(by_length(std::vector<long>{m,\
    \ n}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4ud92tzu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long first = arr[0];\n  long last = arr[0];\n  for (long i : arr) {\n    if\
    \ (i <= 9) last = i;\n  }\n  std::vector<std::string> res;\n  while (first <=\
    \ last) {\n    long mid = (first + last) / 2;\n    res.push_back(by_length(arr).at(mid));\n\
    \    first = mid;\n  }\n  reverse(arr.begin(), arr.end());\n  for (long i : arr)\
    \ {\n    long index = i - 1;\n    std::string name = by_length(arr).at(index);\n\
    \    arr[index] = name;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn4anpaco.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxfumbjnb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749828
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) return result;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 % 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 % 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 % 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 % 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 % 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 % 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 % 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 %\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 % 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 % 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 % 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 % 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 % 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 % 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 % 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 % 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 %\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 % 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 % 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 % 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 % 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 % 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 % 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid49\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwx29z4de.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749831
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long l = arr[0];\n    for (long i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            l = i;\n        }\n    }\n \
    \   long r = l;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9) {\n \
    \           r %= 10;\n            r /= 10;\n            std::string s = std::to_string(i);\n\
    \            std::string t = std::to_string(r);\n            std::string u = std::to_string(l\
    \ - r);\n            std::string v = std::to_string(l - i);\n            std::string\
    \ w = std::to_string(l - r - i);\n            std::string x = std::to_string(l\
    \ - r - r - i);\n            std::string y = std::to_string(l - r - r - r - i);\n\
    \            std::string z = std::to_string(l - r - r - r - r - i);\n        \
    \    std::string aa = std::to_string(l - r - r - r - r - r - i);\n           \
    \ std::string bb = std::to_string(l - r - r - r - r - r - r - i);\n          \
    \  std::string cc = std::to_string(l - r - r - r - r - r - r - r - i);\n     \
    \       std::string dd = std::to_string(l - r - r - r - r - r - r - r - r - i);\n\
    \            std::string ee = std::to_string(l - r - r - r - r - r - r - r - r\
    \ - r - i);\n            std::string ff = std::to_string(l - r - r - r - r - r\
    \ - r - r - r - r - r - i);\n            std::string gg = std::to_string(l - r\
    \ - r - r - r - r - r - r - r - r - r - r - i);\n            std::string hh =\
    \ std::to_string(l - r - r - r - r - r - r - r - r - r - r - r - r - i);\n   \
    \         std::string ii = std::to_string(l - r - r - r - r - r - r - r - r -\
    \ r - r - r - r - r - i);\n            std::string jj = std::to_string(l - r -\
    \ r - r - r - r - r - r - r - r - r - r - r - r - r - i);\n            std::string\
    \ kk = std::to_string(l - r - r - r - r - r - r - r - r - r - r - r - r - r -\
    \ r - i);\n            std::string ll = std::to_string(l \n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9i4w68ep.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty()) return ans;\n    long max = *std::max_element(arr.begin(), arr.end());\n\
    \    long min = *std::min_element(arr.begin(), arr.end());\n    long mid = max/10;\n\
    \    long remain = max-mid*10;\n    long count = 0;\n    for (long i : arr) {\n\
    \        if (i >= min && i <= mid) {\n            ans.push_back(\"One\");\n  \
    \          count++;\n        } else if (i >= mid && i <= max) {\n            ans.push_back(\"\
    Two\");\n            count++;\n        } else if (i >= max && i <= remain) {\n\
    \            ans.push_back(\"Three\");\n            count++;\n        } else if\
    \ (i >= remain && i <= max) {\n            ans.push_back(\"Four\");\n        \
    \    count++;\n        } else if (i >= max && i <= mid) {\n            ans.push_back(\"\
    Five\");\n            count++;\n        } else if (i >= mid && i <= remain) {\n\
    \            ans.push_back(\"Six\");\n            count++;\n        } else if\
    \ (i >= remain && i <= mid) {\n            ans.push_back(\"Seven\");\n       \
    \     count++;\n        } else if (i >= mid && i <= max) {\n            ans.push_back(\"\
    Eight\");\n            count++;\n        } else if (i >= max && i <= mid) {\n\
    \            ans.push_back(\"Nine\");\n            count++;\n        }\n    }\n\
    \    if (count == 0) return ans;\n    ans.resize(count);\n    for (long i : arr)\
    \ {\n        if (i >= min && i <= mid) {\n            ans[count-1] = \"One\";\n\
    \            count--;\n        } else if (i >= mid && i <= max) {\n          \
    \  ans[count-1] = \"Two\";\n            count--;\n        } else if (i >= max\
    \ && i <= remain) {\n            ans[count-1] = \"Three\";\n            count--;\n\
    \        } else if (i >= remain && i <= max) {\n            ans[count-1] = \"\
    Four\";\n            count--;\n        } else if (i >= max && i <= mid) {\n  \
    \          ans[count-1] = \"Five\";\n            count--;\n        } else if (i\
    \ >= mid && i <= remain) {\n            ans[count-1] = \"Six\";\n            count--;\n\
    \        } else if (i >= remain && i <= mid) {\n            ans[count-1] = \"\
    Seven\";\n            count--;\n        } else if (i >= mid && i <= max) {\n \
    \           ans[count-1] = \"Eight\";\n            count--;\n        } else if\
    \ (i >= max && i <= mid) {\n            ans[count-1] = \"Nine\";\n           \
    \ count--;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgw9sere7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (auto i : arr) {\n\
    \        if (i <= min || i >= max) continue;\n        long temp = i;\n       \
    \ while (temp > 0) {\n            long digit = temp % 10;\n            std::string\
    \ name = to_string(digit);\n            res.push_back(name);\n            temp\
    \ /= 10;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj3a9znsk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max_len = 0, min_len = std::numeric_limits<long>::max();\n\
    \    for (auto i : arr) {\n        if (i < 1 || i > 9) continue;\n        max_len\
    \ = std::max(max_len, i);\n        min_len = std::min(min_len, i);\n    }\n  \
    \  std::vector<std::string> names = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    for (long i = min_len;\
    \ i <= max_len; ++i) {\n        std::string name = names[i - min_len];\n     \
    \   for (auto j : arr) {\n            if (j == i) res.push_back(name);\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2tv0w9t4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    if (arr.size() == 1) {\n\
    \        std::string one = \"One\";\n        res.push_back(one);\n        return\
    \ res;\n    }\n    long min = arr[0];\n    long max = arr[0];\n    for (auto i\
    \ : arr) {\n        if (i < min) {\n            min = i;\n        } else if (i\
    \ > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    long length = max - min;\n    std::vector<std::string> arr_reversed;\n\
    \    long reversed_min = mid;\n    long reversed_max = mid;\n    for (auto i :\
    \ arr) {\n        if (i < reversed_min) {\n            arr_reversed.push_back(\"\
    One\");\n            reversed_min = i;\n        } else if (i > reversed_max) {\n\
    \            arr_reversed.push_back(\"One\");\n            reversed_max = i;\n\
    \        } else {\n            arr_reversed.push_back(by_length(std::vector<long>{i\
    \ - mid, i + mid}));\n        }\n    }\n    for (auto i : arr_reversed) {\n  \
    \      res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplyj9jw54.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    if (min > 9) {\n        return res;\n    }\n    if (max\
    \ < 1) {\n        return res;\n    }\n    long mid = min + (max - min) / 2;\n\
    \    std::vector<std::string> res2;\n    while (min <= max) {\n        res2.push_back(by_length(arr));\n\
    \        long mid2 = min + (max - min) / 2;\n        if (mid2 == mid) {\n    \
    \        res2.push_back(by_length(arr));\n            mid = mid2;\n        } else\
    \ {\n            mid = mid2;\n        }\n    }\n    std::vector<std::string> res3;\n\
    \    for (auto i : res2) {\n        res3.push_back(by_length(arr));\n    }\n \
    \   std::vector<std::string> res4;\n    for (auto i : res3) {\n        res4.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res5;\n    for (auto i : res4) {\n      \
    \  res5.push_back(by_length(arr));\n    }\n    std::vector<std::string> res6;\n\
    \    for (auto i : res5) {\n        res6.push_back(by_length(arr));\n    }\n \
    \   std::vector<std::string> res7;\n    for (auto i : res6) {\n        res7.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res8;\n    for (auto i : res7) {\n      \
    \  res8.push_back(by_length(arr));\n    }\n    std::vector<std::string> res9;\n\
    \    for (auto i : res8) {\n        res9.push_back(by_length(arr));\n    }\n \
    \   std::vector<std::string> res10;\n    for (auto i : res9) {\n        res10.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res11;\n    for (auto i : res10) {\n    \
    \    res11.push_back(by_length(arr));\n    }\n    std::vector<std::string> res12;\n\
    \    for (auto i : res11) {\n        res12.push_back(by_length(arr));\n    }\n\
    \    std::vector<std::string> res13;\n    for (auto i : res12) {\n        res13.push_back(by_length(arr));\n\
    \    }\n    std::vector<std::string> res14;\n    for (auto i : res13) {\n    \
    \    res14.push_back(by_length(arr));\n    }\n    std::vector<std::string> res15;\n\
    \    for (auto i : res14) {\n        res15.push_back(by_length(arr));\n    }\n\
    \    std::vector<std::string> res16;\n    for (auto i : res15) {\n        res16.push_back(b\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrjtbi36.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long last = arr[0];\n\
    \    for (auto i : arr) {\n        if (curr == 1 && i == 1) continue;\n      \
    \  if (curr > 9) continue;\n        if (curr < 1) continue;\n        if (curr\
    \ > last) res.push_back(to_string(curr));\n        last = curr;\n        curr\
    \ = i;\n    }\n    if (curr > 9) res.push_back(to_string(curr));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjnrnlfct.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == cur) {\n            prev = i;\n        } else {\n      \
    \      long next = cur;\n            if (next > 9) {\n                next = next\
    \ % 10;\n            }\n            res.push_back(by_length_helper(prev, next,\
    \ cur));\n            prev = cur;\n            cur = i;\n        }\n    }\n  \
    \  res.push_back(by_length_helper(prev, cur, cur));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn5c5y1gv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4\
    \ = mid3 / 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long\
    \ mid7 = mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n\
    \    long mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11\
    \ / 10;\n    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long\
    \ mid15 = mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 /\
    \ 10;\n    long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20\
    \ = mid19 / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n\
    \    long mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 =\
    \ mid24 / 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n  \
    \  long mid28 = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29\
    \ / 10;\n    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long\
    \ mid33 = mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 /\
    \ 10;\n    long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38\
    \ = mid37 / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n\
    \    long mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 =\
    \ mid42 / 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n  \
    \  long mid46 = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47\
    \ / 10;\n    long mid49 = \n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvzrvkizl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long max_len = 0, min_len\
    \ = std::numeric_limits<long>::max();\n    for (auto i : arr) {\n        if (max_len\
    \ < i) {\n            max_len = i;\n        }\n        if (min_len > i) {\n  \
    \          min_len = i;\n        }\n    }\n    long mid = (max_len + min_len)\
    \ / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 =\
    \ mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long\
    \ mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n\
    \    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6\
    \ / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15\
    \ = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n   \
    \ long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10\
    \ / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long\
    \ mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 %\
    \ 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28\
    \ = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n\
    \    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 =\
    \ mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n  \
    \  long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19\
    \ / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long\
    \ mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 %\
    \ 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46\
    \ = mid23 / 10;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6_cy2f94.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long len = arr.size();\n    if (len <\
    \ 10) return res;\n    long max_len = len / 10;\n    long min_len = len % 10;\n\
    \    long max_num = max_len;\n    long min_num = min_len;\n    long max_pos =\
    \ 0;\n    long min_pos = 0;\n    long pos = 0;\n    long num = max_num;\n    long\
    \ pos = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (num\
    \ > 0) {\n        while (pos < num) {\n            if (arr[pos] >= min_num &&\
    \ arr[pos] <= max_num) {\n                res.push_back(arr[pos]);\n         \
    \       pos++;\n            }\n            pos++;\n        }\n        num = num\
    \ / 10;\n    }\n    pos = 0;\n    while (pos < len) {\n        if (arr[pos] >=\
    \ min_num && arr[pos] <= max_num) {\n            res.push_back(arr[pos]);\n  \
    \          pos++;\n        }\n        pos++;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr52te3jo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> ans;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 2;\n    long mid2 = max / 2;\n    long mid3 = max /\
    \ 2;\n    long mid4 = max / 2;\n    long mid5 = max / 2;\n    long mid6 = max\
    \ / 2;\n    long mid7 = max / 2;\n    long mid8 = max / 2;\n    long mid9 = max\
    \ / 2;\n    long mid10 = max / 2;\n    long mid11 = max / 2;\n    long mid12 =\
    \ max / 2;\n    long mid13 = max / 2;\n    long mid14 = max / 2;\n    long mid15\
    \ = max / 2;\n    long mid16 = max / 2;\n    long mid17 = max / 2;\n    long mid18\
    \ = max / 2;\n    long mid19 = max / 2;\n    long mid20 = max / 2;\n    long mid21\
    \ = max / 2;\n    long mid22 = max / 2;\n    long mid23 = max / 2;\n    long mid24\
    \ = max / 2;\n    long mid25 = max / 2;\n    long mid26 = max / 2;\n    long mid27\
    \ = max / 2;\n    long mid28 = max / 2;\n    long mid29 = max / 2;\n    long mid30\
    \ = max / 2;\n    long mid31 = max / 2;\n    long mid32 = max / 2;\n    long mid33\
    \ = max / 2;\n    long mid34 = max / 2;\n    long mid35 = max / 2;\n    long mid36\
    \ = max / 2;\n    long mid37 = max / 2;\n    long mid38 = max / 2;\n    long mid39\
    \ = max / 2;\n    long mid40 = max / 2;\n    long mid41 = max / 2;\n    long mid42\
    \ = max / 2;\n    long mid43 = max / 2;\n    long mid44 = max / 2;\n    long mid45\
    \ = max / 2;\n    long mid46 = max / 2;\n    long mid47 = max / 2;\n    long mid48\
    \ = max / 2;\n    long mid49 = max / 2;\n    long mid50 = max / 2;\n    long mid51\
    \ = max / 2;\n    long mid52 = max / 2;\n    long mid53 = max / 2;\n    long mid\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6m21ps2d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long curr = arr[0];\n    long prev = arr[0];\n\
    \    for (auto i : arr) {\n        if (i <= 9) {\n            long next = i;\n\
    \            if (curr == prev) {\n                res.push_back(to_string(curr));\n\
    \            } else {\n                res.push_back(to_string(prev));\n     \
    \       }\n            prev = next;\n            curr = next;\n        } else\
    \ {\n            long next = curr + 10;\n            if (curr == prev) {\n   \
    \             res.push_back(to_string(curr));\n            } else {\n        \
    \        res.push_back(to_string(prev));\n            }\n            prev = next;\n\
    \            curr = next;\n        }\n    }\n    if (curr == prev) {\n       \
    \ res.push_back(to_string(curr));\n    } else {\n        res.push_back(to_string(prev));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp09ep398p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()); // get the max number\n    long min = *std::min_element(arr.begin(),\
    \ arr.end()); // get the min number\n    long mid = max / 10; // get the middle\
    \ number\n    long left = (max - mid) / 10; // get the left number\n    long right\
    \ = (max - mid) % 10; // get the right number\n    long mid2 = min / 10; // get\
    \ the middle number\n    long left2 = (min - mid2) / 10; // get the left number\n\
    \    long right2 = (min - mid2) % 10; // get the right number\n    long mid3 =\
    \ mid / 10; // get the middle number\n    long left3 = (mid - mid3) / 10; // get\
    \ the left number\n    long right3 = (mid - mid3) % 10; // get the right number\n\
    \    long mid4 = mid / 10; // get the middle number\n    long left4 = (mid - mid4)\
    \ / 10; // get the left number\n    long right4 = (mid - mid4) % 10; // get the\
    \ right number\n    long mid5 = mid / 10; // get the middle number\n    long left5\
    \ = (mid - mid5) / 10; // get the left number\n    long right5 = (mid - mid5)\
    \ % 10; // get the right number\n    long mid6 = mid / 10; // get the middle number\n\
    \    long left6 = (mid - mid6) / 10; // get the left number\n    long right6 =\
    \ (mid - mid6) % 10; // get the right number\n    long mid7 = mid / 10; // get\
    \ the middle number\n    long left7 = (mid - mid7) / 10; // get the left number\n\
    \    long right7 = (mid - mid7) % 10; // get the right number\n    long mid8 =\
    \ mid / 10; // get the middle number\n    long left8 = (mid - mid8) / 10; // get\
    \ the left number\n    long right8 = (mid - mid8) % 10; // get the right number\n\
    \    long mid9 = mid / 10; // get the middle number\n    long left9 = (mid - mid9)\
    \ / 10; // get the left number\n    long right9 = (mid - mid9) % 10; // get the\
    \ right number\n    long mid10 = mid / 10; // get the middle number\n    long\
    \ left10 = (mid - mid10) / 10; // get the left number\n    long right10 = (mid\
    \ - mid10) % 10; // get the right number\n    long mid11 = mid / 10; // get the\
    \ middle number\n    long left11 = (m\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq1514_t_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.empty()) return result;\n    long max_val = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min_val = *std::min_element(arr.begin(), arr.end());\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n    long min_len = min_val - 1;\n\
    \    long max_len = max_val - min_val + 1;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9_zqbjsx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long n = arr[0];\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] < n) res.push_back(\"One\");\n  \
    \      else if (arr[i] > n) res.push_back(\"Nine\");\n        else if (arr[i]\
    \ == n) res.push_back(\"One\");\n        else if (arr[i] < 9) res.push_back(\"\
    Two\");\n        else if (arr[i] < 18) res.push_back(\"Three\");\n        else\
    \ if (arr[i] < 27) res.push_back(\"Four\");\n        else if (arr[i] < 36) res.push_back(\"\
    Five\");\n        else if (arr[i] < 45) res.push_back(\"Six\");\n        else\
    \ if (arr[i] < 54) res.push_back(\"Seven\");\n        else if (arr[i] < 63) res.push_back(\"\
    Eight\");\n        else res.push_back(\"Nine\");\n        n = arr[i];\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph8o8n8dv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long num = arr[0];\n    long len = arr.size();\n\
    \    long start = 1;\n    long end = len;\n    while (start < end) {\n       \
    \ while (start < end && num < 9) {\n            ++start;\n            ++num;\n\
    \        }\n        while (start < end && num > 9) {\n            --end;\n   \
    \         --num;\n        }\n        if (start < end) {\n            std::string\
    \ tmp = std::to_string(num);\n            std::string name = names[num];\n   \
    \         while (tmp.length() > 0 && tmp[0] == '0') {\n                tmp.pop_back();\n\
    \            }\n            res.push_back(name + tmp);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_34tvvwf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long diff = max - min;\n    for (auto i : arr) {\n       \
    \ if (i < min) {\n            result.push_back(\"One\");\n        } else if (i\
    \ > max) {\n            result.push_back(\"Nine\");\n        } else {\n      \
    \      long index = i - min;\n            long mod = pow(10, index);\n       \
    \     long digit = mod % 10;\n            long name = index / 10;\n          \
    \  result.push_back(std::to_string(name) + std::to_string(digit));\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgtok59wl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i > 9) break;\n        if (i == cur) {\n            ++cur;\n\
    \        } else {\n            res.push_back(by_length(std::vector<long>{cur,\
    \ last}));\n            cur = i;\n        }\n        last = i;\n    }\n    res.push_back(by_length(std::vector<long>{cur,\
    \ last}));\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpogg6pmsi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ ans;\n    long curr = arr[0];\n    long prev = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == curr) continue;\n        if (i > curr) {\n            ans.push_back(to_string(curr));\n\
    \            curr = i;\n            continue;\n        }\n        if (i < prev)\
    \ {\n            ans.push_back(to_string(prev));\n            prev = i;\n    \
    \        continue;\n        }\n        ans.push_back(to_string(curr));\n     \
    \   curr = i;\n    }\n    ans.push_back(to_string(curr));\n    return ans;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp65mdauty.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) {\n        return {};\n\
    \    }\n    std::vector<std::string> res;\n    long max = *std::max_element(arr.begin(),\
    \ arr.end()) + 1;\n    long min = *std::min_element(arr.begin(), arr.end()) +\
    \ 1;\n    long mid = max / 2;\n    long left = max;\n    long right = min;\n \
    \   long midVal = arr[mid];\n    long leftVal = arr[left];\n    long rightVal\
    \ = arr[right];\n    long leftValVal = arr[left - 1];\n    long rightValVal =\
    \ arr[right + 1];\n    long midValVal = arr[mid-1];\n    long midValValVal = arr[mid+1];\n\
    \    long leftValValValVal = arr[left-1];\n    long rightValValValVal = arr[right+1];\n\
    \    long leftValValValValVal = arr[left+1];\n    long rightValValValValVal =\
    \ arr[right-1];\n    long leftValValValValValVal = arr[left-1];\n    long rightValValValValValVal\
    \ = arr[right+1];\n    long leftValValValValValValVal = arr[left+1];\n    long\
    \ rightValValValValValValVal = arr[right-1];\n    long leftValValValValValValValVal\
    \ = arr[left-1];\n    long rightValValValValValValValVal = arr[right+1];\n   \
    \ long leftValValValValValValValValVal = arr[left+1];\n    long rightValValValValValValValValVal\
    \ = arr[right-1];\n    long leftValValValValValValValValValVal = arr[left-1];\n\
    \    long rightValValValValValValValValValVal = arr[right+1];\n    long leftValValValValValValValValValValVal\
    \ = arr[left+1];\n    long rightValValValValValValValValValVal = arr[right-1];\n\
    \    long leftValValValValValValValValValValVal = arr[left-1];\n    long rightValValValValValValValValValValVal\
    \ = arr[right+1];\n    long leftValValValValValValValValValValValVal = arr[left+1];\n\
    \    long rightValValValValValValValValValValValVal = arr[right-1];\n    long\
    \ leftValValValValValValValValValValValValVal = arr[left-1];\n    long rightValValValValVal\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ghwm6z5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long cur = arr[0];\n    long last = arr[0];\n    for (auto i : arr)\
    \ {\n        if (i == cur) continue;\n        if (i == last) res.push_back(cur);\n\
    \        else res.push_back(to_string(cur));\n        cur = i;\n        last =\
    \ i;\n    }\n    if (cur != last) res.push_back(to_string(cur));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpon_ggqyj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   if (arr.size() == 0)\n        return result;\n    long min = arr[0];\n   \
    \ long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\n       \
    \     min = i;\n        else if (i > max)\n            max = i;\n    }\n    long\
    \ mid = (min + max) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n\
    \    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3\
    \ / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9\
    \ = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n   \
    \ long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7\
    \ / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17\
    \ = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n   \
    \ long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11\
    \ / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long\
    \ mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 %\
    \ 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30\
    \ = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n\
    \    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 =\
    \ mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n  \
    \  long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20\
    \ / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long\
    \ mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 %\
    \ 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 % 10;\n    long mid\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpff1q80ln.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    std::vector<std::string> res;\n    long temp = 0;\n    for (auto\
    \ i : arr) {\n        if (i <= 9) {\n            temp = temp * 10 + i;\n     \
    \   } else {\n            temp = temp * 10 + 9 + i;\n        }\n    }\n    long\
    \ temp = temp % 10;\n    if (temp != 0) {\n        res.push_back(\"One\");\n \
    \   }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"Two\"\
    );\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Three\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Four\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Five\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Six\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Seven\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Eight\");\n    }\n    temp = temp / 10;\n    if (temp != 0) {\n        res.push_back(\"\
    Nine\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdytyf9u5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n  \
    \  long right = mid;\n    while (left < max) {\n        mid = (left + right) /\
    \ 2;\n        if (arr[mid] < mid) {\n            left = mid;\n        } else {\n\
    \            right = mid;\n        }\n    }\n    long temp = arr[left];\n    arr[left]\
    \ = arr[right];\n    arr[right] = temp;\n    for (auto i : arr) {\n        std::string\
    \ name;\n        if (i < 10) {\n            name = \"One\";\n        } else if\
    \ (i < 20) {\n            name = \"Two\";\n        } else if (i < 30) {\n    \
    \        name = \"Three\";\n        } else if (i < 40) {\n            name = \"\
    Four\";\n        } else if (i < 50) {\n            name = \"Five\";\n        }\
    \ else if (i < 60) {\n            name = \"Six\";\n        } else if (i < 70)\
    \ {\n            name = \"Seven\";\n        } else if (i < 80) {\n           \
    \ name = \"Eight\";\n        } else if (i < 90) {\n            name = \"Nine\"\
    ;\n        } else {\n            name = \"Zero\";\n        }\n        res.push_back(name);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl6yv1hsn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> ans;\n    if\
    \ (arr.empty()) return ans;\n    long min = *std::min_element(arr.begin(), arr.end());\n\
    \    long max = *std::max_element(arr.begin(), arr.end());\n    long mid = min\
    \ + (max - min) / 2;\n    long length = max - min;\n    long mid1 = mid - 1;\n\
    \    long mid2 = mid + 1;\n    long mid3 = mid + 2;\n    long mid4 = mid + 3;\n\
    \    long mid5 = mid + 4;\n    long mid6 = mid + 5;\n    long mid7 = mid + 6;\n\
    \    long mid8 = mid + 7;\n    long mid9 = mid + 8;\n    long mid10 = mid + 9;\n\
    \    long mid11 = mid + 10;\n    long mid12 = mid + 11;\n    long mid13 = mid\
    \ + 12;\n    long mid14 = mid + 13;\n    long mid15 = mid + 14;\n    long mid16\
    \ = mid + 15;\n    long mid17 = mid + 16;\n    long mid18 = mid + 17;\n    long\
    \ mid19 = mid + 18;\n    long mid20 = mid + 19;\n    long mid21 = mid + 20;\n\
    \    long mid22 = mid + 21;\n    long mid23 = mid + 22;\n    long mid24 = mid\
    \ + 23;\n    long mid25 = mid + 24;\n    long mid26 = mid + 25;\n    long mid27\
    \ = mid + 26;\n    long mid28 = mid + 27;\n    long mid29 = mid + 28;\n    long\
    \ mid30 = mid + 29;\n    long mid31 = mid + 30;\n    long mid32 = mid + 31;\n\
    \    long mid33 = mid + 32;\n    long mid34 = mid + 33;\n    long mid35 = mid\
    \ + 34;\n    long mid36 = mid + 35;\n    long mid37 = mid + 36;\n    long mid38\
    \ = mid + 37;\n    long mid39 = mid + 38;\n    long mid40 = mid + 39;\n    long\
    \ mid41 = mid + 40;\n    long mid42 = mid + 41;\n    long mid43 = mid + 42;\n\
    \    long mid44 = mid + 43;\n    long mid45 = mid + 44;\n    long mid46 = mid\
    \ + 45;\n    long mid47 = mid + 46;\n    long mid48 = mid + 47;\n    long mid49\
    \ = mid + 48;\n    long mid50 = mid + 49;\n    long mid51 = mid + 50;\n    long\
    \ mid52 = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpck55hgi9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long max = std::accumulate(arr.begin(),\
    \ arr.end(), 0);\n    if (max > 9) {\n        std::sort(arr.begin(), arr.end());\n\
    \        long reversed = std::accumulate(arr.begin(), arr.end(), 0);\n       \
    \ reversed = reversed % 10;\n        long reversed_arr[] = {reversed};\n     \
    \   std::reverse(arr.begin(), arr.end());\n        std::transform(arr.begin(),\
    \ arr.end(), arr.begin(), reversed_arr);\n        std::transform(arr.begin(),\
    \ arr.end(), arr.begin(), [&](long x) {\n            std::string s = std::to_string(x);\n\
    \            std::string name = \"\";\n            int pos = 0;\n            while\
    \ (pos < s.size()) {\n                name += names[s.at(pos)];\n            \
    \    pos++;\n            }\n            return name;\n        });\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp243amsr0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return std::vector<std::string>();\n\
    \    std::vector<std::string> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (i >= min && i <= max) {\n            std::string s = std::to_string(i);\n\
    \            std::string name = \"\";\n            int pos = 0;\n            while\
    \ (pos < s.size()) {\n                char c = s[pos];\n                if (c\
    \ == '0') break;\n                name += c;\n                pos++;\n       \
    \     }\n            res.push_back(name);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjcflog65.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (auto i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        } else if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n   \
    \ long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg103nfb9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749830
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the\
    \ array is empty, return an empty array:\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([1, -1 , 55]) \n// ['One']\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    if (arr.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = std::max(arr.begin(), arr.end())\
    \ - std::min(arr.begin(), arr.end()) + 1;\n    long max_len = std::max(max_len,\
    \ 9 - 1);\n    long max_len = std::max(max_len, 1);\n    long min_len = std::min(arr.begin(),\
    \ arr.end()) - std::max(arr.begin(), arr.end()) + 1;\n    long min_len = std::min(min_len,\
    \ 9 - 1);\n    long min_len = std::min(min_len, 1);\n    long max_val = std::max(arr.begin(),\
    \ arr.end()) - std::min(arr.begin(), arr.end()) + 1;\n    long min_val = std::min(arr.begin(),\
    \ arr.end()) - std::max(arr.begin(), arr.end()) + 1;\n    long max_val = std::max(max_val,\
    \ 9 - 1);\n    long min_val = std::min(min_val, 9 - 1);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_val, 1);\n    long max_val = std::max(max_val,\
    \ 9);\n    long min_val = std::min(min_val, 9);\n    long max_val = std::max(max_val,\
    \ 1);\n    long min_val = std::min(min_\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjuzmk9m7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749832
