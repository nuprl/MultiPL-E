language: cpp
name: HumanEval_76_is_simple_power
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (n == 2)\n        return (x\
    \ == 1);\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n   \
    \ else\n        return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2n7d2pdl: /tmp/tmp2n7d2pdl.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n == 2) return x == 1;\n    if (n % 2 == 0) return\
    \ is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj2d09dc3: /tmp/tmpj2d09dc3.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n\
    \    if (n % 3 == 0) return is_simple_power(x, n / 3);\n    if (n % 5 == 0) return\
    \ is_simple_power(x, n / 5);\n    if (n % 7 == 0) return is_simple_power(x, n\
    \ / 7);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg0kdq37d: /tmp/tmpg0kdq37d.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n == 2) return (x == 1);\n    if (n == 3) return\
    \ (x == 1);\n    if (n == 4) return (x == 1);\n    if (n == 5) return (x == 1);\n\
    \    if (n == 6) return (x == 1);\n    if (n == 7) return (x == 1);\n    if (n\
    \ == 8) return (x == 1);\n    if (n == 9) return (x == 1);\n    if (n == 10) return\
    \ (x == 1);\n    if (n == 11) return (x == 1);\n    if (n == 12) return (x ==\
    \ 1);\n    if (n == 13) return (x == 1);\n    if (n == 14) return (x == 1);\n\
    \    if (n == 15) return (x == 1);\n    if (n == 16) return (x == 1);\n    if\
    \ (n == 17) return (x == 1);\n    if (n == 18) return (x == 1);\n    if (n ==\
    \ 19) return (x == 1);\n    if (n == 20) return (x == 1);\n    if (n == 21) return\
    \ (x == 1);\n    if (n == 22) return (x == 1);\n    if (n == 23) return (x ==\
    \ 1);\n    if (n == 24) return (x == 1);\n    if (n == 25) return (x == 1);\n\
    \    if (n == 26) return (x == 1);\n    if (n == 27) return (x == 1);\n    if\
    \ (n == 28) return (x == 1);\n    if (n == 29) return (x == 1);\n    if (n ==\
    \ 3) return (x == 1);\n    if (n == 4) return (x == 1);\n    if (n == 5) return\
    \ (x == 1);\n    if (n == 6) return (x == 1);\n    if (n == 7) return (x == 1);\n\
    \    if (n == 8) return (x == 1);\n    if (n == 9) return (x == 1);\n    if (n\
    \ == 10) return (x == 1);\n    if (n == 11) return (x == 1);\n    if (n == 12)\
    \ return (x == 1);\n    if (n == 13) return (x == 1);\n    if (n == 14) return\
    \ (x == 1);\n    if (n == 15) return (x == 1);\n    if (n == 16) return (x ==\
    \ 1);\n    if (n == 17) return (x == 1);\n    if (n == 18) return (x == 1);\n\
    \    if (n == 19) return (x == 1);\n    if (n == 20) return (x == 1);\n    if\
    \ (n == 21) return (x == 1);\n    if (n == 22) return (x == 1);\n    if (n ==\
    \ 23) return (x == 1);\n    if (n == 24) return (x == 1);\n    if (n == 25) return\
    \ (x == 1);\n    if (n == 26) return (x == 1);\n    if (n == 27) return (x ==\
    \ 1);\n    if (n == 28) return (x == 1);\n    if (n == 29) return (x == 1);\n\
    \    if (n == 3) return (x == 1);\n    if (n == 4) return (x == 1);\n    if (n\
    \ == 5) return (x == 1);\n    if (n == 6) return (x == 1);\n    if (n == 7) return\
    \ (x == 1);\n    if (n == 8) return (x == 1);\n    if (n == 9) return (x == 1);\n\
    \    if (n\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx7e0xmiz.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpx7e0xmiz.cpp:72:10: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   72 |     if (n\n      |        ~ ^\n      | \
    \         )\n   73 | }\n      | ~         \n/tmp/tmpx7e0xmiz.cpp:73:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   73 | }\n      | ^\n\
    /tmp/tmpx7e0xmiz.cpp:73:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   73 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (x == 1)\n        return is_simple_power(x,\
    \ n/2);\n    if (x == 0)\n        return false;\n    return is_simple_power(x,\
    \ n/2) && is_simple_power(x*x, n/2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk6mcbmwh: /tmp/tmpk6mcbmwh.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (n\
    \ == 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0) return\
    \ false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n\
    \    if (n % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if\
    \ (n % 13 == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n %\
    \ 19 == 0) return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 ==\
    \ 0) return false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return\
    \ false;\n    if (n % 41 == 0) return false;\n    if (n % 47 == 0) return false;\n\
    \    if (n % 53 == 0) return false;\n    if (n % 59 == 0) return false;\n    if\
    \ (n % 61 == 0) return false;\n    if (n % 67 == 0) return false;\n    if (n %\
    \ 71 == 0) return false;\n    if (n % 73 == 0) return false;\n    if (n % 79 ==\
    \ 0) return false;\n    if (n % 83 == 0) return false;\n    if (n % 89 == 0) return\
    \ false;\n    if (n % 97 == 0) return false;\n    if (n % 101 == 0) return false;\n\
    \    if (n % 103 == 0) return false;\n    if (n % 107 == 0) return false;\n  \
    \  if (n % 111 == 0) return false;\n    if (n % 113 == 0) return false;\n    if\
    \ (n % 117 == 0) return false;\n    if (n % 121 == 0) return false;\n    if (n\
    \ % 123 == 0) return false;\n    if (n % 127 == 0) return false;\n    if (n %\
    \ 131 == 0) return false;\n    if (n % 133 == 0) return false;\n    if (n % 137\
    \ == 0) return false;\n    if (n % 141 == 0) return false;\n    if (n % 143 ==\
    \ 0) return false;\n    if (n % 147 == 0) return false;\n    if (n % 151 == 0)\
    \ return false;\n    if (n % 153 == 0) return false;\n    if (n % 157 == 0) return\
    \ false;\n    if (n % 161 == 0) return false;\n    if (n % 163 == 0) return false;\n\
    \    if (n % 167 == 0) return false;\n    if (n % 171 == 0) return false;\n  \
    \  if (n % 173 == 0) return false;\n    if (n % 177 == 0) return false;\n    if\
    \ (n % 181 == 0) return false;\n    if (n % 183 == 0) return false;\n    if (n\
    \ % 187 == 0) return false;\n    if (n % 191 == 0) return false;\n    if (n %\
    \ 193 == 0) return false;\n    if (n % 197 == 0) return false;\n    if (n % 201\
    \ == 0) return false;\n    if (n % 203 == 0) return false;\n    if (n % 207 ==\
    \ 0) return false;\n    if (n % 211 == 0) return false;\n    if (n % 213 == 0)\
    \ return false;\n    if (n % 217 == 0) return false;\n    if (n % 221 == 0) return\
    \ false;\n    if (n % 223 == 0) return false;\n\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptluj9vbd: /tmp/tmptluj9vbd.cpp:77: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return x == 1;\n    if (x == 1)\n        return true;\n\
    \    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (n == 1) return true;\n\
    \    if (n == -1) return false;\n    if (n == 2) return true;\n    if (n == -2)\
    \ return false;\n    if (n == 3) return true;\n    if (n == -3) return false;\n\
    \    if (n == 4) return true;\n    if (n == 4) return false;\n    if (n == 5)\
    \ return true;\n    if (n == 5) return false;\n    if (n == 6) return true;\n\
    \    if (n == 6) return false;\n    if (n == 7) return true;\n    if (n == 7)\
    \ return false;\n    if (n == 8) return true;\n    if (n == 8) return false;\n\
    \    if (n == 9) return true;\n    if (n == 9) return false;\n    if (n == 10)\
    \ return true;\n    if (n == 10) return false;\n    if (n == 11) return true;\n\
    \    if (n == 11) return false;\n    if (n == 12) return true;\n    if (n == 12)\
    \ return false;\n    if (n == 13) return true;\n    if (n == 13) return false;\n\
    \    if (n == 14) return true;\n    if (n == 14) return false;\n    if (n == 15)\
    \ return true;\n    if (n == 15) return false;\n    if (n == 16) return true;\n\
    \    if (n == 16) return false;\n    if (n == 17) return true;\n    if (n == 17)\
    \ return false;\n    if (n == 18) return true;\n    if (n == 18) return false;\n\
    \    if (n == 19) return true;\n    if (n == 19) return false;\n    if (n == 20)\
    \ return true;\n    if (n == 20) return false;\n    if (n == 21) return true;\n\
    \    if (n == 21) return false;\n    if (n == 22) return true;\n    if (n == 22)\
    \ return false;\n    if (n == 23) return true;\n    if (n == 23) return false;\n\
    \    if (n == 24) return true;\n    if (n == 24) return false;\n    if (n == 25)\
    \ return true;\n    if (n == 25) return false;\n    if (n == 26) return true;\n\
    \    if (n == 26) return false;\n    if (n == 27) return true;\n    if (n == 27)\
    \ return false;\n    if (n == 28) return true;\n    if (n == 28) return false;\n\
    \    if (n == 29) return true;\n    if (n == 29) return false;\n    if (n == 3)\
    \ return true;\n    if (n == 3) return false;\n    if (n == 4) return true;\n\
    \    if (n == 4) return false;\n    if (n == 5) return true;\n    if (n == 5)\
    \ return false;\n    if (n == 6) return true;\n    if (n == 6) return false;\n\
    \    if (n == 7) return true;\n    if (n == 7) return false;\n    if (n == 8)\
    \ return true;\n    if (n == 8) return false;\n    if (n == 9) return true;\n\
    \    if (n == 9) return false;\n    if (n == 10) return true;\n    if (n == 10)\
    \ return false;\n    if (n == 11) return true;\n    if (n == 11) return false;\n\
    \    if (n == 12) return true;\n    if (n == 12) return false;\n    if (n == 13)\
    \ return true;\n    if (n == 13) return false;\n    if (n == 14) return true;\n\
    \    if (n == 14) return false;\n    if (n == 15) return true;\n    if (n == 15)\
    \ return false;\n    if (n == 16) return true;\n    if (n == 16) return false;\n\
    \    if (n == 17) return true;\n    if (n == 17) return false;\n    if (n == 18)\
    \ return true;\n    if (\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbkh07b7.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpdbkh07b7.cpp:101:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpdbkh07b7.cpp:100:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  100 |     if (\n\
    \      |        ~^\n      |         )\n  101 | }\n      | ~        \n/tmp/tmpdbkh07b7.cpp:101:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  101 | }\n \
    \     | ^\n/tmp/tmpdbkh07b7.cpp:101:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  101 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x % n == 0) return is_simple_power(x / n, n);\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0_jbtavz: /tmp/tmp0_jbtavz.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 1) return true;\n    if (x % n == 0) return\
    \ is_simple_power(x / n, n);\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmphi_63npv: /tmp/tmphi_63npv.cpp:24: int main(): Assertion `candidate((1),
    (1)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (x == 1)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x * x, n / 2);\n    else\n\
    \        return is_simple_power(x * x, n / 2) || is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpratn2oh0: /tmp/tmpratn2oh0.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0 || n == 0)\n        return\
    \ false;\n    if (n == 1)\n        return true;\n    if (n % 2 == 0)\n       \
    \ return is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmper8pac30: /tmp/tmper8pac30.cpp:19: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long long ans = 1;\n    for(long long\
    \ i = 1; i<=n; i++) {\n        ans *= x;\n    }\n    return ans == x;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprw_n9ox5: /tmp/tmprw_n9ox5.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n\
    \    if (x % 2 == 0) return false;\n    if (x % 3 == 0) return false;\n    if\
    \ (x % 5 == 0) return false;\n    if (x % 7 == 0) return false;\n    if (x % 11\
    \ == 0) return false;\n    if (x % 13 == 0) return false;\n    if (x % 17 == 0)\
    \ return false;\n    if (x % 19 == 0) return false;\n    if (x % 23 == 0) return\
    \ false;\n    if (x % 29 == 0) return false;\n    if (x % 31 == 0) return false;\n\
    \    if (x % 37 == 0) return false;\n    if (x % 41) == 0) return false;\n   \
    \ if (x % 43) == 0) return false;\n    if (x % 47) == 0) return false;\n    if\
    \ (x % 53) == 0) return false;\n    if (x % 59) == 0) return false;\n    if (x\
    \ % 61) == 0) return false;\n    if (x % 67) == 0) return false;\n    if (x %\
    \ 71) == 0) return false;\n    if (x % 73) == 0) return false;\n    if (x % 79)\
    \ == 0) return false;\n    if (x % 83) == 0) return false;\n    if (x % 89) ==\
    \ 0) return false;\n    if (x % 97) == 0) return false;\n    if (x % 103) == 0)\
    \ return false;\n    if (x % 109) == 0) return false;\n    if (x % 113) == 0)\
    \ return false;\n    if (x % 127) == 0) return false;\n    if (x % 131) == 0)\
    \ return false;\n    if (x % 137) == 0) return false;\n    if (x % 141) == 0)\
    \ return false;\n    if (x % 147) == 0) return false;\n    if (x % 151) == 0)\
    \ return false;\n    if (x % 157) == 0) return false;\n    if (x % 161) == 0)\
    \ return false;\n    if (x % 167) == 0) return false;\n    if (x % 171) == 0)\
    \ return false;\n    if (x % 177) == 0) return false;\n    if (x % 181) == 0)\
    \ return false;\n    if (x % 187) == 0) return false;\n    if (x % 191) == 0)\
    \ return false;\n    if (x % 197) == 0) return false;\n    if (x % 201) == 0)\
    \ return false;\n    if (x % 207) == 0) return false;\n    if (x % 211) == 0)\
    \ return false;\n    if (x % 217) == 0) return false;\n    if (x % 221) == 0)\
    \ return false;\n    if (x % 227) == 0) return false;\n    if (x % 231) == 0)\
    \ return false;\n    if (x % 237) == 0) return false;\n    if (x % 241) == 0)\
    \ return false;\n    if (x % 247) == 0) return false;\n    if (x % 251) == 0)\
    \ return false;\n    if (x % \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7lw_peqh.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp7lw_peqh.cpp:24:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   24 |     if (x % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:25:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   25 |     if (x % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:26:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   26 |     if (x % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:27:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   27 |     if (x % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:28:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   28 |     if (x % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (x % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (x % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (x % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (x % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (x % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (x % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (x % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp7lw_peqh.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |  "
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 1) return true;\n    if (x % n == 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc15iexfj: /tmp/tmpc15iexfj.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0 || n == 0)\n        return\
    \ false;\n    long res = 1;\n    while (n > 1) {\n        if (x % n == 0) {\n\
    \            res *= n;\n            x /= n;\n        }\n        n--;\n    }\n\
    \    return res == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzj54wr_0: /tmp/tmpzj54wr_0.cpp:22: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (x == 1)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg05173zz: /tmp/tmpg05173zz.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n\
    \    if (n % 3 == 0) return is_simple_power(x, n / 3);\n    if (n % 5 == 0) return\
    \ is_simple_power(x, n / 5);\n    if (n % 7 == 0) return is_simple_power(x, n\
    \ / 7);\n    if (n % 11 == 0) return is_simple_power(x, n / 11);\n    if (n %\
    \ 13 == 0) return is_simple_power(x, n / 13);\n    if (n % 17 == 0) return is_simple_power(x,\
    \ n / 17);\n    if (n % 19 == 0) return is_simple_power(x, n / 19);\n    if (n\
    \ % 23 == 0) return is_simple_power(x, n / 23);\n    if (n % 29 == 0) return is_simple_power(x,\
    \ n / 29);\n    if (n % 31 == 0) return is_simple_power(x, n / 31);\n    if (n\
    \ % 37 == 0) return is_simple_power(x, n / 37);\n    if (n % 41) == 0) return\
    \ is_simple_power(x, n / 41);\n    if (n % 43) == 0) return is_simple_power(x,\
    \ n / 43);\n    if (n % 47) == 0) return is_simple_power(x, n / 47);\n    if (n\
    \ % 51) == 0) return is_simple_power(x, n / 51);\n    if (n % 55) == 0) return\
    \ is_simple_power(x, n / 55);\n    if (n % 59) == 0) return is_simple_power(x,\
    \ n / 59);\n    if (n % 61) == 0) return is_simple_power(x, n / 61);\n    if (n\
    \ % 67) == 0) return is_simple_power(x, n / 67);\n    if (n % 71) == 0) return\
    \ is_simple_power(x, n / 71);\n    if (n % 73) == 0) return is_simple_power(x,\
    \ n / 73);\n    if (n % 79) == 0) return is_simple_power(x, n / 79);\n    if (n\
    \ % 83) == 0) return is_simple_power(x, n / 83);\n    if (n % 89) == 0) return\
    \ is_simple_power(x, n / 89);\n    if (n % 97) == 0) return is_simple_power(x,\
    \ n / 97);\n    if (n % 103) == 0) return is_simple_power(x, n / 103);\n    if\
    \ (n % 107) == 0) return is_simple_power(x, n / 107);\n    if (n % 111) == 0)\
    \ return is_simple_power(x, n / 111);\n    if (n % 117) == 0) return is_simple_power(x,\
    \ n / 117);\n    if (n % 121) == 0) return is_simple_power(x, n / 121);\n    if\
    \ (n % 127) == 0) return is_simple_power(x, n / 127);\n    if (n % 131) == 0)\
    \ return is_simple_power(x, n / 131);\n    if (n % 137) == 0) return is_simple_power(x,\
    \ n / 137);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpve7wr22g.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpve7wr22g.cpp:22:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   22 |     if (n % 41) == 0) return is_simple_power(x,\
    \ n / 41);\n      |                 ^~\n/tmp/tmpve7wr22g.cpp:23:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   23 |     if (n % 43) == 0)\
    \ return is_simple_power(x, n / 43);\n      |                 ^~\n/tmp/tmpve7wr22g.cpp:24:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   24 |    \
    \ if (n % 47) == 0) return is_simple_power(x, n / 47);\n      |              \
    \   ^~\n/tmp/tmpve7wr22g.cpp:25:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   25 |     if (n % 51) == 0) return is_simple_power(x,\
    \ n / 51);\n      |                 ^~\n/tmp/tmpve7wr22g.cpp:26:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   26 |     if (n % 55) == 0)\
    \ return is_simple_power(x, n / 55);\n      |                 ^~\n/tmp/tmpve7wr22g.cpp:27:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   27 |    \
    \ if (n % 59) == 0) return is_simple_power(x, n / 59);\n      |              \
    \   ^~\n/tmp/tmpve7wr22g.cpp:28:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   28 |     if (n % 61) == 0) return is_simple_power(x,\
    \ n / 61);\n      |                 ^~\n/tmp/tmpve7wr22g.cpp:29:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   29 |     if (n % 67) == 0)\
    \ return is_simple_power(x, n / 67);\n      |                 ^~\n/tmp/tmpve7wr22g.cpp:30:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   30 |    \
    \ if (n % 71) == 0) return is_simple_power(x, n / 71);\n      |              \
    \   ^~\n/tmp/tmpve7wr22g.cpp:31:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   31 |     if (n % 73) == 0) return is_simple_power(x,\
    \ n / 73);\n      |                 ^~\n/tmp/tmpve7wr22g.cpp:32:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   32 |     if (n % 79) == 0)\
    \ return is_simple_power(x, n / 79);\n      |                 ^~\n/tmp/tmpve7wr22g.cp"
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n\
    \    if (x % 2 == 0) return false;\n    if (x % 3 == 0) return false;\n    if\
    \ (x % 5 == 0) return false;\n    if (x % 7 == 0) return false;\n    if (x % 11\
    \ == 0) return false;\n    if (x % 13 == 0) return false;\n    if (x % 17 == 0)\
    \ return false;\n    if (x % 19 == 0) return false;\n    if (x % 23 == 0) return\
    \ false;\n    if (x % 29 == 0) return false;\n    if (x % 31 == 0) return false;\n\
    \    if (x % 37 == 0) return false;\n    if (x % 41) == 0) return false;\n   \
    \ if (x % 47 == 0) return false;\n    if (x % 53 == 0) return false;\n    if (x\
    \ % 59 == 0) return false;\n    if (x % 61 == 0) return false;\n    if (x % 67\
    \ == 0) return false;\n    if (x % 71 == 0) return false;\n    if (x % 73 == 0)\
    \ return false;\n    if (x % 79 == 0) return false;\n    if (x % 83 == 0) return\
    \ false;\n    if (x % 89 == 0) return false;\n    if (x % 97 == 0) return false;\n\
    \    if (x % 103 == 0) return false;\n    if (x % 107 == 0) return false;\n  \
    \  if (x % 111 == 0) return false;\n    if (x % 113 == 0) return false;\n    if\
    \ (x % 117 == 0) return false;\n    if (x % 121 == 0) return false;\n    if (x\
    \ % 123 == 0) return false;\n    if (x % 127 == 0) return false;\n    if (x %\
    \ 131 == 0) return false;\n    if (x % 133 == 0) return false;\n    if (x % 137\
    \ == 0) return false;\n    if (x % 141 == 0) return false;\n    if (x % 143 ==\
    \ 0) return false;\n    if (x % 147 == 0) return false;\n    if (x % 151 == 0)\
    \ return false;\n    if (x % 153 == 0) return false;\n    if (x % 157 == 0) return\
    \ false;\n    if (x % 161 == 0) return false;\n    if (x % 163 == 0) return false;\n\
    \    if (x % 167 == 0) return false;\n    if (x % 171 == 0) return false;\n  \
    \  if (x % 173 == 0) return false;\n    if (x % 177 == 0) return false;\n    if\
    \ (x % 181 == 0) return false;\n    if (x % 183 == 0) return false;\n    if (x\
    \ % 187 == 0) return false;\n    if (x % 191 == 0) return false;\n    if (x %\
    \ 193 == 0) return false;\n    if (x % 197 == 0) return false;\n    if (x % 201\
    \ == 0) return false;\n    if (x % 20\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnwur2vtm.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpnwur2vtm.cpp:24:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   24 |     if (x % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnwur2vtm.cpp:66:15: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   66 |     if (x % 20\n      |        ~ \
    \     ^\n      |               )\n   67 | }\n      | ~              \n/tmp/tmpnwur2vtm.cpp:67:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   67 | }\n \
    \     | ^\n/tmp/tmpnwur2vtm.cpp:67:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return x == 1;\n    if (x == 0)\n        return false;\n\
    \    if (x == 1)\n        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x, n / 3);\n  \
    \  if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n    if (n % 7 ==\
    \ 0)\n        return is_simple_power(x, n / 7);\n    if (n % 11 == 0)\n      \
    \  return is_simple_power(x, n / 11);\n    if (n % 13 == 0)\n        return is_simple_power(x,\
    \ n / 13);\n    if (n % 17 == 0)\n        return is_simple_power(x, n / 17);\n\
    \    if (n % 19 == 0)\n        return is_simple_power(x, n / 19);\n    if (n %\
    \ 23 == 0)\n        return is_simple_power(x, n / 23);\n    if (n % 29 == 0)\n\
    \        return is_simple_power(x, n / 29);\n    if (n % 31 == 0)\n        return\
    \ is_simple_power(x, n / 31);\n    if (n % 37 == 0)\n        return is_simple_power(x,\
    \ n / 37);\n    if (n % 41 == 0)\n        return is_simple_power(x, n / 41);\n\
    \    if (n % 43 == 0)\n        return is_simple_power(x, n / 43);\n    if (n %\
    \ 47 == 0)\n        return is_simple_power(x, n / 47);\n    if (n % 53 == 0)\n\
    \        return is_simple_power(x, n / 53);\n    if (n % 59 == 0)\n        return\
    \ is_simple_power(x, n / 59);\n    if (n % 61 == 0)\n        return is_simple_power(x,\
    \ n / 61);\n    if (n % 67 == 0)\n        return is_simple_power(x, n / 67);\n\
    \    if (n % 71 == 0)\n        return is_simple_power(x, n / 71);\n    if (n %\
    \ 73 == 0)\n        return is_simple_power(x, n / 73);\n    if (n % 79 == 0)\n\
    \        return is_simple_power(x, n / 79);\n    if (n % 83 == 0)\n        return\
    \ is_simple_power(x, n / 83);\n    if (n % 89 == 0)\n        return is_simple_power(x,\
    \ n / 89);\n    if (n % 97 == 0)\n        return is_simple_power(x, n / 97);\n\
    \    if (n % 101 == 0)\n        return is_simple_power(x, n / 101);\n    if (n\
    \ % 103 == 0)\n        return is_simple_power(x, n / 103);\n    if (n % 107 ==\
    \ 0)\n        return is_simple_power(x, n / 107);\n    if (n % 111 == 0)\n   \
    \     return is_simple_power(x, n / 111);\n    if (n % 113 == 0)\n        return\
    \ is_simple_power(x, n / 113);\n    if (n % 117 == 0)\n        return is_simple_power(x,\
    \ n / 117);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz1soishy: /tmp/tmpz1soishy.cpp:81: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (n == 1) return true;\n\
    \    if (n == -1) return false;\n    if (n == 2) return true;\n    if (n == -2)\
    \ return false;\n    if (n == 3) return true;\n    if (n == 4) return true;\n\
    \    if (n == 5) return true;\n    if (n == 6) return true;\n    if (n == 7) return\
    \ true;\n    if (n == 8) return true;\n    if (n == 9) return true;\n    if (n\
    \ == 10) return true;\n    if (n == 11) return true;\n    if (n == 12) return\
    \ true;\n    if (n == 13) return true;\n    if (n == 14) return true;\n    if\
    \ (n == 15) return true;\n    if (n == 16) return true;\n    if (n == 17) return\
    \ true;\n    if (n == 18) return true;\n    if (n == 19) return true;\n    if\
    \ (n == 20) return true;\n    if (n == 21) return true;\n    if (n == 22) return\
    \ true;\n    if (n == 23) return true;\n    if (n == 24) return true;\n    if\
    \ (n == 25) return true;\n    if (n == 26) return true;\n    if (n == 27) return\
    \ true;\n    if (n == 28) return true;\n    if (n == 29) return true;\n    if\
    \ (n == 30) return true;\n    if (n == 31) return true;\n    if (n == 32) return\
    \ true;\n    if (n == 33) return true;\n    if (n == 34) return true;\n    if\
    \ (n == 35) return true;\n    if (n == 36) return true;\n    if (n == 37) return\
    \ true;\n    if (n == 38) return true;\n    if (n == 39) return true;\n    if\
    \ (n == 40) return true;\n    if (n == 41) return true;\n    if (n == 42) return\
    \ true;\n    if (n == 43) return true;\n    if (n == 44) return true;\n    if\
    \ (n == 45) return true;\n    if (n == 46) return true;\n    if (n == 47) return\
    \ true;\n    if (n == 48) return true;\n    if (n == 49) return true;\n    if\
    \ (n == 51) return true;\n    if (n == 52) return true;\n    if (n == 53) return\
    \ true;\n    if (n == 54) return true;\n    if (n == 55) return true;\n    if\
    \ (n == 56) return true;\n    if (n == 57) return true;\n    if (n == 58) return\
    \ true;\n    if (n == 59) return true;\n    if (n == 61) return true;\n    if\
    \ (n == 62) return true;\n    if (n == 63) return true;\n    if (n == 64) return\
    \ true;\n    if (n == 65) return true;\n    if (n == 66) return true;\n    if\
    \ (n == 67) return true;\n    if (n == 68) return true;\n    if (n == 69) return\
    \ true;\n    if (n == 71) return true;\n    if (n == 72) return true;\n    if\
    \ (n == 73) return true;\n    if (n == 74) return true;\n    if (n == 75) return\
    \ true;\n    if (n == 76) return true;\n    if (n == 77) return true;\n    if\
    \ (n == 78) return true;\n    if (n == 79) return true;\n    if (n == 81) return\
    \ true;\n    if (n == 82) return true;\n    if (n == 83) return true;\n    if\
    \ (\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1a23jje.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpo1a23jje.cpp:93:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmpo1a23jje.cpp:92:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   92 |     if (\n\
    \      |        ~^\n      |         )\n   93 | }\n      | ~        \n/tmp/tmpo1a23jje.cpp:93:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   93 | }\n \
    \     | ^\n/tmp/tmpo1a23jje.cpp:93:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   93 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (x\
    \ == 0) return false;\n    if (n == 0) return false;\n    if (n == 1) return true;\n\
    \    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    if\
    \ (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if (n % 11\
    \ == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n % 17 == 0)\
    \ return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 == 0) return\
    \ false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return false;\n\
    \    if (n % 37 == 0) return false;\n    if (n % 41) == 0) return false;\n   \
    \ if (n % 47) == 0) return false;\n    if (n % 53) == 0) return false;\n    if\
    \ (n % 59) == 0) return false;\n    if (n % 61) == 0) return false;\n    if (n\
    \ % 67) == 0) return false;\n    if (n % 71) == 0) return false;\n    if (n %\
    \ 77) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n % 89)\
    \ == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n % 103) ==\
    \ 0) return false;\n    if (n % 109) == 0) return false;\n    if (n % 113) ==\
    \ 0) return false;\n    if (n % 127) == 0) return false;\n    if (n % 131) ==\
    \ 0) return false;\n    if (n % 137) == 0) return false;\n    if (n % 141) ==\
    \ 0) return false;\n    if (n % 147) == 0) return false;\n    if (n % 151) ==\
    \ 0) return false;\n    if (n % 157) == 0) return false;\n    if (n % 161) ==\
    \ 0) return false;\n    if (n % 167) == 0) return false;\n    if (n % 173) ==\
    \ 0) return false;\n    if (n % 179) == 0) return false;\n    if (n % 183) ==\
    \ 0) return false;\n    if (n % 189) == 0) return false;\n    if (n % 193) ==\
    \ 0) return false;\n    if (n % 197) == 0) return false;\n    if (n % 201) ==\
    \ 0) return false;\n    if (n % 207) == 0) return false;\n    if (n % 211) ==\
    \ 0) return false;\n    if (n % 217) == 0) return false;\n    if (n % 221) ==\
    \ 0) return false;\n    if (n % 227) == 0) return false;\n    if (n % 231) ==\
    \ 0) return false;\n    if (n % 237) == 0) return false;\n    if (n % 241) ==\
    \ 0) return false;\n    if (n % 247) == 0) return false;\n    if (n % 251) ==\
    \ 0) return false;\n    if (n % 257) == 0) return false;\n    if (n % 263) ==\
    \ 0) return false;\n    if (n % 269) == 0) return false;\n    if (n % 273) ==\
    \ 0) return false;\n    if (n % 279) == 0) return false;\n    if (n % 283) ==\
    \ 0) return false;\n    if (n % 289) == 0) return false;\n    if (n % 293) ==\
    \ 0) return false;\n    if (n % \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95z9v6zz.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp95z9v6zz.cpp:24:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   24 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:25:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   25 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:26:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   26 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:27:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   27 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:28:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   28 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 77) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmp95z9v6zz.cpp:35:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmp95z9v6zz.cpp:36:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |"
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (x <= 0)\n        return false;\n\
    \    if (x == 1)\n        return true;\n    if (x == 2)\n        return (x ==\
    \ 1);\n    if (x <= 1)\n        return false;\n    if (x == 2)\n        return\
    \ (x == 1);\n    if (x <= 2)\n        return false;\n    if (x == 4)\n       \
    \ return (x == 1);\n    if (x <= 4)\n        return false;\n    if (x == 8)\n\
    \        return (x == 1);\n    if (x <= 8)\n        return false;\n    if (x ==\
    \ 16)\n        return (x == 1);\n    if (x <= 16)\n        return false;\n   \
    \ if (x == 32)\n        return (x == 1);\n    if (x <= 32)\n        return false;\n\
    \    if (x == 64)\n        return (x == 1);\n    if (x <= 64)\n        return\
    \ false;\n    if (x == 128)\n        return (x == 1);\n    if (x <= 128)\n   \
    \     return false;\n    if (x == 256)\n        return (x == 1);\n    if (x <=\
    \ 256)\n        return false;\n    if (x == 512)\n        return (x == 1);\n \
    \   if (x <= 512)\n        return false;\n    if (x == 1024)\n        return (x\
    \ == 1);\n    if (x <= 1024)\n        return false;\n    if (x == 2048)\n    \
    \    return (x == 1);\n    if (x <= 2048)\n        return false;\n    if (x ==\
    \ 4096)\n        return (x == 1);\n    if (x <= 4096)\n        return false;\n\
    \    if (x == 8192)\n        return (x == 1);\n    if (x <= 8192)\n        return\
    \ false;\n    if (x == 16384)\n        return (x == 1);\n    if (x <= 16384)\n\
    \        return false;\n    if (x == 32768)\n        return (x == 1);\n    if\
    \ (x <= 32768)\n        return false;\n    if (x == 65536)\n        return (x\
    \ == 1);\n    if (x <= 65536)\n        return false;\n    if (x == 131072)\n \
    \       return (x == 1);\n    if (x <= 131072)\n        return false;\n    if\
    \ (x == 262144)\n        return (x == 1);\n    if (x <= 262144)\n        return\
    \ false;\n    if (x == 524288)\n        return (x == 1);\n    if (x <= 524288)\n\
    \        return false;\n    if (x == 1048576)\n        return (x == 1);\n    if\
    \ (x <= 1048576)\n        return false;\n    if (x == 2097152)\n        return\
    \ (x == 1);\n    if (x <= 2097152)\n        return false;\n    if (x == 4194304)\n\
    \        return (x == 1);\n    if (x <= 4194304)\n        return false;\n    if\
    \ (x == 8388608)\n        return (x == 1);\n    if (x <= 8388608)\n        return\
    \ false;\n    if (x == 16777216)\n        return (x == 1);\n    if (x <= 16777216)\n\
    \        return false;\n    if (x == 33554432)\n        return (x == 1);\n   \
    \ if (x <= 33554432)\n        return false;\n    if (x == 67108864)\n        return\
    \ (x == 1);\n    if (x <= 67108864)\n        return false;\n    if (x == 134217728)\n\
    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpexuk4h8y.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpexuk4h8y.cpp:126:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  126 | }\n      | ^\n/tmp/tmpexuk4h8y.cpp:126:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  126 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (x <= 0)\n        return false;\n\
    \    if (x == 1)\n        return true;\n    if (x % n == 0)\n        return is_simple_power(x,\
    \ n / n);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpebz7e_nm: /tmp/tmpebz7e_nm.cpp:22: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long long int result = 1;\n    for(int\
    \ i = 1; i<=n; i++) {\n        result = result * x;\n    }\n    return result\
    \ == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6wu9p80r: /tmp/tmp6wu9p80r.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x % n == 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp89kips1o: /tmp/tmp89kips1o.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return x == 1;\n    if (x == 1)\n        return false;\n\
    \    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfqmdvut3: /tmp/tmpfqmdvut3.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n\
    \    if (x % 2 == 0) return false;\n    if (x % 3 == 0) return false;\n    if\
    \ (x % 5 == 0) return false;\n    if (x % 7 == 0) return false;\n    if (x % 11\
    \ == 0) return false;\n    if (x % 13 == 0) return false;\n    if (x % 17 == 0)\
    \ return false;\n    if (x % 19 == 0) return false;\n    if (x % 23 == 0) return\
    \ false;\n    if (x % 29 == 0) return false;\n    if (x % 31 == 0) return false;\n\
    \    if (x % 37 == 0) return false;\n    if (x % 41) == 0) return false;\n   \
    \ if (x % 43) == 0) return false;\n    if (x % 47) == 0) return false;\n    if\
    \ (x % 53) == 0) return false;\n    if (x % 59) == 0) return false;\n    if (x\
    \ % 61) == 0) return false;\n    if (x % 67) == 0) return false;\n    if (x %\
    \ 71) == 0) return false;\n    if (x % 73) == 0) return false;\n    if (x % 79)\
    \ == 0) return false;\n    if (x % 83) == 0) return false;\n    if (x % 89) ==\
    \ 0) return false;\n    if (x % 97) == 0) return false;\n    if (x % 101) == 0)\
    \ return false;\n    if (x % 103) == 0) return false;\n    if (x % 107) == 0)\
    \ return false;\n    if (x % 109) == 0) return false;\n    if (x % 113) == 0)\
    \ return false;\n    if (x % 117) == 0) return false;\n    if (x % 121) == 0)\
    \ return false;\n    if (x % 123) == 0) return false;\n    if (x % 127) == 0)\
    \ return false;\n    if (x % 131) == 0) return false;\n    if (x % 137) == 0)\
    \ return false;\n    if (x % 141) == 0) return false;\n    if (x % 147) == 0)\
    \ return false;\n    if (x % 151) == 0) return false;\n    if (x % 157) == 0)\
    \ return false;\n    if (x % 161) == 0) return false;\n    if (x % 163) == 0)\
    \ return false;\n    if (x % 167) == 0) return false;\n    if (x % 171) == 0)\
    \ return false;\n    if (x % 177) == 0) return false;\n    if (x % 181) == 0)\
    \ return false;\n    if (x % 185) == 0) return false;\n    if (x % 189) == 0)\
    \ return false;\n    if (x % 193) == 0) return false;\n    if (x % 197) == 0)\
    \ return false;\n    if (x % 201) == 0) return false;\n    if (x % 205) == 0)\
    \ return false;\n    if (x % 209) == 0) return false;\n    if (x % 213) == 0)\
    \ return false;\n    if (\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjziwynw.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpdjziwynw.cpp:24:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   24 |     if (x % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:25:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   25 |     if (x % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:26:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   26 |     if (x % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:27:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   27 |     if (x % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:28:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   28 |     if (x % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (x % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (x % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (x % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (x % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (x % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (x % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (x % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpdjziwynw.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |  "
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long long int ans = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int remainder = 0;\n\
    \    long long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n\
    \    long long int count = 0;\n    long long int count2 = 0;\n    long long int\
    \ count3 = 0;\n    long long int count4 = 0;\n    long long int count5 = 0;\n\
    \    long long int count6 = 0;\n    long long int count7 = 0;\n    long long int\
    \ count8 = 0;\n    long long int count9 = 0;\n    long long int count10 = 0;\n\
    \    long long int count11 = 0;\n    long long int count12 = 0;\n    long long\
    \ int count13 = 0;\n    long long int count14 = 0;\n    long long int count15\
    \ = 0;\n    long long int count16 = 0;\n    long long int count17 = 0;\n    long\
    \ long int count18 = 0;\n    long long int count19 = 0;\n    long long int count20\
    \ = 0;\n    long long int count21 = 0;\n    long long int count22 = 0;\n    long\
    \ long int count23 = 0;\n    long long int count24 = 0;\n    long long int count25\
    \ = 0;\n    long long int count26 = 0;\n    long long int count27 = 0;\n    long\
    \ long int count28 = 0;\n    long long int count29 = 0;\n    long long int count30\
    \ = 0;\n    long long int count31 = 0;\n    long long int count32 = 0;\n    long\
    \ long int count33 = 0;\n    long long int count34 = 0;\n    long long int count35\
    \ = 0;\n    long long int count36 = 0;\n    long long int count37 = 0;\n    long\
    \ long int count38 = 0;\n    long long int count39 = 0;\n    long long int count40\
    \ = 0;\n    long long int count41 = 0;\n    long long int count42 = 0;\n    long\
    \ long int count43 = 0;\n    long long int count44 = 0;\n    long long int count45\
    \ = 0;\n    long long int count46 = 0;\n    long long int count47 = 0;\n    long\
    \ long int count48 = 0;\n    long long int count49 = 0;\n    long long int count50\
    \ = 0;\n    long long int count51 = 0;\n    long long int count52 = 0;\n    long\
    \ long int count53 = 0;\n    long long int count54 = 0;\n    long long int count55\
    \ = 0;\n    long long int count56 = 0;\n    long long int count57 = 0;\n    long\
    \ long int count58 = 0;\n    long long \n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj__kro6e.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpj__kro6e.cpp:74:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmpj__kro6e.cpp:74:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (x % n == 0)\n        return\
    \ is_simple_power(x, n / n);\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp73ir3tpl: /tmp/tmp73ir3tpl.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (n == 2)\n        return (x\
    \ == 1);\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n   \
    \ else\n        return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2n7d2pdl: /tmp/tmp2n7d2pdl.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (n == 2)\n        return (x\
    \ == 1);\n    if (n % 2 == 0)\n        return (x == 1);\n    if (n % 3 == 0)\n\
    \        return (x == 1);\n    if (n % 5 == 0)\n        return (x == 1);\n   \
    \ if (n % 7 == 0)\n        return (x == 1);\n    if (n % 11 == 0)\n        return\
    \ (x == 1);\n    if (n % 13 == 0)\n        return (x == 1);\n    if (n % 17 ==\
    \ 0)\n        return (x == 1);\n    if (n % 19 == 0)\n        return (x == 1);\n\
    \    if (n % 23 == 0)\n        return (x == 1);\n    if (n % 29 == 0)\n      \
    \  return (x == 1);\n    if (n % 31 == 0)\n        return (x == 1);\n    if (n\
    \ % 37 == 0)\n        return (x == 1);\n    if (n % 41 == 0)\n        return (x\
    \ == 1);\n    if (n % 43 == 0)\n        return (x == 1);\n    if (n % 47 == 0)\n\
    \        return (x == 1);\n    if (n % 53 == 0)\n        return (x == 1);\n  \
    \  if (n % 59 == 0)\n        return (x == 1);\n    if (n % 61 == 0)\n        return\
    \ (x == 1);\n    if (n % 67 == 0)\n        return (x == 1);\n    if (n % 71 ==\
    \ 0)\n        return (x == 1);\n    if (n % 73 == 0)\n        return (x == 1);\n\
    \    if (n % 79 == 0)\n        return (x == 1);\n    if (n % 83 == 0)\n      \
    \  return (x == 1);\n    if (n % 89 == 0)\n        return (x == 1);\n    if (n\
    \ % 97 == 0)\n        return (x == 1);\n    if (n % 101 == 0)\n        return\
    \ (x == 1);\n    if (n % 103 == 0)\n        return (x == 1);\n    if (n % 107\
    \ == 0)\n        return (x == 1);\n    if (n % 111 == 0)\n        return (x ==\
    \ 1);\n    if (n % 113 == 0)\n        return (x == 1);\n    if (n % 117 == 0)\n\
    \        return (x == 1);\n    if (n % 121 == 0)\n        return (x == 1);\n \
    \   if (n % 123 == 0)\n        return (x == 1);\n    if (n % 127 == 0)\n     \
    \   return (x == 1);\n    if (n % 131 == 0)\n        return (x == 1);\n    if\
    \ (n % 133 == 0)\n        return (x == 1);\n    if (n % 137 == 0)\n        return\
    \ (x == 1);\n    if (n % 141 == 0)\n        return (x == 1);\n    if (n % 143\
    \ == 0)\n        return (x == 1);\n    if (n % 147 == 0)\n        return (x ==\
    \ 1);\n    if (n % 151 == 0)\n        return (x == 1);\n    if (n % 153 == 0)\n\
    \        return (x == 1);\n    if (n % 157 == 0)\n        return (x == 1);\n \
    \   if (n % 161 == 0)\n        return (x == 1);\n    if (n % 163 == 0)\n\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsys8m869.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpsys8m869.cpp:104:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmpsys8m869.cpp:104:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  104 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x % n == 0) return is_simple_power(x / n, n);\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0_jbtavz: /tmp/tmp0_jbtavz.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n\
    \    if (x % 2 == 0) return false;\n    if (x % 3 == 0) return false;\n    if\
    \ (x % 5 == 0) return false;\n    if (x % 7 == 0) return false;\n    if (x % 11\
    \ == 0) return false;\n    if (x % 13 == 0) return false;\n    if (x % 17 == 0)\
    \ return false;\n    if (x % 19 == 0) return false;\n    if (x % 23 == 0) return\
    \ false;\n    if (x % 29 == 0) return false;\n    if (x % 31 == 0) return false;\n\
    \    if (x % 37 == 0) return false;\n    if (x % 41) == 0) return false;\n   \
    \ if (x % 43) == 0) return false;\n    if (x % 47) == 0) return false;\n    if\
    \ (x % 53) == 0) return false;\n    if (x % 59) == 0) return false;\n    if (x\
    \ % 61) == 0) return false;\n    if (x % 67) == 0) return false;\n    if (x %\
    \ 71) == 0) return false;\n    if (x % 73) == 0) return false;\n    if (x % 79)\
    \ == 0) return false;\n    if (x % 83) == 0) return false;\n    if (x % 89) ==\
    \ 0) return false;\n    if (x % 97) == 0) return false;\n    if (x % 103) == 0)\
    \ return false;\n    if (x % 107) == 0) return false;\n    if (x % 113) == 0)\
    \ return false;\n    if (x % 119) == 0) return false;\n    if (x % 125) == 0)\
    \ return false;\n    if (x % 131) == 0) return false;\n    if (x % 137) == 0)\
    \ return false;\n    if (x % 143) == 0) return false;\n    if (x % 149) == 0)\
    \ return false;\n    if (x % 153) == 0) return false;\n    if (x % 157) == 0)\
    \ return false;\n    if (x % 163) == 0) return false;\n    if (x % 167) == 0)\
    \ return false;\n    if (x % 173) == 0) return false;\n    if (x % 179) == 0)\
    \ return false;\n    if (x % 183) == 0) return false;\n    if (x % 189) == 0)\
    \ return false;\n    if (x % 193) == 0) return false;\n    if (x % 197) == 0)\
    \ return false;\n    if (x % 203) == 0) return false;\n    if (x % 209) == 0)\
    \ return false;\n    if (x % 213) == 0) return false;\n    if (x % 217) == 0)\
    \ return false;\n    if (x % 223) == 0) return false;\n    if (x % 229) == 0)\
    \ return false;\n    if (x % 233) == 0) return false;\n    if (x % 239) == 0)\
    \ return false;\n    if (x % 243) == 0) return false;\n    if (x % 247\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppz2m5ph9.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmppz2m5ph9.cpp:24:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   24 |     if (x % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:25:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   25 |     if (x % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:26:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   26 |     if (x % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:27:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   27 |     if (x % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:28:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   28 |     if (x % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (x % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (x % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (x % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (x % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (x % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (x % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (x % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmppz2m5ph9.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |  "
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (x == 1)\n        return false;\n\
    \    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj4_qnmpy: /tmp/tmpj4_qnmpy.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n == -1) return false;\n    if (n == -2) return\
    \ false;\n    if (n == -3) return false;\n    if (n == -4) return false;\n   \
    \ if (n == -5) return false;\n    if (n == -6) return false;\n    if (n == -7)\
    \ return false;\n    if (n == -8) return false;\n    if (n == -9) return false;\n\
    \    if (n == -10) return false;\n    if (n == -11) return false;\n    if (n ==\
    \ -12) return false;\n    if (n == -13) return false;\n    if (n == -14) return\
    \ false;\n    if (n == -15) return false;\n    if (n == -16) return false;\n \
    \   if (n == -17) return false;\n    if (n == -18) return false;\n    if (n ==\
    \ -19) return false;\n    if (n == -20) return false;\n    if (n == -21) return\
    \ false;\n    if (n == -22) return false;\n    if (n == -23) return false;\n \
    \   if (n == -24) return false;\n    if (n == -25) return false;\n    if (n ==\
    \ -26) return false;\n    if (n == -27) return false;\n    if (n == -28) return\
    \ false;\n    if (n == -29) return false;\n    if (n == -30) return false;\n \
    \   if (n == -31) return false;\n    if (n == -32) return false;\n    if (n ==\
    \ -33) return false;\n    if (n == -34) return false;\n    if (n == -35) return\
    \ false;\n    if (n == -36) return false;\n    if (n == -37) return false;\n \
    \   if (n == -38) return false;\n    if (n == -39) return false;\n    if (n ==\
    \ -40) return false;\n    if (n == -41) return false;\n    if (n == -42) return\
    \ false;\n    if (n == -43) return false;\n    if (n == -44) return false;\n \
    \   if (n == -45) return false;\n    if (n == -46) return false;\n    if (n ==\
    \ -47) return false;\n    if (n == -48) return false;\n    if (n == -49) return\
    \ false;\n    if (n == -50) return false;\n    if (n == -51) return false;\n \
    \   if (n == -52) return false;\n    if (n == -53) return false;\n    if (n ==\
    \ -54) return false;\n    if (n == -55) return false;\n    if (n == -56) return\
    \ false;\n    if (n == -57) return false;\n    if (n == -58) return false;\n \
    \   if (n == -59) return false;\n    if (n == -60) return false;\n    if (n ==\
    \ -61) return false;\n    if (n == -62) return false;\n    if (n == -63) return\
    \ false;\n    if (n == -64) return false;\n    if (n == -65) return false;\n \
    \   if (n == -66) return false;\n    if (n == -67) return false;\n    if (n ==\
    \ -68) return false;\n    if (n == -69) return false;\n    if (n == -70) return\
    \ false;\n    if (n == -71) return false;\n    if (n == -72) return false;\n \
    \   if (n == -73) return false;\n    if (n == -74) return false;\n    if (n ==\
    \ -75) return false;\n    if (n == -76) return false;\n    if (n == -77) return\
    \ false;\n    if (n == -78) return false;\n    if (n == -79) return false;\n \
    \   if (n == -80) return false;\n    if (n == -81) return false;\n    if (n ==\
    \ -82) return false;\n    if (n == -83) return false;\n    if (n == -84) return\
    \ false;\n    if (n == -85) return false;\n    if (n == -86) return false;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7sv611v7: /tmp/tmp7sv611v7.cpp:99: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long long ans = 1;\n    long long\
    \ i = 1;\n    while(ans*i <= x){\n        ans *= i;\n        i++;\n    }\n   \
    \ return ans == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppo8a5pxe: /tmp/tmppo8a5pxe.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0 || x == 1)\n        return\
    \ true;\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n\
    \        return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0 || n == 0)\n        return\
    \ false;\n    if (n == 1)\n        return true;\n    if (x & (n - 1))\n      \
    \  return false;\n    return is_simple_power(x >> 1, n - 1);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjsswvrqc: /tmp/tmpjsswvrqc.cpp:23: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n\
    \    if (n % 3 == 0) return is_simple_power(x, n / 3);\n    if (n % 5 == 0) return\
    \ is_simple_power(x, n / 5);\n    if (n % 7 == 0) return is_simple_power(x, n\
    \ / 7);\n    if (n % 11 == 0) return is_simple_power(x, n / 11);\n    if (n %\
    \ 13 == 0) return is_simple_power(x, n / 13);\n    if (n % 17 == 0) return is_simple_power(x,\
    \ n / 17);\n    if (n % 19 == 0) return is_simple_power(x, n / 19);\n    if (n\
    \ % 23 == 0) return is_simple_power(x, n / 23);\n    if (n % 29 == 0) return is_simple_power(x,\
    \ n / 29);\n    if (n % 37 == 0) return is_simple_power(x, n / 37);\n    if (n\
    \ % 41) == 0) return is_simple_power(x, n / 41);\n    if (n % 43) == 0) return\
    \ is_simple_power(x, n / 43);\n    if (n % 47) == 0) return is_simple_power(x,\
    \ n / 47);\n    if (n % 51) == 0) return is_simple_power(x, n / 51);\n    if (n\
    \ % 53) == 0) return is_simple_power(x, n / 53);\n    if (n % 57) == 0) return\
    \ is_simple_power(x, n / 57);\n    if (n % 61) == 0) return is_simple_power(x,\
    \ n / 61);\n    if (n % 63) == 0) return is_simple_power(x, n / 63);\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3fotz5g.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpf3fotz5g.cpp:21:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   21 |     if (n % 41) == 0) return is_simple_power(x,\
    \ n / 41);\n      |                 ^~\n/tmp/tmpf3fotz5g.cpp:22:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   22 |     if (n % 43) == 0)\
    \ return is_simple_power(x, n / 43);\n      |                 ^~\n/tmp/tmpf3fotz5g.cpp:23:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   23 |    \
    \ if (n % 47) == 0) return is_simple_power(x, n / 47);\n      |              \
    \   ^~\n/tmp/tmpf3fotz5g.cpp:24:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   24 |     if (n % 51) == 0) return is_simple_power(x,\
    \ n / 51);\n      |                 ^~\n/tmp/tmpf3fotz5g.cpp:25:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   25 |     if (n % 53) == 0)\
    \ return is_simple_power(x, n / 53);\n      |                 ^~\n/tmp/tmpf3fotz5g.cpp:26:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   26 |    \
    \ if (n % 57) == 0) return is_simple_power(x, n / 57);\n      |              \
    \   ^~\n/tmp/tmpf3fotz5g.cpp:27:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   27 |     if (n % 61) == 0) return is_simple_power(x,\
    \ n / 61);\n      |                 ^~\n/tmp/tmpf3fotz5g.cpp:28:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   28 |     if (n % 63) == 0)\
    \ return is_simple_power(x, n / 63);\n      |                 ^~\n"
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n\
    \    if (n % 3 == 0) return is_simple_power(x, n / 3);\n    if (n % 5 == 0) return\
    \ is_simple_power(x, n / 5);\n    if (n % 7 == 0) return is_simple_power(x, n\
    \ / 7);\n    if (n % 11 == 0) return is_simple_power(x, n / 11);\n    if (n %\
    \ 13 == 0) return is_simple_power(x, n / 13);\n    if (n % 17 == 0) return is_simple_power(x,\
    \ n / 17);\n    if (n % 19 == 0) return is_simple_power(x, n / 19);\n    if (n\
    \ % 23 == 0) return is_simple_power(x, n / 23);\n    if (n % 29 == 0) return is_simple_power(x,\
    \ n / 29);\n    if (n % 31 == 0) return is_simple_power(x, n / 31);\n    if (n\
    \ % 37 == 0) return is_simple_power(x, n / 37);\n    if (n % 41) == 0) return\
    \ is_simple_power(x, n / 41);\n    if (n % 43) == 0) return is_simple_power(x,\
    \ n / 43);\n    if (n % 47) == 0) return is_simple_power(x, n / 47);\n    if (n\
    \ % 53) == 0) return is_simple_power(x, n / 53);\n    if (n % 59) == 0) return\
    \ is_simple_power(x, n / 59);\n    if (n % 61) == 0) return is_simple_power(x,\
    \ n / 61);\n    if (n % 67) == 0) return is_simple_power(x, n / 67);\n    if (n\
    \ % 71) == 0) return is_simple_power(x, n / 71);\n    if (n % 73) == 0) return\
    \ is_simple_power(x, n / 73);\n    if (n % 79) == 0) return is_simple_power(x,\
    \ n / 79);\n    if (n % 83) == 0) return is_simple_power(x, n / 83);\n    if (n\
    \ % 89) == 0) return is_simple_power(x, n / 89);\n    if (n % 97) == 0) return\
    \ is_simple_power(x, n / 97);\n    if (n % 103) == 0) return is_simple_power(x,\
    \ n / 103);\n    if (n % 107) == 0) return is_simple_power(x, n / 107);\n    if\
    \ (n % 111) == 0) return is_simple_power(x, n / 111);\n    if (n % 117) == 0)\
    \ return is_simple_power(x, n / 117);\n    if (n % 121) == 0) return is_simple_power(x,\
    \ n / 121);\n    if (n % 127) == 0) return is_simple_power(x, n / 127);\n    if\
    \ (n % 131) == 0) return is_simple_power(x, n / 131);\n    if (n % 137) == 0)\
    \ return is_simple_power(x, n / 137);\n    if (n % 141) == 0) return is_simple_power(x,\
    \ n / 141);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8ug0gln.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpn8ug0gln.cpp:22:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   22 |     if (n % 41) == 0) return is_simple_power(x,\
    \ n / 41);\n      |                 ^~\n/tmp/tmpn8ug0gln.cpp:23:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   23 |     if (n % 43) == 0)\
    \ return is_simple_power(x, n / 43);\n      |                 ^~\n/tmp/tmpn8ug0gln.cpp:24:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   24 |    \
    \ if (n % 47) == 0) return is_simple_power(x, n / 47);\n      |              \
    \   ^~\n/tmp/tmpn8ug0gln.cpp:25:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   25 |     if (n % 53) == 0) return is_simple_power(x,\
    \ n / 53);\n      |                 ^~\n/tmp/tmpn8ug0gln.cpp:26:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   26 |     if (n % 59) == 0)\
    \ return is_simple_power(x, n / 59);\n      |                 ^~\n/tmp/tmpn8ug0gln.cpp:27:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   27 |    \
    \ if (n % 61) == 0) return is_simple_power(x, n / 61);\n      |              \
    \   ^~\n/tmp/tmpn8ug0gln.cpp:28:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   28 |     if (n % 67) == 0) return is_simple_power(x,\
    \ n / 67);\n      |                 ^~\n/tmp/tmpn8ug0gln.cpp:29:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   29 |     if (n % 71) == 0)\
    \ return is_simple_power(x, n / 71);\n      |                 ^~\n/tmp/tmpn8ug0gln.cpp:30:17:\
    \ error: expected primary-expression before \u2018==\u2019 token\n   30 |    \
    \ if (n % 73) == 0) return is_simple_power(x, n / 73);\n      |              \
    \   ^~\n/tmp/tmpn8ug0gln.cpp:31:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   31 |     if (n % 79) == 0) return is_simple_power(x,\
    \ n / 79);\n      |                 ^~\n/tmp/tmpn8ug0gln.cpp:32:17: error: expected\
    \ primary-expression before \u2018==\u2019 token\n   32 |     if (n % 83) == 0)\
    \ return is_simple_power(x, n / 83);\n      |                 ^~\n/tmp/tmpn8ug0gln.cp"
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n\
    \    if (n % 3 == 0) return is_simple_power(x, n / 3);\n    if (n % 5 == 0) return\
    \ is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8mav64u5: /tmp/tmp8mav64u5.cpp:17: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
