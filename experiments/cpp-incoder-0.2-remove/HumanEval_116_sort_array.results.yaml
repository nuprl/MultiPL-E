language: cpp
name: HumanEval_116_sort_array
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for(long long int i : arr){\n\
    \        sum += i;\n        count += 1;\n    }\n    long long int temp = sum;\n\
    \    long long int temp2 = count;\n    long long int temp3 = sum;\n    long long\
    \ int temp4 = sum;\n    long long int temp5 = sum;\n    long long int temp6 =\
    \ sum;\n    long long int temp7 = sum;\n    long long int temp8 = sum;\n    long\
    \ long int temp9 = sum;\n    long long int temp10 = sum;\n    long long int temp11\
    \ = sum;\n    long long int temp12 = sum;\n    long long int temp13 = sum;\n \
    \   long long int temp14 = sum;\n    long long int temp15 = sum;\n    long long\
    \ int temp16 = sum;\n    long long int temp17 = sum;\n    long long int temp18\
    \ = sum;\n    long long int temp19 = sum;\n    long long int temp20 = sum;\n \
    \   long long int temp21 = sum;\n    long long int temp22 = sum;\n    long long\
    \ int temp23 = sum;\n    long long int temp24 = sum;\n    long long int temp25\
    \ = sum;\n    long long int temp26 = sum;\n    long long int temp27 = sum;\n \
    \   long long int temp28 = sum;\n    long long int temp29 = sum;\n    long long\
    \ int temp30 = sum;\n    long long int temp31 = sum;\n    long long int temp32\
    \ = sum;\n    long long int temp33 = sum;\n    long long int temp34 = sum;\n \
    \   long long int temp35 = sum;\n    long long int temp36 = sum;\n    long long\
    \ int temp37 = sum;\n    long long int temp38 = sum;\n    long long int temp39\
    \ = sum;\n    long long int temp40 = sum;\n    long long int temp41 = sum;\n \
    \   long long int temp42 = sum;\n    long long int temp43 = sum;\n    long long\
    \ int temp44 = sum;\n    long long int temp45 = sum;\n    long long int temp46\
    \ = sum;\n    long long int temp47 = sum;\n    long long int temp48 = sum;\n \
    \   long long int temp49 = \n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwll7nt94.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwll7nt94.cpp:64:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmpwll7nt94.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for(long long int i : arr){\n        sum += i;\n  \
    \      if(sum > max){\n            max = sum;\n        }\n        if(sum < min){\n\
    \            min = sum;\n        }\n        if(sum == max){\n            count++;\n\
    \        }\n    }\n    std::vector<long> ans;\n    for(long long int i : arr){\n\
    \        if(count == 0){\n            ans.push_back(i);\n        }\n        else\
    \ if(count > 0){\n            long long int temp = count * i;\n            if(temp\
    \ > max){\n                ans.push_back(temp);\n            }\n            else\
    \ if(temp < min){\n                ans.push_back(min);\n            }\n      \
    \      else if(temp == max){\n                ans.push_back(temp);\n         \
    \   }\n        }\n        else{\n            ans.push_back(i);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpzih_i91f: /tmp/tmpzih_i91f.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        ans += arr[i] * (long long) pow(10, (long long) sum);\n    }\n  \
    \  ans /= arr.size();\n    long long ans2 = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        ans2 += arr[i] * (long long) pow(10, (long long) sum - i);\n\
    \    }\n    ans2 /= arr.size();\n    std::vector<long> ans3{ans};\n    std::vector<long>\
    \ ans3{ans2};\n    std::sort(ans3.begin(), ans3.end());\n    return ans3; // return\
    \ sorted array\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpse111fuy.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpse111fuy.cpp:24:23: error: redeclaration of \u2018std::vector<long\
    \ int> ans3\u2019\n   24 |     std::vector<long> ans3{ans2};\n      |        \
    \               ^~~~\n/tmp/tmpse111fuy.cpp:23:23: note: \u2018std::vector<long\
    \ int> ans3\u2019 previously declared here\n   23 |     std::vector<long> ans3{ans};\n\
    \      |                       ^~~~\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    for (long long int i : arr) {\n        sum += i;\n    }\n\
    \    long long int ones = 0;\n    long long int zeros = 0;\n    for (long long\
    \ int i : arr) {\n        if (i == 1) {\n            ones++;\n        } else {\n\
    \            zeros++;\n        }\n    }\n    std::vector<long> ans;\n    long\
    \ long int max = 0;\n    for (long long int i : arr) {\n        if (i == 1) {\n\
    \            ans.push_back(i);\n            if (sum > max) {\n               \
    \ max = sum;\n            }\n            sum -= i;\n        } else {\n       \
    \     ans.push_back(-i);\n            if (sum > max) {\n                max =\
    \ sum;\n            }\n            sum -= i;\n        }\n    }\n    if (sum >\
    \ max) {\n        ans.push_back(sum);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp7gdrwgev: /tmp/tmp7gdrwgev.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long ans = 0;\n    for (long long\
    \ i : arr) {\n        ans += i;\n    }\n    long long ones = __builtin_popcount(ans);\n\
    \    long long dec = __builtin_popcount(ans - ones);\n    std::vector<long> res;\n\
    \    for (long long i : arr) {\n        long long bin = __builtin_popcount(i);\n\
    \        long long decbin = __builtin_popcount(i - bin);\n        if (decbin >\
    \ dec) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbjzwzh0e: /tmp/tmpbjzwzh0e.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    std::vector<long>\
    \ sorted_arr;\n    long ones = 0;\n    long dec = 0;\n    for (long i : arr) {\n\
    \        ones += i;\n        dec += i;\n    }\n    sorted_arr.push_back(ones);\n\
    \    sorted_arr.push_back(dec);\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n\
    \    return sorted_arr;\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp7wssbd0w: /tmp/tmp7wssbd0w.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> ret(arr.size());\n\
    \    long long ones = 0;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  ones += arr[i];\n        ret[i] = ones;\n    }\n    std::sort(ret.begin(),\
    \ ret.end(), [](long a, long b) { return a < b; });\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpncexi326: /tmp/tmpncexi326.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr;\n   \
    \ long ones = 0;\n    for (long i : arr) {\n        ones += i;\n    }\n    long\
    \ base = 1;\n    while (ones > 0) {\n        long temp = ones;\n        ones =\
    \ 0;\n        for (long i : arr) {\n            ones += i;\n            if (ones\
    \ == temp) {\n                sorted_arr.push_back(base + i);\n            }\n\
    \        }\n        base += 1;\n    }\n    return sorted_arr;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104460
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    long long int temp = 0;\n    long long int sum2\
    \ = 0;\n    long long int count2 = 0;\n    long long int max2 = 0;\n    long long\
    \ int min2 = 0;\n    long long int temp2 = 0;\n    long long int sum3 = 0;\n \
    \   long long int count3 = 0;\n    long long int max3 = 0;\n    long long int\
    \ min3 = 0;\n    long long int temp3 = 0;\n    long long int sum4 = 0;\n    long\
    \ long int count4 = 0;\n    long long int max4 = 0;\n    long long int min4 =\
    \ 0;\n    long long int temp4 = 0;\n    long long int sum5 = 0;\n    long long\
    \ int count5 = 0;\n    long long int max5 = 0;\n    long long int min5 = 0;\n\
    \    long long int temp5 = 0;\n    long long int sum6 = 0;\n    long long int\
    \ count6 = 0;\n    long long int max6 = 0;\n    long long int min6 = 0;\n    long\
    \ long int temp6 = 0;\n    long long int sum7 = 0;\n    long long int count7 =\
    \ 0;\n    long long int max7 = 0;\n    long long int min7 = 0;\n    long long\
    \ int temp7 = 0;\n    long long int sum8 = 0;\n    long long int count8 = 0;\n\
    \    long long int max8 = 0;\n    long long int min8 = 0;\n    long long int temp8\
    \ = 0;\n    long long int sum9 = 0;\n    long long int count9 = 0;\n    long long\
    \ int max9 = 0;\n    long long int min9 = 0;\n    long long int temp9 = 0;\n \
    \   long long int sum10 = 0;\n    long long int count10 = 0;\n    long long int\
    \ max10 = 0;\n    long long int min10 = 0;\n    long long int temp10 = 0;\n  \
    \  long long int sum11 = 0;\n    long long int count11 = 0;\n    long long int\
    \ max11 = 0;\n    long long int min11 = 0;\n    long long int temp11 = 0;\n  \
    \  long long int sum12 = 0;\n    long long int count12 = 0;\n    long long int\
    \ max12 = 0;\n    long long int min12 = 0;\n    long long int temp12 = 0;\n  \
    \  long long int sum13 = 0;\n    long long int count13 = 0;\n    long long int\
    \ max13 = 0;\n    long long int min13 = 0;\n    long long int temp13 = 0;\n  \
    \  long long int sum14 = 0;\n    long long int count\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcc1gu3cn.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpcc1gu3cn.cpp:76:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmpcc1gu3cn.cpp:76:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i : arr) {\n        sum += i;\n        count += 1;\n    }\n    for (long long\
    \ i : arr) {\n        ans += (sum - i) * count;\n    }\n    ans /= arr.size();\n\
    \    std::vector<long> ans_arr;\n    for (long long i : arr) {\n        ans_arr.push_back(ans);\n\
    \    }\n    return ans_arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpl3exz_ni: /tmp/tmpl3exz_ni.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> ans;\n    long temp;\n\
    \    long cnt = 0;\n    for (long i : arr) {\n        temp = i;\n        while\
    \ ((temp & 1) == 0) {\n            cnt += 1;\n            temp >>= 1;\n      \
    \  }\n        ans.push_back(cnt);\n        cnt += 1;\n    }\n    ans.push_back(cnt);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpj02r1jsz: /tmp/tmpj02r1jsz.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    for (long long int i : arr) {\n\
    \        sum += i;\n        if (sum > max) {\n            max = sum;\n       \
    \ }\n    }\n    std::vector<long> ans;\n    for (long long int i : arr) {\n  \
    \      long long int count = 0;\n        while (i > 0) {\n            count +=\
    \ i & 1;\n            i >>= 1;\n        }\n        ans.push_back(count + max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbii7uvbh: /tmp/tmpbii7uvbh.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr(arr.size());\n\
    \    long max_ones = 0;\n    for (long i : arr) {\n        max_ones = std::max(max_ones,\
    \ i);\n    }\n    for (long i : arr) {\n        sorted_arr[i] = max_ones - i;\n\
    \    }\n    return sorted_arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpfwtcqs5_: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> res(arr.size());\n\
    \    for (long i : arr) {\n        res[i >> 5] |= 1 << (i & 31);\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](long a, long b) { return a < b; });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp3wust7dg: /tmp/tmp3wust7dg.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += __builtin_popcount(i);\n    }\n    std::vector<long>\
    \ res(count);\n    for (long long int i : arr) {\n        long long int bin =\
    \ __builtin_popcount(i);\n        res[bin] += i;\n    }\n    for (long long int\
    \ i : res) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n\
    \    return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpqdzi_ovj: /tmp/tmpqdzi_ovj.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: "0 7 8 0 0 0 0 \n"
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long cnt = 0;\n    for(long long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            cnt++;\n        }\n        else{\n    \
    \        ans += (cnt*pow(2,i));\n            cnt = 0;\n        }\n    }\n    ans\
    \ += (cnt*pow(2,i));\n    ans /= arr.size();\n    std::vector<long> ans_vec;\n\
    \    for(long long i = 0; i < arr.size(); i++){\n        if(arr[i] == 1){\n  \
    \          ans_vec.push_back(ans);\n        }\n        else{\n            ans_vec.push_back(arr[i]);\n\
    \        }\n    }\n    return ans_vec;\n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdksge68r.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdksge68r.cpp:20:23: error: \u2018i\u2019 was not declared\
    \ in this scope\n   20 |     ans += (cnt*pow(2,i));\n      |                 \
    \      ^\n"
  stdout: ''
  timestamp: 1660104454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max_ones = 0;\n    long long int min_ones =\
    \ 0;\n    long long int max_dec = 0;\n    long long int min_dec = 0;\n    long\
    \ long int max_dec2 = 0;\n    long long int min_dec2 = 0;\n    for (long long\
    \ int i : arr) {\n        sum += i;\n        if (i == 1) {\n            max_ones\
    \ = i;\n            min_ones = i;\n        } else {\n            max_ones = std::max(max_ones,\
    \ i);\n            min_ones = std::min(min_ones, i);\n        }\n        max_dec\
    \ = std::max(max_dec, sum);\n        min_dec = std::min(min_dec, sum);\n     \
    \   max_dec2 = std::max(max_dec2, i);\n        min_dec2 = std::min(min_dec2, i);\n\
    \    }\n    std::vector<long> ans;\n    ans.push_back(max_ones);\n    ans.push_back(min_ones);\n\
    \    ans.push_back(max_dec);\n    ans.push_back(min_dec);\n    ans.push_back(max_dec2);\n\
    \    ans.push_back(min_dec2);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp2fafcesv: /tmp/tmp2fafcesv.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long count = 0;\n    for(long long\
    \ i : arr){\n        sum += i;\n        count += 1;\n    }\n    for(long long\
    \ i : arr){\n        ans += (sum - i) * count;\n        count -= 1;\n    }\n \
    \   for(long long i : arr){\n        ans -= i;\n    }\n    ans /= arr.size();\n\
    \    return std::vector<long>(ans, ans + arr.size());\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpkierwhl3: /tmp/tmpkierwhl3.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += 1;\n    }\n    std::vector<long> ans;\n\
    \    long long int temp = 0;\n    for (long long int i : arr) {\n        if (count\
    \ == 1) {\n            ans.push_back(sum);\n            sum = 0;\n           \
    \ count = 0;\n        }\n        temp = sum;\n        sum += i;\n        count\
    \ -= 1;\n        if (sum == temp) {\n            ans.push_back(sum);\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp9_n8lt04: /tmp/tmp9_n8lt04.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for(long long int i : arr){\n        sum += i;\n  \
    \      if(sum > max){\n            max = sum;\n        }\n        if(sum < min){\n\
    \            min = sum;\n        }\n        count += 1;\n    }\n    std::vector<long>\
    \ ans;\n    for(long long int i : arr){\n        long long int temp = i;\n   \
    \     long long int count = 0;\n        while(temp){\n            temp = temp/2;\n\
    \            count += 1;\n        }\n        if(count == 1){\n            ans.push_back(i);\n\
    \        }\n        else{\n            long long int sum = 0;\n            long\
    \ long int max = 0;\n            long long int min = 0;\n            long long\
    \ int count = 0;\n            for(long long int i : arr){\n                sum\
    \ += i;\n                if(sum > max){\n                    max = sum;\n    \
    \            }\n                if(sum < min){\n                    min = sum;\n\
    \                }\n                count += 1;\n            }\n            if(count\
    \ > 1){\n                long long int temp = i;\n                long long int\
    \ count = 0;\n                while(temp){\n                    temp = temp/2;\n\
    \                    count += 1;\n                }\n                if(count\
    \ == 1){\n                    ans.push_back(i);\n                }\n         \
    \       else{\n                    long long int sum = 0;\n                  \
    \  long long int max = 0;\n                    long long int min = 0;\n      \
    \              long long int count = 0;\n                    for(long long int\
    \ i : arr){\n                        sum += i;\n                        if(sum\
    \ > max){\n                            max = sum;\n                        }\n\
    \                        if(sum < min){\n                            min = sum;\n\
    \                        }\n                        count += 1;\n            \
    \        }\n                    if(count > 1){\n                        long long\
    \ int temp = i;\n                        long long int count = 0;\n          \
    \              while(temp){\n                            temp = temp/2;\n    \
    \                        count += 1;\n                        }\n            \
    \            if(count == 1){\n                            ans.push_back(i);\n\
    \                        }\n                        else{\n                  \
    \          long long int sum = 0;\n                            long long int max\
    \ = 0;\n                            long long int min = 0;\n                 \
    \           long long int count = 0;\n                            for(long long\
    \ int i : arr){\n                                sum += i;\n                 \
    \               if(sum > max){\n                                    max = sum;\n\
    \                                }\n                                if(sum < min){\n\
    \                                    min = sum;\n                            \
    \    }\n                                count += 1;\n                        \
    \    }\n                            if(count > 1){\n                         \
    \       long long int temp = i;\n                                long long int\
    \ count = 0;\n                                while(temp){\n                 \
    \                   temp = temp/2;\n                                    count\
    \ \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qwbl3p4.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5qwbl3p4.cpp:104:42: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n  104 |                                     count\n   \
    \   |                                          ^\n      |                    \
    \                      ;\n  105 | }\n      | ~                               \
    \          \n/tmp/tmp5qwbl3p4.cpp:106:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  106 | int main() {\n      |     \
    \       ^\n/tmp/tmp5qwbl3p4.cpp:116:1: error: expected \u2018}\u2019 at end of\
    \ input\n  116 | }\n      | ^\n/tmp/tmp5qwbl3p4.cpp:99:42: note: to match this\
    \ \u2018{\u2019\n   99 |                             if(count > 1){\n      | \
    \                                         ^\n/tmp/tmp5qwbl3p4.cpp:116:1: error:\
    \ expected \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmp5qwbl3p4.cpp:84:29:\
    \ note: to match this \u2018{\u2019\n   84 |                         else{\n \
    \     |                             ^\n/tmp/tmp5qwbl3p4.cpp:116:1: error: expected\
    \ \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmp5qwbl3p4.cpp:74:34:\
    \ note: to match this \u2018{\u2019\n   74 |                     if(count > 1){\n\
    \      |                                  ^\n/tmp/tmp5qwbl3p4.cpp:116:1: error:\
    \ expected \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmp5qwbl3p4.cpp:59:21:\
    \ note: to match this \u2018{\u2019\n   59 |                 else{\n      |  \
    \                   ^\n/tmp/tmp5qwbl3p4.cpp:116:1: error: expected \u2018}\u2019\
    \ at end of input\n  116 | }\n      | ^\n/tmp/tmp5qwbl3p4.cpp:49:26: note: to\
    \ match this \u2018{\u2019\n   49 |             if(count > 1){\n      |      \
    \                    ^\n/tmp/tmp5qwbl3p4.cpp:116:1: error: expected \u2018}\u2019\
    \ at end of input\n  116 | }\n      | ^\n/tmp/tmp5qwbl3p4.cpp:34:13: note: to\
    \ match this \u2018{\u2019\n   34 |         else{\n      |             ^\n/tmp/tmp5qwbl3p4.cpp:116:1:\
    \ error: expected \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmp5qwbl3p4.cpp:24:31:\
    \ note: to match this \u2018{\u2019\n   24 |     for(long long int i : arr){\n\
    \      |                              "
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> res(arr.size());\n\
    \    for (long i : arr) {\n        res[i >> 6] ^= 1 << (i & 63);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpu48dbigl: /tmp/tmpu48dbigl.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans += arr[i];\n\
    \    }\n    long long ans1 = 0;\n    for (long long i = 0; i < arr.size(); i++)\
    \ {\n        ans1 += arr[i];\n    }\n    long long ans2 = 0;\n    for (long long\
    \ i = 0; i < arr.size(); i++) {\n        ans2 += arr[i];\n    }\n    long long\
    \ ans3 = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans3 +=\
    \ arr[i];\n    }\n    long long ans4 = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        ans4 += arr[i];\n    }\n    long long ans5 = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        ans5 += arr[i];\n    }\n    long\
    \ long ans6 = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans6\
    \ += arr[i];\n    }\n    long long ans7 = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        ans7 += arr[i];\n    }\n    long long ans8 = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        ans8 += arr[i];\n    }\n    long\
    \ long ans9 = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans9\
    \ += arr[i];\n    }\n    long long ans10 = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        ans10 += arr[i];\n    }\n    long long ans11 = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        ans11 += arr[i];\n    }\n    long\
    \ long ans12 = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans12\
    \ += arr[i];\n    }\n    long long ans13 = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        ans13 += arr[i];\n    }\n    long long ans14 = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        ans14 += arr[i];\n    }\n    long\
    \ long ans15 = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans15\
    \ += arr[i];\n    }\n    long long ans16 = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        ans16 += arr[i];\n    }\n    long long ans17 = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        ans17 += arr[i];\n    }\n    long\
    \ long ans18 = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans18\
    \ += arr[i];\n    }\n    long long ans19 = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        ans19 += arr[i];\n    }\n    long long ans20 = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        ans20 += arr[i];\n    }\n    long\
    \ long ans21 = 0;\n\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpyes4iclp: /tmp/tmpyes4iclp.cpp:98: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104456
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long int sum = 0;\n    std::vector<long>\
    \ sorted_arr;\n    for (long long int i : arr) {\n        sum += i;\n    }\n \
    \   long long int max_ones = sum;\n    long long int min_ones = sum;\n    for\
    \ (long long int i : arr) {\n        if (max_ones < i) {\n            max_ones\
    \ = i;\n        }\n        if (min_ones > i) {\n            min_ones = i;\n  \
    \      }\n    }\n    long long int max_ones_power = max_ones;\n    long long int\
    \ min_ones_power = min_ones;\n    while (max_ones_power > 1) {\n        max_ones_power\
    \ *= 2;\n    }\n    while (min_ones_power < 2) {\n        min_ones_power /= 2;\n\
    \    }\n    long long int max_ones_power_2 = max_ones_power * max_ones_power;\n\
    \    long long int min_ones_power_2 = min_ones_power * min_ones_power;\n    long\
    \ long int max_ones_power_3 = max_ones_power * max_ones_power * max_ones_power;\n\
    \    long long int min_ones_power_3 = min_ones_power * min_ones_power * min_ones_power;\n\
    \    long long int max_ones_power_4 = max_ones_power * max_ones_power * max_ones_power\
    \ * max_ones_power;\n    long long int min_ones_power_4 = min_ones_power * min_ones_power\
    \ * min_ones_power * min_ones_power;\n    long long int max_ones_power_5 = max_ones_power\
    \ * max_ones_power * max_ones_power * max_ones_power * max_ones_power;\n    long\
    \ long int min_ones_power_5 = min_ones_power * min_ones_power * min_ones_power\
    \ * min_ones_power * min_ones_power;\n    long long int max_ones_power_6 = max_ones_power\
    \ * max_ones_power * max_ones_power * max_ones_power * max_ones_power * max_ones_power;\n\
    \    long long int min_ones_power_6 = min_ones_power * min_ones_power * min_ones_power\
    \ * min_ones_power * min_ones_power * min_ones_power;\n    long long int max_ones_power_7\
    \ = max_ones_power * max_ones_power * max_ones_power * max_ones_power * max_ones_power\
    \ * max_ones_power * max_ones_power;\n    long long int min_ones_power_7 = min_ones_power\
    \ * min_ones_power * min_\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp745qoh64.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp745qoh64.cpp:42:72: error: \u2018min_\u2019 was not declared\
    \ in this scope\n   42 |     long long int min_ones_power_7 = min_ones_power *\
    \ min_ones_power * min_\n      |                                             \
    \                           ^~~~\n/tmp/tmp745qoh64.cpp:43:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   43 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    for(long long int i : arr){\n        sum += i;\n\
    \        count += 1;\n        if(count > max){\n            max = count;\n   \
    \     }\n        if(count < min){\n            min = count;\n        }\n    }\n\
    \    std::vector<long> ans;\n    for(long long int i : arr){\n        if(sum -\
    \ i == 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long\
    \ int i : arr){\n        if(sum - i == 1){\n            ans.push_back(i);\n  \
    \      }\n    }\n    for(long long int i : arr){\n        if(sum - i == 2){\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long int i : arr){\n\
    \        if(sum - i == 3){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long int i : arr){\n        if(sum - i == 4){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long int i : arr){\n        if(sum - i == 5){\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long int i : arr){\n\
    \        if(sum - i == 6){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long int i : arr){\n        if(sum - i == 7){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long int i : arr){\n        if(sum - i == 8){\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long int i : arr){\n\
    \        if(sum - i == 9){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long int i : arr){\n        if(sum - i == 10){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long int i : arr){\n        if(sum - i == 11){\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long int i : arr){\n\
    \        if(sum - i == 12){\n            ans.push_back(i);\n        }\n    }\n\
    \    for(long long int i : arr){\n        if(sum - i == 13){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long int i : arr){\n        if(sum - i == 14){\n\
    \            ans.push_back(i);\n        }\n    }\n    for(long long int i : arr){\n\
    \        if(sum - i == 15){\n            ans.push_back(i);\n\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxn72bws2.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxn72bws2.cpp:104:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  104 | int main() {\n      |     \
    \       ^\n/tmp/tmpxn72bws2.cpp:114:1: error: expected \u2018}\u2019 at end of\
    \ input\n  114 | }\n      | ^\n/tmp/tmpxn72bws2.cpp:99:31: note: to match this\
    \ \u2018{\u2019\n   99 |     for(long long int i : arr){\n      |            \
    \                   ^\n/tmp/tmpxn72bws2.cpp:114:1: error: expected \u2018}\u2019\
    \ at end of input\n  114 | }\n      | ^\n/tmp/tmpxn72bws2.cpp:7:53: note: to match\
    \ this \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long> arr)\
    \ {\n      |                                                     ^\n/tmp/tmpxn72bws2.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  114 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max_ones = 0;\n    long long int max_decimal\
    \ = 0;\n    long long int max_decimal2 = 0;\n    long long int max_decimal3 =\
    \ 0;\n    long long int max_decimal4 = 0;\n    long long int max_decimal5 = 0;\n\
    \    long long int max_decimal6 = 0;\n    long long int max_decimal7 = 0;\n  \
    \  long long int max_decimal8 = 0;\n    long long int max_decimal9 = 0;\n    long\
    \ long int max_decimal10 = 0;\n    long long int max_decimal11 = 0;\n    long\
    \ long int max_decimal12 = 0;\n    long long int max_decimal13 = 0;\n    long\
    \ long int max_decimal14 = 0;\n    long long int max_decimal15 = 0;\n    long\
    \ long int max_decimal16 = 0;\n    long long int max_decimal17 = 0;\n    long\
    \ long int max_decimal18 = 0;\n    long long int max_decimal19 = 0;\n    long\
    \ long int max_decimal20 = 0;\n    long long int max_decimal21 = 0;\n    long\
    \ long int max_decimal22 = 0;\n    long long int max_decimal23 = 0;\n    long\
    \ long int max_decimal24 = 0;\n    long long int max_decimal25 = 0;\n    long\
    \ long int max_decimal26 = 0;\n    long long int max_decimal27 = 0;\n    long\
    \ long int max_decimal28 = 0;\n    long long int max_decimal29 = 0;\n    long\
    \ long int max_decimal30 = 0;\n    long long int max_decimal31 = 0;\n    long\
    \ long int max_decimal32 = 0;\n    long long int max_decimal33 = 0;\n    long\
    \ long int max_decimal34 = 0;\n    long long int max_decimal35 = 0;\n    long\
    \ long int max_decimal36 = 0;\n    long long int max_decimal37 = 0;\n    long\
    \ long int max_decimal38 = 0;\n    long long int max_decimal39 = 0;\n    long\
    \ long int max_decimal40 = 0;\n    long long int max_decimal41 = 0;\n    long\
    \ long int max_decimal42 = 0;\n    long long int max_decimal43 = 0;\n    long\
    \ long int max_decimal44 = 0;\n    long long int max_decimal45 = 0;\n    long\
    \ long int max_decimal46 = 0;\n    long long int max_decimal47 = 0;\n    long\
    \ long int max_decimal48 = 0;\n    long long int max_decimal49 = 0;\n    long\
    \ long int max_decimal50 = 0;\n    long long int max_decimal51 = 0;\n    long\
    \ long int max_decimal52 = 0;\n    long long int max_decimal53 = 0;\n    long\
    \ long int max_decimal54 = 0;\n    long long int max_decimal55 = 0;\n    long\
    \ \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph6b8fp79.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph6b8fp79.cpp:67:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmph6b8fp79.cpp:67:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i : arr) {\n        sum += i;\n        count += 1;\n    }\n    long long max\
    \ = (long long) count;\n    long long min = (long long) sum;\n    long long mid\
    \ = (long long) sum / 2;\n    for (long long i : arr) {\n        if (i == 1) {\n\
    \            ans += 1;\n        }\n    }\n    long long ans = ans / 2;\n    long\
    \ long ans = ans * (long long) max;\n    long long ans = ans * (long long) min;\n\
    \    long long ans = ans * (long long) mid;\n    return std::vector<long>(ans);\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkb53dah.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvkb53dah.cpp:24:15: error: redeclaration of \u2018long\
    \ long int ans\u2019\n   24 |     long long ans = ans / 2;\n      |          \
    \     ^~~\n/tmp/tmpvkb53dah.cpp:9:15: note: \u2018long long int ans\u2019 previously\
    \ declared here\n    9 |     long long ans = 0;\n      |               ^~~\n/tmp/tmpvkb53dah.cpp:25:15:\
    \ error: redeclaration of \u2018long long int ans\u2019\n   25 |     long long\
    \ ans = ans * (long long) max;\n      |               ^~~\n/tmp/tmpvkb53dah.cpp:9:15:\
    \ note: \u2018long long int ans\u2019 previously declared here\n    9 |     long\
    \ long ans = 0;\n      |               ^~~\n/tmp/tmpvkb53dah.cpp:26:15: error:\
    \ redeclaration of \u2018long long int ans\u2019\n   26 |     long long ans =\
    \ ans * (long long) min;\n      |               ^~~\n/tmp/tmpvkb53dah.cpp:9:15:\
    \ note: \u2018long long int ans\u2019 previously declared here\n    9 |     long\
    \ long ans = 0;\n      |               ^~~\n/tmp/tmpvkb53dah.cpp:27:15: error:\
    \ redeclaration of \u2018long long int ans\u2019\n   27 |     long long ans =\
    \ ans * (long long) mid;\n      |               ^~~\n/tmp/tmpvkb53dah.cpp:9:15:\
    \ note: \u2018long long int ans\u2019 previously declared here\n    9 |     long\
    \ long ans = 0;\n      |               ^~~\n"
  stdout: ''
  timestamp: 1660104454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += 1;\n    }\n    std::vector<long> result;\n\
    \    for (long long int i : arr) {\n        if (count == 1) {\n            result.push_back(i);\n\
    \        }\n        else if (sum == i) {\n            result.push_back(sum);\n\
    \            sum = 0;\n            count--;\n        }\n        else {\n     \
    \       sum += i;\n            count--;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmphed49_ix: /tmp/tmphed49_ix.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += 1;\n    }\n    std::vector<long> res;\n\
    \    for (long long int i : arr) {\n        if (count == 1) {\n            res.push_back(i);\n\
    \            count = 0;\n        } else {\n            if (sum < i) {\n      \
    \          res.push_back(i);\n                sum = 0;\n                count\
    \ = 0;\n            } else {\n                sum += i;\n                count\
    \ -= 1;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp7hvcrzi5: /tmp/tmp7hvcrzi5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr(arr.size());\n\
    \    for (long i : arr) {\n        sorted_arr[i] = i;\n    }\n    long ones =\
    \ 0;\n    for (long i : arr) {\n        ones += i;\n    }\n    long decimal =\
    \ 0;\n    for (long i : arr) {\n        decimal += i;\n    }\n    long temp =\
    \ 0;\n    for (long i : arr) {\n        temp += i;\n    }\n    long temp2 = 0;\n\
    \    for (long i : arr) {\n        temp2 += i;\n    }\n    long temp3 = 0;\n \
    \   for (long i : arr) {\n        temp3 += i;\n    }\n    long temp4 = 0;\n  \
    \  for (long i : arr) {\n        temp4 += i;\n    }\n    long temp5 = 0;\n   \
    \ for (long i : arr) {\n        temp5 += i;\n    }\n    long temp6 = 0;\n    for\
    \ (long i : arr) {\n        temp6 += i;\n    }\n    long temp7 = 0;\n    for (long\
    \ i : arr) {\n        temp7 += i;\n    }\n    long temp8 = 0;\n    for (long i\
    \ : arr) {\n        temp8 += i;\n    }\n    long temp9 = 0;\n    for (long i :\
    \ arr) {\n        temp9 += i;\n    }\n    long temp10 = 0;\n    for (long i :\
    \ arr) {\n        temp10 += i;\n    }\n    long temp11 = 0;\n    for (long i :\
    \ arr) {\n        temp11 += i;\n    }\n    long temp12 = 0;\n    for (long i :\
    \ arr) {\n        temp12 += i;\n    }\n    long temp13 = 0;\n    for (long i :\
    \ arr) {\n        temp13 += i;\n    }\n    long temp14 = 0;\n    for (long i :\
    \ arr) {\n        temp14 += i;\n    }\n    long temp15 = 0;\n    for (long i :\
    \ arr) {\n        temp15 += i;\n    }\n    long temp16 = 0;\n    for (long i :\
    \ arr) {\n        temp16 += i;\n    }\n    long temp17 = 0;\n    for (long i :\
    \ arr) {\n        temp17 += i;\n    }\n    long temp18 = 0;\n    for (long i :\
    \ arr) {\n        temp18 += i;\n    }\n    long temp19 = 0;\n    for (long i :\
    \ arr) {\n        temp19 += i;\n    }\n    long temp20 = 0;\n    for (long i :\
    \ arr) {\n        temp20 += i;\n    }\n    long temp21 = 0;\n    for (long i :\
    \ arr) {\n        temp21 += i;\n    }\n    long temp22 = 0;\n    for (long i :\
    \ arr) {\n        temp22 += i;\n    }\n    long temp23 = 0;\n    for (long i :\
    \ arr) {\n        temp\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb770seog.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb770seog.cpp:110:13: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n  110 |         temp\n      |             ^\n      |  \
    \           ;\n  111 | }\n      | ~            \n/tmp/tmpb770seog.cpp:112:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  112 | int main() {\n      |            ^\n/tmp/tmpb770seog.cpp:122:1: error:\
    \ expected \u2018}\u2019 at end of input\n  122 | }\n      | ^\n/tmp/tmpb770seog.cpp:7:53:\
    \ note: to match this \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long>\
    \ arr) {\n      |                                                     ^\n/tmp/tmpb770seog.cpp:122:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  122 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> ans;\n    long long\
    \ ones = 0;\n    for (long i : arr) {\n        ones += i;\n    }\n    long long\
    \ dec = ones;\n    for (long i : arr) {\n        ans.push_back((ones - i) / dec);\n\
    \        dec -= i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp7giwhx2n: /tmp/tmp7giwhx2n.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    long long int mid = 0;\n    long long int temp =\
    \ 0;\n    long long int sum2 = 0;\n    long long int count2 = 0;\n    long long\
    \ int max2 = 0;\n    long long int min2 = 0;\n    long long int mid2 = 0;\n  \
    \  long long int temp2 = 0;\n    long long int sum3 = 0;\n    long long int count3\
    \ = 0;\n    long long int max3 = 0;\n    long long int min3 = 0;\n    long long\
    \ int mid3 = 0;\n    long long int temp3 = 0;\n    long long int sum4 = 0;\n \
    \   long long int count4 = 0;\n    long long int max4 = 0;\n    long long int\
    \ min4 = 0;\n    long long int mid4 = 0;\n    long long int temp4 = 0;\n    long\
    \ long int sum5 = 0;\n    long long int count5 = 0;\n    long long int max5 =\
    \ 0;\n    long long int min5 = 0;\n    long long int mid5 = 0;\n    long long\
    \ int temp5 = 0;\n    long long int sum6 = 0;\n    long long int count6 = 0;\n\
    \    long long int max6 = 0;\n    long long int min6 = 0;\n    long long int mid6\
    \ = 0;\n    long long int temp6 = 0;\n    long long int sum7 = 0;\n    long long\
    \ int count7 = 0;\n    long long int max7 = 0;\n    long long int min7 = 0;\n\
    \    long long int mid7 = 0;\n    long long int temp7 = 0;\n    long long int\
    \ sum8 = 0;\n    long long int count8 = 0;\n    long long int max8 = 0;\n    long\
    \ long int min8 = 0;\n    long long int mid8 = 0;\n    long long int temp8 = 0;\n\
    \    long long int sum9 = 0;\n    long long int count9 = 0;\n    long long int\
    \ max9 = 0;\n    long long int min9 = 0;\n    long long int mid9 = 0;\n    long\
    \ long int temp9 = 0;\n    long long int sum10 = 0;\n    long long int count10\
    \ = 0;\n    long long int max10 = 0;\n    long long int min10 = 0;\n    long long\
    \ int mid10 = 0;\n    long long int temp10 = 0;\n    long long int sum11 = 0;\n\
    \    long long int count11 = 0;\n    long long int max11 = 0;\n    long long int\
    \ min11 = 0;\n    long long int mid11 = 0;\n    long long int temp11 = 0;\n  \
    \  long long int sum12 = 0;\n    long \n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprlwtwhwr.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprlwtwhwr.cpp:77:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmprlwtwhwr.cpp:77:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr;\n   \
    \ long max_val = 0, min_val = INT_MAX;\n    for (long i : arr) {\n        max_val\
    \ = max(max_val, i);\n        min_val = min(min_val, i);\n    }\n    for (long\
    \ i : arr) {\n        if (i == 0) {\n            sorted_arr.push_back(0);\n  \
    \      } else {\n            sorted_arr.push_back(max_val - i);\n        }\n \
    \   }\n    for (long i : arr) {\n        if (i == 0) {\n            sorted_arr.push_back(0);\n\
    \        } else {\n            sorted_arr.push_back(i + min_val);\n        }\n\
    \    }\n    return sorted_arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzy7tuxr.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmzy7tuxr.cpp:11:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   11 |         max_val =\
    \ max(max_val, i);\n      |                   ^~~\n      |                   std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpmzy7tuxr.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n/tmp/tmpmzy7tuxr.cpp:12:19: error: \u2018min\u2019\
    \ was not declared in this scope; did you mean \u2018std::min\u2019?\n   12 |\
    \         min_val = min(min_val, i);\n      |                   ^~~\n      | \
    \                  std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmzy7tuxr.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    long long int temp = 0;\n    for (long long int\
    \ i : arr) {\n        sum += i;\n        count += 1;\n        if (i > max) {\n\
    \            max = i;\n        }\n        if (i < min) {\n            min = i;\n\
    \        }\n    }\n    long long int ans = sum;\n    for (long long int i : arr)\
    \ {\n        temp = sum - i;\n        if (temp > 0) {\n            ans += temp;\n\
    \        }\n    }\n    ans /= count;\n    std::vector<long> ans_list;\n    for\
    \ (long long int i : arr) {\n        if (i == 1) {\n            ans_list.push_back(i);\n\
    \        }\n    }\n    for (long long int i : ans_list) {\n        ans_list.push_back(i);\n\
    \    }\n    ans_list.push_back(max);\n    ans_list.push_back(min);\n    return\
    \ ans_list;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpc79z_brq: /tmp/tmpc79z_brq.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : arr) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    std::vector<long> ans;\n    long long\
    \ max = 0;\n    for (long long i : arr) {\n        if (i == 1) {\n           \
    \ ans.push_back(i);\n        }\n        else {\n            if (sum > max) {\n\
    \                max = sum;\n                ans.clear();\n                ans.push_back(i);\n\
    \            }\n            else {\n                ans.push_back(i);\n      \
    \      }\n        }\n        sum -= i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpkhz2al3r: /tmp/tmpkhz2al3r.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    long long int temp = 0;\n    long long int temp2\
    \ = 0;\n    long long int temp3 = 0;\n    long long int temp4 = 0;\n    long long\
    \ int temp5 = 0;\n    long long int temp6 = 0;\n    long long int temp7 = 0;\n\
    \    long long int temp8 = 0;\n    long long int temp9 = 0;\n    long long int\
    \ temp10 = 0;\n    long long int temp11 = 0;\n    long long int temp12 = 0;\n\
    \    long long int temp13 = 0;\n    long long int temp14 = 0;\n    long long int\
    \ temp15 = 0;\n    long long int temp16 = 0;\n    long long int temp17 = 0;\n\
    \    long long int temp18 = 0;\n    long long int temp19 = 0;\n    long long int\
    \ temp20 = 0;\n    long long int temp21 = 0;\n    long long int temp22 = 0;\n\
    \    long long int temp23 = 0;\n    long long int temp24 = 0;\n    long long int\
    \ temp25 = 0;\n    long long int temp26 = 0;\n    long long int temp27 = 0;\n\
    \    long long int temp28 = 0;\n    long long int temp29 = 0;\n    long long int\
    \ temp30 = 0;\n    long long int temp31 = 0;\n    long long int temp32 = 0;\n\
    \    long long int temp33 = 0;\n    long long int temp34 = 0;\n    long long int\
    \ temp35 = 0;\n    long long int temp36 = 0;\n    long long int temp37 = 0;\n\
    \    long long int temp38 = 0;\n    long long int temp39 = 0;\n    long long int\
    \ temp40 = 0;\n    long long int temp41 = 0;\n    long long int temp42 = 0;\n\
    \    long long int temp43 = 0;\n    long long int temp44 = 0;\n    long long int\
    \ temp45 = 0;\n    long long int temp46 = 0;\n    long long int temp47 = 0;\n\
    \    long long int temp48 = 0;\n    long long int temp49 = 0;\n    long long int\
    \ temp50 = 0;\n    long long int temp51 = 0;\n    long long int temp52 = 0;\n\
    \    long long int temp53 = 0;\n    long long int temp54 = 0;\n    long long int\
    \ temp55 = 0;\n    long long int temp56 = 0;\n    long long int temp57 = 0;\n\
    \    long long int temp58 = 0;\n    long long int temp59 = 0;\n    long long int\
    \ temp60 = 0;\n    long long int temp\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1f5wkgp_.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1f5wkgp_.cpp:74:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp1f5wkgp_.cpp:74:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for(long long int i : arr){\n        sum += i;\n  \
    \      if(sum > max){\n            max = sum;\n        }\n        if(sum < min){\n\
    \            min = sum;\n        }\n        count += 1;\n    }\n    std::vector<long>\
    \ ans;\n    for(long long int i : arr){\n        if(count == 1){\n           \
    \ ans.push_back(i);\n        }\n        else{\n            long long int temp\
    \ = count * i;\n            if(temp > max){\n                max = temp;\n   \
    \         }\n            if(temp < min){\n                min = temp;\n      \
    \      }\n        }\n    }\n    for(long long int i : ans){\n        long long\
    \ int temp = count * i;\n        if(temp > max){\n            max = temp;\n  \
    \      }\n        if(temp < min){\n            min = temp;\n        }\n    }\n\
    \    for(long long int i : arr){\n        long long int temp = count * i;\n  \
    \      if(temp > max){\n            max = temp;\n        }\n        if(temp <\
    \ min){\n            min = temp;\n        }\n    }\n    for(long long int i :\
    \ arr){\n        long long int temp = count * i;\n        if(temp > max){\n  \
    \          max = temp;\n        }\n        if(temp < min){\n            min =\
    \ temp;\n        }\n    }\n    for(long long int i : arr){\n        long long\
    \ int temp = count * i;\n        if(temp > max){\n            max = temp;\n  \
    \      }\n        if(temp < min){\n            min = temp;\n        }\n    }\n\
    \    for(long long int i : arr){\n        long long int temp = count * i;\n  \
    \      if(temp > max){\n            max = temp;\n        }\n        if(temp <\
    \ min){\n            min = temp;\n        }\n    }\n    for(long long int i :\
    \ arr){\n        long long int temp = count * i;\n        if(temp > max){\n  \
    \          max = temp;\n        }\n        if(temp < min){\n            min =\
    \ temp;\n        }\n    }\n    for(long long int i : arr){\n        long long\
    \ int temp = count * i;\n        if(temp > max){\n            max = temp;\n  \
    \      }\n        if(temp < min){\n            min = temp;\n        }\n    }\n\
    \    for(long long int i : arr){\n        long long int temp = count * i;\n  \
    \      if(temp > max){\n            max = temp;\n        }\n\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmo4x04lz.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmo4x04lz.cpp:108:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  108 | int main() {\n      |     \
    \       ^\n/tmp/tmpmo4x04lz.cpp:118:1: error: expected \u2018}\u2019 at end of\
    \ input\n  118 | }\n      | ^\n/tmp/tmpmo4x04lz.cpp:7:53: note: to match this\
    \ \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long> arr) {\n\
    \      |                                                     ^\n/tmp/tmpmo4x04lz.cpp:118:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  118 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    for (long long int i : arr) {\n\
    \        sum += i;\n        if (sum > max) {\n            max = sum;\n       \
    \ }\n    }\n    std::vector<long> ans;\n    for (long long int i : arr) {\n  \
    \      if (sum - i == max) {\n            ans.push_back(i);\n        }\n    }\n\
    \    long long int sum2 = 0;\n    for (long long int i : ans) {\n        sum2\
    \ += i;\n    }\n    long long int max2 = 0;\n    for (long long int i : ans) {\n\
    \        if (sum2 - i == max2) {\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpvskc207w: /tmp/tmpvskc207w.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : arr) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long ones = sum / count;\n    long\
    \ long decimal = sum % count;\n    std::vector<long> result;\n    for (long long\
    \ i : arr) {\n        if (i == ones) {\n            result.push_back(i);\n   \
    \     }\n    }\n    for (long long i : arr) {\n        if (i != ones && i != decimal)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpdvey28b0: /tmp/tmpdvey28b0.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        count += 1;\n    }\n  \
    \  std::vector<long> ans;\n    ans.reserve(arr.size());\n    for (long long int\
    \ i : arr) {\n        long long int bin = i;\n        while (bin) {\n        \
    \    long long int rem = bin % 10;\n            bin = bin / 10;\n            ans.push_back(rem);\n\
    \        }\n    }\n    long long int sum2 = 0;\n    for (long long int i : ans)\
    \ {\n        sum2 += i;\n    }\n    long long int sum3 = 0;\n    for (long long\
    \ int i : ans) {\n        sum3 += i;\n    }\n    long long int sum4 = 0;\n   \
    \ for (long long int i : ans) {\n        sum4 += i;\n    }\n    long long int\
    \ sum5 = 0;\n    for (long long int i : ans) {\n        sum5 += i;\n    }\n  \
    \  long long int sum6 = 0;\n    for (long long int i : ans) {\n        sum6 +=\
    \ i;\n    }\n    long long int sum7 = 0;\n    for (long long int i : ans) {\n\
    \        sum7 += i;\n    }\n    long long int sum8 = 0;\n    for (long long int\
    \ i : ans) {\n        sum8 += i;\n    }\n    long long int sum9 = 0;\n    for\
    \ (long long int i : ans) {\n        sum9 += i;\n    }\n    long long int sum10\
    \ = 0;\n    for (long long int i : ans) {\n        sum10 += i;\n    }\n    long\
    \ long int sum11 = 0;\n    for (long long int i : ans) {\n        sum11 += i;\n\
    \    }\n    long long int sum12 = 0;\n    for (long long int i : ans) {\n    \
    \    sum12 += i;\n    }\n    long long int sum13 = 0;\n    for (long long int\
    \ i : ans) {\n        sum13 += i;\n    }\n    long long int sum14 = 0;\n    for\
    \ (long long int i : ans) {\n        sum14 += i;\n    }\n    long long int sum15\
    \ = 0;\n    for (long long int i : ans) {\n        sum15 += i;\n    }\n    long\
    \ long int sum16 = 0;\n    for (long long int i : ans) {\n        sum16 += i;\n\
    \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqv87b74.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwqv87b74.cpp:94:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   94 | int main() {\n      |     \
    \       ^\n/tmp/tmpwqv87b74.cpp:104:1: error: expected \u2018}\u2019 at end of\
    \ input\n  104 | }\n      | ^\n/tmp/tmpwqv87b74.cpp:7:53: note: to match this\
    \ \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long> arr) {\n\
    \      |                                                     ^\n/tmp/tmpwqv87b74.cpp:104:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  104 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ for(long long int i : arr){\n        sum += i;\n        count += 1;\n      \
    \  if(count > max){\n            max = count;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for(long long int i : arr){\n        long long int temp = sum - i;\n\
    \        if(temp > 0){\n            ans.push_back(temp);\n        }\n    }\n \
    \   for(long long int i : arr){\n        long long int temp = sum - i;\n     \
    \   if(temp < 0){\n            ans.push_back(temp);\n        }\n    }\n    for(long\
    \ long int i : arr){\n        long long int temp = sum - i;\n        if(temp ==\
    \ 0){\n            ans.push_back(i);\n        }\n    }\n    for(long long int\
    \ i : arr){\n        long long int temp = sum - i;\n        if(temp == 1){\n \
    \           ans.push_back(i);\n        }\n    }\n    for(long long int i : arr){\n\
    \        long long int temp = sum - i;\n        if(temp > 1){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long int i : arr){\n        long long int temp\
    \ = sum - i;\n        if(temp < 1){\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long int i : arr){\n        long long int temp = sum - i;\n\
    \        if(temp == 2){\n            ans.push_back(i);\n        }\n    }\n   \
    \ for(long long int i : arr){\n        long long int temp = sum - i;\n       \
    \ if(temp == 3){\n            ans.push_back(i);\n        }\n    }\n    for(long\
    \ long int i : arr){\n        long long int temp = sum - i;\n        if(temp >\
    \ 3){\n            ans.push_back(i);\n        }\n    }\n    for(long long int\
    \ i : arr){\n        long long int temp = sum - i;\n        if(temp < 3){\n  \
    \          ans.push_back(i);\n        }\n    }\n    for(long long int i : arr){\n\
    \        long long int temp = sum - i;\n        if(temp == 4){\n            ans.push_back(i);\n\
    \        }\n    }\n    for(long long int i : arr){\n        long long int temp\
    \ = sum - i;\n        if(temp == 5){\n            ans.push_back(i);\n        }\n\
    \    }\n    for(long long int i : arr){\n        long long int temp = sum - i;\n\
    \        if(temp > 5){\n\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa69vibe4.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa69vibe4.cpp:97:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   97 | int main() {\n      |     \
    \       ^\n/tmp/tmpa69vibe4.cpp:107:1: error: expected \u2018}\u2019 at end of\
    \ input\n  107 | }\n      | ^\n/tmp/tmpa69vibe4.cpp:92:31: note: to match this\
    \ \u2018{\u2019\n   92 |     for(long long int i : arr){\n      |            \
    \                   ^\n/tmp/tmpa69vibe4.cpp:107:1: error: expected \u2018}\u2019\
    \ at end of input\n  107 | }\n      | ^\n/tmp/tmpa69vibe4.cpp:7:53: note: to match\
    \ this \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long> arr)\
    \ {\n      |                                                     ^\n/tmp/tmpa69vibe4.cpp:107:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  107 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr;\n   \
    \ long max_ones = 0;\n    for (long i : arr) {\n        max_ones = max(max_ones,\
    \ i);\n    }\n    for (long i : arr) {\n        if (i == max_ones) {\n       \
    \     sorted_arr.push_back(i);\n        } else {\n            long temp = max_ones;\n\
    \            max_ones = i;\n            sorted_arr.push_back(temp);\n        }\n\
    \    }\n    return sorted_arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88psq8ig.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp88psq8ig.cpp:11:20: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   11 |         max_ones\
    \ = max(max_ones, i);\n      |                    ^~~\n      |               \
    \     std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n    \
    \             from /tmp/tmp88psq8ig.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        count += 1;\n    }\n  \
    \  std::vector<long> ans;\n    for (long long int i : arr) {\n        if (count\
    \ == 0) {\n            ans.push_back(i);\n        }\n        if (count == 1) {\n\
    \            ans.push_back(i);\n        }\n        if (count == 2) {\n       \
    \     ans.push_back(i);\n        }\n        if (count == 3) {\n            ans.push_back(i);\n\
    \        }\n        if (count == 4) {\n            ans.push_back(i);\n       \
    \ }\n        if (count == 5) {\n            ans.push_back(i);\n        }\n   \
    \     if (count == 6) {\n            ans.push_back(i);\n        }\n        if\
    \ (count == 7) {\n            ans.push_back(i);\n        }\n        if (count\
    \ == 8) {\n            ans.push_back(i);\n        }\n        if (count == 9) {\n\
    \            ans.push_back(i);\n        }\n        if (count == 10) {\n      \
    \      ans.push_back(i);\n        }\n        if (count == 11) {\n            ans.push_back(i);\n\
    \        }\n        if (count == 12) {\n            ans.push_back(i);\n      \
    \  }\n        if (count == 13) {\n            ans.push_back(i);\n        }\n \
    \       if (count == 14) {\n            ans.push_back(i);\n        }\n       \
    \ if (count == 15) {\n            ans.push_back(i);\n        }\n        if (count\
    \ == 16) {\n            ans.push_back(i);\n        }\n        if (count == 17)\
    \ {\n            ans.push_back(i);\n        }\n        if (count == 18) {\n  \
    \          ans.push_back(i);\n        }\n        if (count == 19) {\n        \
    \    ans.push_back(i);\n        }\n        if (count == 20) {\n            ans.push_back(i);\n\
    \        }\n        if (count == 21) {\n            ans.push_back(i);\n      \
    \  }\n        if (count == 22) {\n            ans.push_back(i);\n        }\n \
    \       if (count == 23) {\n            ans.push_back(i);\n        }\n       \
    \ if (count == 24) {\n            ans.push_back(i);\n        }\n        if (count\
    \ == 25) {\n            ans.push_back(i);\n        }\n        if (count == 26)\
    \ {\n            ans.push_back(i);\n        }\n        if (count == 27) {\n  \
    \          ans.push_back(i);\n        }\n        if (count == 28) {\n        \
    \    ans.push_back(i);\n        }\n        if (count == 29) {\n            ans.push_back(i);\n\
    \        }\n        if (count == 30) {\n            ans.push_back(i);\n      \
    \  }\n        if (count == 31) {\n            ans.push_back(i);\n        }\n \
    \       if (count == 32) {\n            an\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ow69kyn.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_ow69kyn.cpp:122:13: error: \u2018an\u2019 was not declared\
    \ in this scope; did you mean \u2018ans\u2019?\n  122 |             an\n     \
    \ |             ^~\n      |             ans\n/tmp/tmp_ow69kyn.cpp:124:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  124\
    \ | int main() {\n      |            ^\n/tmp/tmp_ow69kyn.cpp:134:1: error: expected\
    \ \u2018}\u2019 at end of input\n  134 | }\n      | ^\n/tmp/tmp_ow69kyn.cpp:24:33:\
    \ note: to match this \u2018{\u2019\n   24 |     for (long long int i : arr) {\n\
    \      |                                 ^\n/tmp/tmp_ow69kyn.cpp:134:1: error:\
    \ expected \u2018}\u2019 at end of input\n  134 | }\n      | ^\n/tmp/tmp_ow69kyn.cpp:7:53:\
    \ note: to match this \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long>\
    \ arr) {\n      |                                                     ^\n/tmp/tmp_ow69kyn.cpp:134:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  134 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr(arr.size());\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        sorted_arr[i] = 0;\n   \
    \ }\n    for (long i = 0; i < arr.size(); i++) {\n        sorted_arr[i] = arr[i];\n\
    \    }\n    long ones = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    ones += arr[i];\n    }\n    long max_ones = ones;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        ones = arr[i] - ones;\n        if (ones > max_ones)\
    \ {\n            max_ones = ones;\n        }\n    }\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        sorted_arr[i] = max_ones - arr[i];\n    }\n    return\
    \ sorted_arr;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpmy7cgfow: /tmp/tmpmy7cgfow.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104454
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> ans;\n    long max_ones\
    \ = 0;\n    for (long i : arr) {\n        max_ones = max(max_ones, i);\n    }\n\
    \    long max_ones_power = pow(10, max_ones);\n    for (long i : arr) {\n    \
    \    long ones = i;\n        while (ones) {\n            long temp = ones;\n \
    \           ones = ones / 2;\n            if (temp % 2) {\n                ones\
    \ = ones * 10;\n            } else {\n                ones = ones / 2;\n     \
    \       }\n        }\n        ans.push_back(ones);\n    }\n    long min_ones =\
    \ max_ones;\n    for (long i : arr) {\n        min_ones = min(min_ones, i);\n\
    \    }\n    long min_ones_power = pow(10, min_ones);\n    for (long i : arr) {\n\
    \        long ones = i;\n        while (ones) {\n            long temp = ones;\n\
    \            ones = ones / 2;\n            if (temp % 2) {\n                ones\
    \ = ones * 10;\n            } else {\n                ones = ones / 2;\n     \
    \       }\n        }\n        ans.push_back(ones);\n    }\n    long min_ones_power\
    \ = pow(10, min_ones);\n    for (long i : arr) {\n        long ones = i;\n   \
    \     while (ones) {\n            long temp = ones;\n            ones = ones /\
    \ 2;\n            if (temp % 2) {\n                ones = ones * 10;\n       \
    \     } else {\n                ones = ones / 2;\n            }\n        }\n \
    \       ans.push_back(ones);\n    }\n    long min_ones_power = pow(10, min_ones);\n\
    \    for (long i : arr) {\n        long ones = i;\n        while (ones) {\n  \
    \          long temp = ones;\n            ones = ones / 2;\n            if (temp\
    \ % 2) {\n                ones = ones * 10;\n            } else {\n          \
    \      ones = ones / 2;\n            }\n        }\n        ans.push_back(ones);\n\
    \    }\n    long min_ones_power = pow(10, min_ones);\n    for (long i : arr) {\n\
    \        long ones = i;\n        while (ones) {\n            long temp = ones;\n\
    \            ones = ones / 2;\n            if (temp % 2) {\n                ones\
    \ = ones * 10;\n            } else {\n                ones = ones / 2;\n     \
    \       }\n        }\n        ans.push_back(ones);\n    }\n    long min_ones_power\
    \ = pow(10, min_ones);\n    for (long i : arr) {\n        long ones = i;\n   \
    \     while (ones) {\n            long temp = ones;\n            ones = ones /\
    \ 2;\n            if (temp % 2) {\n                ones = ones * 10;\n       \
    \     } else {\n                ones = ones / 2;\n            }\n        }\n \
    \       \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5kl3ttn1.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5kl3ttn1.cpp:11:20: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   11 |         max_ones\
    \ = max(max_ones, i);\n      |                    ^~~\n      |               \
    \     std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n    \
    \             from /tmp/tmp5kl3ttn1.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp5kl3ttn1.cpp:29:20: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   29 |         min_ones = min(min_ones, i);\n      |                    ^~~\n\
    \      |                    std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5kl3ttn1.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp5kl3ttn1.cpp:45:10: error: redeclaration\
    \ of \u2018long int min_ones_power\u2019\n   45 |     long min_ones_power = pow(10,\
    \ min_ones);\n      |          ^~~~~~~~~~~~~~\n/tmp/tmp5kl3ttn1.cpp:31:10: note:\
    \ \u2018long int min_ones_power\u2019 previously declared here\n   31 |     long\
    \ min_ones_power = pow(10, min_ones);\n      |          ^~~~~~~~~~~~~~\n/tmp/tmp5kl3ttn1.cpp:59:10:\
    \ error: redeclaration of \u2018long int min_ones_power\u2019\n   59 |     long\
    \ min_ones_power = pow(10, min_ones);\n      |          ^~~~~~~~~~~~~~\n/tmp/tmp5kl3ttn1.cpp:31:10:\
    \ note: \u2018long int min_ones_power\u2019 previously declared here\n   31 |\
    \     long min_ones_power = pow(10, min_ones);\n      |          ^~~~~~~~~~~~~~\n\
    /tmp/tmp5kl3ttn1.cpp:73:10: error: redeclaration of \u2018long int min_ones_power\u2019\
    \n   73 |     long min_ones_power = pow(10, min_ones);\n      |          ^~~~~~~~~~~~~~\n\
    /tmp"
  stdout: ''
  timestamp: 1660104456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        sum += arr[i];\n        count += arr[i] != 0;\n    }\n    long\
    \ long int max = (sum - count) / 2;\n    long long int min = (sum + count) / 2;\n\
    \    std::vector<long> ans;\n    for(int i = 0; i < arr.size(); i++){\n      \
    \  if(arr[i] != 0){\n            long long int temp = arr[i];\n            arr[i]\
    \ = max;\n            max = temp;\n            temp = arr[i];\n            arr[i]\
    \ = min;\n            min = temp;\n        }\n    }\n    for(int i = 0; i < arr.size();\
    \ i++){\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmphj8q9c0v: /tmp/tmphj8q9c0v.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr;\n   \
    \ long ones = 0;\n    long zeros = 0;\n    for (long i : arr) {\n        if (i\
    \ == 1) {\n            ones++;\n        } else {\n            zeros++;\n     \
    \   }\n    }\n    if (ones > zeros) {\n        sorted_arr.push_back(ones);\n \
    \       sorted_arr.push_back(zeros);\n        std::sort(sorted_arr.begin(), sorted_arr.end());\n\
    \    } else {\n        sorted_arr.push_back(zeros);\n        sorted_arr.push_back(ones);\n\
    \        std::sort(sorted_arr.begin(), sorted_arr.end());\n    }\n    return sorted_arr;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_kynhvuv: /tmp/tmp_kynhvuv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> result;\n    long\
    \ ones = 0;\n    for (long i : arr) {\n        ones += i;\n    }\n    long ones_count\
    \ = ones;\n    long decimal = 0;\n    for (long i : arr) {\n        decimal +=\
    \ i;\n    }\n    long decimal_count = decimal;\n    long temp = 0;\n    for (long\
    \ i : arr) {\n        temp = i;\n        if (ones_count > decimal_count) {\n \
    \           result.push_back(temp);\n            ones_count -= temp;\n       \
    \     decimal_count -= temp;\n        } else if (ones_count < decimal_count) {\n\
    \            result.push_back(temp);\n            ones_count += temp;\n      \
    \      decimal_count += temp;\n        } else {\n            result.push_back(temp);\n\
    \            ones_count += temp;\n            decimal_count += temp;\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp5hi0feqs: /tmp/tmp5hi0feqs.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for(long long int i = 0; i < arr.size(); i++){\n  \
    \      if(arr[i] == 1){\n            sum += arr[i];\n            count++;\n  \
    \          if(count > max){\n                max = count;\n            }\n   \
    \         if(count < min){\n                min = count;\n            }\n    \
    \    }\n    }\n    std::vector<long> ans;\n    for(long long int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n\
    \            ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n  \
    \          ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n  \
    \          ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n  \
    \          ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n  \
    \          ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n  \
    \          ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n  \
    \          ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n  \
    \          ans.push_back(temp);\n            sum -= arr[i];\n            count\
    \ -= 1;\n        }\n    }\n    for(long long int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == 1){\n            long long int temp = sum - arr[i];\n\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvqmffch1.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvqmffch1.cpp:95:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   95 | int main() {\n      |     \
    \       ^\n/tmp/tmpvqmffch1.cpp:105:1: error: expected \u2018}\u2019 at end of\
    \ input\n  105 | }\n      | ^\n/tmp/tmpvqmffch1.cpp:90:50: note: to match this\
    \ \u2018{\u2019\n   90 |     for(long long int i = 0; i < arr.size(); i++){\n\
    \      |                                                  ^\n/tmp/tmpvqmffch1.cpp:105:1:\
    \ error: expected \u2018}\u2019 at end of input\n  105 | }\n      | ^\n/tmp/tmpvqmffch1.cpp:7:53:\
    \ note: to match this \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long>\
    \ arr) {\n      |                                                     ^\n/tmp/tmpvqmffch1.cpp:105:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  105 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    for (long long int i : arr) {\n\
    \        sum += i;\n        if (sum > max) {\n            max = sum;\n       \
    \ }\n    }\n    std::vector<long> ans;\n    for (long long int i : arr) {\n  \
    \      long long int count = 0;\n        while (i != 0) {\n            count +=\
    \ i & 1;\n            i >>= 1;\n        }\n        if (count == max) {\n     \
    \       ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp62ev9jfj: /tmp/tmp62ev9jfj.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : arr) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    std::vector<long> ans;\n    for (long\
    \ long i : arr) {\n        long long bin = i;\n        while (bin) {\n       \
    \     ans.push_back(bin%2);\n            bin /= 2;\n        }\n    }\n    long\
    \ long ans_size = ans.size();\n    long long ans_sum = 0;\n    for (long long\
    \ i : ans) {\n        ans_sum += i;\n    }\n    long long ans_count = ans.size();\n\
    \    long long ans_sum2 = ans_sum*ans_sum;\n    long long ans_sum3 = ans_sum2*ans_sum;\n\
    \    long long ans_sum4 = ans_sum3*ans_sum;\n    long long ans_sum5 = ans_sum4*ans_sum;\n\
    \    long long ans_sum6 = ans_sum5*ans_sum;\n    long long ans_sum7 = ans_sum6*ans_sum;\n\
    \    long long ans_sum8 = ans_sum7*ans_sum;\n    long long ans_sum9 = ans_sum8*ans_sum;\n\
    \    long long ans_sum10 = ans_sum9*ans_sum;\n    long long ans_sum11 = ans_sum10*ans_sum;\n\
    \    long long ans_sum12 = ans_sum11*ans_sum;\n    long long ans_sum13 = ans_sum12*ans_sum;\n\
    \    long long ans_sum14 = ans_sum13*ans_sum;\n    long long ans_sum15 = ans_sum14*ans_sum;\n\
    \    long long ans_sum16 = ans_sum15*ans_sum;\n    long long ans_sum17 = ans_sum16*ans_sum;\n\
    \    long long ans_sum18 = ans_sum17*ans_sum;\n    long long ans_sum19 = ans_sum18*ans_sum;\n\
    \    long long ans_sum20 = ans_sum19*ans_sum;\n    long long ans_sum21 = ans_sum20*ans_sum;\n\
    \    long long ans_sum22 = ans_sum21*ans_sum;\n    long long ans_sum23 = ans_sum22*ans_sum;\n\
    \    long long ans_sum24 = ans_sum\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaurur9j3.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpaurur9j3.cpp:52:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmpaurur9j3.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += 1;\n    }\n    long long int temp = sum;\n\
    \    long long int temp2 = count;\n    long long int temp3 = temp;\n    long long\
    \ int temp4 = temp2;\n    long long int temp5 = temp3;\n    long long int temp6\
    \ = temp4;\n    long long int temp7 = temp5;\n    long long int temp8 = temp6;\n\
    \    long long int temp9 = temp7;\n    long long int temp10 = temp8;\n    long\
    \ long int temp11 = temp9;\n    long long int temp12 = temp10;\n    long long\
    \ int temp13 = temp11;\n    long long int temp14 = temp12;\n    long long int\
    \ temp15 = temp13;\n    long long int temp16 = temp14;\n    long long int temp17\
    \ = temp15;\n    long long int temp18 = temp16;\n    long long int temp19 = temp17;\n\
    \    long long int temp20 = temp18;\n    long long int temp21 = temp19;\n    long\
    \ long int temp22 = temp20;\n    long long int temp23 = temp21;\n    long long\
    \ int temp24 = temp22;\n    long long int temp25 = temp23;\n    long long int\
    \ temp26 = temp24;\n    long long int temp27 = temp25;\n    long long int temp28\
    \ = temp26;\n    long long int temp29 = temp27;\n    long long int temp30 = temp28;\n\
    \    long long int temp31 = temp29;\n    long long int temp32 = temp30;\n    long\
    \ long int temp33 = temp31;\n    long long int temp34 = temp32;\n    long long\
    \ int temp35 = temp33;\n    long long int temp36 = temp34;\n    long long int\
    \ temp37 = temp35;\n    long long int temp38 = temp36;\n    long long int temp39\
    \ = temp37;\n    long long int temp40 = temp38;\n    long long int temp41 = temp39;\n\
    \    long long int temp42 = temp40;\n    long long int temp43 = temp41;\n    long\
    \ long int temp44 = temp42;\n    long long int temp45 = temp43;\n    long long\
    \ int temp46 = temp44;\n    long long \n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppx1y880y.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppx1y880y.cpp:62:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmppx1y880y.cpp:62:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans += arr[i];\n\
    \    }\n    long long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans -= arr[i];\n        if (ans > max) {\n            max = ans;\n  \
    \      }\n    }\n    std::vector<long> ans_list;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        ans_list.push_back(arr[i]);\n    }\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        ans_list[i] -= max;\n    }\n    return ans_list;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmph_zdh2yp: /tmp/tmph_zdh2yp.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    long long int mid = 0;\n    for (long long int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \        }\n        sum += arr[i];\n        count += 1;\n    }\n    mid = sum\
    \ / count;\n    long long int mid2 = sum % count;\n    long long int mid3 = mid\
    \ * 2;\n    long long int mid4 = mid3 * 2;\n    long long int mid5 = mid4 * 2;\n\
    \    long long int mid6 = mid5 * 2;\n    long long int mid7 = mid6 * 2;\n    long\
    \ long int mid8 = mid7 * 2;\n    long long int mid9 = mid8 * 2;\n    long long\
    \ int mid10 = mid9 * 2;\n    long long int mid11 = mid10 * 2;\n    long long int\
    \ mid12 = mid11 * 2;\n    long long int mid13 = mid12 * 2;\n    long long int\
    \ mid14 = mid13 * 2;\n    long long int mid15 = mid14 * 2;\n    long long int\
    \ mid16 = mid15 * 2;\n    long long int mid17 = mid16 * 2;\n    long long int\
    \ mid18 = mid17 * 2;\n    long long int mid19 = mid18 * 2;\n    long long int\
    \ mid20 = mid19 * 2;\n    long long int mid21 = mid20 * 2;\n    long long int\
    \ mid22 = mid21 * 2;\n    long long int mid23 = mid22 * 2;\n    long long int\
    \ mid24 = mid23 * 2;\n    long long int mid25 = mid24 * 2;\n    long long int\
    \ mid26 = mid25 * 2;\n    long long int mid27 = mid26 * 2;\n    long long int\
    \ mid28 = mid27 * 2;\n    long long int mid29 = mid28 * 2;\n    long long int\
    \ mid30 = mid29 * 2;\n    long long int mid31 = mid30 * 2;\n    long long int\
    \ mid32 = mid31 * 2;\n    long long int mid33 = mid32 * 2;\n    long long int\
    \ mid34 = mid33 * 2;\n    long long int mid35 = mid34 * 2;\n    long long int\
    \ mid36 = mid35 * 2;\n    long long int mid37 = mid36 * 2;\n    long \n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqqy80nx.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppqqy80nx.cpp:62:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmppqqy80nx.cpp:62:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long sum = 0;\n    for (long long\
    \ i : arr) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n    long\
    \ long ans = sum / 10;\n    std::vector<long> ans_list;\n    for (long long i\
    \ : arr) {\n        long long count = 0;\n        while (i != 0) {\n         \
    \   i /= 10;\n            count++;\n        }\n        if (count == 1) {\n   \
    \         ans_list.push_back(ans);\n        } else {\n            ans_list.push_back(ans\
    \ - count * mod);\n        }\n    }\n    return ans_list;\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpmoxvx953: /tmp/tmpmoxvx953.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    long long int sum2 = 0;\n    long long int max2 = 0;\n\
    \    long long int min2 = 0;\n    long long int count2 = 0;\n    long long int\
    \ sum3 = 0;\n    long long int max3 = 0;\n    long long int min3 = 0;\n    long\
    \ long int count3 = 0;\n    long long int sum4 = 0;\n    long long int max4 =\
    \ 0;\n    long long int min4 = 0;\n    long long int count4 = 0;\n    long long\
    \ int sum5 = 0;\n    long long int max5 = 0;\n    long long int min5 = 0;\n  \
    \  long long int count5 = 0;\n    long long int sum6 = 0;\n    long long int max6\
    \ = 0;\n    long long int min6 = 0;\n    long long int count6 = 0;\n    long long\
    \ int sum7 = 0;\n    long long int max7 = 0;\n    long long int min7 = 0;\n  \
    \  long long int count7 = 0;\n    long long int sum8 = 0;\n    long long int max8\
    \ = 0;\n    long long int min8 = 0;\n    long long int count8 = 0;\n    long long\
    \ int sum9 = 0;\n    long long int max9 = 0;\n    long long int min9 = 0;\n  \
    \  long long int count9 = 0;\n    long long int sum10 = 0;\n    long long int\
    \ max10 = 0;\n    long long int min10 = 0;\n    long long int count10 = 0;\n \
    \   long long int sum11 = 0;\n    long long int max11 = 0;\n    long long int\
    \ min11 = 0;\n    long long int count11 = 0;\n    long long int sum12 = 0;\n \
    \   long long int max12 = 0;\n    long long int min12 = 0;\n    long long int\
    \ count12 = 0;\n    long long int sum13 = 0;\n    long long int max13 = 0;\n \
    \   long long int min13 = 0;\n    long long int count13 = 0;\n    long long int\
    \ sum14 = 0;\n    long long int max14 = 0;\n    long long int min14 = 0;\n   \
    \ long long int count14 = 0;\n    long long int sum15 = 0;\n    long long int\
    \ max15 = 0;\n    long long int min15 = 0;\n    long long int count15 = 0;\n \
    \   long long int sum16 = 0;\n    long long int max16 = 0;\n    long long int\
    \ min16 = 0;\n    long long int count16 = 0;\n    long long int sum17 = 0;\n \
    \   long long int max17 = 0;\n\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpyi9z0x4p: /tmp/tmpyi9z0x4p.cpp:79: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += 1;\n    }\n    long long int max = 0;\n\
    \    for (long long int i : arr) {\n        if (i == 1) {\n            max = i;\n\
    \        }\n    }\n    long long int min = 0;\n    for (long long int i : arr)\
    \ {\n        if (i == 0) {\n            min = i;\n        }\n    }\n    long long\
    \ int mid = sum / count;\n    long long int mid2 = sum % count;\n    long long\
    \ int mid3 = sum / count;\n    long long int mid4 = sum % count;\n    long long\
    \ int mid5 = sum / count;\n    long long int mid6 = sum % count;\n    long long\
    \ int mid7 = sum / count;\n    long long int mid8 = sum % count;\n    long long\
    \ int mid9 = sum / count;\n    long long int mid10 = sum % count;\n    long long\
    \ int mid11 = sum / count;\n    long long int mid12 = sum % count;\n    long long\
    \ int mid13 = sum / count;\n    long long int mid14 = sum % count;\n    long long\
    \ int mid15 = sum / count;\n    long long int mid16 = sum % count;\n    long long\
    \ int mid17 = sum / count;\n    long long int mid18 = sum % count;\n    long long\
    \ int mid19 = sum / count;\n    long long int mid20 = sum % count;\n    long long\
    \ int mid21 = sum / count;\n    long long int mid22 = sum % count;\n    long long\
    \ int mid23 = sum / count;\n    long long int mid24 = sum % count;\n    long long\
    \ int mid25 = sum / count;\n    long long int mid26 = sum % count;\n    long long\
    \ int mid27 = sum / count;\n    long long int mid28 = sum % count;\n    long long\
    \ int mid29 = sum / count;\n    long long int mid30 = sum % count;\n    long long\
    \ int mid31 = sum / count;\n    long long int mid32 = sum % count;\n    long long\
    \ int mid33 = sum / count;\n    long long int mid34 = sum % count;\n    long long\
    \ int mid35 = sum / count;\n    long long int mid36 = sum % count;\n    long long\
    \ int mid37 = sum / count;\n    long long int mid38 = sum % count;\n    long long\
    \ int mid39 = sum / count;\n    \n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpl6dslmet: /tmp/tmpl6dslmet.cpp:70: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long sum = 0;\n    for (long long\
    \ i : arr) {\n        sum += i;\n    }\n    std::vector<long> ans;\n    for (long\
    \ long i : arr) {\n        ans.push_back((sum - i) / 2);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpyzi4w4kh: /tmp/tmpyzi4w4kh.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for(long long int i : arr){\n        sum += i;\n  \
    \      if(sum > max){\n            max = sum;\n        }\n        if(sum < min){\n\
    \            min = sum;\n        }\n        count += 1;\n    }\n    std::vector<long>\
    \ ans;\n    for(long long int i : arr){\n        if(count == 1){\n           \
    \ ans.push_back(i);\n        }\n        else{\n            long long int temp\
    \ = count * i;\n            if(temp > max){\n                ans.push_back(temp);\n\
    \            }\n            else if(temp < min){\n                ans.push_back(min);\n\
    \            }\n            else{\n                ans.push_back(temp);\n    \
    \        }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpgbaic_mu: /tmp/tmpgbaic_mu.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> ans;\n    long long\
    \ ones = 0;\n    for (long i : arr) {\n        ones += i;\n    }\n    long long\
    \ dec = ones;\n    for (long i : arr) {\n        ans.push_back(i);\n    }\n  \
    \  for (long i : arr) {\n        ans.push_back(dec % 10);\n        dec /= 10;\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpqpg0wi5e: /tmp/tmpqpg0wi5e.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> result;\n    long\
    \ ones = 0;\n    for (auto i : arr) {\n        ones += i;\n    }\n    long decimal\
    \ = 0;\n    for (auto i : arr) {\n        decimal += i;\n    }\n    long remainder\
    \ = ones - decimal;\n    long temp = remainder;\n    long temp2 = ones;\n    while\
    \ (remainder != 0) {\n        remainder = temp % 10;\n        temp = temp / 10;\n\
    \        temp2 = temp2 + remainder;\n    }\n    long temp3 = ones - temp2;\n \
    \   long temp4 = ones - temp3;\n    long temp5 = ones - temp4;\n    long temp6\
    \ = ones - temp5;\n    long temp7 = ones - temp6;\n    long temp8 = ones - temp7;\n\
    \    long temp9 = ones - temp8;\n    long temp10 = ones - temp9;\n    long temp11\
    \ = ones - temp10;\n    long temp12 = ones - temp11;\n    long temp13 = ones -\
    \ temp12;\n    long temp14 = ones - temp13;\n    long temp15 = ones - temp14;\n\
    \    long temp16 = ones - temp15;\n    long temp17 = ones - temp16;\n    long\
    \ temp18 = ones - temp17;\n    long temp19 = ones - temp18;\n    long temp20 =\
    \ ones - temp19;\n    long temp21 = ones - temp20;\n    long temp22 = ones - temp21;\n\
    \    long temp23 = ones - temp22;\n    long temp24 = ones - temp23;\n    long\
    \ temp25 = ones - temp24;\n    long temp26 = ones - temp25;\n    long temp27 =\
    \ ones - temp26;\n    long temp28 = ones - temp27;\n    long temp29 = ones - temp28;\n\
    \    long temp30 = ones - temp29;\n    long temp31 = ones - temp30;\n    long\
    \ temp32 = ones - temp31;\n    long temp33 = ones - temp32;\n    long temp34 =\
    \ ones - temp33;\n    long temp35 = ones - temp34;\n    long temp36 = ones - temp35;\n\
    \    long temp37 = ones - temp36;\n    long temp38 = ones - temp37;\n    long\
    \ temp39 = ones - temp38;\n    long temp40 = ones - temp39;\n    long temp41 =\
    \ ones - temp40;\n    long temp42 = ones - temp41;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppdcs0mvg.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppdcs0mvg.cpp:66:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   66 | }\n      | ^\n/tmp/tmppdcs0mvg.cpp:66:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long ones = 0;\n    for (long\
    \ long i : arr) {\n        ones += i;\n    }\n    std::vector<long> ans;\n   \
    \ for (long long i : arr) {\n        ans.push_back(i);\n    }\n    std::sort(ans.begin(),\
    \ ans.end(), [&ones](long long a, long long b) -> bool {\n        return ones\
    \ - a < ones - b;\n    });\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpaiidgx5r: /tmp/tmpaiidgx5r.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        count += 1;\n    }\n  \
    \  std::vector<long> ans;\n    long long int temp = 0;\n    for (long long int\
    \ i : arr) {\n        temp = i;\n        while (temp > 0) {\n            long\
    \ long int rem = temp % 10;\n            temp /= 10;\n            if (rem == 1)\
    \ {\n                ans.push_back(rem);\n                count -= 1;\n      \
    \      }\n        }\n    }\n    long long int sum2 = 0;\n    for (long long int\
    \ i : ans) {\n        sum2 += i;\n    }\n    long long int sum3 = 0;\n    for\
    \ (long long int i : arr) {\n        sum3 += i;\n    }\n    long long int sum4\
    \ = 0;\n    for (long long int i : ans) {\n        sum4 += i;\n    }\n    if (sum2\
    \ < sum3) {\n        std::swap(sum2, sum3);\n    }\n    if (sum2 < sum4) {\n \
    \       std::swap(sum2, sum4);\n    }\n    if (sum3 < sum4) {\n        std::swap(sum3,\
    \ sum4);\n    }\n    if (sum2 < sum) {\n        std::swap(sum2, sum);\n    }\n\
    \    if (sum3 < sum) {\n        std::swap(sum3, sum);\n    }\n    if (sum4 < sum)\
    \ {\n        std::swap(sum4, sum);\n    }\n    long long int temp2 = 0;\n    for\
    \ (long long int i : ans) {\n        temp2 += i;\n    }\n    long long int temp3\
    \ = 0;\n    for (long long int i : arr) {\n        temp3 += i;\n    }\n    long\
    \ long int temp4 = 0;\n    for (long long int i : ans) {\n        temp4 += i;\n\
    \    }\n    if (temp2 < temp3) {\n        std::swap(temp2, temp3);\n    }\n  \
    \  if (temp2 < temp4) {\n        std::swap(temp2, temp4);\n    }\n    if (temp3\
    \ < temp4) {\n        std::swap(temp3, temp4);\n    }\n    if (temp2 < temp) {\n\
    \        std::swap(temp2, temp);\n    }\n    if (temp3 < temp) {\n        std::swap(temp3,\
    \ temp);\n    }\n    if (temp4 < temp) {\n        std::swap(temp4, temp);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpgagofoo3: /tmp/tmpgagofoo3.cpp:100: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr;\n   \
    \ long max_ones = 0;\n    for (long i : arr) {\n        max_ones = std::max(max_ones,\
    \ i);\n    }\n    long decimal_val = max_ones;\n    for (long i : arr) {\n   \
    \     decimal_val *= 10;\n        decimal_val += i;\n    }\n    for (long i :\
    \ arr) {\n        sorted_arr.push_back(decimal_val - i);\n    }\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    return sorted_arr;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmppvw_humb: /tmp/tmppvw_humb.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long cnt = 0;\n    long long sum = 0;\n    for(long long\
    \ i = 0; i < arr.size(); i++){\n        sum += arr[i];\n        if(sum > 1){\n\
    \            cnt += 1;\n            ans += (long long)(cnt*arr[i]);\n        \
    \    sum -= 1;\n        }\n    }\n    std::vector<long> ans;\n    for(long long\
    \ i = 0; i < arr.size(); i++){\n        if(arr[i] > 1){\n            ans.push_back(arr[i]*(long\
    \ long)(cnt*arr[i]));\n        }\n    }\n    for(long long i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] > 1){\n            ans.push_back(arr[i]*(long long)(cnt*arr[i]));\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6nd1ckhs.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6nd1ckhs.cpp:20:23: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   20 |     std::vector<long> ans;\n      | \
    \                      ^~~\n/tmp/tmp6nd1ckhs.cpp:9:15: note: previous declaration\
    \ as \u2018long long int ans\u2019\n    9 |     long long ans = 0;\n      |  \
    \             ^~~\n/tmp/tmp6nd1ckhs.cpp:23:17: error: request for member \u2018\
    push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018long long\
    \ int\u2019\n   23 |             ans.push_back(arr[i]*(long long)(cnt*arr[i]));\n\
    \      |                 ^~~~~~~~~\n/tmp/tmp6nd1ckhs.cpp:28:17: error: request\
    \ for member \u2018push_back\u2019 in \u2018ans\u2019, which is of non-class type\
    \ \u2018long long int\u2019\n   28 |             ans.push_back(arr[i]*(long long)(cnt*arr[i]));\n\
    \      |                 ^~~~~~~~~\n/tmp/tmp6nd1ckhs.cpp:31:12: error: could not\
    \ convert \u2018ans\u2019 from \u2018long long int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   31 |     return ans;\n      |            ^~~\n      |       \
    \     |\n      |            long long int\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long ans = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        ans += arr[i];\n    }\n    long long ones\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ones += arr[i] &\
    \ 1;\n    }\n    long long zeros = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        zeros += arr[i] & 0;\n    }\n    std::vector<long> ans_arr;\n   \
    \ if (ones > zeros) {\n        ans_arr.push_back(ans);\n        ans_arr.push_back(ones);\n\
    \        ans_arr.push_back(zeros);\n        ans_arr.push_back(ans - ones);\n \
    \       ans_arr.push_back(ans - zeros);\n        ans_arr.push_back(ans + ones);\n\
    \        ans_arr.push_back(ans + zeros);\n        ans_arr.push_back(ans + ones\
    \ - zeros);\n        ans_arr.push_back(ans + zeros - ones);\n        ans_arr.push_back(ans\
    \ + ones - ones);\n        ans_arr.push_back(ans + zeros - ones - ones);\n   \
    \     ans_arr.push_back(ans + ones - ones - zeros);\n        ans_arr.push_back(ans\
    \ + zeros - ones - zeros);\n        ans_arr.push_back(ans + ones - ones - zeros\
    \ - ones);\n        ans_arr.push_back(ans + zeros - ones - zeros - zeros);\n \
    \       ans_arr.push_back(ans + ones - ones - zeros - zeros - ones);\n       \
    \ ans_arr.push_back(ans + zeros - ones - zeros - zeros - zeros);\n        ans_arr.push_back(ans\
    \ + ones - ones - zeros - zeros - zeros - ones);\n        ans_arr.push_back(ans\
    \ + zeros - ones - zeros - zeros - zeros - zeros);\n        ans_arr.push_back(ans\
    \ + ones - ones - zeros - zeros - zeros - zeros - ones);\n        ans_arr.push_back(ans\
    \ + zeros - ones - zeros - zeros - zeros - zeros - zeros);\n        ans_arr.push_back(ans\
    \ + ones - ones - zeros - zeros - zeros - zeros - zeros - ones);\n        ans_arr.push_back(ans\
    \ + zeros - ones - zeros - zeros - zeros - zeros - zeros - zeros);\n        ans_arr.push_back(ans\
    \ + ones - ones - zeros - zeros - zeros - zeros - zeros - zeros - ones);\n   \
    \     ans_arr.push_back(ans + zeros - ones - zeros - zeros - zeros - zeros - zeros\
    \ - zeros - zeros);\n        ans_arr.push_back(ans + ones - ones - zeros - zeros\
    \ - zeros - zeros - zeros - zeros - zeros - ones);\n        ans_arr.push_back(ans\
    \ + zero\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08vmkln0.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp08vmkln0.cpp:48:33: error: \u2018zero\u2019 was not declared\
    \ in this scope; did you mean \u2018zeros\u2019?\n   48 |         ans_arr.push_back(ans\
    \ + zero\n      |                                 ^~~~\n      |              \
    \                   zeros\n/tmp/tmp08vmkln0.cpp:50:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   50 | int main() {\n     \
    \ |            ^\n/tmp/tmp08vmkln0.cpp:60:1: error: expected \u2018}\u2019 at\
    \ end of input\n   60 | }\n      | ^\n/tmp/tmp08vmkln0.cpp:7:53: note: to match\
    \ this \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long> arr)\
    \ {\n      |                                                     ^\n/tmp/tmp08vmkln0.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   60 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr;\n   \
    \ long ones = 0;\n    long zeros = 0;\n    for (long i : arr) {\n        if (i\
    \ == 1) {\n            ones++;\n        } else {\n            zeros++;\n     \
    \   }\n    }\n    if (ones > zeros) {\n        std::sort(arr.begin(), arr.end(),\
    \ [](long a, long b) { return (a > b); });\n        sorted_arr.insert(sorted_arr.end(),\
    \ arr.begin(), arr.end());\n        std::sort(sorted_arr.begin(), sorted_arr.end(),\
    \ [](long a, long b) { return (a > b); });\n    } else {\n        std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) { return (a < b); });\n        sorted_arr.insert(sorted_arr.end(),\
    \ arr.begin(), arr.end());\n        std::sort(sorted_arr.begin(), sorted_arr.end(),\
    \ [](long a, long b) { return (a < b); });\n    }\n    return sorted_arr;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp2rgao_g_: /tmp/tmp2rgao_g_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr(arr.size());\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        sorted_arr[i] = arr[i];\n\
    \    }\n    std::sort(sorted_arr.begin(), sorted_arr.end(), [](long a, long b){\n\
    \        return count_ones(a) < count_ones(b);\n    });\n    return sorted_arr;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1wgfye57.cpp: In lambda function:\n/tmp/tmp1wgfye57.cpp:13:16:\
    \ error: \u2018count_ones\u2019 was not declared in this scope\n   13 |      \
    \   return count_ones(a) < count_ones(b);\n      |                ^~~~~~~~~~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1wgfye57.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = sort_array(std::vector<long int>)::<lambda(long int, long\
    \ int)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:81:17:   required from \u2018\
    void std::__move_median_to_first(_Iterator, _Iterator, _Iterator, _Iterator, _Compare)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<sort_array(std::vector<long\
    \ int>)::<lambda(long int, long int)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<sort_array(std::vector<long\
    \ int>)::<lambda(long int, long int)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<sort_array(std::vector<long\
    \ int>)::<lambda(long int, long int)> >]\u2019\n/usr/include/c++/9/bit"
  stdout: ''
  timestamp: 1660104457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long ans = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        ans += arr[i];\n    }\n    long long temp\
    \ = ans;\n    ans = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans\
    \ += (arr[i] & 1);\n    }\n    long long temp2 = ans;\n    ans = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = temp;\n    temp = temp2;\n    temp2 = temp;\n    temp\
    \ = temp2;\n    temp2 = \n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwd56fur.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdwd56fur.cpp:101:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpdwd56fur.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr(arr.size());\n\
    \    std::iota(sorted_arr.begin(), sorted_arr.end(), 0);\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end(), [&arr](long a, long b) -> bool {\n        return count_ones(arr[a])\
    \ < count_ones(arr[b]);\n    });\n    return sorted_arr;\n}\nint main() {\n  \
    \  auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpplricxc2.cpp: In lambda function:\n/tmp/tmpplricxc2.cpp:11:16:\
    \ error: \u2018count_ones\u2019 was not declared in this scope\n   11 |      \
    \   return count_ones(arr[a]) < count_ones(arr[b]);\n      |                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> res(arr.size());\n\
    \    for (long i : arr) {\n        res[i] = i;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](long a, long b) { return (a > b); });\n    for (long i : arr)\
    \ {\n        res[i] = res[i] / 2;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpul6rc_y2: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for(long long int i : arr){\n        sum += i;\n  \
    \      if(sum > max){\n            max = sum;\n        }\n        if(sum < min){\n\
    \            min = sum;\n        }\n        count += 1;\n    }\n    std::vector<long>\
    \ ans;\n    for(long long int i : arr){\n        if(count == 1){\n           \
    \ ans.push_back(i);\n        }\n        else if(count > 1){\n            long\
    \ long int temp = count - 1;\n            long long int sum = 0;\n           \
    \ long long int max = 0;\n            long long int min = 0;\n            long\
    \ long int count = 0;\n            for(long long int j : arr){\n             \
    \   sum += j;\n                if(sum > max){\n                    max = sum;\n\
    \                }\n                if(sum < min){\n                    min =\
    \ sum;\n                }\n                count += 1;\n            }\n      \
    \      if(temp == 1){\n                ans.push_back(arr[0]);\n            }\n\
    \            else if(temp > 1){\n                long long int temp = temp - 1;\n\
    \                long long int sum = 0;\n                long long int max = 0;\n\
    \                long long int min = 0;\n                long long int count =\
    \ 0;\n                for(long long int j : arr){\n                    sum +=\
    \ j;\n                    if(sum > max){\n                        max = sum;\n\
    \                    }\n                    if(sum < min){\n                 \
    \       min = sum;\n                    }\n                    count += 1;\n \
    \               }\n                if(temp == 0){\n                    ans.push_back(arr[arr.size()-1]);\n\
    \                }\n                else if(temp < 0){\n                    long\
    \ long int temp = temp + 1;\n                    long long int sum = 0;\n    \
    \                long long int max = 0;\n                    long long int min\
    \ = 0;\n                    long long int count = 0;\n                    for(long\
    \ long int j : arr){\n                        sum += j;\n                    \
    \    if(sum > max){\n                            max = sum;\n                \
    \        }\n                        if(sum < min){\n                         \
    \   min = sum;\n                        }\n                        count += 1;\n\
    \                    }\n                    ans.push_back(arr[arr.size()-temp]);\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpv6nemem7: /tmp/tmpv6nemem7.cpp:91: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += __builtin_popcount(i);\n    }\n    std::vector<long>\
    \ ans;\n    long long int max = 0;\n    for (long long int i : arr) {\n      \
    \  if (__builtin_popcount(i) > max) {\n            max = __builtin_popcount(i);\n\
    \        }\n    }\n    for (long long int i : arr) {\n        if (__builtin_popcount(i)\
    \ == max) {\n            ans.push_back(i);\n        }\n    }\n    for (long long\
    \ int i : arr) {\n        if (__builtin_popcount(i) == max) {\n            long\
    \ long int pos = 0;\n            long long int count = 0;\n            long long\
    \ int sum = 0;\n            for (long long int j : ans) {\n                sum\
    \ += j;\n                count += __builtin_popcount(j);\n                if (__builtin_popcount(i)\
    \ == __builtin_popcount(j)) {\n                    pos = j;\n                }\n\
    \            }\n            if (__builtin_popcount(i) == __builtin_popcount(pos)\
    \ && sum == i) {\n                ans.push_back(pos);\n            }\n       \
    \ }\n    }\n    for (long long int i : arr) {\n        if (__builtin_popcount(i)\
    \ == max) {\n            long long int pos = 0;\n            long long int count\
    \ = 0;\n            long long int sum = 0;\n            for (long long int j :\
    \ ans) {\n                sum += j;\n                count += __builtin_popcount(j);\n\
    \                if (__builtin_popcount(i) == __builtin_popcount(j)) {\n     \
    \               pos = j;\n                }\n            }\n            if (__builtin_popcount(i)\
    \ == __builtin_popcount(pos) && sum == i) {\n                ans.push_back(pos);\n\
    \            }\n        }\n    }\n    for (long long int i : arr) {\n        if\
    \ (__builtin_popcount(i) == max) {\n            long long int pos = 0;\n     \
    \       long long int count = 0;\n            long long int sum = 0;\n       \
    \     for (long long int j : ans) {\n                sum += j;\n             \
    \   count += __builtin_popcount(j);\n                if (__builtin_popcount(i)\
    \ == __builtin_popcount(j)) {\n                    pos = j;\n                }\n\
    \            }\n            if (__builtin_popcount(i) == __builtin_popcount(pos)\
    \ && sum == i) {\n                ans.push_back(pos);\n            }\n       \
    \ }\n    }\n    for (long long int i : arr) {\n        if (__builtin_popcount(i)\
    \ == max) {\n            long long int pos = 0;\n            long long int count\
    \ = 0;\n            long long int sum = 0;\n            for (long long int j :\
    \ ans) {\n                sum += j;\n                count += __builtin_popcount(j);\n\
    \                if (__builtin_popcount(i\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg9w4a9w8.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg9w4a9w8.cpp:86:41: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   86 |                 if (__builtin_popcount(i\n    \
    \  |                                       ~ ^\n      |                      \
    \                   )\n   87 | }\n      | ~                                  \
    \      \n/tmp/tmpg9w4a9w8.cpp:86:41: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   86 |                 if (__builtin_popcount(i\n      |     \
    \               ~                    ^\n      |                              \
    \           )\n   87 | }\n      | ~                                        \n\
    /tmp/tmpg9w4a9w8.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmpg9w4a9w8.cpp:88:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   88 | int main() {\n     \
    \ |            ^\n/tmp/tmpg9w4a9w8.cpp:98:1: error: expected \u2018}\u2019 at\
    \ end of input\n   98 | }\n      | ^\n/tmp/tmpg9w4a9w8.cpp:79:43: note: to match\
    \ this \u2018{\u2019\n   79 |         if (__builtin_popcount(i) == max) {\n  \
    \    |                                           ^\n/tmp/tmpg9w4a9w8.cpp:98:1:\
    \ error: expected \u2018}\u2019 at end of input\n   98 | }\n      | ^\n/tmp/tmpg9w4a9w8.cpp:78:33:\
    \ note: to match this \u2018{\u2019\n   78 |     for (long long int i : arr) {\n\
    \      |                                 ^\n/tmp/tmpg9w4a9w8.cpp:98:1: error:\
    \ expected \u2018}\u2019 at end of input\n   98 | }\n      | ^\n/tmp/tmpg9w4a9w8.cpp:7:53:\
    \ note: to match this \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long>\
    \ arr) {\n      |                                                     ^\n/tmp/tmpg9w4a9w8.cpp:98:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   98 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int temp = 0;\n    long long int count = 0;\n  \
    \  for (long long int i : arr) {\n        temp = i;\n        while (temp) {\n\
    \            sum += temp % 10;\n            temp /= 10;\n        }\n        count\
    \ += 1;\n    }\n    std::vector<long> ans;\n    for (long long int i = 0; i <\
    \ count; i++) {\n        long long int j = sum - arr[i];\n        ans.push_back(j);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpb9u2d1yh: /tmp/tmpb9u2d1yh.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    for (long long int i : arr) {\n\
    \        sum += i;\n        if (sum > max) {\n            max = sum;\n       \
    \ }\n    }\n    std::vector<long> ans;\n    for (long long int i : arr) {\n  \
    \      long long int count = 0;\n        for (long long int j : arr) {\n     \
    \       if (j == i) {\n                count++;\n            }\n        }\n  \
    \      ans.push_back(count);\n    }\n    long long int temp = 0;\n    for (long\
    \ long int i : ans) {\n        temp = i;\n    }\n    long long int temp2 = 0;\n\
    \    for (long long int i : ans) {\n        temp2 = temp * i;\n    }\n    long\
    \ long int temp3 = 0;\n    for (long long int i : ans) {\n        temp3 = temp2\
    \ * i;\n    }\n    long long int temp4 = 0;\n    for (long long int i : ans) {\n\
    \        temp4 = temp3 * i;\n    }\n    long long int temp5 = 0;\n    for (long\
    \ long int i : ans) {\n        temp5 = temp4 * i;\n    }\n    long long int temp6\
    \ = 0;\n    for (long long int i : ans) {\n        temp6 = temp5 * i;\n    }\n\
    \    long long int temp7 = 0;\n    for (long long int i : ans) {\n        temp7\
    \ = temp6 * i;\n    }\n    long long int temp8 = 0;\n    for (long long int i\
    \ : ans) {\n        temp8 = temp7 * i;\n    }\n    long long int temp9 = 0;\n\
    \    for (long long int i : ans) {\n        temp9 = temp8 * i;\n    }\n    long\
    \ long int temp10 = 0;\n    for (long long int i : ans) {\n        temp10 = temp9\
    \ * i;\n    }\n    long long int temp11 = 0;\n    for (long long int i : ans)\
    \ {\n        temp11 = temp10 * i;\n    }\n    long long int temp12 = 0;\n    for\
    \ (long long int i : ans) {\n        temp12 = temp11 * i;\n    }\n    long long\
    \ int temp13 = 0;\n    for (long long int i : ans) {\n        temp13 = temp12\
    \ * i;\n    }\n    long long int temp14 = 0;\n    for (long long int i : ans)\
    \ {\n        temp14 = temp13 * i;\n    }\n    long long int temp15 = 0;\n    for\
    \ (long long int i : ans) {\n        temp15 = temp14 * i;\n    }\n    long long\
    \ int temp16 = 0;\n    for (long long int i : ans) {\n        temp16 = temp15\
    \ * i;\n    }\n    long long int temp17 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp79y9x40s: /tmp/tmp79y9x40s.cpp:96: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    long long int i = 0;\n    long long int j = 0;\n  \
    \  long long int k = 0;\n    long long int temp = 0;\n    long long int temp2\
    \ = 0;\n    long long int temp3 = 0;\n    long long int temp4 = 0;\n    long long\
    \ int temp5 = 0;\n    long long int temp6 = 0;\n    long long int temp7 = 0;\n\
    \    long long int temp8 = 0;\n    long long int temp9 = 0;\n    long long int\
    \ temp10 = 0;\n    long long int temp11 = 0;\n    long long int temp12 = 0;\n\
    \    long long int temp13 = 0;\n    long long int temp14 = 0;\n    long long int\
    \ temp15 = 0;\n    long long int temp16 = 0;\n    long long int temp17 = 0;\n\
    \    long long int temp18 = 0;\n    long long int temp19 = 0;\n    long long int\
    \ temp20 = 0;\n    long long int temp21 = 0;\n    long long int temp22 = 0;\n\
    \    long long int temp23 = 0;\n    long long int temp24 = 0;\n    long long int\
    \ temp25 = 0;\n    long long int temp26 = 0;\n    long long int temp27 = 0;\n\
    \    long long int temp28 = 0;\n    long long int temp29 = 0;\n    long long int\
    \ temp30 = 0;\n    long long int temp31 = 0;\n    long long int temp32 = 0;\n\
    \    long long int temp33 = 0;\n    long long int temp34 = 0;\n    long long int\
    \ temp35 = 0;\n    long long int temp36 = 0;\n    long long int temp37 = 0;\n\
    \    long long int temp38 = 0;\n    long long int temp39 = 0;\n    long long int\
    \ temp40 = 0;\n    long long int temp41 = 0;\n    long long int temp42 = 0;\n\
    \    long long int temp43 = 0;\n    long long int temp44 = 0;\n    long long int\
    \ temp45 = 0;\n    long long int temp46 = 0;\n    long long int temp47 = 0;\n\
    \    long long int temp48 = 0;\n    long long int temp49 = 0;\n    long long int\
    \ temp50 = 0;\n    long long int temp51 = 0;\n    long long int temp52 = 0;\n\
    \    long long int temp53 = 0;\n    long long int temp54 = 0;\n    long long int\
    \ temp55 = 0;\n    long long int temp56 = 0;\n    long long int temp57 = 0;\n\
    \    long long int temp58 = 0;\n    \n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpxraam1z3: /tmp/tmpxraam1z3.cpp:78: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> res(arr.size());\n\
    \    for (size_t i = 0; i < arr.size(); i++) {\n        long count = 0;\n    \
    \    for (size_t j = 0; j < arr.size(); j++) {\n            if (arr[j] == i) {\n\
    \                count++;\n            }\n        }\n        res[i] = count;\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpn96k_253: /tmp/tmpn96k_253.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> ans;\n    long long\
    \ sum = 0;\n    for (long i : arr) {\n        sum += i;\n    }\n    long long\
    \ mod = sum % 10;\n    long long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += (i / 10) * mod;\n        mod *= 10;\n    }\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n    ans %= 10;\n    ans *= sum\
    \ / 10;\n    ans %= 10;\n    ans *= sum / 10;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdgsr4h_.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbdgsr4h_.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmpbdgsr4h_.cpp:8:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n    8 |     std::vector<long> ans;\n      |                \
    \       ^~~\n/tmp/tmpbdgsr4h_.cpp:16:13: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long long int\u2019\
    )\n   16 |         ans += (i / 10) * mod;\n      |         ~~~~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbdgsr4h_.cpp:19:9: error: no match for \u2018operator%=\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n   19 |  \
    \   ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpbdgsr4h_.cpp:20:9: error: no match\
    \ for \u2018operator*=\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long long int\u2019)\n   20 |     ans *= sum / 10;\n      |     ~~~~^~~~~~~~~~~\n\
    /tmp/tmpbdgsr4h_.cpp:21:9: error: no match for \u2018operator%=\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n   21 |  \
    \   ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpbdgsr4h_.cpp:22:9: error: no match\
    \ for \u2018operator*=\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long long int\u2019)\n   22 |     ans *= sum / 10;\n      |     ~~~~^~~~~~~~~~~\n\
    /tmp/tmpbdgsr4h_.cpp:23:9: error: no match for \u2018operator%=\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n   23 |  \
    \   ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpbdgsr4h_.cpp:24:9: error: no match\
    \ for \u2018operator*=\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long long int\u2019)\n   24 |     ans *= sum / 10;\n      |     ~~~~^~~~~~~~~~~\n\
    /tmp/tmpbdgsr4h_.cpp:25:9: error: no match for \u2018operator%=\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n   25 |  \
    \   ans %= 10;\n      |     ~~~~^~~~~\n/tmp/tmpbdgsr4h_.cpp:26:9: error: no match\
    \ for \u2018operator*=\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long long int\u2019)\n   26 |     ans *= sum / 10;\n      |    "
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long sum = 0;\n    for (long long\
    \ i : arr) {\n        sum += i;\n    }\n    long long ones = sum;\n    long long\
    \ zeros = 0;\n    for (long long i : arr) {\n        zeros += i;\n    }\n    std::vector<long>\
    \ ans;\n    long long temp = 0;\n    for (long long i : arr) {\n        temp +=\
    \ i;\n        if (temp > ones) {\n            ans.push_back(temp - ones);\n  \
    \          temp = 0;\n            ones = sum;\n        } else if (temp < ones)\
    \ {\n            ans.push_back(temp - zeros);\n            temp = 0;\n       \
    \     zeros = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp9ijnifs7: /tmp/tmp9ijnifs7.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    long long int sum2 = 0;\n    long long int max2 = 0;\n\
    \    long long int min2 = 0;\n    long long int count2 = 0;\n    long long int\
    \ sum3 = 0;\n    long long int max3 = 0;\n    long long int min3 = 0;\n    long\
    \ long int count3 = 0;\n    long long int sum4 = 0;\n    long long int max4 =\
    \ 0;\n    long long int min4 = 0;\n    long long int count4 = 0;\n    long long\
    \ int sum5 = 0;\n    long long int max5 = 0;\n    long long int min5 = 0;\n  \
    \  long long int count5 = 0;\n    long long int sum6 = 0;\n    long long int max6\
    \ = 0;\n    long long int min6 = 0;\n    long long int count6 = 0;\n    long long\
    \ int sum7 = 0;\n    long long int max7 = 0;\n    long long int min7 = 0;\n  \
    \  long long int count7 = 0;\n    long long int sum8 = 0;\n    long long int max8\
    \ = 0;\n    long long int min8 = 0;\n    long long int count8 = 0;\n    long long\
    \ int sum9 = 0;\n    long long int max9 = 0;\n    long long int min9 = 0;\n  \
    \  long long int count9 = 0;\n    long long int sum10 = 0;\n    long long int\
    \ max10 = 0;\n    long long int min10 = 0;\n    long long int count10 = 0;\n \
    \   long long int sum11 = 0;\n    long long int max11 = 0;\n    long long int\
    \ min11 = 0;\n    long long int count11 = 0;\n    long long int sum12 = 0;\n \
    \   long long int max12 = 0;\n    long long int min12 = 0;\n    long long int\
    \ count12 = 0;\n    long long int sum13 = 0;\n    long long int max13 = 0;\n \
    \   long long int min13 = 0;\n    long long int count13 = 0;\n    long long int\
    \ sum14 = 0;\n    long long int max14 = 0;\n    long long int min14 = 0;\n   \
    \ long long int count14 = 0;\n    long long int sum15 = 0;\n    long long int\
    \ max15 = 0;\n    long long int min15 = 0;\n    long long int count15 = 0;\n \
    \   long long int sum16 = 0;\n    long long int max16 = 0;\n    long long int\
    \ min16 = 0;\n    long long int count16 = 0;\n    long long int sum17 = 0;\n \
    \   long long int max17 = 0;\n\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpyi9z0x4p: /tmp/tmpyi9z0x4p.cpp:79: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for(long long int i : arr){\n\
    \        sum += i;\n        count += 1;\n    }\n    long long int sum2 = sum;\n\
    \    long long int count2 = count;\n    long long int sum3 = sum2;\n    long long\
    \ int count3 = count2;\n    long long int sum4 = sum3;\n    long long int count4\
    \ = count3;\n    long long int sum5 = sum4;\n    long long int count5 = count4;\n\
    \    long long int sum6 = sum5;\n    long long int count6 = count5;\n    long\
    \ long int sum7 = sum6;\n    long long int count7 = count6;\n    long long int\
    \ sum8 = sum7;\n    long long int count8 = count7;\n    long long int sum9 = sum8;\n\
    \    long long int count9 = count8;\n    long long int sum10 = sum9;\n    long\
    \ long int count10 = count9;\n    long long int sum11 = sum10;\n    long long\
    \ int count11 = count10;\n    long long int sum12 = sum11;\n    long long int\
    \ count12 = count11;\n    long long int sum13 = sum12;\n    long long int count13\
    \ = count12;\n    long long int sum14 = sum13;\n    long long int count14 = count13;\n\
    \    long long int sum15 = sum14;\n    long long int count15 = count14;\n    long\
    \ long int sum16 = sum15;\n    long long int count16 = count15;\n    long long\
    \ int sum17 = sum16;\n    long long int count17 = count16;\n    long long int\
    \ sum18 = sum17;\n    long long int count18 = count17;\n    long long int sum19\
    \ = sum18;\n    long long int count19 = count18;\n    long long int sum20 = sum19;\n\
    \    long long int count20 = count19;\n    long long int sum21 = sum20;\n    long\
    \ long int count21 = count20;\n    long long int sum22 = sum21;\n    long long\
    \ int count22 = count21;\n    long long int sum23 = sum22;\n    long long int\
    \ count23 = count22;\n    long long int sum24 = sum23;\n    long long int count24\
    \ = count23;\n    long long int sum25 = sum24;\n    long long int count25 = count24;\n\
    \    long \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbovxy6zr.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbovxy6zr.cpp:64:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmpbovxy6zr.cpp:64:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    long long int sum2 = 0;\n    long long int max2 = 0;\n\
    \    long long int min2 = 0;\n    long long int count2 = 0;\n    long long int\
    \ sum3 = 0;\n    long long int max3 = 0;\n    long long int min3 = 0;\n    long\
    \ long int count3 = 0;\n    long long int sum4 = 0;\n    long long int max4 =\
    \ 0;\n    long long int min4 = 0;\n    long long int count4 = 0;\n    long long\
    \ int sum5 = 0;\n    long long int max5 = 0;\n    long long int min5 = 0;\n  \
    \  long long int count5 = 0;\n    long long int sum6 = 0;\n    long long int max6\
    \ = 0;\n    long long int min6 = 0;\n    long long int count6 = 0;\n    long long\
    \ int sum7 = 0;\n    long long int max7 = 0;\n    long long int min7 = 0;\n  \
    \  long long int count7 = 0;\n    long long int sum8 = 0;\n    long long int max8\
    \ = 0;\n    long long int min8 = 0;\n    long long int count8 = 0;\n    long long\
    \ int sum9 = 0;\n    long long int max9 = 0;\n    long long int min9 = 0;\n  \
    \  long long int count9 = 0;\n    long long int sum10 = 0;\n    long long int\
    \ max10 = 0;\n    long long int min10 = 0;\n    long long int count10 = 0;\n \
    \   long long int sum11 = 0;\n    long long int max11 = 0;\n    long long int\
    \ min11 = 0;\n    long long int count11 = 0;\n    long long int sum12 = 0;\n \
    \   long long int max12 = 0;\n    long long int min12 = 0;\n    long long int\
    \ count12 = 0;\n    long long int sum13 = 0;\n    long long int max13 = 0;\n \
    \   long long int min13 = 0;\n    long long int count13 = 0;\n    long long int\
    \ sum14 = 0;\n    long long int max14 = 0;\n    long long int min14 = 0;\n   \
    \ long long int count14 = 0;\n    long long int sum15 = 0;\n    long long int\
    \ max15 = 0;\n    long long int min15 = 0;\n    long long int count15 = 0;\n \
    \   long long int sum16 = 0;\n    long long int max16 = 0;\n    long long int\
    \ min16 = 0;\n    long long int count16 = 0;\n    long long int sum17 = 0;\n \
    \   long long int max17 = 0;\n\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpyi9z0x4p: /tmp/tmpyi9z0x4p.cpp:79: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i : arr) {\n        sum += i;\n        count += 1;\n    }\n    for (long long\
    \ i : arr) {\n        ans += (sum - i) * count;\n        sum -= i;\n        count\
    \ -= 1;\n    }\n    std::vector<long> ans;\n    for (long long i : arr) {\n  \
    \      ans.push_back((ans - i) * count);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3viu4z76.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3viu4z76.cpp:21:23: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   21 |     std::vector<long> ans;\n      | \
    \                      ^~~\n/tmp/tmp3viu4z76.cpp:9:15: note: previous declaration\
    \ as \u2018long long int ans\u2019\n    9 |     long long ans = 0;\n      |  \
    \             ^~~\n/tmp/tmp3viu4z76.cpp:23:13: error: request for member \u2018\
    push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018long long\
    \ int\u2019\n   23 |         ans.push_back((ans - i) * count);\n      |      \
    \       ^~~~~~~~~\n/tmp/tmp3viu4z76.cpp:25:12: error: could not convert \u2018\
    ans\u2019 from \u2018long long int\u2019 to \u2018std::vector<long int>\u2019\n\
    \   25 |     return ans;\n      |            ^~~\n      |            |\n     \
    \ |            long long int\n"
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n    long long\
    \ ans = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans += arr[i];\n\
    \    }\n    long long temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        temp += arr[i];\n    }\n    long long ans1 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        ans1 += arr[i];\n    }\n    long long ans2 =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans2 += arr[i];\n \
    \   }\n    long long ans3 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans3 += arr[i];\n    }\n    long long ans4 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        ans4 += arr[i];\n    }\n    long long ans5 =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans5 += arr[i];\n \
    \   }\n    long long ans6 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans6 += arr[i];\n    }\n    long long ans7 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        ans7 += arr[i];\n    }\n    long long ans8 =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans8 += arr[i];\n \
    \   }\n    long long ans9 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans9 += arr[i];\n    }\n    long long ans10 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        ans10 += arr[i];\n    }\n    long long ans11\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans11 += arr[i];\n\
    \    }\n    long long ans12 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans12 += arr[i];\n    }\n    long long ans13 = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        ans13 += arr[i];\n    }\n    long long ans14\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans14 += arr[i];\n\
    \    }\n    long long ans15 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans15 += arr[i];\n    }\n    long long ans16 = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        ans16 += arr[i];\n    }\n    long long ans17\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans17 += arr[i];\n\
    \    }\n    long long ans18 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans18 += arr[i];\n    }\n    long long ans19 = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        ans19 += arr[i];\n    }\n    long long ans20\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans20 += arr[i];\n\
    \    }\n    long long ans21 = 0;\n\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp0q_8uutz: /tmp/tmp0q_8uutz.cpp:102: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max_ones = 0;\n    long long int max_dec = 0;\n\
    \    long long int max_pos = 0;\n    long long int max_neg = 0;\n    long long\
    \ int max_zero = 0;\n    long long int max_neg_inc = 0;\n    long long int max_pos_inc\
    \ = 0;\n    long long int max_zero_inc = 0;\n    long long int max_neg_inc_dec\
    \ = 0;\n    long long int max_pos_inc_dec = 0;\n    long long int max_zero_inc_dec\
    \ = 0;\n    long long int max_neg_inc_zero = 0;\n    long long int max_pos_inc_zero\
    \ = 0;\n    long long int max_zero_inc_zero = 0;\n    long long int max_neg_inc_neg\
    \ = 0;\n    long long int max_pos_inc_neg = 0;\n    long long int max_zero_inc_neg\
    \ = 0;\n    long long int max_neg_inc_pos = 0;\n    long long int max_pos_inc_pos\
    \ = 0;\n    long long int max_zero_inc_pos = 0;\n    long long int max_neg_inc_zero\
    \ = 0;\n    long long int max_pos_inc_zero = 0;\n    long long int max_zero_inc_zero\
    \ = 0;\n    long long int max_neg_inc_neg = 0;\n    long long int max_pos_inc_neg\
    \ = 0;\n    long long int max_zero_inc_neg = 0;\n    long long int max_neg_inc_pos\
    \ = 0;\n    long long int max_pos_inc_pos = 0;\n    long long int max_zero_inc_pos\
    \ = 0;\n    long long int max_neg_inc_zero = 0;\n    long long int max_pos_inc_zero\
    \ = 0;\n    long long int max_zero_inc_zero = 0;\n    long long int max_neg_inc_neg\
    \ = 0;\n    long long int max_pos_inc_neg = 0;\n    long long int max_zero_inc_neg\
    \ = 0;\n    long long int max_neg_inc_pos = 0;\n    long long int max_pos_inc_pos\
    \ = 0;\n    long long int max_zero_inc_pos = 0;\n    long long int max_neg_inc_zero\
    \ = 0;\n    long long int max_pos_inc_zero = 0;\n    long long int max_zero_inc_zero\
    \ = 0;\n    long long int max_neg_inc_neg = 0;\n    long long int max_pos_inc_neg\
    \ = 0;\n    long long int max_zero_inc_neg = 0;\n    long long int max_neg_inc_pos\
    \ = 0;\n    long long int max_pos_inc_pos = 0;\n    long long int max_zero_inc_pos\
    \ = 0;\n    long long int max_neg_inc_zero = 0;\n    long long int \n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4c_8kcf5.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4c_8kcf5.cpp:30:19: error: redeclaration of \u2018long\
    \ long int max_neg_inc_zero\u2019\n   30 |     long long int max_neg_inc_zero\
    \ = 0;\n      |                   ^~~~~~~~~~~~~~~~\n/tmp/tmp4c_8kcf5.cpp:21:19:\
    \ note: \u2018long long int max_neg_inc_zero\u2019 previously declared here\n\
    \   21 |     long long int max_neg_inc_zero = 0;\n      |                   ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp4c_8kcf5.cpp:31:19: error: redeclaration of \u2018long long int max_pos_inc_zero\u2019\
    \n   31 |     long long int max_pos_inc_zero = 0;\n      |                   ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp4c_8kcf5.cpp:22:19: note: \u2018long long int max_pos_inc_zero\u2019 previously\
    \ declared here\n   22 |     long long int max_pos_inc_zero = 0;\n      |    \
    \               ^~~~~~~~~~~~~~~~\n/tmp/tmp4c_8kcf5.cpp:32:19: error: redeclaration\
    \ of \u2018long long int max_zero_inc_zero\u2019\n   32 |     long long int max_zero_inc_zero\
    \ = 0;\n      |                   ^~~~~~~~~~~~~~~~~\n/tmp/tmp4c_8kcf5.cpp:23:19:\
    \ note: \u2018long long int max_zero_inc_zero\u2019 previously declared here\n\
    \   23 |     long long int max_zero_inc_zero = 0;\n      |                   ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4c_8kcf5.cpp:33:19: error: redeclaration of \u2018long long int max_neg_inc_neg\u2019\
    \n   33 |     long long int max_neg_inc_neg = 0;\n      |                   ^~~~~~~~~~~~~~~\n\
    /tmp/tmp4c_8kcf5.cpp:24:19: note: \u2018long long int max_neg_inc_neg\u2019 previously\
    \ declared here\n   24 |     long long int max_neg_inc_neg = 0;\n      |     \
    \              ^~~~~~~~~~~~~~~\n/tmp/tmp4c_8kcf5.cpp:34:19: error: redeclaration\
    \ of \u2018long long int max_pos_inc_neg\u2019\n   34 |     long long int max_pos_inc_neg\
    \ = 0;\n      |                   ^~~~~~~~~~~~~~~\n/tmp/tmp4c_8kcf5.cpp:25:19:\
    \ note: \u2018long long int max_pos_inc_neg\u2019 previously declared here\n \
    \  25 |     long long int max_pos_inc_neg = 0;\n      |                   ^~~~~~~~~~~~~~~\n\
    /tmp/tmp4c_8kcf5.cpp:35:19: error: redeclaration of \u2018long long int max_zero_inc_neg\u2019\
    \n   35 |     long long int max_zer"
  stdout: ''
  timestamp: 1660104457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    long long int temp = 0;\n    long long int temp2\
    \ = 0;\n    long long int temp3 = 0;\n    long long int temp4 = 0;\n    long long\
    \ int temp5 = 0;\n    long long int temp6 = 0;\n    long long int temp7 = 0;\n\
    \    long long int temp8 = 0;\n    long long int temp9 = 0;\n    long long int\
    \ temp10 = 0;\n    long long int temp11 = 0;\n    long long int temp12 = 0;\n\
    \    long long int temp13 = 0;\n    long long int temp14 = 0;\n    long long int\
    \ temp15 = 0;\n    long long int temp16 = 0;\n    long long int temp17 = 0;\n\
    \    long long int temp18 = 0;\n    long long int temp19 = 0;\n    long long int\
    \ temp20 = 0;\n    long long int temp21 = 0;\n    long long int temp22 = 0;\n\
    \    long long int temp23 = 0;\n    long long int temp24 = 0;\n    long long int\
    \ temp25 = 0;\n    long long int temp26 = 0;\n    long long int temp27 = 0;\n\
    \    long long int temp28 = 0;\n    long long int temp29 = 0;\n    long long int\
    \ temp30 = 0;\n    long long int temp31 = 0;\n    long long int temp32 = 0;\n\
    \    long long int temp33 = 0;\n    long long int temp34 = 0;\n    long long int\
    \ temp35 = 0;\n    long long int temp36 = 0;\n    long long int temp37 = 0;\n\
    \    long long int temp38 = 0;\n    long long int temp39 = 0;\n    long long int\
    \ temp40 = 0;\n    long long int temp41 = 0;\n    long long int temp42 = 0;\n\
    \    long long int temp43 = 0;\n    long long int temp44 = 0;\n    long long int\
    \ temp45 = 0;\n    long long int temp46 = 0;\n    long long int temp47 = 0;\n\
    \    long long int temp48 = 0;\n    long long int temp49 = 0;\n    long long int\
    \ temp50 = 0;\n    long long int temp51 = 0;\n    long long int temp52 = 0;\n\
    \    long long int temp53 = 0;\n    long long int temp54 = 0;\n    long long int\
    \ temp55 = 0;\n    long long int temp56 = 0;\n    long long int temp57 = 0;\n\
    \    long long int temp58 = 0;\n    long long int temp59 = 0;\n    long long int\
    \ temp60 = 0;\n    long long int temp\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1f5wkgp_.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1f5wkgp_.cpp:74:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp1f5wkgp_.cpp:74:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long ans = 0;\n    long long max_ones\
    \ = 0;\n    long long min_ones = 0;\n    for (long long i : arr) {\n        ans\
    \ += i;\n        max_ones = std::max(max_ones, i);\n        min_ones = std::min(min_ones,\
    \ i);\n    }\n    std::vector<long> res(arr.size());\n    for (long long i : arr)\
    \ {\n        long long cnt = 0;\n        for (long long j : arr) {\n         \
    \   if (j == i) continue;\n            cnt += __builtin_popcount(j);\n       \
    \ }\n        res[cnt / max_ones] = i;\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpv23my7no: /tmp/tmpv23my7no.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    long long int max = 0;\n   \
    \ long long int min = 0;\n    long long int mid = 0;\n    long long int temp =\
    \ 0;\n    long long int temp2 = 0;\n    long long int temp3 = 0;\n    long long\
    \ int temp4 = 0;\n    long long int temp5 = 0;\n    long long int temp6 = 0;\n\
    \    long long int temp7 = 0;\n    long long int temp8 = 0;\n    long long int\
    \ temp9 = 0;\n    long long int temp10 = 0;\n    long long int temp11 = 0;\n \
    \   long long int temp12 = 0;\n    long long int temp13 = 0;\n    long long int\
    \ temp14 = 0;\n    long long int temp15 = 0;\n    long long int temp16 = 0;\n\
    \    long long int temp17 = 0;\n    long long int temp18 = 0;\n    long long int\
    \ temp19 = 0;\n    long long int temp20 = 0;\n    long long int temp21 = 0;\n\
    \    long long int temp22 = 0;\n    long long int temp23 = 0;\n    long long int\
    \ temp24 = 0;\n    long long int temp25 = 0;\n    long long int temp26 = 0;\n\
    \    long long int temp27 = 0;\n    long long int temp28 = 0;\n    long long int\
    \ temp29 = 0;\n    long long int temp30 = 0;\n    long long int temp31 = 0;\n\
    \    long long int temp32 = 0;\n    long long int temp33 = 0;\n    long long int\
    \ temp34 = 0;\n    long long int temp35 = 0;\n    long long int temp36 = 0;\n\
    \    long long int temp37 = 0;\n    long long int temp38 = 0;\n    long long int\
    \ temp39 = 0;\n    long long int temp40 = 0;\n    long long int temp41 = 0;\n\
    \    long long int temp42 = 0;\n    long long int temp43 = 0;\n    long long int\
    \ temp44 = 0;\n    long long int temp45 = 0;\n    long long int temp46 = 0;\n\
    \    long long int temp47 = 0;\n    long long int temp48 = 0;\n    long long int\
    \ temp49 = 0;\n    long long int temp50 = 0;\n    long long int temp51 = 0;\n\
    \    long long int temp52 = 0;\n    long long int temp53 = 0;\n    long long int\
    \ temp54 = 0;\n    long long int temp55 = 0;\n    long long int temp56 = 0;\n\
    \    long long int temp57 = 0;\n    long long int temp58 = 0;\n    long long int\
    \ temp59 = 0;\n    long long int temp60\n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp307yruy5.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp307yruy5.cpp:74:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp307yruy5.cpp:74:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for(long long int i : arr){\n\
    \        sum += i;\n        count += 1;\n    }\n    long long int temp = sum;\n\
    \    long long int temp2 = count;\n    long long int temp3 = sum / temp2;\n  \
    \  long long int temp4 = sum % temp2;\n    long long int temp5 = temp3 - temp4;\n\
    \    long long int temp6 = temp3 - temp5;\n    long long int temp7 = temp6 / temp2;\n\
    \    long long int temp8 = temp6 % temp2;\n    long long int temp9 = temp7 - temp8;\n\
    \    long long int temp10 = temp7 - temp9;\n    long long int temp11 = temp10\
    \ / temp2;\n    long long int temp12 = temp10 % temp2;\n    long long int temp13\
    \ = temp11 - temp12;\n    long long int temp14 = temp11 - temp13;\n    long long\
    \ int temp15 = temp14 / temp2;\n    long long int temp16 = temp14 % temp2;\n \
    \   long long int temp17 = temp15 - temp16;\n    long long int temp18 = temp15\
    \ - temp17;\n    long long int temp19 = temp18 / temp2;\n    long long int temp20\
    \ = temp18 % temp2;\n    long long int temp21 = temp19 - temp20;\n    long long\
    \ int temp22 = temp19 - temp21;\n    long long int temp23 = temp22 / temp2;\n\
    \    long long int temp24 = temp22 % temp2;\n    long long int temp25 = temp23\
    \ - temp24;\n    long long int temp26 = temp23 - temp25;\n    long long int temp27\
    \ = temp26 / temp2;\n    long long int temp28 = temp26 % temp2;\n    long long\
    \ int temp29 = temp27 - temp28;\n    long long int temp30 = temp27 - temp29;\n\
    \    long long int temp31 = temp30 / temp2;\n    long long int temp32 = temp30\
    \ % temp2;\n    long long int temp33 = temp31 - temp32;\n    long long int temp34\
    \ = temp31 - temp33;\n    long long int temp35 = temp34 / temp2;\n    long long\
    \ int temp36 = temp34 % temp2;\n    long long int temp37 = temp35 - temp36;\n\
    \    long long int temp38 = temp\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhuazjo9.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwhuazjo9.cpp:53:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpwhuazjo9.cpp:53:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : arr) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long ones = sum / count;\n    long\
    \ long decimal = sum % count;\n    long long max = 0;\n    for (long long i :\
    \ arr) {\n        if (i == ones) {\n            max = i;\n        } else if (i\
    \ > max) {\n            max = i;\n        }\n    }\n    std::vector<long> ans;\n\
    \    for (long long i : arr) {\n        if (i == max) {\n            ans.push_back(i);\n\
    \        }\n    }\n    long long ans_sum = 0;\n    for (long long i : ans) {\n\
    \        ans_sum += i;\n    }\n    long long ans_count = ans.size();\n    long\
    \ long ans_ones = ans_sum / ans_count;\n    long long ans_decimal = ans_sum %\
    \ ans_count;\n    long long ans_max = ans[0];\n    for (long long i : ans) {\n\
    \        if (i == ans_ones) {\n            ans_max = i;\n        } else if (i\
    \ > ans_max) {\n            ans_max = i;\n        }\n    }\n    std::vector<long>\
    \ ans_ans;\n    for (long long i : ans) {\n        if (i == ans_max) {\n     \
    \       ans_ans.push_back(i);\n        }\n    }\n    long long ans_ans_sum = 0;\n\
    \    for (long long i : ans_ans) {\n        ans_ans_sum += i;\n    }\n    long\
    \ long ans_ans_count = ans_ans.size();\n    long long ans_ans_ones = ans_ans_sum\
    \ / ans_ans_count;\n    long long ans_ans_decimal = ans_ans_sum % ans_ans_count;\n\
    \    long long ans_ans_max = ans_ans[0];\n    for (long long i : ans_ans) {\n\
    \        if (i == ans_ans_ones) {\n            ans_ans_max = i;\n        } else\
    \ if (i > ans_ans_max) {\n            ans_ans_max = i;\n        }\n    }\n   \
    \ std::vector<long> ans_ans_ans;\n    for (long long i : ans_ans) {\n        if\
    \ (i == ans_ans_max) {\n            ans_ans_ans.push_back(i);\n        }\n   \
    \ }\n    long long ans_ans_ans_sum = 0;\n    for (long long i : ans_ans_ans) {\n\
    \        ans_ans_ans_sum += i;\n    }\n    long long ans_ans_ans_count = ans_ans_ans.size();\n\
    \    \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpd9tfl1f2: /tmp/tmpd9tfl1f2.cpp:82: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long ans = 0;\n    for (long long\
    \ i : arr) {\n        ans += i;\n    }\n    std::vector<long> res(arr.size());\n\
    \    for (long long i : arr) {\n        long long bin = i;\n        while (bin)\
    \ {\n            int pos = 0;\n            while (pos < 32 && bin & 1) {\n   \
    \             bin >>= 1;\n                pos++;\n            }\n            res[pos]++;\n\
    \        }\n    }\n    for (long long i : arr) {\n        ans -= i;\n    }\n \
    \   for (long long i : res) {\n        ans += i;\n    }\n    std::vector<long>\
    \ res2(ans);\n    for (long long i : res) {\n        res2[i] = i;\n    }\n   \
    \ return res2;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> res;\n    for (long\
    \ i : arr) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end(), [](long a, long b) { return a >\
    \ b; });\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpyx7wv2kq: /tmp/tmpyx7wv2kq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> sorted_arr;\n   \
    \ long ones = 0;\n    for (long i : arr) {\n        ones += i;\n    }\n    long\
    \ max_ones = ones;\n    for (long i : arr) {\n        max_ones = std::max(max_ones,\
    \ i);\n    }\n    long decimal_val = max_ones;\n    for (long i : arr) {\n   \
    \     decimal_val -= i;\n    }\n    for (long i : arr) {\n        sorted_arr.push_back(i);\n\
    \    }\n    long decimal_val2 = decimal_val;\n    for (long i : arr) {\n     \
    \   decimal_val2 += i;\n    }\n    long decimal_val3 = decimal_val2;\n    for\
    \ (long i : arr) {\n        decimal_val3 -= i;\n    }\n    long decimal_val4 =\
    \ decimal_val3;\n    for (long i : arr) {\n        decimal_val4 += i;\n    }\n\
    \    long decimal_val5 = decimal_val4;\n    for (long i : arr) {\n        decimal_val5\
    \ -= i;\n    }\n    long decimal_val6 = decimal_val5;\n    for (long i : arr)\
    \ {\n        decimal_val6 += i;\n    }\n    long decimal_val7 = decimal_val6;\n\
    \    for (long i : arr) {\n        decimal_val7 -= i;\n    }\n    long decimal_val8\
    \ = decimal_val7;\n    for (long i : arr) {\n        decimal_val8 += i;\n    }\n\
    \    long decimal_val9 = decimal_val8;\n    for (long i : arr) {\n        decimal_val9\
    \ -= i;\n    }\n    long decimal_val10 = decimal_val9;\n    for (long i : arr)\
    \ {\n        decimal_val10 += i;\n    }\n    long decimal_val11 = decimal_val10;\n\
    \    for (long i : arr) {\n        decimal_val11 -= i;\n    }\n    long decimal_val12\
    \ = decimal_val11;\n    for (long i : arr) {\n        decimal_val12 += i;\n  \
    \  }\n    long decimal_val13 = decimal_val12;\n    for (long i : arr) {\n    \
    \    decimal_val13 -= i;\n    }\n    long decimal_val14 = decimal_val13;\n   \
    \ for (long i : arr) {\n        decimal_val14 += i;\n    }\n    long decimal_val15\
    \ = decimal_val14;\n    for (long i : arr) {\n        decimal_val15 -= i;\n  \
    \  }\n    long decimal_val16 = decimal_val15;\n    for (long i : arr) {\n    \
    \    decimal_val16 += i;\n    }\n    long decimal_val17 = decimal_val16;\n   \
    \ for (long i : arr) {\n        decimal_val17 -= i;\n    }\n    long decimal_val18\
    \ = decimal_val17;\n    for (long i : arr) {\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl96nn2ta.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpl96nn2ta.cpp:91:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   91 | int main() {\n      |     \
    \       ^\n/tmp/tmpl96nn2ta.cpp:101:1: error: expected \u2018}\u2019 at end of\
    \ input\n  101 | }\n      | ^\n/tmp/tmpl96nn2ta.cpp:7:53: note: to match this\
    \ \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long> arr) {\n\
    \      |                                                     ^\n/tmp/tmpl96nn2ta.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  101 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans += arr[i];\n\
    \    }\n    long long ones = 0;\n    for (long long i = 0; i < arr.size(); i++)\
    \ {\n        ones += arr[i] & 1;\n    }\n    long long dec = 0;\n    for (long\
    \ long i = 0; i < arr.size(); i++) {\n        dec += arr[i] >> 1;\n    }\n   \
    \ std::vector<long> ans_list;\n    long long temp = 0;\n    for (long long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] != 0) {\n            ans_list.push_back(arr[i]);\n\
    \        }\n    }\n    long long ans_listsize = ans_list.size();\n    long long\
    \ ans_listsize2 = ans_listsize;\n    long long ans_listsize3 = ans_listsize2;\n\
    \    long long ans_listsize4 = ans_listsize3;\n    long long ans_listsize5 = ans_listsize4;\n\
    \    long long ans_listsize6 = ans_listsize5;\n    long long ans_listsize7 = ans_listsize6;\n\
    \    long long ans_listsize8 = ans_listsize7;\n    long long ans_listsize9 = ans_listsize8;\n\
    \    long long ans_listsize10 = ans_listsize9;\n    long long ans_listsize11 =\
    \ ans_listsize10;\n    long long ans_listsize12 = ans_listsize11;\n    long long\
    \ ans_listsize13 = ans_listsize12;\n    long long ans_listsize14 = ans_listsize13;\n\
    \    long long ans_listsize15 = ans_listsize14;\n    long long ans_listsize16\
    \ = ans_listsize15;\n    long long ans_listsize17 = ans_listsize16;\n    long\
    \ long ans_listsize18 = ans_listsize17;\n    long long ans_listsize19 = ans_listsize18;\n\
    \    long long ans_listsize20 = ans_listsize19;\n    long long ans_listsize21\
    \ = ans_listsize20;\n    long long ans_listsize22 = ans_listsize21;\n    long\
    \ long ans_listsize23 = ans_listsize22;\n    long long ans_listsize24 = ans_listsize23;\n\
    \    long long ans_listsize25 = ans_listsize24;\n    long long ans_listsize26\
    \ = ans_listsize25;\n    long long ans_listsize27 = ans_listsize26;\n    long\
    \ long ans_listsize28 = ans_listsize27;\n    long long ans_listsize29 = ans_listsize28;\n\
    \    long long ans_listsize30 = ans_listsize29;\n    long long ans_listsize31\
    \ = an\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ff2hw62.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8ff2hw62.cpp:58:32: error: \u2018an\u2019 was not declared\
    \ in this scope; did you mean \u2018ans\u2019?\n   58 |     long long ans_listsize31\
    \ = an\n      |                                ^~\n      |                   \
    \             ans\n/tmp/tmp8ff2hw62.cpp:59:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n   59 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for(long long int i : arr){\n\
    \        sum += i;\n        count += 1;\n    }\n    std::vector<long> ans;\n \
    \   long long int ones = 0;\n    long long int tens = 0;\n    long long int hundreds\
    \ = 0;\n    long long int thousands = 0;\n    long long int ten_thousands = 0;\n\
    \    long long int hundred_thousands = 0;\n    long long int thousand_thousands\
    \ = 0;\n    long long int hundred_thousand_thousands = 0;\n    long long int thousand_hundred_thousands\
    \ = 0;\n    long long int hundred_thousand_hundred_thousands = 0;\n    long long\
    \ int thousand_hundred_thousand_hundred_thousands = 0;\n    long long int hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long long int thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppwrf0wbd.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppwrf0wbd.cpp:37:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   37 | }\n      | ^\n/tmp/tmppwrf0wbd.cpp:37:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long cnt = 0;\n    long long sum = 0;\n    for (long long\
    \ i : arr) {\n        sum += i;\n        cnt += 1;\n    }\n    for (long long\
    \ i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    ans\
    \ /= arr.size();\n    return std::vector<long>(arr.begin(), arr.begin() + arr.size());\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpy0y48egj: /tmp/tmpy0y48egj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        count += 1;\n    }\n  \
    \  long long int sum2 = 0;\n    long long int max2 = 0;\n    long long int min2\
    \ = 0;\n    long long int count2 = 0;\n    for (long long int i : arr) {\n   \
    \     sum2 += i;\n        if (sum2 > max2) {\n            max2 = sum2;\n     \
    \   }\n        if (sum2 < min2) {\n            min2 = sum2;\n        }\n     \
    \   count2 += 1;\n    }\n    long long int sum3 = 0;\n    long long int max3 =\
    \ 0;\n    long long int min3 = 0;\n    long long int count3 = 0;\n    for (long\
    \ long int i : arr) {\n        sum3 += i;\n        if (sum3 > max3) {\n      \
    \      max3 = sum3;\n        }\n        if (sum3 < min3) {\n            min3 =\
    \ sum3;\n        }\n        count3 += 1;\n    }\n    long long int sum4 = 0;\n\
    \    long long int max4 = 0;\n    long long int min4 = 0;\n    long long int count4\
    \ = 0;\n    for (long long int i : arr) {\n        sum4 += i;\n        if (sum4\
    \ > max4) {\n            max4 = sum4;\n        }\n        if (sum4 < min4) {\n\
    \            min4 = sum4;\n        }\n        count4 += 1;\n    }\n    long long\
    \ int sum5 = 0;\n    long long int max5 = 0;\n    long long int min5 = 0;\n  \
    \  long long int count5 = 0;\n    for (long long int i : arr) {\n        sum5\
    \ += i;\n        if (sum5 > max5) {\n            max5 = sum5;\n        }\n   \
    \     if (sum5 < min5) {\n            min5 = sum5;\n        }\n        count5\
    \ += 1;\n    }\n    long long int sum6 = 0;\n    long long int max6 = 0;\n   \
    \ long long int min6 = 0;\n    long long int count6 = 0;\n    for (long long int\
    \ i : arr) {\n        sum6 += i;\n        if (sum6 > max6) {\n            max6\
    \ = sum6;\n        }\n        if (sum6 < min6) {\n            min6 = sum6;\n \
    \       }\n        count6 += 1;\n    }\n    long long int sum7 = 0;\n    long\
    \ long int max7 = 0;\n    long long int min7 = 0;\n    long long int count7 =\
    \ 0;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpj0ym5qmm: /tmp/tmpj0ym5qmm.cpp:100: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    long long int sum2 = 0;\n    long long int max2 = 0;\n\
    \    long long int min2 = 0;\n    long long int count2 = 0;\n    long long int\
    \ sum3 = 0;\n    long long int max3 = 0;\n    long long int min3 = 0;\n    long\
    \ long int count3 = 0;\n    long long int sum4 = 0;\n    long long int max4 =\
    \ 0;\n    long long int min4 = 0;\n    long long int count4 = 0;\n    long long\
    \ int sum5 = 0;\n    long long int max5 = 0;\n    long long int min5 = 0;\n  \
    \  long long int count5 = 0;\n    long long int sum6 = 0;\n    long long int max6\
    \ = 0;\n    long long int min6 = 0;\n    long long int count6 = 0;\n    long long\
    \ int sum7 = 0;\n    long long int max7 = 0;\n    long long int min7 = 0;\n  \
    \  long long int count7 = 0;\n    long long int sum8 = 0;\n    long long int max8\
    \ = 0;\n    long long int min8 = 0;\n    long long int count8 = 0;\n    long long\
    \ int sum9 = 0;\n    long long int max9 = 0;\n    long long int min9 = 0;\n  \
    \  long long int count9 = 0;\n    long long int sum10 = 0;\n    long long int\
    \ max10 = 0;\n    long long int min10 = 0;\n    long long int count10 = 0;\n \
    \   long long int sum11 = 0;\n    long long int max11 = 0;\n    long long int\
    \ min11 = 0;\n    long long int count11 = 0;\n    long long int sum12 = 0;\n \
    \   long long int max12 = 0;\n    long long int min12 = 0;\n    long long int\
    \ count12 = 0;\n    long long int sum13 = 0;\n    long long int max13 = 0;\n \
    \   long long int min13 = 0;\n    long long int count13 = 0;\n    long long int\
    \ sum14 = 0;\n    long long int max14 = 0;\n    long long int min14 = 0;\n   \
    \ long long int count14 = 0;\n    long long int sum15 = 0;\n    long long int\
    \ max15 = 0;\n    long long int min15 = 0;\n    long long int count15 = 0;\n \
    \   long long int sum16 = 0;\n    long long int max16 = 0;\n    long long int\
    \ min16 = 0;\n    long long int count16 = 0;\n    long long int sum17 = 0;\n \
    \   long long int max17 = 0;\n\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpyi9z0x4p: /tmp/tmpyi9z0x4p.cpp:79: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int count = 0;\n    for(long long int i : arr){\n        sum += i;\n  \
    \      if(sum > max){\n            max = sum;\n        }\n        if(sum < min){\n\
    \            min = sum;\n        }\n        if(sum == 0){\n            count++;\n\
    \        }\n        sum = 0;\n    }\n    long long int arr_size = arr.size();\n\
    \    long long int max_size = max;\n    long long int min_size = min;\n    long\
    \ long int count_size = count;\n    long long int arr_size = arr.size();\n   \
    \ long long int max_size = max;\n    long long int min_size = min;\n    long long\
    \ int count_size = count;\n    long long int arr_size = arr.size();\n    long\
    \ long int max_size = max;\n    long long int min_size = min;\n    long long int\
    \ count_size = count;\n    long long int arr_size = arr.size();\n    long long\
    \ int max_size = max;\n    long long int min_size = min;\n    long long int count_size\
    \ = count;\n    long long int arr_size = arr.size();\n    long long int max_size\
    \ = max;\n    long long int min_size = min;\n    long long int count_size = count;\n\
    \    long long int arr_size = arr.size();\n    long long int max_size = max;\n\
    \    long long int min_size = min;\n    long long int count_size = count;\n  \
    \  long long int arr_size = arr.size();\n    long long int max_size = max;\n \
    \   long long int min_size = min;\n    long long int count_size = count;\n   \
    \ long long int arr_size = arr.size();\n    long long int max_size = max;\n  \
    \  long long int min_size = min;\n    long long int count_size = count;\n    long\
    \ long int arr_size = arr.size();\n    long long int max_size = max;\n    long\
    \ long int min_size = min;\n    long long int count_size = count;\n    long long\
    \ int arr_size = arr.size();\n    long long int max_size = max;\n    long long\
    \ int min_size = min;\n    long long int count_size = count;\n    long long int\
    \ arr_size = arr.size();\n    long long int max_size = max;\n    long long int\
    \ min_size = min;\n    long long int count_size = count;\n    long long int arr_size\
    \ = arr.size();\n    long long int max_size = max;\n    long long int min_size\
    \ = min\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rq0idtr.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7rq0idtr.cpp:30:19: error: redeclaration of \u2018long\
    \ long int arr_size\u2019\n   30 |     long long int arr_size = arr.size();\n\
    \      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:26:19: note: \u2018\
    long long int arr_size\u2019 previously declared here\n   26 |     long long int\
    \ arr_size = arr.size();\n      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:31:19:\
    \ error: redeclaration of \u2018long long int max_size\u2019\n   31 |     long\
    \ long int max_size = max;\n      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:27:19:\
    \ note: \u2018long long int max_size\u2019 previously declared here\n   27 | \
    \    long long int max_size = max;\n      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:32:19:\
    \ error: redeclaration of \u2018long long int min_size\u2019\n   32 |     long\
    \ long int min_size = min;\n      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:28:19:\
    \ note: \u2018long long int min_size\u2019 previously declared here\n   28 | \
    \    long long int min_size = min;\n      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:33:19:\
    \ error: redeclaration of \u2018long long int count_size\u2019\n   33 |     long\
    \ long int count_size = count;\n      |                   ^~~~~~~~~~\n/tmp/tmp7rq0idtr.cpp:29:19:\
    \ note: \u2018long long int count_size\u2019 previously declared here\n   29 |\
    \     long long int count_size = count;\n      |                   ^~~~~~~~~~\n\
    /tmp/tmp7rq0idtr.cpp:34:19: error: redeclaration of \u2018long long int arr_size\u2019\
    \n   34 |     long long int arr_size = arr.size();\n      |                  \
    \ ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:26:19: note: \u2018long long int arr_size\u2019\
    \ previously declared here\n   26 |     long long int arr_size = arr.size();\n\
    \      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:35:19: error: redeclaration\
    \ of \u2018long long int max_size\u2019\n   35 |     long long int max_size =\
    \ max;\n      |                   ^~~~~~~~\n/tmp/tmp7rq0idtr.cpp:27:19: note:\
    \ \u2018long long int max_size\u2019 previously declared here\n   27 |     long\
    \ long int max_size = max;\n    "
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> res(arr.size());\n\
    \    for (long &i : arr) {\n        long count = 0;\n        while (i != 0) {\n\
    \            i &= i - 1;\n            ++count;\n        }\n        res[count]\
    \ = i;\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp1uxyynpi: /tmp/tmp1uxyynpi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    long long ans = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        ans += arr[i];\n    }\n    long long ans1\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans1 += arr[i];\n\
    \    }\n    long long ans2 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans2 += arr[i];\n    }\n    long long ans3 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        ans3 += arr[i];\n    }\n    long long ans4 =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans4 += arr[i];\n \
    \   }\n    long long ans5 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans5 += arr[i];\n    }\n    long long ans6 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        ans6 += arr[i];\n    }\n    long long ans7 =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans7 += arr[i];\n \
    \   }\n    long long ans8 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans8 += arr[i];\n    }\n    long long ans9 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        ans9 += arr[i];\n    }\n    long long ans10\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans10 += arr[i];\n\
    \    }\n    long long ans11 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans11 += arr[i];\n    }\n    long long ans12 = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        ans12 += arr[i];\n    }\n    long long ans13\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans13 += arr[i];\n\
    \    }\n    long long ans14 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans14 += arr[i];\n    }\n    long long ans15 = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        ans15 += arr[i];\n    }\n    long long ans16\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans16 += arr[i];\n\
    \    }\n    long long ans17 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans17 += arr[i];\n    }\n    long long ans18 = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        ans18 += arr[i];\n    }\n    long long ans19\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        ans19 += arr[i];\n\
    \    }\n    long long ans20 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        ans20 += arr[i];\n    }\n    long long ans21 = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        ans21 += arr[i];\n    }\n    long long ans22\
    \ = 0;\n    for (long \n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9p0nzku.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy9p0nzku.cpp:98:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   98 | }\n      | ^\n/tmp/tmpy9p0nzku.cpp:97:14: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   97 |     for (long\n \
    \     |              ^\n      |              ;\n   98 | }\n      | ~         \
    \    \n/tmp/tmpy9p0nzku.cpp:98:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   98 | }\n      | ^\n/tmp/tmpy9p0nzku.cpp:97:14: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   97 |     for (long\n      |   \
    \           ^\n      |              ;\n   98 | }\n      | ~             \n/tmp/tmpy9p0nzku.cpp:98:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   98 | }\n \
    \     | ^\n/tmp/tmpy9p0nzku.cpp:97:14: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   97 |     for (long\n      |         ~    ^\n      |        \
    \      )\n   98 | }\n      | ~             \n/tmp/tmpy9p0nzku.cpp:98:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   98 | }\n      | ^\n\
    /tmp/tmpy9p0nzku.cpp:98:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int max_ones = 0;\n    long long int min_ones =\
    \ 0;\n    long long int max_decimal = 0;\n    long long int min_decimal = 0;\n\
    \    long long int max_decimal2 = 0;\n    long long int min_decimal2 = 0;\n  \
    \  long long int max_decimal3 = 0;\n    long long int min_decimal3 = 0;\n    long\
    \ long int max_decimal4 = 0;\n    long long int min_decimal4 = 0;\n    long long\
    \ int max_decimal5 = 0;\n    long long int min_decimal5 = 0;\n    long long int\
    \ max_decimal6 = 0;\n    long long int min_decimal6 = 0;\n    long long int max_decimal7\
    \ = 0;\n    long long int min_decimal7 = 0;\n    long long int max_decimal8 =\
    \ 0;\n    long long int min_decimal8 = 0;\n    long long int max_decimal9 = 0;\n\
    \    long long int min_decimal9 = 0;\n    long long int max_decimal10 = 0;\n \
    \   long long int min_decimal10 = 0;\n    long long int max_decimal11 = 0;\n \
    \   long long int min_decimal11 = 0;\n    long long int max_decimal12 = 0;\n \
    \   long long int min_decimal12 = 0;\n    long long int max_decimal13 = 0;\n \
    \   long long int min_decimal13 = 0;\n    long long int max_decimal14 = 0;\n \
    \   long long int min_decimal14 = 0;\n    long long int max_decimal15 = 0;\n \
    \   long long int min_decimal15 = 0;\n    long long int max_decimal16 = 0;\n \
    \   long long int min_decimal16 = 0;\n    long long int max_decimal17 = 0;\n \
    \   long long int min_decimal17 = 0;\n    long long int max_decimal18 = 0;\n \
    \   long long int min_decimal18 = 0;\n    long long int max_decimal19 = 0;\n \
    \   long long int min_decimal19 = 0;\n    long long int max_decimal20 = 0;\n \
    \   long long int min_decimal20 = 0;\n    long long int max_decimal21 = 0;\n \
    \   long long int min_decimal21 = 0;\n    long long int max_decimal22 = 0;\n \
    \   long long int min_decimal22 = 0;\n    long long int max_decimal23 = 0;\n \
    \   long long int min_decimal23 = 0;\n    long long int max_decimal24 = 0;\n \
    \   long long int min_decimal24 = 0;\n    long long int max_decimal25 = 0;\n \
    \   long long int min_decimal25 = 0;\n    long long int max_decimal26 = 0;\n \
    \   long long int min_decimal26 = 0;\n    long long int max_decimal27 = 0;\n \
    \   long long int min_decimal27 = 0;\n    long long int max_decimal28 = 0;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp9tli_8sg: /tmp/tmp9tli_8sg.cpp:70: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ sum = 0;\n    long long count = 0;\n    long long max = 0;\n    for(long long\
    \ i : arr){\n        sum += i;\n        count += 1;\n        if(sum > max){\n\
    \            max = sum;\n        }\n    }\n    std::vector<long> ans;\n    for(long\
    \ long i : arr){\n        if(count == 1){\n            ans.push_back(i);\n   \
    \     }\n        else{\n            long long temp = count * i;\n            ans.push_back(temp);\n\
    \            count -= 1;\n            sum += temp;\n        }\n    }\n    for(long\
    \ long i : ans){\n        ans.push_back(i);\n    }\n    for(long long i : ans){\n\
    \        ans.push_back(count * i);\n    }\n    for(long long i : ans){\n     \
    \   ans.push_back(sum - i);\n    }\n    for(long long i : ans){\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpvyzh2uzb: /tmp/tmpvyzh2uzb.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : arr) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long ones = sum / count;\n    long\
    \ long decimal = sum % count;\n    long long result = 0;\n    for (long long i\
    \ : arr) {\n        result += i;\n    }\n    long long temp = result - decimal;\n\
    \    long long temp2 = temp / ones;\n    long long temp3 = temp % ones;\n    long\
    \ long temp4 = temp2 - temp3;\n    long long temp5 = temp4 / count;\n    long\
    \ long temp6 = temp4 % count;\n    long long temp7 = temp5 - temp6;\n    long\
    \ long temp8 = temp7 / count;\n    long long temp9 = temp7 % count;\n    long\
    \ long temp10 = temp8 / count;\n    long long temp11 = temp8 % count;\n    long\
    \ long temp12 = temp9 - temp10;\n    long long temp13 = temp12 / count;\n    long\
    \ long temp14 = temp12 % count;\n    long long temp15 = temp13 - temp14;\n   \
    \ long long temp16 = temp15 / count;\n    long long temp17 = temp15 % count;\n\
    \    long long temp18 = temp16 / count;\n    long long temp19 = temp16 % count;\n\
    \    long long temp20 = temp18 / count;\n    long long temp21 = temp18 % count;\n\
    \    long long temp22 = temp20 / count;\n    long long temp23 = temp20 % count;\n\
    \    long long temp24 = temp21 / count;\n    long long temp25 = temp21 % count;\n\
    \    long long temp26 = temp22 / count;\n    long long temp27 = temp22 % count;\n\
    \    long long temp28 = temp23 / count;\n    long long temp29 = temp23 % count;\n\
    \    long long temp30 = temp24 / count;\n    long long temp31 = temp24 % count;\n\
    \    long long temp32 = temp25 / count;\n    long long temp33 = temp25 % count;\n\
    \    long long temp34 = temp26 / count;\n    long long temp35 = temp26 % count;\n\
    \    long long temp36 = temp27 / count;\n    long long temp37 = temp27 % count;\n\
    \    long long temp38 = temp28 / count;\n    long long temp39 = temp28 % count;\n\
    \    long long temp40 = temp29 / count;\n    long long temp41 = temp29 % \n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfvv36vp.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbfvv36vp.cpp:62:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpbfvv36vp.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for (long long i : arr) {\n        sum\
    \ += i;\n        count += 1;\n    }\n    long long ones = count - 1;\n    long\
    \ long tens = sum / 10;\n    long long hundreds = sum % 10;\n    long long arr_size\
    \ = arr.size();\n    long long max_ones = arr_size;\n    long long max_tens =\
    \ arr_size;\n    long long max_hundreds = arr_size;\n    for (long long i = 0;\
    \ i < arr_size; i++) {\n        if (arr[i] == ones) {\n            if (max_ones\
    \ < ones) {\n                max_ones = ones;\n            }\n        } else if\
    \ (arr[i] == tens) {\n            if (max_tens < tens) {\n                max_tens\
    \ = tens;\n            }\n        } else if (arr[i] == hundreds) {\n         \
    \   if (max_hundreds < hundreds) {\n                max_hundreds = hundreds;\n\
    \            }\n        }\n    }\n    long long max_sum = max_ones + max_tens\
    \ + max_hundreds;\n    long long min_sum = arr_size;\n    for (long long i = 0;\
    \ i < arr_size; i++) {\n        if (arr[i] > max_sum) {\n            max_sum =\
    \ arr[i];\n        }\n        if (arr[i] < min_sum) {\n            min_sum = arr[i];\n\
    \        }\n    }\n    long long min_ones = min_sum - max_sum;\n    long long\
    \ min_tens = min_sum / 10;\n    long long min_hundreds = min_sum % 10;\n    long\
    \ long min_arr_size = min_sum;\n    long long min_max_ones = min_arr_size;\n \
    \   long long min_max_tens = min_arr_size;\n    long long min_max_hundreds = min_arr_size;\n\
    \    for (long long i = 0; i < arr_size; i++) {\n        if (arr[i] == ones) {\n\
    \            if (min_ones > ones) {\n                min_ones = ones;\n      \
    \      }\n        } else if (arr[i] == tens) {\n            if (min_tens > tens)\
    \ {\n                min_tens = tens;\n            }\n        } else if (arr[i]\
    \ == hundreds) {\n            if (min_hundreds > hundreds) {\n               \
    \ min_hundreds = hundreds;\n            }\n        }\n    }\n    long long min_min_sum\
    \ = min_ones + min_tens + min_hundreds;\n    long long min_max_sum = min_min_sum;\n\
    \    for (long long i = 0; i < arr_size; i++) {\n        if (arr[i] > min_max_sum)\
    \ {\n            min_max_sum = arr[i];\n        }\n    }\n    long long min_min_ones\
    \ = min_min_sum - max_sum;\n    long long min_min_tens = min_min_sum / 10;\n \
    \   long long min_min_hundreds = min_min_sum % 10;\n    \n}\nint main() {\n  \
    \  auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpb98_mgk_: /tmp/tmpb98_mgk_.cpp:83: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for(long long int i : arr){\n\
    \        sum += i;\n        count += 1;\n    }\n    long long int ones = sum;\n\
    \    long long int tens = sum / 10;\n    long long int hundreds = sum % 10;\n\
    \    long long int hundreds_tens = hundreds * 10;\n    long long int hundreds_tens_ones\
    \ = hundreds_tens * 10;\n    long long int hundreds_tens_ones_tens = hundreds_tens_ones\
    \ * 10;\n    long long int hundreds_tens_ones_tens_ones = hundreds_tens_ones_tens\
    \ * 10;\n    long long int hundreds_tens_ones_tens_ones_tens = hundreds_tens_ones_tens_ones\
    \ * 10;\n    long long int hundreds_tens_ones_tens_ones_tens_ones = hundreds_tens_ones_tens_ones_tens\
    \ * 10;\n    long long int hundreds_tens_ones_tens_ones_tens_ones_tens = hundreds_tens_ones_tens_ones_tens_ones\
    \ * 10;\n    long long int hundreds_tens_ones_tens_ones_tens_ones_tens_ones =\
    \ hundreds_tens_ones_tens_ones_tens_ones_tens * 10;\n    long long int hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens\
    \ = hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens * 10;\n    long long\
    \ int hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones = hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones\
    \ * 10;\n    long long int hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones\
    \ = hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones * 10;\n\
    \    long long int hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens\
    \ = hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_one\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb64ttnjj.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb64ttnjj.cpp:29:105: error: \u2018hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_one\u2019\
    \ was not declared in this scope; did you mean \u2018hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones\u2019\
    ?\n   29 |     long long int hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones_tens\
    \ = hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_one\n      |       \
    \                                                                            \
    \                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                    hundreds_tens_ones_tens_ones_tens_ones_tens_ones_tens_ones\n\
    /tmp/tmpb64ttnjj.cpp:30:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   30 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpku8v2ice: /tmp/tmpku8v2ice.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ ans = 0;\n    long long temp = 0;\n    long long count = 0;\n    for (long long\
    \ i = 0; i < arr.size(); i++) {\n        temp = arr[i];\n        count = 0;\n\
    \        while (temp != 0) {\n            temp = temp / 2;\n            count++;\n\
    \        }\n        ans += count;\n    }\n    long long temp2 = 0;\n    long long\
    \ count2 = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        temp2\
    \ = arr[i];\n        count2 = 0;\n        while (temp2 != 0) {\n            temp2\
    \ = temp2 / 2;\n            count2++;\n        }\n        if (count2 < count)\
    \ {\n            std::swap(temp2, temp);\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (long long i = 0; i < arr.size(); i++) {\n        ans.push_back(arr[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjndxo3gp.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjndxo3gp.cpp:34:23: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   34 |     std::vector<long> ans;\n      | \
    \                      ^~~\n/tmp/tmpjndxo3gp.cpp:9:15: note: previous declaration\
    \ as \u2018long long int ans\u2019\n    9 |     long long ans = 0;\n      |  \
    \             ^~~\n/tmp/tmpjndxo3gp.cpp:36:13: error: request for member \u2018\
    push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018long long\
    \ int\u2019\n   36 |         ans.push_back(arr[i]);\n      |             ^~~~~~~~~\n\
    /tmp/tmpjndxo3gp.cpp:38:12: error: could not convert \u2018ans\u2019 from \u2018\
    long long int\u2019 to \u2018std::vector<long int>\u2019\n   38 |     return ans;\n\
    \      |            ^~~\n      |            |\n      |            long long int\n"
  stdout: ''
  timestamp: 1660104459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n    long long\
    \ ans = 0;\n    long long cnt = 0;\n    long long sum = 0;\n    for(long long\
    \ i : arr) {\n        sum += i;\n        cnt += 1;\n    }\n    for(long long i\
    \ : arr) {\n        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    for(long\
    \ long i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n\
    \    for(long long i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -=\
    \ 1;\n    }\n    for(long long i : arr) {\n        ans += (sum - i) * cnt;\n \
    \       cnt -= 1;\n    }\n    for(long long i : arr) {\n        ans += (sum -\
    \ i) * cnt;\n        cnt -= 1;\n    }\n    for(long long i : arr) {\n        ans\
    \ += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    for(long long i : arr) {\n\
    \        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    for(long long\
    \ i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    for(long\
    \ long i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n\
    \    for(long long i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -=\
    \ 1;\n    }\n    for(long long i : arr) {\n        ans += (sum - i) * cnt;\n \
    \       cnt -= 1;\n    }\n    for(long long i : arr) {\n        ans += (sum -\
    \ i) * cnt;\n        cnt -= 1;\n    }\n    for(long long i : arr) {\n        ans\
    \ += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    for(long long i : arr) {\n\
    \        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    for(long long\
    \ i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n    for(long\
    \ long i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -= 1;\n    }\n\
    \    for(long long i : arr) {\n        ans += (sum - i) * cnt;\n        cnt -=\
    \ 1;\n    }\n    for(long long i : arr) {\n\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25c_8zkm.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp25c_8zkm.cpp:87:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   87 | int main() {\n      |     \
    \       ^\n/tmp/tmp25c_8zkm.cpp:97:1: error: expected \u2018}\u2019 at end of\
    \ input\n   97 | }\n      | ^\n/tmp/tmp25c_8zkm.cpp:7:53: note: to match this\
    \ \u2018{\u2019\n    7 | std::vector<long> sort_array(std::vector<long> arr) {\n\
    \      |                                                     ^\n/tmp/tmp25c_8zkm.cpp:97:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   97 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    std::vector<long> res(arr.size());\n\
    \    for (long i : arr) {\n        res[i] = i;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](long a, long b){return a<b;});\n    return res;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpub1fih56: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Write your code here\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        sum += i;\n        count += 1;\n    }\n    std::vector<long> ans;\n\
    \    for (long long int i : arr) {\n        if (count == 1) {\n            ans.push_back(i);\n\
    \            count = 0;\n        } else {\n            long long int temp = sum\
    \ - i;\n            if (temp < 0)\n                temp = -temp;\n           \
    \ ans.push_back(temp);\n            sum -= i;\n            count -= 1;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpqbgdsrmq: /tmp/tmpqbgdsrmq.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmpbqqw6udw: /tmp/tmpbqqw6udw.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
    \ sort_array(std::vector<long> arr) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: Exception
  stderr: 'tmp_xnooiju: /tmp/tmp_xnooiju.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,
    (long)4, (long)3, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660104455
