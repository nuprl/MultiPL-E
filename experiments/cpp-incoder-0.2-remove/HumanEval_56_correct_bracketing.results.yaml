language: cpp
name: HumanEval_56_correct_bracketing
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppt9pm3q0: /tmp/tmppt9pm3q0.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ a stack to store opening brackets\n    stack<char> brackets_stack;\n    // initialize\
    \ a stack to store closing brackets\n    stack<char> brackets_stack_close;\n \
    \   // initialize a stack to store opening brackets\n    stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_open;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close;\n\
    \    // initialize a stack to store opening brackets\n    stack<char> brackets_stack_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_open_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_open_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_open_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_close_close_close_close_open_close;\n\
    \    // initialize a stack to store closing brackets\n    stack<char> brackets_stack_close_\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpryjkqvmf.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpryjkqvmf.cpp:7:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n    7 |     stack<char> brackets_stack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpryjkqvmf.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpryjkqvmf.cpp:7:11: error: expected primary-expression\
    \ before \u2018char\u2019\n    7 |     stack<char> brackets_stack;\n      |  \
    \         ^~~~\n/tmp/tmpryjkqvmf.cpp:9:11: error: expected primary-expression\
    \ before \u2018char\u2019\n    9 |     stack<char> brackets_stack_close;\n   \
    \   |           ^~~~\n/tmp/tmpryjkqvmf.cpp:11:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   11 |     stack<char> brackets_stack_open;\n    \
    \  |           ^~~~\n/tmp/tmpryjkqvmf.cpp:13:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   13 |     stack<char> brackets_stack_close_open;\n\
    \      |           ^~~~\n/tmp/tmpryjkqvmf.cpp:15:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     stack<char> brackets_stack_close_close;\n\
    \      |           ^~~~\n/tmp/tmpryjkqvmf.cpp:17:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   17 |     stack<char> brackets_stack_open_close;\n\
    \      |           ^~~~\n/tmp/tmpryjkqvmf.cpp:19:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   19 |     stack<char> brackets_stack_open_open_close;\n\
    \      |           ^~~~\n/tmp/tmpryjkqvmf.cpp:21:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   21 |     stack<char> brackets_stack_open_close_open_close;\n\
    \      |           ^~~~\n/tmp/tmpryjkqvmf.cpp:23:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   23 |     stack<char> brackets_stack_close_open_open_close;\n\
    \      |           ^~~~\n/tmp/tmpryjkqvmf.cpp:25:11: error: expected primary-expression\
    \ before \u2018char\u2019\n"
  stdout: ''
  timestamp: 1660130413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for(int i = 0; i < brackets.size(); i++) {\n        if(brackets[i]\
    \ == '<') {\n            if(brackets[i + 1] == '>') {\n                correct\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg92y8xlz: /tmp/tmpg92y8xlz.cpp:19: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; ++i) {\n     \
    \   if (brackets[i] == '<') {\n            open_brackets++;\n        } else if\
    \ (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n  \
    \  if (open_brackets != close_brackets) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx1gy17lj: /tmp/tmpx1gy17lj.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    size_t\
    \ close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size; i++) {\n\
    \        if (brackets[i] == '<') {\n            open_brackets_size++;\n      \
    \  } else if (brackets[i] == '>') {\n            close_brackets_size++;\n    \
    \    }\n    }\n    if (open_brackets_size != close_brackets_size) {\n        return\
    \ false;\n    }\n    for (size_t i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (open_brackets_size == close_brackets_size)\
    \ {\n                return true;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (open_brackets_size != close_brackets_size) {\n  \
    \              return false;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa30gu4wa: /tmp/tmpa30gu4wa.cpp:39: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool res = true;\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        if (brackets[i] != '<') res = false;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9j_pc7f8: /tmp/tmp9j_pc7f8.cpp:15: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '>') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsbsbk34d: /tmp/tmpsbsbk34d.cpp:19: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            int j = i + 1;\n            while (j < brackets_size\
    \ && brackets[j] == '>') {\n                j++;\n            }\n            if\
    \ (j == brackets_size) {\n                return false;\n            }\n     \
    \       if (brackets[i] == '>' && brackets[j] == '<') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_bi_w71d: /tmp/tmp_bi_w71d.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n       \
    \ if (brackets[i] != '<') result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp94fo4bhj: /tmp/tmp94fo4bhj.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(opening_brackets.begin(), opening_brackets.begin()\
    \ + 1);\n    closing_brackets.erase(closing_brackets.begin(), closing_brackets.begin()\
    \ + 1);\n    opening_brackets.erase(opening_brackets.begin(), opening_brackets.end());\n\
    \    closing_brackets.erase(closing_brackets.begin(), closing_brackets.end());\n\
    \    bool result = true;\n    for (auto it = opening_brackets.begin(); it != opening_brackets.end();\
    \ ++it) {\n        if (closing_brackets.find(*it) == closing_brackets.end()) {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc574fza2.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpc574fza2.cpp:14:40: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   14 |         if (closing_brackets.find(*it) == closing_brackets.end())\
    \ {\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                  |                            |\n   \
    \   |                                  |                            std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    \      |                                  std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc574fza2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpc574fza2.cpp:14:64: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   14 |         if (closing_brackets.find(*it) == closing_brackets.end())\
    \ {\n      |                                                                ^\n\
    In file includ"
  stdout: ''
  timestamp: 1660130413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnzxqmxsd: /tmp/tmpnzxqmxsd.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp52xvnr5f: /tmp/tmp52xvnr5f.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string opening_brackets_end\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_end\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_start\
    \ = opening_brackets.substr(0, opening_brackets_size);\n    std::string closing_brackets_start\
    \ = closing_brackets.substr(0, closing_brackets_size);\n    std::string opening_brackets_middle\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle2\
    \ = opening_brackets.substr(opening_brackets_size + 1);\n    std::string closing_brackets_middle2\
    \ = closing_brackets.substr(closing_brackets_size + 1);\n    std::string opening_brackets_middle3\
    \ = opening_brackets.substr(opening_brackets_size + 2);\n    std::string closing_brackets_middle3\
    \ = closing_brackets.substr(closing_brackets_size + 2);\n    std::string opening_brackets_middle4\
    \ = opening_brackets.substr(opening_brackets_size + 3);\n    std::string closing_brackets_middle4\
    \ = closing_brackets.substr(closing_brackets_size + 3);\n    std::string opening_brackets_middle5\
    \ = opening_brackets.substr(opening_brackets_size + 4);\n    std::string closing_brackets_middle5\
    \ = closing_brackets.substr(closing_brackets_size + 4);\n    std::string opening_brackets_middle6\
    \ = opening_brackets.substr(opening_brackets_size + 5);\n    std::string closing_brackets_middle6\
    \ = closing_brackets.substr(closing_brackets_size + 5);\n    std::string opening_brackets_middle7\
    \ = opening_brackets.substr(opening_brackets_size + 6);\n    std::string closing_brackets_middle7\
    \ = closing_brackets.substr(closing_brackets_size + 6);\n    std::string opening_brackets_middle8\
    \ = opening_brackets.substr(opening_brackets_size + \n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxxw7n13.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpwxxw7n13.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpwxxw7n13.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpwxxw7n13.cpp:10:64: error:\
    \ cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   10 |     std::string opening_brackets_end = opening_brackets.substr(opening_brackets_size);\n\
    \      |                                                                ^~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                |\n  \
    \    |                                                                std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwxxw7n13.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2838:24:\
    \ note:   initializing argument 1 of \u2018std::__"
  stdout: ''
  timestamp: 1660130413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i +\
    \ 1] == '>') {\n                result += true;\n                i += 2;\n   \
    \         } else {\n                result += false;\n            }\n        }\
    \ else {\n            if (brackets[i + 1] != '>') {\n                result +=\
    \ false;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1xvcu388: /tmp/tmp1xvcu388.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ opening_brackets = brackets.size();\n    size_t closing_brackets = 0;\n    for\
    \ (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++opening_brackets;\n        } else if (brackets[i] == '>') {\n\
    \            ++closing_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return opening_brackets == closing_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt2n8j6ie: /tmp/tmpt2n8j6ie.cpp:21: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    bool correct = true;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            if (brackets[i + opening_brackets_size] == '>') {\n    \
    \            correct = false;\n            }\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zvua405.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp2zvua405.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmp2zvua405.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmp2zvua405.cpp:13:28: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018size_t\u2019 {aka\
    \ \u2018long unsigned int\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   13 |             if (brackets[i + opening_brackets_size] == '>') {\n  \
    \    |                          ~ ^ ~~~~~~~~~~~~~~~~~~~~~\n      |           \
    \               |   |\n      |                          |   std::string {aka std::__cxx11::basic_string<char>}\n\
    \      |                          size_t {aka long unsigned int}\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp2zvua405.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template arg"
  stdout: ''
  timestamp: 1660130413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code goes here\n    bool correct = false;\n    int open_brackets = 0;\n    int\
    \ close_brackets = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n     \
    \   if (brackets[i] == '<') {\n            open_brackets++;\n        }\n     \
    \   if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    \
    \    if (open_brackets == close_brackets) {\n            correct = true;\n   \
    \     }\n    }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpon46gf8i: /tmp/tmpon46gf8i.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets.find(\"<\", brackets.find(\"<\") + 1) != std::string::npos)\
    \ {\n                result = false;\n            }\n        } else if (c == '>')\
    \ {\n            if (brackets.find(\">\", brackets.find(\">\") + 1) != std::string::npos)\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcee5c1ce: /tmp/tmpcee5c1ce.cpp:23: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp866q7_l0: /tmp/tmp866q7_l0.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] != '=') {\n        \
    \        return false;\n            }\n        } else if (brackets[i] == '>')\
    \ {\n            if (brackets[i + 1] != '>') {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplfpl2y1n: /tmp/tmplfpl2y1n.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            if (brackets.end() != std::find(brackets.begin(),\
    \ brackets.end(), '>')) return false;\n        } else if (*it == '>') {\n    \
    \        if (brackets.end() != std::find(brackets.begin(), brackets.end(), '<'))\
    \ return false;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi27hqqbc: /tmp/tmpi27hqqbc.cpp:18: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') result = false;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3g3_5_te: /tmp/tmp3g3_5_te.cpp:15: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') return false;\n    }\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] != '>') return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_hyq0t5t: /tmp/tmp_hyq0t5t.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ a stack\n    std::stack<char> brackets_stack;\n    // initialize a boolean to\
    \ indicate whether a closing bracket is found\n    bool found = false;\n    //\
    \ iterate over each character in the brackets string\n    for (char c : brackets)\
    \ {\n        // if the character is a \"<\", push it onto the stack\n        if\
    \ (c == '<') {\n            brackets_stack.push(c);\n        }\n        // if\
    \ the character is a \">\", pop it from the stack\n        else if (c == '>')\
    \ {\n            // if the stack is empty, the closing bracket is not found\n\
    \            if (brackets_stack.empty()) {\n                return false;\n  \
    \          }\n            // otherwise, pop the top character from the stack\n\
    \            else {\n                char top = brackets_stack.top();\n      \
    \          brackets_stack.pop();\n                // if the top character is the\
    \ closing bracket, found\n                if (top == c) {\n                  \
    \  found = true;\n                }\n            }\n        }\n        // otherwise,\
    \ the character is not \"<\" or \">\"\n        else {\n            // if the stack\
    \ is empty, the closing bracket is not found\n            if (brackets_stack.empty())\
    \ {\n                return false;\n            }\n            // otherwise, pop\
    \ the top character from the stack\n            else {\n                char top\
    \ = brackets_stack.top();\n                brackets_stack.pop();\n           \
    \     // if the top character is not the closing bracket, found\n            \
    \    if (top != c) {\n                    found = true;\n                }\n \
    \           }\n        }\n    }\n    // if the stack is empty, the brackets are\
    \ not correctly closed\n    if (brackets_stack.empty()) {\n        return false;\n\
    \    }\n    // otherwise, the brackets are correctly closed\n    else {\n    \
    \    return true;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8qfynfxn: /tmp/tmp8qfynfxn.cpp:60: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   size_t opening_brackets_size = opening_brackets.size();\n    size_t closing_brackets_size\
    \ = closing_brackets.size();\n    size_t brackets_size = brackets.size();\n  \
    \  size_t i = 0;\n    size_t j = 0;\n    bool result = false;\n    while (i <\
    \ brackets_size) {\n        if (brackets[i] == opening_brackets[j]) {\n      \
    \      i++;\n            j++;\n            if (j == opening_brackets_size) {\n\
    \                result = true;\n                break;\n            }\n     \
    \   } else if (brackets[i] == closing_brackets[j]) {\n            i++;\n     \
    \       j++;\n            if (j == closing_brackets_size) {\n                result\
    \ = true;\n                break;\n            }\n        } else {\n         \
    \   i++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8bkgrpij: /tmp/tmp8bkgrpij.cpp:37: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t closing_brackets_size = brackets.find_first_of(\">\");\n   \
    \ if (opening_brackets_size == std::string::npos || closing_brackets_size == std::string::npos)\
    \ {\n        return false;\n    }\n    size_t opening_brackets_count = opening_brackets_size\
    \ - 1;\n    size_t closing_brackets_count = closing_brackets_size - 1;\n    for\
    \ (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i] == '<') {\n\
    \            if (opening_brackets_count > 0) {\n                opening_brackets_count--;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (closing_brackets_count\
    \ > 0) {\n                closing_brackets_count--;\n            }\n        }\n\
    \    }\n    return opening_brackets_count == 0 && closing_brackets_count == 0;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz6i2qusb: /tmp/tmpz6i2qusb.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            open_brackets++;\n   \
    \     }\n        else if(brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    if(open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf125kiff: /tmp/tmpf125kiff.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    std::string opening_brackets;\n    std::string closing_brackets;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            opening_brackets\
    \ += c;\n        } else {\n            closing_brackets += c;\n        }\n   \
    \ }\n    if (opening_brackets.empty() || closing_brackets.empty()) {\n       \
    \ correct = false;\n    }\n    for (auto c : opening_brackets) {\n        if (closing_brackets.find(c)\
    \ == std::string::npos) {\n            correct = false;\n        }\n    }\n  \
    \  return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmplhupo5wx: /tmp/tmplhupo5wx.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ bracket_count = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n   \
    \     if (brackets[i] == '<') {\n            ++bracket_count;\n        } else\
    \ if (brackets[i] == '>') {\n            --bracket_count;\n        }\n    }\n\
    \    return bracket_count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo8p_kof7: /tmp/tmpo8p_kof7.cpp:23: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; ++i) {\n     \
    \   if (brackets[i] == '<') {\n            ++open_brackets;\n        } else if\
    \ (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n  \
    \          return false;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzzooyr9f: /tmp/tmpzzooyr9f.cpp:30: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto bracket = brackets.begin(); bracket != brackets.end();\
    \ ++bracket) {\n        if (*bracket != '<') result = false;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpscbvs3bw: /tmp/tmpscbvs3bw.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp52xvnr5f: /tmp/tmp52xvnr5f.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = brackets.find_first_of(\"<\");\n    size_t closing_brackets_size = brackets.find_first_of(\"\
    >\");\n    for (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (i < opening_brackets_size) {\n                correct\
    \ = false;\n            }\n        } else if (brackets[i] == '>') {\n        \
    \    if (i < closing_brackets_size) {\n                correct = false;\n    \
    \        }\n        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7pwdav4s: /tmp/tmp7pwdav4s.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; i++) {\n     \
    \   if (brackets[i] == '<') {\n            open_brackets++;\n        } else if\
    \ (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n  \
    \  if (open_brackets != close_brackets) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4y046q79: /tmp/tmp4y046q79.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n      \
    \  if (brackets[i] != '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets.size(); ++i) {\n      \
    \  if (brackets[i] != '>') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiqi9yyxo: /tmp/tmpiqi9yyxo.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnzxqmxsd: /tmp/tmpnzxqmxsd.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets !=\
    \ close_brackets) {\n        result = false;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwzuv2k0b: /tmp/tmpwzuv2k0b.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t close_brackets_size = brackets.find_first_of(\">\");\n    \n\
    \    if (open_brackets_size == close_brackets_size) {\n        // if brackets\
    \ are balanced, then return true.\n        return true;\n    }\n    \n    // if\
    \ brackets are not balanced, then return false.\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnz6e0gij: /tmp/tmpnz6e0gij.cpp:20: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '>') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_5fzol8l: /tmp/tmp_5fzol8l.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string opening_brackets_end\
    \ = opening_brackets.substr(opening_brackets_size - 1);\n    std::string closing_brackets_end\
    \ = closing_brackets.substr(closing_brackets_size - 1);\n    std::string opening_brackets_start\
    \ = opening_brackets.substr(0, opening_brackets_size - 1);\n    std::string closing_brackets_start\
    \ = closing_brackets.substr(0, closing_brackets_size - 1);\n    std::string opening_brackets_middle\
    \ = opening_brackets.substr(0, opening_brackets_size - 2);\n    std::string closing_brackets_middle\
    \ = closing_brackets.substr(0, closing_brackets_size - 2);\n    std::string opening_brackets_middle2\
    \ = opening_brackets.substr(0, opening_brackets_size - 3);\n    std::string closing_brackets_middle2\
    \ = closing_brackets.substr(0, closing_brackets_size - 3);\n    std::string opening_brackets_middle3\
    \ = opening_brackets.substr(0, opening_brackets_size - 4);\n    std::string closing_brackets_middle3\
    \ = closing_brackets.substr(0, closing_brackets_size - 4);\n    std::string opening_brackets_middle4\
    \ = opening_brackets.substr(0, opening_brackets_size - 5);\n    std::string closing_brackets_middle4\
    \ = closing_brackets.substr(0, closing_brackets_size - 5);\n    std::string opening_brackets_middle5\
    \ = opening_brackets.substr(0, opening_brackets_size - 6);\n    std::string closing_brackets_middle5\
    \ = closing_brackets.substr(0, closing_brackets_size - 6);\n    std::string opening_brackets_middle6\
    \ = opening_brackets.substr(0, opening_brackets_size - 7);\n    std::string closing_brackets_middle6\
    \ = closing_brackets.substr(0, closing_brackets_size - 7);\n    std::string opening_brackets_middle7\
    \ = opening_brackets.substr(0, opening_brackets_size - 8);\n    std::string closing_brackets_middle7\
    \ = closing_brackets.substr(0, closing_brackets_size - 8);\n    std::string opening\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0a7_6ad4.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp0a7_6ad4.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmp0a7_6ad4.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmp0a7_6ad4.cpp:10:86: error:\
    \ no match for \u2018operator-\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n  \
    \ 10 |     std::string opening_brackets_end = opening_brackets.substr(opening_brackets_size\
    \ - 1);\n      |                                                             \
    \   ~~~~~~~~~~~~~~~~~~~~~ ^ ~\n      |                                       \
    \                         |                       |\n      |                 \
    \                                               |                       int\n\
    \      |                                                                std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0a7_6ad4.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  "
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<') result = false;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnr_bpu6d: /tmp/tmpnr_bpu6d.cpp:15: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n \
    \           correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdfhhbtg2: /tmp/tmpdfhhbtg2.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                correct\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpni4v4dkg: /tmp/tmpni4v4dkg.cpp:23: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '>') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsbsbk34d: /tmp/tmpsbsbk34d.cpp:19: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    std::string opening_brackets = brackets;\n    std::string\
    \ closing_brackets;\n    std::string opening_bracket;\n    std::string closing_bracket;\n\
    \    int opening_brackets_size = opening_brackets.size();\n    int closing_brackets_size\
    \ = closing_brackets.size();\n    int opening_brackets_index = 0;\n    int closing_brackets_index\
    \ = 0;\n    while (opening_brackets_index < opening_brackets_size) {\n       \
    \ opening_bracket = opening_brackets.substr(opening_brackets_index, 1);\n    \
    \    closing_bracket = closing_brackets.substr(closing_brackets_index, 1);\n \
    \       if (opening_bracket == \"<\") {\n            opening_brackets_index++;\n\
    \        }\n        if (closing_bracket == \">\") {\n            closing_brackets_index++;\n\
    \        }\n        if (opening_brackets_index >= opening_brackets_size || closing_brackets_index\
    \ >= closing_brackets_size) {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdgcxqbqp: /tmp/tmpdgcxqbqp.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      }\n        if (brackets[i] == '>') {\n            close_brackets++;\n \
    \       }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0hf87kr6: /tmp/tmp0hf87kr6.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here\n    \n    // return true if brackets is correct.\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6r80tkya: /tmp/tmp6r80tkya.cpp:13: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n    \
    \    if (brackets[i] == '<') {\n            ++open_brackets;\n        } else if\
    \ (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n  \
    \          return false;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz1i7byes: /tmp/tmpz1i7byes.cpp:30: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') return false;\n    }\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] != '>') return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_hyq0t5t: /tmp/tmp_hyq0t5t.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{<\";\n    std::string closing_brackets = \")]}>\";\n\
    \    std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string opening_brackets_end\
    \ = opening_brackets + opening_brackets_size;\n    std::string closing_brackets_end\
    \ = closing_brackets + closing_brackets_size;\n    std::string opening_brackets_start\
    \ = opening_brackets + 1;\n    std::string closing_brackets_start = closing_brackets\
    \ + 1;\n    std::string opening_brackets_middle = opening_brackets + opening_brackets_size;\n\
    \    std::string closing_brackets_middle = closing_brackets + closing_brackets_size;\n\
    \    std::string opening_brackets_middle2 = opening_brackets + opening_brackets_size\
    \ + 1;\n    std::string closing_brackets_middle2 = closing_brackets + closing_brackets_size\
    \ + 1;\n    std::string opening_brackets_middle3 = opening_brackets + opening_brackets_size\
    \ + opening_brackets_size;\n    std::string closing_brackets_middle3 = closing_brackets\
    \ + closing_brackets_size + closing_brackets_size;\n    std::string opening_brackets_middle4\
    \ = opening_brackets + opening_brackets_size + opening_brackets_size + 1;\n  \
    \  std::string closing_brackets_middle4 = closing_brackets + closing_brackets_size\
    \ + closing_brackets_size + 1;\n    std::string opening_brackets_middle5 = opening_brackets\
    \ + opening_brackets_size + opening_brackets_size + opening_brackets_size;\n \
    \   std::string closing_brackets_middle5 = closing_brackets + closing_brackets_size\
    \ + closing_brackets_size + closing_brackets_size;\n    std::string opening_brackets_middle6\
    \ = opening_brackets + opening_brackets_size + opening_brackets_size + opening_brackets_size\
    \ + 1;\n    std::string closing_brackets_middle6 = closing_brackets + closing_brackets_size\
    \ + closing_brackets_size + closing_brackets_size + 1;\n    std::string opening_brackets_middle7\
    \ = opening_brackets + opening_brackets_size + opening_bra\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegk4b6qb.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpegk4b6qb.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpegk4b6qb.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpegk4b6qb.cpp:12:59: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n  \
    \ 12 |     std::string opening_brackets_start = opening_brackets + 1;\n      |\
    \                                          ~~~~~~~~~~~~~~~~ ^ ~\n      |     \
    \                                     |                  |\n      |          \
    \                                |                  int\n      |             \
    \                             std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpegk4b6qb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator"
  stdout: ''
  timestamp: 1660130413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n \
    \           correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdfhhbtg2: /tmp/tmpdfhhbtg2.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string brackets_size\
    \ = brackets.size();\n    bool result = false;\n    for (int i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] == opening_brackets[i]) {\n            if (brackets[i\
    \ + opening_brackets_size] == closing_brackets[i]) {\n                i += opening_brackets_size;\n\
    \                result += true;\n            } else {\n                result\
    \ += false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgu5g2o63.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgu5g2o63.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpgu5g2o63.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpgu5g2o63.cpp:10:46: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n   10 |     std::string\
    \ brackets_size = brackets.size();\n      |                                 ~~~~~~~~~~~~~^~\n\
    /tmp/tmpgu5g2o63.cpp:12:23: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   12 |     for (int i = 0; i < brackets_size; i++) {\n      |           \
    \          ~ ^ ~~~~~~~~~~~~~\n      |                     |   |\n      |     \
    \                int std::string {aka std::__cxx11::basic_string<char>}\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgu5g2o63.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: n"
  stdout: ''
  timestamp: 1660130415
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_cnt\
    \ = 0;\n    size_t close_brackets_cnt = 0;\n    size_t open_brackets_cnt2 = 0;\n\
    \    size_t close_brackets_cnt2 = 0;\n    size_t open_brackets_cnt3 = 0;\n   \
    \ size_t close_brackets_cnt3 = 0;\n    size_t open_brackets_cnt4 = 0;\n    size_t\
    \ close_brackets_cnt4 = 0;\n    size_t open_brackets_cnt5 = 0;\n    size_t close_brackets_cnt5\
    \ = 0;\n    size_t open_brackets_cnt6 = 0;\n    size_t close_brackets_cnt6 = 0;\n\
    \    size_t open_brackets_cnt7 = 0;\n    size_t close_brackets_cnt7 = 0;\n   \
    \ size_t open_brackets_cnt8 = 0;\n    size_t close_brackets_cnt8 = 0;\n    size_t\
    \ open_brackets_cnt9 = 0;\n    size_t close_brackets_cnt9 = 0;\n    size_t open_brackets_cnt10\
    \ = 0;\n    size_t close_brackets_cnt10 = 0;\n    size_t open_brackets_cnt11 =\
    \ 0;\n    size_t close_brackets_cnt11 = 0;\n    size_t open_brackets_cnt12 = 0;\n\
    \    size_t close_brackets_cnt12 = 0;\n    size_t open_brackets_cnt13 = 0;\n \
    \   size_t close_brackets_cnt13 = 0;\n    size_t open_brackets_cnt14 = 0;\n  \
    \  size_t close_brackets_cnt14 = 0;\n    size_t open_brackets_cnt15 = 0;\n   \
    \ size_t close_brackets_cnt15 = 0;\n    size_t open_brackets_cnt16 = 0;\n    size_t\
    \ close_brackets_cnt16 = 0;\n    size_t open_brackets_cnt17 = 0;\n    size_t close_brackets_cnt17\
    \ = 0;\n    size_t open_brackets_cnt18 = 0;\n    size_t close_brackets_cnt18 =\
    \ 0;\n    size_t open_brackets_cnt19 = 0;\n    size_t close_brackets_cnt19 = 0;\n\
    \    size_t open_brackets_cnt20 = 0;\n    size_t close_brackets_cnt20 = 0;\n \
    \   size_t open_brackets_cnt21 = 0;\n    size_t close_brackets_cnt21 = 0;\n  \
    \  size_t open_brackets_cnt22 = 0;\n    size_t close_brackets_cnt22 = 0;\n   \
    \ size_t open_brackets_cnt23 = 0;\n    size_t close_brackets_cnt23 = 0;\n\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsna8weqm: /tmp/tmpsna8weqm.cpp:58: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = false;\n    size_t open_brackets = 0;\n    size_t close_brackets =\
    \ 0;\n    size_t open_brackets_cnt = 0;\n    size_t close_brackets_cnt = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n            ++open_brackets_cnt;\n   \
    \     } else if (brackets[i] == '>') {\n            ++close_brackets;\n      \
    \      ++close_brackets_cnt;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        correct = true;\n    }\n    if (open_brackets_cnt != close_brackets_cnt)\
    \ {\n        correct = false;\n    }\n    return correct;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwe9j9eib: /tmp/tmpwe9j9eib.cpp:35: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') result = false;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3g3_5_te: /tmp/tmp3g3_5_te.cpp:15: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '<') {\n                return\
    \ false;\n            }\n        } else if (brackets[i] == '>') {\n          \
    \  if (brackets[i + 1] != '>') {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxaajvxg9: /tmp/tmpxaajvxg9.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '>') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbrkr0d6j: /tmp/tmpbrkr0d6j.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string brackets_size\
    \ = brackets.size();\n    bool result = false;\n    for (int i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets.find(opening_brackets[i]) == std::string::npos)\
    \ {\n            continue;\n        }\n        if (brackets.find(closing_brackets[i])\
    \ == std::string::npos) {\n            continue;\n        }\n        if (opening_brackets_size\
    \ == closing_brackets_size) {\n            result = true;\n            break;\n\
    \        }\n        if (opening_brackets_size < closing_brackets_size) {\n   \
    \         result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8v8tws9.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmph8v8tws9.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmph8v8tws9.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmph8v8tws9.cpp:10:46: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n   10 |     std::string\
    \ brackets_size = brackets.size();\n      |                                 ~~~~~~~~~~~~~^~\n\
    /tmp/tmph8v8tws9.cpp:12:23: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   12 |     for (int i = 0; i < brackets_size; i++) {\n      |           \
    \          ~ ^ ~~~~~~~~~~~~~\n      |                     |   |\n      |     \
    \                int std::string {aka std::__cxx11::basic_string<char>}\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmph8v8tws9.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: n"
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n       \
    \ if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n     \
    \           result = true;\n            } else {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgv5tjdyx: /tmp/tmpgv5tjdyx.cpp:22: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &bracket : brackets) {\n        if (bracket !=\
    \ '<' && bracket != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9qaf01wq: /tmp/tmp9qaf01wq.cpp:21: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    std::string opening_brackets = brackets;\n    std::string\
    \ closing_brackets;\n    std::string opening_bracket;\n    std::string closing_bracket;\n\
    \    std::string bracket;\n    std::string temp;\n    std::string temp2;\n   \
    \ std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string\
    \ temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n\
    \    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n \
    \   std::string temp13;\n    std::string temp14;\n    std::string temp15;\n  \
    \  std::string temp16;\n    std::string temp17;\n    std::string temp18;\n   \
    \ std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string\
    \ temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n\
    \    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n \
    \   std::string temp29;\n    std::string temp30;\n    std::string temp31;\n  \
    \  std::string temp32;\n    std::string temp33;\n    std::string temp34;\n   \
    \ std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string\
    \ temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n\
    \    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n \
    \   std::string temp45;\n    std::string temp46;\n    std::string temp47;\n  \
    \  std::string temp48;\n    std::string temp49;\n    std::string temp50;\n   \
    \ std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string\
    \ temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n\
    \    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n \
    \   std::string temp61;\n    std::string temp62;\n    std::string temp63;\n  \
    \  std::string temp64;\n    std::string temp65;\n    std::string temp66;\n   \
    \ std::string temp67;\n    std::string temp68;\n    std::string temp69;\n    std::string\
    \ temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string temp73;\n\
    \    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n \
    \   std::string temp77;\n    std::string temp78;\n    std::string temp79;\n  \
    \  std::string temp80;\n    std::string temp81;\n\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_9bszgrb: /tmp/tmp_9bszgrb.cpp:97: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          result &= (brackets.find(\"<\", brackets.find(\"<\") + 1) != std::string::npos);\n\
    \        }\n        if (c == '>') {\n            result &= (brackets.find(\">\"\
    , brackets.find(\">\") + 1) != std::string::npos);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp5p8vghd: /tmp/tmpp5p8vghd.cpp:19: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                correct\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpni4v4dkg: /tmp/tmpni4v4dkg.cpp:23: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130413
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            auto next = brackets.find(*it + 1,\
    \ 1);\n            if (next == brackets.end()) {\n                result = false;\n\
    \                break;\n            }\n            if (*next != '>') {\n    \
    \            result = false;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzp53cf_f.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpzp53cf_f.cpp:10:22: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018long unsigned int\u2019 and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   10 |             if (next == brackets.end()) {\n      |      \
    \           ~~~~ ^~ ~~~~~~~~~~~~~~\n      |                 |                \
    \   |\n      |                 long unsigned int   std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzp53cf_f.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpzp53cf_f.cpp:10:38: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long unsigned int\u2019\n   10 |             if (next == brackets.end())\
    \ {\n      |                                      ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzp53cf_f.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note: candidate: \u2018template<class _Iterator,"
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] != '=') {\n                result = false;\n      \
    \          break;\n            }\n        } else if (c == '>') {\n           \
    \ if (brackets[i + 1] != '>') {\n                result = false;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphmsiu3qk: /tmp/tmphmsiu3qk.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] != '<') {\n                result = false;\n      \
    \      }\n        }\n        else if (c == '>') {\n            if (brackets[i\
    \ + 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpclk1q2i6: /tmp/tmpclk1q2i6.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpokh4bais: /tmp/tmpokh4bais.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets++;\n \
    \       }\n    }\n    if (opening_brackets != closing_brackets) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz2pwdn4n: /tmp/tmpz2pwdn4n.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '>') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbrkr0d6j: /tmp/tmpbrkr0d6j.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    size_t\
    \ close_brackets_size = 0;\n    bool result = true;\n    for (size_t i = 0; i\
    \ < brackets_size; i++) {\n        if (brackets[i] == '<') {\n            open_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size != close_brackets_size) {\n    \
    \    result = false;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0bfw0suh: /tmp/tmp0bfw0suh.cpp:29: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                correct\
    \ = false;\n            }\n        }\n    }\n    return correct;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcpm8_bjt: /tmp/tmpcpm8_bjt.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            if (brackets.find('>', it) == brackets.end())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if (*it == '>') {\n            if (brackets.find('<',\
    \ it) == brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp943g8ath.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp943g8ath.cpp:9:38: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find(char,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&)\u2019\
    \n    9 |             if (brackets.find('>', it) == brackets.end()) {\n      |\
    \                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp943g8ath.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<c"
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n       \
    \ if (brackets[i] != '<') result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp4zujigv: /tmp/tmpp4zujigv.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] != '<') {\n            result = false;\n\
    \            break;\n        }\n    }\n    for (size_t i = 0; i < len; ++i) {\n\
    \        if (brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr0lf7h5i: /tmp/tmpr0lf7h5i.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            if (brackets.find('>', it) != brackets.end())\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpih0skdzn.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpih0skdzn.cpp:9:38: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find(char,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&)\u2019\
    \n    9 |             if (brackets.find('>', it) != brackets.end()) {\n      |\
    \                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpih0skdzn.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<c"
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    size_t pos = 0;\n    size_t len = brackets.size();\n   \
    \ while (pos < len) {\n        char c = brackets[pos];\n        if (c == '<')\
    \ {\n            if (pos == 0) {\n                result = false;\n          \
    \      break;\n            }\n            char prev = brackets[pos - 1];\n   \
    \         if (prev == '>') {\n                result = false;\n              \
    \  break;\n            }\n        } else if (c == '>') {\n            if (pos\
    \ == len - 1) {\n                result = false;\n                break;\n   \
    \         }\n            char next = brackets[pos + 1];\n            if (next\
    \ == '<') {\n                result = false;\n                break;\n       \
    \     }\n        }\n        pos++;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuxiw0bxf: /tmp/tmpuxiw0bxf.cpp:38: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = brackets.size() - 1; i >= 0; i--) {\n \
    \       if (brackets[i] != '>') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8sa1uzp8: /tmp/tmp8sa1uzp8.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp52xvnr5f: /tmp/tmp52xvnr5f.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '>') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbrkr0d6j: /tmp/tmpbrkr0d6j.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool correct = false;\n    for(int i = 0; i < brackets.size();\
    \ i++) {\n        if(brackets[i] == '<') {\n            if(brackets[i+1] == '>')\
    \ {\n                correct = true;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbw5f6f2c: /tmp/tmpbw5f6f2c.cpp:23: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            open_brackets++;\n   \
    \     }\n        if(brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    if(open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2n78ebo3: /tmp/tmp2n78ebo3.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '>') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc_q7qixs: /tmp/tmpc_q7qixs.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool correct = true;\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<') correct =\
    \ false;\n    }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmppbpffbmd: /tmp/tmppbpffbmd.cpp:15: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto bracket = brackets.begin(); bracket != brackets.end();\
    \ ++bracket) {\n        if (*bracket != '<') result = false;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpscbvs3bw: /tmp/tmpscbvs3bw.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpk5fiudhf: /tmp/tmpk5fiudhf.cpp:24: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(opening_brackets.begin(), opening_brackets.begin()\
    \ + 1);\n    closing_brackets.erase(closing_brackets.begin(), closing_brackets.begin()\
    \ + 1);\n    bool result = true;\n    for (auto &c : opening_brackets) {\n   \
    \     if (c != '>') {\n            result = false;\n            break;\n     \
    \   }\n    }\n    for (auto &c : closing_brackets) {\n        if (c != '<') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9gegcqx4: /tmp/tmp9gegcqx4.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // your\
    \ code goes here\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            if(brackets[i+1] == '>')\
    \ {\n                result += true;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn2gg_drb: /tmp/tmpn2gg_drb.cpp:23: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for(size_t i = 0; i < len;\
    \ ++i) {\n        char c = brackets[i];\n        if(c == '<') {\n            if(brackets[i+1]\
    \ != '<') {\n                result = false;\n                break;\n       \
    \     }\n            i += 2;\n        }\n        else if(c == '>') {\n       \
    \     if(brackets[i+1] != '>') {\n                result = false;\n          \
    \      break;\n            }\n            i += 2;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmkwwhsvr: /tmp/tmpmkwwhsvr.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] != '=') {\n                result = false;\n      \
    \          break;\n            }\n        } else if (c == '>') {\n           \
    \ if (brackets[i + 1] != '>') {\n                result = false;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphmsiu3qk: /tmp/tmphmsiu3qk.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '>') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi8seitv7: /tmp/tmpi8seitv7.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            if (brackets.end() != std::find(brackets.begin(),\
    \ brackets.end(), '>')) {\n                result = false;\n            }\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx472pdpu: /tmp/tmpx472pdpu.cpp:18: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    opening_brackets.erase(opening_brackets.begin(),\
    \ opening_brackets.begin() + 1);\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.end());\n    opening_brackets.erase(opening_brackets.end()\
    \ - 1, closing_brackets.end());\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.end() - 1);\n    bool result = opening_brackets.front() ==\
    \ closing_brackets.front();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpokh4bais: /tmp/tmpokh4bais.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{<\";\n    std::string closing_brackets = \")]}>\";\n\
    \    std::string opening_brackets_index = opening_brackets.find(brackets);\n \
    \   std::string closing_brackets_index = closing_brackets.find(brackets);\n  \
    \  bool correct = opening_brackets_index != std::string::npos;\n    correct =\
    \ correct && closing_brackets_index != std::string::npos;\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8s1m9xev.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp8s1m9xev.cpp:8:63: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_index = opening_brackets.find(brackets);\n      |         \
    \                                 ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n/tmp/tmp8s1m9xev.cpp:9:63:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_index = closing_brackets.find(brackets);\n      |         \
    \                                 ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n/tmp/tmp8s1m9xev.cpp:10:43:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018const size_type\u2019\
    \ {aka \u2018const long unsigned int\u2019})\n   10 |     bool correct = opening_brackets_index\
    \ != std::string::npos;\n      |                    ~~~~~~~~~~~~~~~~~~~~~~ ^~\
    \ ~~~~~~~~~~~~~~~~~\n      |                    |                            \
    \          |\n      |                    |                                   \
    \   const size_type {aka const long unsigned int}\n      |                   \
    \ std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8s1m9xev.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8"
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpodfsketw: /tmp/tmpodfsketw.cpp:24: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnzxqmxsd: /tmp/tmpnzxqmxsd.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n       \
    \ if (brackets[i] != '<') result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp4zujigv: /tmp/tmpp4zujigv.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool correct = true;\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') {\n      \
    \      correct = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '>') {\n      \
    \      correct = false;\n            break;\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmph159v_rl: /tmp/tmph159v_rl.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_index = opening_brackets.find(brackets[0]);\n\
    \    std::string closing_brackets_index = closing_brackets.find(brackets[1]);\n\
    \    if (opening_brackets_index == std::string::npos || closing_brackets_index\
    \ == std::string::npos)\n        return false;\n    if (opening_brackets_index\
    \ == closing_brackets_index)\n        return true;\n    if (opening_brackets_index\
    \ > closing_brackets_index)\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprv4piikh.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmprv4piikh.cpp:8:63: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_index = opening_brackets.find(brackets[0]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmprv4piikh.cpp:9:63:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_index = closing_brackets.find(brackets[1]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmprv4piikh.cpp:10:32:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018const size_type\u2019\
    \ {aka \u2018const long unsigned int\u2019})\n   10 |     if (opening_brackets_index\
    \ == std::string::npos || closing_brackets_index == std::string::npos)\n     \
    \ |         ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |         |   \
    \                                   |\n      |         |                     \
    \                 const size_type {aka const long unsigned int}\n      |     \
    \    std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmprv4piikh.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/"
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '>') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbrkr0d6j: /tmp/tmpbrkr0d6j.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpk5fiudhf: /tmp/tmpk5fiudhf.cpp:24: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = 0;\n  \
    \  size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ opening_brackets_size++;\n        } else if (c == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size != closing_brackets_size) {\n\
    \        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        char c = brackets[i];\n        if (c == '<') {\n            opening_brackets_size--;\n\
    \        } else if (c == '>') {\n            closing_brackets_size--;\n      \
    \  }\n    }\n    if (opening_brackets_size != 0) {\n        return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcxtn_a7k: /tmp/tmpcxtn_a7k.cpp:40: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n       \
    \ if (brackets[i] != '<') result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp4zujigv: /tmp/tmpp4zujigv.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < open_brackets; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      ++close_brackets;\n        }\n    }\n    return close_brackets == open_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeui0jh1p: /tmp/tmpeui0jh1p.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '>') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsbsbk34d: /tmp/tmpsbsbk34d.cpp:19: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        char open_bracket = brackets[i];\n \
    \       char close_bracket = brackets[brackets_size - i - 1];\n        if (open_bracket\
    \ != close_bracket) {\n            result = false;\n            break;\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp02436x82: /tmp/tmp02436x82.cpp:20: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ a stack to keep track of brackets\n    std::stack<char> brackets_stack;\n  \
    \  // initialize a boolean to keep track of whether a bracket is open\n    bool\
    \ is_open = false;\n    // initialize a boolean to keep track of whether a bracket\
    \ is closed\n    bool is_closed = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is correct\n    bool is_correct = false;\n    //\
    \ initialize a boolean to keep track of whether a bracket is incorrect\n    bool\
    \ is_incorrect = false;\n    // initialize a boolean to keep track of whether\
    \ a bracket is ignored\n    bool is_ignored = false;\n    // initialize a boolean\
    \ to keep track of whether a bracket is ignored\n    bool is_opening_bracket =\
    \ false;\n    // initialize a boolean to keep track of whether a bracket is ignored\n\
    \    bool is_closing_bracket = false;\n    // initialize a boolean to keep track\
    \ of whether a bracket is ignored\n    bool is_opening_square_bracket = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_square_bracket = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_curly_bracket = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_curly_bracket = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_angle_bracket = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_angle_bracket = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_parenthesis = false;\n\
    \    // initialize a boolean to keep track of whether a bracket is ignored\n \
    \   bool is_closing_parenthesis = false;\n    // initialize a boolean to keep\
    \ track of whether a bracket is ignored\n    bool is_opening_square_parenthesis\
    \ = false;\n    // initialize a boolean to keep track of whether a bracket is\
    \ ignored\n    bool is_closing_square_parenthesis = false;\n    // initialize\
    \ a boolean to keep track of whether a bracket is ignored\n    bool is_opening_curly_parenthesis\
    \ = false;\n    // initialize a boolean to keep track of whether a bracket is\
    \ ignored\n    bool is_closing_curly_parenthesis = false;\n    // initialize a\
    \ boolean to keep track of whether a bracket is ignored\n    bool is_opening_angled_parenthesis\
    \ = false;\n    // initialize a boolean to keep track of whether a bracket is\
    \ ignored\n    bool is_closing_angle\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rvl8fhg.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp3rvl8fhg.cpp:50:1: error: expected initializer before \u2018}\u2019\
    \ token\n   50 | }\n      | ^\n/tmp/tmp3rvl8fhg.cpp:50:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        char open_bracket = brackets[i];\n \
    \       char close_bracket = brackets[brackets_size - i - 1];\n        if (open_bracket\
    \ != close_bracket) {\n            result = false;\n            break;\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqcjggzgx: /tmp/tmpqcjggzgx.cpp:20: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    size_t len = brackets.size();\n    for (size_t i = 0; i\
    \ < len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n    \
    \        char next_c = brackets[i + 1];\n            if (next_c == '>') {\n  \
    \              i += 1;\n            } else {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr2g26h4u: /tmp/tmpr2g26h4u.cpp:24: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_index = opening_brackets.find(brackets[0]);\n\
    \    std::string closing_brackets_index = closing_brackets.find(brackets[1]);\n\
    \    if (opening_brackets_index == std::string::npos || closing_brackets_index\
    \ == std::string::npos) {\n        return false;\n    }\n    if (opening_brackets_index\
    \ > closing_brackets_index) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibw4fou1.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpibw4fou1.cpp:8:63: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_index = opening_brackets.find(brackets[0]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpibw4fou1.cpp:9:63:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_index = closing_brackets.find(brackets[1]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpibw4fou1.cpp:10:32:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018const size_type\u2019\
    \ {aka \u2018const long unsigned int\u2019})\n   10 |     if (opening_brackets_index\
    \ == std::string::npos || closing_brackets_index == std::string::npos) {\n   \
    \   |         ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |         | \
    \                                     |\n      |         |                   \
    \                   const size_type {aka const long unsigned int}\n      |   \
    \      std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpibw4fou1.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tm"
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    while (i < open_brackets) {\n        if (brackets[i]\
    \ == '<') {\n            close_brackets++;\n        }\n        i++;\n    }\n \
    \   while (j < close_brackets) {\n        if (brackets[j] == '>') {\n        \
    \    open_brackets--;\n        }\n        j++;\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmppimkgc1x: /tmp/tmppimkgc1x.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == '>') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    if (open_brackets\
    \ != close_brackets) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwfcl_x6u: /tmp/tmpwfcl_x6u.cpp:29: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < open_brackets; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      ++close_brackets;\n        } else {\n            assert(brackets[i] ==\
    \ '>');\n        }\n    }\n    return open_brackets == close_brackets;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ma2dsfz: /tmp/tmp_ma2dsfz.cpp:19: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] == '>') {\n                result += true;\n      \
    \      }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpffieua_1: /tmp/tmpffieua_1.cpp:24: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = brackets.size();\n    int close_brackets = 0;\n    for (int i = 0; i < open_brackets;\
    \ i++) {\n        if (brackets[i] == '<') {\n            close_brackets++;\n \
    \       }\n    }\n    for (int i = 0; i < open_brackets; i++) {\n        if (brackets[i]\
    \ == '>') {\n            close_brackets--;\n        }\n    }\n    return close_brackets\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr1486sro: /tmp/tmpr1486sro.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < open_brackets; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      ++close_brackets;\n        }\n    }\n    return close_brackets == open_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeui0jh1p: /tmp/tmpeui0jh1p.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_cnt\
    \ = 0;\n    size_t close_brackets_cnt = 0;\n    size_t open_brackets_cnt2 = 0;\n\
    \    size_t close_brackets_cnt2 = 0;\n    size_t open_brackets_cnt3 = 0;\n   \
    \ size_t close_brackets_cnt3 = 0;\n    size_t open_brackets_cnt4 = 0;\n    size_t\
    \ close_brackets_cnt4 = 0;\n    size_t open_brackets_cnt5 = 0;\n    size_t close_brackets_cnt5\
    \ = 0;\n    size_t open_brackets_cnt6 = 0;\n    size_t close_brackets_cnt6 = 0;\n\
    \    size_t open_brackets_cnt7 = 0;\n    size_t close_brackets_cnt7 = 0;\n   \
    \ size_t open_brackets_cnt8 = 0;\n    size_t close_brackets_cnt8 = 0;\n    size_t\
    \ open_brackets_cnt9 = 0;\n    size_t close_brackets_cnt9 = 0;\n    size_t open_brackets_cnt10\
    \ = 0;\n    size_t close_brackets_cnt10 = 0;\n    size_t open_brackets_cnt11 =\
    \ 0;\n    size_t close_brackets_cnt11 = 0;\n    size_t open_brackets_cnt12 = 0;\n\
    \    size_t close_brackets_cnt12 = 0;\n    size_t open_brackets_cnt13 = 0;\n \
    \   size_t close_brackets_cnt13 = 0;\n    size_t open_brackets_cnt14 = 0;\n  \
    \  size_t close_brackets_cnt14 = 0;\n    size_t open_brackets_cnt15 = 0;\n   \
    \ size_t close_brackets_cnt15 = 0;\n    size_t open_brackets_cnt16 = 0;\n    size_t\
    \ close_brackets_cnt16 = 0;\n    size_t open_brackets_cnt17 = 0;\n    size_t close_brackets_cnt17\
    \ = 0;\n    size_t open_brackets_cnt18 = 0;\n    size_t close_brackets_cnt18 =\
    \ 0;\n    size_t open_brackets_cnt19 = 0;\n    size_t close_brackets_cnt19 = 0;\n\
    \    size_t open_brackets_cnt20 = 0;\n    size_t close_brackets_cnt20 = 0;\n \
    \   size_t open_brackets_cnt21 = 0;\n    size_t close_brackets_cnt21 = 0;\n  \
    \  size_t open_brackets_cnt22 = 0;\n    size_t close_brackets_cnt22 = 0;\n   \
    \ size_t open_brackets_cnt23 = 0;\n    size_t close_brackets_cnt23 = 0;\n\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsna8weqm: /tmp/tmpsna8weqm.cpp:58: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c != '<' && c !=\
    \ '>') {\n            result = false;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa505f194: /tmp/tmpa505f194.cpp:20: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpokh4bais: /tmp/tmpokh4bais.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] == '>') {\n            if (i < brackets.size() - 1) {\n   \
    \             if (brackets[i + 1] != '<') {\n                    correct = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz5ru4a5c: /tmp/tmpz5ru4a5c.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                correct\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpni4v4dkg: /tmp/tmpni4v4dkg.cpp:23: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130413
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    if (open_brackets\
    \ != close_brackets) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfjscdlo1: /tmp/tmpfjscdlo1.cpp:29: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpokh4bais: /tmp/tmpokh4bais.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n \
    \           correct = correct && false;\n        }\n        else if (c == '>')\
    \ {\n            correct = correct && true;\n        }\n        else {\n     \
    \       correct = correct && false;\n        }\n    }\n    return correct;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq_jacx29: /tmp/tmpq_jacx29.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    while (i < open_brackets) {\n\
    \        if (brackets[i] == '<') {\n            close_brackets++;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets--;\n        }\n      \
    \  i++;\n    }\n    if (close_brackets != 0) {\n        result = false;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5qey0gac: /tmp/tmp5qey0gac.cpp:31: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            result += (*(it + 1) != '<');\n  \
    \      }\n        if (*it == '>') {\n            result += (*(it + 1) != '>');\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpndlcqx9x: /tmp/tmpndlcqx9x.cpp:23: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n \
    \           correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdfhhbtg2: /tmp/tmpdfhhbtg2.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n       \
    \ if (brackets[i] != '<') result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp94fo4bhj: /tmp/tmp94fo4bhj.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &bracket : brackets) {\n        if (bracket !=\
    \ '<' && bracket != '>') {\n            result = false;\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw4qbse4h: /tmp/tmpw4qbse4h.cpp:20: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string opening_brackets_end\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_end\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_start\
    \ = opening_brackets.substr(0, opening_brackets_size);\n    std::string closing_brackets_start\
    \ = closing_brackets.substr(0, closing_brackets_size);\n    std::string opening_brackets_middle\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle2\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle2\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle3\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle3\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle4\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle4\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle5\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle5\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle6\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle6\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle7\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle7\
    \ = closing_brackets.substr(closing_brackets_size);\n    std::string opening_brackets_middle8\
    \ = opening_brackets.substr(opening_brackets_size);\n    std::string closing_brackets_middle8\
    \ = closing_b\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) ==\
    \ (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdn3zfmd.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpbdn3zfmd.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpbdn3zfmd.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpbdn3zfmd.cpp:10:64: error:\
    \ cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   10 |     std::string opening_brackets_end = opening_brackets.substr(opening_brackets_size);\n\
    \      |                                                                ^~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                |\n  \
    \    |                                                                std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbdn3zfmd.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2838:24:\
    \ note:   initializing argument 1 of \u2018std::__"
  stdout: ''
  timestamp: 1660130419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt89p8n1_: /tmp/tmpt89p8n1_.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnzxqmxsd: /tmp/tmpnzxqmxsd.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n    \
    \    if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n  \
    \              correct = false;\n            }\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq8or3zxw: /tmp/tmpq8or3zxw.cpp:18: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto bracket = brackets.begin(); bracket != brackets.end();\
    \ ++bracket) {\n        if (*bracket != '<') correct = false;\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnfyxb6y1: /tmp/tmpnfyxb6y1.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n      \
    \  if (brackets[i] != '<') correct = false;\n    }\n    return correct;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphyspkj9j: /tmp/tmphyspkj9j.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp52xvnr5f: /tmp/tmp52xvnr5f.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpokh4bais: /tmp/tmpokh4bais.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      }\n        if (brackets[i] == '>') {\n            close_brackets++;\n \
    \       }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0hf87kr6: /tmp/tmp0hf87kr6.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(std::remove(opening_brackets.begin(), opening_brackets.end(),\
    \ '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl07pgg1q: /tmp/tmpl07pgg1q.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n      \
    \  if (brackets[i] != '<') correct = false;\n    }\n    return correct;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphyspkj9j: /tmp/tmphyspkj9j.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n     \
    \   if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n   \
    \             result = true;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp45yrgkg5: /tmp/tmp45yrgkg5.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_size = opening_brackets.size();\n    std::string\
    \ closing_brackets_size = closing_brackets.size();\n    std::string opening_brackets_copy\
    \ = opening_brackets;\n    std::string closing_brackets_copy = closing_brackets;\n\
    \    bool correct_bracketing = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets_copy\
    \ = opening_brackets_copy.substr(0, i);\n            closing_brackets_copy = closing_brackets_copy.substr(0,\
    \ i);\n        }\n        if (brackets[i] == '>') {\n            opening_brackets_copy\
    \ = opening_brackets_copy.substr(i + 1, opening_brackets_copy.size() - i - 1);\n\
    \            closing_brackets_copy = closing_brackets_copy.substr(i + 1, closing_brackets_copy.size()\
    \ - i - 1);\n        }\n        if (opening_brackets_copy != closing_brackets_copy)\
    \ {\n            correct_bracketing = false;\n        }\n    }\n    return correct_bracketing;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7hgu3zl.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpy7hgu3zl.cpp:8:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpy7hgu3zl.cpp:9:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpokh4bais: /tmp/tmpokh4bais.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp52xvnr5f: /tmp/tmp52xvnr5f.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n  \
    \          if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp52xvnr5f: /tmp/tmp52xvnr5f.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto &c : brackets) {\n        if (c != '>' && c !=\
    \ '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpajjyl6yy: /tmp/tmpajjyl6yy.cpp:21: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i - 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbg9_z_m5: /tmp/tmpbg9_z_m5.cpp:18: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '<') correct = false;\n    }\n    return correct;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbkfhipnp: /tmp/tmpbkfhipnp.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>') {\n    \
    \            correct = false;\n            }\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpspqnl5pi: /tmp/tmpspqnl5pi.cpp:19: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '>') return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1a47of1n: /tmp/tmp1a47of1n.cpp:17: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n       \
    \ if (brackets[i] != '<') result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp94fo4bhj: /tmp/tmp94fo4bhj.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_cnt\
    \ = 0;\n    size_t close_brackets_cnt = 0;\n    size_t open_brackets_cnt2 = 0;\n\
    \    size_t close_brackets_cnt2 = 0;\n    size_t open_brackets_cnt3 = 0;\n   \
    \ size_t close_brackets_cnt3 = 0;\n    size_t open_brackets_cnt4 = 0;\n    size_t\
    \ close_brackets_cnt4 = 0;\n    size_t open_brackets_cnt5 = 0;\n    size_t close_brackets_cnt5\
    \ = 0;\n    size_t open_brackets_cnt6 = 0;\n    size_t close_brackets_cnt6 = 0;\n\
    \    size_t open_brackets_cnt7 = 0;\n    size_t close_brackets_cnt7 = 0;\n   \
    \ size_t open_brackets_cnt8 = 0;\n    size_t close_brackets_cnt8 = 0;\n    size_t\
    \ open_brackets_cnt9 = 0;\n    size_t close_brackets_cnt9 = 0;\n    size_t open_brackets_cnt10\
    \ = 0;\n    size_t close_brackets_cnt10 = 0;\n    size_t open_brackets_cnt11 =\
    \ 0;\n    size_t close_brackets_cnt11 = 0;\n    size_t open_brackets_cnt12 = 0;\n\
    \    size_t close_brackets_cnt12 = 0;\n    size_t open_brackets_cnt13 = 0;\n \
    \   size_t close_brackets_cnt13 = 0;\n    size_t open_brackets_cnt14 = 0;\n  \
    \  size_t close_brackets_cnt14 = 0;\n    size_t open_brackets_cnt15 = 0;\n   \
    \ size_t close_brackets_cnt15 = 0;\n    size_t open_brackets_cnt16 = 0;\n    size_t\
    \ close_brackets_cnt16 = 0;\n    size_t open_brackets_cnt17 = 0;\n    size_t close_brackets_cnt17\
    \ = 0;\n    size_t open_brackets_cnt18 = 0;\n    size_t close_brackets_cnt18 =\
    \ 0;\n    size_t open_brackets_cnt19 = 0;\n    size_t close_brackets_cnt19 = 0;\n\
    \    size_t open_brackets_cnt20 = 0;\n    size_t close_brackets_cnt20 = 0;\n \
    \   size_t open_brackets_cnt21 = 0;\n    size_t close_brackets_cnt21 = 0;\n  \
    \  size_t open_brackets_cnt22 = 0;\n    size_t close_brackets_cnt22 = 0;\n   \
    \ size_t open_brackets_cnt23 = 0;\n    size_t close_brackets_cnt23 = 0;\n\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsna8weqm: /tmp/tmpsna8weqm.cpp:58: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         result &= (brackets[brackets.size() - 1] == '>');\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbh59iy6a: /tmp/tmpbh59iy6a.cpp:20: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            if (brackets.end() != std::find(brackets.begin(),\
    \ brackets.end(), '>')) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvx59zvwb: /tmp/tmpvx59zvwb.cpp:19: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{<\";\n    std::string closing_brackets = \")]}>\";\n\
    \    std::string opening_brackets_index = opening_brackets.find(brackets[0]);\n\
    \    std::string closing_brackets_index = closing_brackets.find(brackets[1]);\n\
    \    if (opening_brackets_index == std::string::npos || closing_brackets_index\
    \ == std::string::npos)\n        return false;\n    if (opening_brackets_index\
    \ != closing_brackets_index)\n        return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_v_8f37.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp4_v_8f37.cpp:8:63: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_index = opening_brackets.find(brackets[0]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp4_v_8f37.cpp:9:63:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_index = closing_brackets.find(brackets[1]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp4_v_8f37.cpp:10:32:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018const size_type\u2019\
    \ {aka \u2018const long unsigned int\u2019})\n   10 |     if (opening_brackets_index\
    \ == std::string::npos || closing_brackets_index == std::string::npos)\n     \
    \ |         ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |         |   \
    \                                   |\n      |         |                     \
    \                 const size_type {aka const long unsigned int}\n      |     \
    \    std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4_v_8f37.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/"
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets.substr(0, brackets.size() - 1);\n    std::string\
    \ closing_brackets = brackets.substr(brackets.size() - 1, brackets.size());\n\
    \    std::string opening_brackets_copy = opening_brackets;\n    std::string closing_brackets_copy\
    \ = closing_brackets;\n    bool result = true;\n    for (int i = 0; i < opening_brackets.size();\
    \ i++) {\n        if (opening_brackets_copy[i] != closing_brackets_copy[i]) {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwr8ewd57: /tmp/tmpwr8ewd57.cpp:21: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto bracket = brackets.begin(); bracket != brackets.end();\
    \ ++bracket) {\n        if (*bracket != '<') result = false;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpscbvs3bw: /tmp/tmpscbvs3bw.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') result = false;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3g3_5_te: /tmp/tmp3g3_5_te.cpp:15: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ bracket_count = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n   \
    \     if (brackets[i] == '<') {\n            bracket_count++;\n        }\n   \
    \     if (brackets[i] == '>') {\n            bracket_count--;\n        }\n   \
    \     if (bracket_count < 0) {\n            return false;\n        }\n    }\n\
    \    return bracket_count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpktaad6m6: /tmp/tmpktaad6m6.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') return false;\n    }\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] != '>') return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_hyq0t5t: /tmp/tmp_hyq0t5t.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n       \
    \ if (brackets[i] != '<') result = false;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp4zujigv: /tmp/tmpp4zujigv.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i - 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbg9_z_m5: /tmp/tmpbg9_z_m5.cpp:18: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp866q7_l0: /tmp/tmp866q7_l0.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpixbaoajn: /tmp/tmpixbaoajn.cpp:10: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         result &= (c == '>');\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb74rxxa3: /tmp/tmpb74rxxa3.cpp:16: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpokh4bais: /tmp/tmpokh4bais.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<' && brackets[i]\
    \ != '>') {\n            result = false;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvtgcp7_3: /tmp/tmpvtgcp7_3.cpp:21: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = 0;\n  \
    \  size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size != closing_brackets_size) {\n\
    \        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (opening_brackets_size\
    \ == closing_brackets_size) {\n                return false;\n            }\n\
    \        } else if (brackets[i] == '>') {\n            if (opening_brackets_size\
    \ != closing_brackets_size) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvgzn7ht3: /tmp/tmpvgzn7ht3.cpp:34: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c != '<') result\
    \ = false;\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpew8cqu73: /tmp/tmpew8cqu73.cpp:14: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ a stack to store opening brackets\n    std::stack<char> brackets_stack;\n  \
    \  // initialize a stack to store closing brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store brackets\n    std::stack<char> brackets_stack_open\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp64uyic_9.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp64uyic_9.cpp:13:22: error: redeclaration of \u2018std::stack<char>\
    \ brackets_stack_close\u2019\n   13 |     std::stack<char> brackets_stack_close;\n\
    \      |                      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:9:22:\
    \ note: \u2018std::stack<char> brackets_stack_close\u2019 previously declared\
    \ here\n    9 |     std::stack<char> brackets_stack_close;\n      |          \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:15:22: error: redeclaration\
    \ of \u2018std::stack<char> brackets_stack_open\u2019\n   15 |     std::stack<char>\
    \ brackets_stack_open;\n      |                      ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:11:22:\
    \ note: \u2018std::stack<char> brackets_stack_open\u2019 previously declared here\n\
    \   11 |     std::stack<char> brackets_stack_open;\n      |                  \
    \    ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:17:22: error: redeclaration of\
    \ \u2018std::stack<char> brackets_stack_close\u2019\n   17 |     std::stack<char>\
    \ brackets_stack_close;\n      |                      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:9:22:\
    \ note: \u2018std::stack<char> brackets_stack_close\u2019 previously declared\
    \ here\n    9 |     std::stack<char> brackets_stack_close;\n      |          \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:19:22: error: redeclaration\
    \ of \u2018std::stack<char> brackets_stack_open\u2019\n   19 |     std::stack<char>\
    \ brackets_stack_open;\n      |                      ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:11:22:\
    \ note: \u2018std::stack<char> brackets_stack_open\u2019 previously declared here\n\
    \   11 |     std::stack<char> brackets_stack_open;\n      |                  \
    \    ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:21:22: error: redeclaration of\
    \ \u2018std::stack<char> brackets_stack_close\u2019\n   21 |     std::stack<char>\
    \ brackets_stack_close;\n      |                      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp64uyic_9.cpp:9:22:\
    \ note: \u2018std::stack<char> brackets_stack_close\u2019 previously declared\
    \ here\n    9 |     std::stack<char> brackets_stack_close;\n      |          \
    \            ^"
  stdout: ''
  timestamp: 1660130420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_index = opening_brackets.find(brackets[0]);\n\
    \    std::string closing_brackets_index = closing_brackets.find(brackets[1]);\n\
    \    if (opening_brackets_index == std::string::npos || closing_brackets_index\
    \ == std::string::npos)\n        return false;\n    if (opening_brackets_index\
    \ > closing_brackets_index)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vxf_olh.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp4vxf_olh.cpp:8:63: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string\
    \ opening_brackets_index = opening_brackets.find(brackets[0]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp4vxf_olh.cpp:9:63:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n    9 |     std::string\
    \ closing_brackets_index = closing_brackets.find(brackets[1]);\n      |      \
    \                                    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmp4vxf_olh.cpp:10:32:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018const size_type\u2019\
    \ {aka \u2018const long unsigned int\u2019})\n   10 |     if (opening_brackets_index\
    \ == std::string::npos || closing_brackets_index == std::string::npos)\n     \
    \ |         ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |         |   \
    \                                   |\n      |         |                     \
    \                 const size_type {aka const long unsigned int}\n      |     \
    \    std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4vxf_olh.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/"
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n \
    \           correct = false;\n            break;\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdfhhbtg2: /tmp/tmpdfhhbtg2.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130414
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] != '<') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = brackets_size; i > 0; --i) {\n        if (brackets[i - 1] != '>') {\n  \
    \          result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4okpiaoe: /tmp/tmp4okpiaoe.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ bracket_count = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n   \
    \     if (brackets[i] == '<') {\n            ++bracket_count;\n        } else\
    \ if (brackets[i] == '>') {\n            --bracket_count;\n        }\n       \
    \ if (bracket_count < 0) {\n            return false;\n        }\n    }\n    return\
    \ bracket_count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpig28b41b: /tmp/tmpig28b41b.cpp:26: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ opening_brackets = brackets.size();\n    size_t closing_brackets = 0;\n    for\
    \ (size_t i = 0; i < opening_brackets; ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++closing_brackets;\n        }\n    }\n    if (closing_brackets\
    \ != opening_brackets) {\n        return false;\n    }\n    for (size_t i = 0;\
    \ i < opening_brackets; ++i) {\n        if (brackets[i] == '>') {\n          \
    \  --closing_brackets;\n        }\n    }\n    if (closing_brackets != opening_brackets)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0amtmjdu: /tmp/tmp0amtmjdu.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto bracket = brackets.begin(); bracket != brackets.end();\
    \ ++bracket) {\n        if (*bracket != '<') {\n            correct = false;\n\
    \            break;\n        }\n        ++bracket;\n        if (*bracket != '>')\
    \ {\n            correct = false;\n            break;\n        }\n        ++bracket;\n\
    \    }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6h6ds_q1: /tmp/tmp6h6ds_q1.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwzseu2k: /tmp/tmpbwzseu2k.cpp:22: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n        if (c\
    \ == '<') {\n            if (brackets[i - 1] == '<') {\n                result\
    \ = false;\n                break;\n            }\n        } else if (c == '>')\
    \ {\n            if (brackets[i - 1] == '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4svejeh2: /tmp/tmp4svejeh2.cpp:27: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] != '<') {\n        \
    \        return false;\n            }\n        } else if (brackets[i] == '>')\
    \ {\n            if (brackets[i + 1] != '>') {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5e87_rbk: /tmp/tmp5e87_rbk.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t close_brackets_size = brackets.find_first_of(\">\");\n    \n\
    \    if (open_brackets_size == close_brackets_size) {\n        // no brackets\
    \ found\n        return false;\n    }\n    \n    if (open_brackets_size == brackets_size\
    \ - 1) {\n        // only one opening bracket\n        return true;\n    }\n \
    \   \n    if (close_brackets_size == brackets_size - 1) {\n        // only one\
    \ closing bracket\n        return true;\n    }\n    \n    if (open_brackets_size\
    \ == 0) {\n        // no opening brackets\n        return false;\n    }\n    \n\
    \    if (close_brackets_size == 0) {\n        // no closing brackets\n       \
    \ return false;\n    }\n    \n    // there are two opening brackets\n    if (brackets[open_brackets_size\
    \ - 1] != '>') {\n        // the closing bracket is not the closing bracket of\
    \ the opening bracket\n        return false;\n    }\n    \n    // there are two\
    \ closing brackets\n    if (brackets[close_brackets_size - 1] != '<') {\n    \
    \    // the opening bracket is not the closing bracket of the opening bracket\n\
    \        return false;\n    }\n    \n    // the closing bracket is the closing\
    \ bracket of the opening bracket\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1cfky8px: /tmp/tmp1cfky8px.cpp:53: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps1h4l3kg: /tmp/tmps1h4l3kg.cpp:24: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code goes here\n    bool correct = true;\n    for(int i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if(brackets[i] == '<' && brackets[i + 1] == '>') {\n  \
    \          correct = false;\n        }\n    }\n    return correct;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7sr3l8nj: /tmp/tmp7sr3l8nj.cpp:17: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"([{\";\n    std::string closing_brackets = \")]}\";\n \
    \   std::string opening_brackets_end = opening_brackets + opening_brackets.size();\n\
    \    std::string closing_brackets_end = closing_brackets + closing_brackets.size();\n\
    \    std::string opening_brackets_start = opening_brackets;\n    std::string closing_brackets_start\
    \ = closing_brackets;\n    std::string opening_brackets_end = opening_brackets\
    \ + opening_brackets.size();\n    std::string closing_brackets_end = closing_brackets\
    \ + closing_brackets.size();\n    std::string opening_brackets_start = opening_brackets;\n\
    \    std::string closing_brackets_start = closing_brackets;\n    std::string opening_brackets_end\
    \ = opening_brackets + opening_brackets.size();\n    std::string closing_brackets_end\
    \ = closing_brackets + closing_brackets.size();\n    std::string opening_brackets_start\
    \ = opening_brackets;\n    std::string closing_brackets_start = closing_brackets;\n\
    \    std::string opening_brackets_end = opening_brackets + opening_brackets.size();\n\
    \    std::string closing_brackets_end = closing_brackets + closing_brackets.size();\n\
    \    std::string opening_brackets_start = opening_brackets;\n    std::string closing_brackets_start\
    \ = closing_brackets;\n    std::string opening_brackets_end = opening_brackets\
    \ + opening_brackets.size();\n    std::string closing_brackets_end = closing_brackets\
    \ + closing_brackets.size();\n    std::string opening_brackets_start = opening_brackets;\n\
    \    std::string closing_brackets_start = closing_brackets;\n    std::string opening_brackets_end\
    \ = opening_brackets + opening_brackets.size();\n    std::string closing_brackets_end\
    \ = closing_brackets + closing_brackets.size();\n    std::string opening_brackets_start\
    \ = opening_brackets;\n    std::string closing_brackets_start = closing_brackets;\n\
    \    std::string opening_brackets_end = opening_brackets + opening_brackets.size();\n\
    \    std::string closing_brackets_end = closing_brackets + closing_brackets.size();\n\
    \    std::string opening_brackets_\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_p5jg2l.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpx_p5jg2l.cpp:8:57: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n    8 |     std::string opening_brackets_end = opening_brackets\
    \ + opening_brackets.size();\n      |                                        ~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~\n      |                                        |\
    \                                       |\n      |                           \
    \             |                                       std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\n      |                                        std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpx_p5jg2l.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpx_p5jg2l.cpp:8:81:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n    8 |     std::string opening_brackets_end = opening_brackets\
    \ + opening_brackets.size();\n      |                                        \
    \                                         ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/incl"
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ correct = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n  \
    \          correct = correct && false;\n        } else {\n            correct\
    \ = correct && true;\n        }\n    }\n    return correct;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplebydbhh: /tmp/tmplebydbhh.cpp:18: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] != '<') {\n                result = false;\n      \
    \          break;\n            }\n        } else if (c == '>') {\n           \
    \ if (brackets[i + 1] != '>') {\n                result = false;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9azmcl98: /tmp/tmp9azmcl98.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    size_t\
    \ i = 0;\n    while (i < open_brackets) {\n        if (brackets[i] == '<') {\n\
    \            close_brackets++;\n        }\n        i++;\n    }\n    bool result\
    \ = close_brackets == open_brackets;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpej36_j6_: /tmp/tmpej36_j6_.cpp:20: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '<') {\n                return\
    \ false;\n            }\n        } else if (brackets[i] == '>') {\n          \
    \  if (brackets[i + 1] != '>') {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxaajvxg9: /tmp/tmpxaajvxg9.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130416
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmphmz7aisb: /tmp/tmphmz7aisb.cpp:27: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = 0;\n  \
    \  size_t closing_brackets_size = 0;\n    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n        if\
    \ (c == '<') {\n            opening_brackets_size++;\n        } else if (c ==\
    \ '>') {\n            closing_brackets_size++;\n        } else {\n           \
    \ result = false;\n            break;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        result = false;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsovck8a0: /tmp/tmpsovck8a0.cpp:33: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    bool\
    \ result = true;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < brackets_size; i++) {\n        if (brackets[i] != '>') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp70wvtpwl: /tmp/tmp70wvtpwl.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    size_t\
    \ close_brackets_size = 0;\n    bool result = true;\n    for (size_t i = 0; i\
    \ < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n            open_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size == close_brackets_size) {\n    \
    \    result = open_brackets_size == brackets_size;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpziq55j6j: /tmp/tmpziq55j6j.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n        if (c\
    \ == '<') {\n            if (brackets[i + 1] != '<') {\n                result\
    \ = false;\n                break;\n            }\n        } else if (c == '>')\
    \ {\n            if (brackets[i - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnlvfyxmz: /tmp/tmpnlvfyxmz.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuyer4vbl: /tmp/tmpuyer4vbl.cpp:26: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130422
