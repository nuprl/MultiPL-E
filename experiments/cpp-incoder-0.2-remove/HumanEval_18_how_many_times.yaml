name: HumanEval_18_how_many_times
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given\
  \ substring can be found in the original string. Count overlaping cases.\nlong how_many_times(std::string\
  \ string, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
  \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
  john doe\"), (\"john\")) == (1));\n}\n"
completions: ["    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long pos = 0;\n    long\
    \ len = string.length();\n    long sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string.at(pos) == substring.at(pos)) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            pos = 0;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long len = substring.length();\n    while (start\
    \ < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ len) == substring) {\n            count++;\n            start = mid + 1;\n \
    \       } else {\n            end = mid;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   while (pos < len) {\n        pos = string.find(substring, pos);\n        if\
    \ (pos == string::npos) {\n            break;\n        }\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto it = string.begin(); it != string.end(); ++it) {\n     \
    \   if (*it == substring[0]) {\n            count += 1;\n            for (auto\
    \ it2 = substring.begin(); it2 != substring.end(); ++it2) {\n                if\
    \ (*it2 == *it) {\n                    count += 1;\n                }\n      \
    \      }\n        }\n    }\n    return count;", "    long count = 0;\n    for\
    \ (auto &c : string) {\n        if (c == substring[0]) {\n            count +=\
    \ how_many_times(string.substr(1), substring);\n        } else if (c == substring[1])\
    \ {\n            count += how_many_times(string.substr(2), substring);\n     \
    \   } else if (c == substring[2]) {\n            count += how_many_times(string.substr(3),\
    \ substring);\n        } else if (c == substring[3]) {\n            count += how_many_times(string.substr(4),\
    \ substring);\n        } else if (c == substring[4]) {\n            count += how_many_times(string.substr(5),\
    \ substring);\n        } else if (c == substring[5]) {\n            count += how_many_times(string.substr(6),\
    \ substring);\n        } else if (c == substring[6]) {\n            count += how_many_times(string.substr(7),\
    \ substring);\n        } else if (c == substring[7]) {\n            count += how_many_times(string.substr(8),\
    \ substring);\n        } else if (c == substring[8]) {\n            count += how_many_times(string.substr(9),\
    \ substring);\n        } else if (c == substring[9]) {\n            count += how_many_times(string.substr(10),\
    \ substring);\n        } else if (c == substring[10]) {\n            count +=\
    \ how_many_times(string.substr(11), substring);\n        } else if (c == substring[11])\
    \ {\n            count += how_many_times(string.substr(12), substring);\n    \
    \    } else if (c == substring[12]) {\n            count += how_many_times(string.substr(13),\
    \ substring);\n        } else if (c == substring[13]) {\n            count +=\
    \ how_many_times(string.substr(14), substring);\n        } else if (c == substring[14])\
    \ {\n            count += how_many_times(string.substr(15), substring);\n    \
    \    } else if (c == substring[15]) {\n            count += how_many_times(string.substr(16),\
    \ substring);\n        } else if (c == substring[16]) {\n            count +=\
    \ how_many_times(string.substr(17), substring);\n        } else if (c == substring[17])\
    \ {\n            count += how_many_times(string.substr(18), substring);\n    \
    \    } else if (c == substring[18]) {\n            count += how_many_times(string.substr(19),\
    \ substring);\n        } else if (c == substring[19]) {\n            count +=\
    \ how_many_times(string.substr(20), substring);\n        } else if (c == substring[20])\
    \ {\n            count += how_many_times(string.substr(21), substring);\n    \
    \    } else if (c == substring[21]) {\n            count += how_many_times(string.substr(22),\
    \ substring);\n        } else if (c == substring[22]) {\n            count +=\
    \ how_many_time", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != std::string::npos) {\n        count++;\n   \
    \     pos += substring.length();\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            if (pos + sublen <= len) {\n               \
    \ for (size_t i = 1; i < sublen; ++i) {\n                    if (string[pos +\
    \ i] != substring[i]) {\n                        break;\n                    }\n\
    \                }\n                count += sublen;\n                pos += sublen;\n\
    \            } else {\n                count += 1;\n                pos += sublen;\n\
    \            }\n        } else {\n            count += 1;\n            pos +=\
    \ 1;\n        }\n    }\n    return count;", "    long count = 0;\n    size_t pos\
    \ = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string[pos] == substring[0]) {\n       \
    \     pos = pos + sublen;\n            count++;\n        }\n        else if (string[pos]\
    \ == substring[sublen - 1]) {\n            pos = pos + sublen;\n            count++;\n\
    \        }\n        else if (string[pos] == substring[0] && string[pos + 1] ==\
    \ substring[sublen - 1]) {\n            pos = pos + sublen + 1;\n            count++;\n\
    \        }\n        else if (string[pos] == substring[sublen - 1] && string[pos\
    \ + 1] == substring[0]) {\n            pos = pos + sublen + 1;\n            count++;\n\
    \        }\n        else {\n            pos = pos + sublen;\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    size_t pos =\
    \ 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   while (pos < len) {\n        pos = string.find(substring, pos);\n        if\
    \ (pos == string::npos) {\n            break;\n        }\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len\
    \ = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len) {\n        while (j < sublen) {\n            if (string[i] ==\
    \ substring[j]) {\n                count++;\n                j++;\n          \
    \  } else {\n                break;\n            }\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  count += how_many_times(string.substr(1, string.size() - 1), substring);\n\
    \        }\n        if (*it == substring[1]) {\n            count += how_many_times(string.substr(1,\
    \ string.size() - 1), substring);\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    long start = 0;\n    long end = string.length();\n    long\
    \ substring_length = substring.length();\n    long i = 0;\n    while (start <\
    \ end) {\n        while (i < substring_length && substring.at(i) == string.at(start))\
    \ {\n            i++;\n        }\n        if (i == substring_length) {\n     \
    \       count++;\n            start = start + 1;\n        }\n        while (i\
    \ < substring_length && substring.at(i) != string.at(start)) {\n            i++;\n\
    \        }\n        if (i == substring_length) {\n            count++;\n     \
    \       start = start + 1;\n        }\n        while (i < substring_length &&\
    \ substring.at(i) == string.at(end)) {\n            i++;\n        }\n        if\
    \ (i == substring_length) {\n            count++;\n            end = end - 1;\n\
    \        }\n        while (i < substring_length && substring.at(i) != string.at(end))\
    \ {\n            i++;\n        }\n        if (i == substring_length) {\n     \
    \       count++;\n            end = end - 1;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substring.length()) == substring)\
    \ {\n            count++;\n            start = mid + 1;\n        } else {\n  \
    \          end = mid;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos = pos + sublen;\n            count++;\n        }\n      \
    \  else if (string[pos] == substring[sublen - 1]) {\n            pos = pos + sublen;\n\
    \            count++;\n        }\n        else {\n            pos = pos + 1;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    size_t pos =\
    \ 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n       \
    \ if (string[i] == substring[0]) {\n            for (size_t j = 0; j < substring.length();\
    \ j++) {\n                if (string[i + j] != substring[j]) {\n             \
    \       break;\n                }\n            }\n            if (j == substring.length())\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] == substring[j] && string[i]\
    \ != substring[j - 1]) {\n            i++;\n            count++;\n        }\n\
    \        else if (string[i] == substring[j - 1] && string[i] != substring[j])\
    \ {\n            j++;\n            count++;\n        }\n        else if (string[i]\
    \ == substring[j] && string[i] != substring[j + 1]) {\n            i++;\n    \
    \        j++;\n            count++;\n        }\n        else if (string[i] ==\
    \ substring[j + 1] && string[i] != substring[j]) {\n            j++;\n       \
    \     count++;\n        }\n        else if (string[i] == substring[j] && string[i]\
    \ != substring[j - 1]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] == substring[j - 1] && string[i] != substring[j])\
    \ {\n            j++;\n            count++;\n        }\n        else if (string[i]\
    \ == substring[j] && string[i] != substring[j + 1]) {\n            i++;\n    \
    \        j++;\n            count++;\n        }\n        else if (string[i] ==\
    \ substring[j + 1] && string[i] != substring[j]) {\n            j++;\n       \
    \     count++;\n        }\n        else if (string[i] == substring[j] && string[i]\
    \ != substring[j + 1]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] == substring[j + 1] && string[i] != substring[j])\
    \ {\n            j++;\n            count++;\n        }\n        else if (string[i]\
    \ == substring[j] && string[i] != substring[j + 1]) {\n            i++;\n    \
    \        j++;\n            count++;\n        }\n        else if (string[i] ==\
    \ substring[j + 1] && string[i] != substring[j]) {\n            j++;\n       \
    \     count++;\n        }\n        else if (string[i] == substring[j] && string[i]\
    \ != substring[j + 1]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] == substring[j + 1] && string[i] != substring[j])\
    \ {\n            j++;\n            count++;\n        }\n        else if (string[i]\
    \ == substring[j] && string[i] != substring[j + 1]) {\n            i++;\n    \
    \        j++;\n            count++;\n        }\n        else if (string[i] ==\
    \ substring[j + 1] && string[i] != substring[j]) {\n            j++;\n       \
    \     count++;\n        }\n        else if (string[i] == substring[j] && string[i]\
    \ != substring[j + 1]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] == substring[j + 1] && string[i] != substring[j])\
    \ {\n            j++;\n            count++;\n        }\n        else if (string[i]\
    \ == substring[j] && string[i] ", "    long count = 0;\n    long start = 0;\n\
    \    long end = string.length();\n    long substring_length = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.substr(mid, substring_length) == substring) {\n            count++;\n\
    \            start = mid + 1;\n        } else {\n            end = mid;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    long start = 0;\n\
    \    long end = string.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, substring.length()).compare(substring)\
    \ == 0) {\n            count++;\n            start = mid + 1;\n        } else\
    \ {\n            end = mid;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long index = string.find(substring);\n    while\
    \ (index != std::string::npos) {\n        start = index;\n        index = string.find(substring,\
    \ index + 1);\n        count++;\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long i = 0;\n    while (start < end) {\n       \
    \ long mid = (start + end) / 2;\n        if (string.substr(mid, substring.length()).compare(substring)\
    \ == 0) {\n            count++;\n            start = mid + 1;\n        } else\
    \ {\n            end = mid;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] > substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto &c : string) {\n        if (c == substring[0]) {\n            for\
    \ (auto &cc : substring) {\n                if (c == cc) {\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    while (start < len) {\n        end = start + sublen;\n        if (string.compare(start,\
    \ sublen, substring, 0, sublen) == 0) {\n            count++;\n        }\n   \
    \     start = end + 1;\n    }\n    return count;", "    long count = 0;\n    size_t\
    \ pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.substr(mid, len) == substring) {\n            count++;\n           \
    \ start = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len\
    \ = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\n\
    \            break;\n        count++;\n        pos += sublen;\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    while (pos < len) {\n        if\
    \ (string[pos] == substring[0]) {\n            pos = pos + sublen;\n         \
    \   count++;\n        }\n        else if (string[pos] == substring[sublen - 1])\
    \ {\n            pos = pos + sublen;\n            count++;\n        }\n      \
    \  else {\n            pos = pos + 1;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] < substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ while (start < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring.length()) == substring) {\n            count++;\n            start\
    \ = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i\
    \ < len && j < sublen) {\n        if (string[i] == substring[j]) {\n         \
    \   i++;\n            j++;\n            count++;\n        } else if (string[i]\
    \ > substring[j]) {\n            j++;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    for (auto &c : string) {\n        if (c == substring[0])\
    \ {\n            for (auto &c2 : substring) {\n                if (c == c2) count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == string::npos) {\n            break;\n        }\n        ++count;\n\
    \        pos += sublen;\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length() - substring.length();\n\
    \    while (start < end) {\n        if (string.compare(start, substring.length(),\
    \ substring) == 0) {\n            count++;\n        }\n        start++;\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos\
    \ = string.find(substring, pos)) != std::string::npos) {\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n\
    \        start = i;\n        while (i < len && string[i] == substring[0]) {\n\
    \            i++;\n        }\n        end = i;\n        while (i < len && string[i]\
    \ == substring[sublen - 1]) {\n            i++;\n        }\n        if (end -\
    \ start == sublen) {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.substr(mid, len) == substring) {\n            count++;\n           \
    \ start = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len\
    \ = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string.compare(pos, sublen, substring) == 0) {\n     \
    \       count++;\n        }\n        pos = pos + sublen;\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == std::string::npos) {\n  \
    \          break;\n        }\n        ++count;\n        pos += sublen;\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 0;\n    long end =\
    \ string.length();\n    long len = substring.length();\n    while (start < end)\
    \ {\n        long mid = (start + end) / 2;\n        if (string.substr(mid, len)\
    \ == substring) {\n            count++;\n            start = mid + 1;\n      \
    \  } else {\n            end = mid;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long start = 0;\n    long end = string.length();\n  \
    \  long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n       \
    \ if (string[i] == substring[0]) {\n            for (size_t j = 0; j < substring.size();\
    \ j++) {\n                if (string[i + j + 1] == substring[j]) {\n         \
    \           count += 1;\n                }\n            }\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 0;\n    long end =\
    \ 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        } else if (string[i] > substring[j]) {\n         \
    \   end = i;\n            i = len;\n        } else {\n            start = i;\n\
    \            i = len;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long len = substring.length();\n    while (start\
    \ < end) {\n        if (string[start] == substring[0]) {\n            start =\
    \ start + 1;\n            while (start < end && string[start] == substring[len])\
    \ {\n                start = start + 1;\n                len++;\n            }\n\
    \            if (start == end) {\n                count++;\n            }\n  \
    \      }\n        start++;\n    }\n    return count;", "    long count = 0;\n\
    \    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    long i = 0;\n    while (start < end) {\n        long mid = (start + end)\
    \ / 2;\n        if (string.substr(mid, len) == substring) {\n            count++;\n\
    \            start = mid + 1;\n        } else {\n            end = mid;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       for (auto &c2 : substring) {\n                if (c == c2) count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen &&\
    \ string[i] == substring[j]) {\n            ++j;\n        }\n        if (j ==\
    \ sublen) {\n            ++count;\n            i = i + 1;\n            j = 0;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    long start =\
    \ 0;\n    long end = string.length();\n    long len = substring.length();\n  \
    \  while (start < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ len) == substring) {\n            count++;\n            start = mid + 1;\n \
    \       } else {\n            end = mid;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long start = 0;\n    long end = 0;\n    long len = string.length();\n   \
    \ long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    while (i < len) {\n        start = i;\n        while (j < sublen)\
    \ {\n            end = j;\n            while (k < len) {\n                if (string[k]\
    \ == substring[j]) {\n                    end = k + 1;\n                    break;\n\
    \                }\n                k++;\n            }\n            if (end ==\
    \ sublen) {\n                count++;\n                j = sublen;\n         \
    \   } else {\n                j = end;\n            }\n        }\n        i++;\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long start_pos\
    \ = 0;\n    long end_pos = 0;\n    long i = 0;\n    while (i < string.length())\
    \ {\n        if (string[i] == substring[0]) {\n            if (start == i) {\n\
    \                start_pos = i;\n            }\n            end = i;\n       \
    \     while (i < string.length() && string[i] == substring[substring.length()\
    \ - 1]) {\n                i++;\n            }\n            if (i == string.length())\
    \ {\n                end_pos = i;\n            }\n        }\n        i++;\n  \
    \  }\n    if (start == string.length()) {\n        start_pos = end;\n    }\n \
    \   if (end == string.length()) {\n        end_pos = start;\n    }\n    long start_index\
    \ = string.find(substring, start_pos);\n    long end_index = string.find(substring,\
    \ end_pos);\n    if (start_index == std::string::npos || end_index == std::string::npos)\
    \ {\n        return 0;\n    }\n    long count = end_index - start_index;\n   \
    \ if (count > 0) {\n        count += 1;\n    }\n    return count;", "    long\
    \ count = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        } else {\n\
    \            if (j == sublen) {\n                end = i;\n                i =\
    \ len;\n            } else {\n                i = i + 1;\n            }\n    \
    \        if (i == len) {\n                end = i;\n                i = len;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   long start = 0;\n    long end = string.length();\n    long i = 0;\n    long\
    \ j = 0;\n    while (i < end && j < substring.length()) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        } else {\n            if (j == substring.length() - 1) {\n          \
    \      i++;\n            } else {\n                j++;\n            }\n     \
    \   }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string.compare(pos, sublen, substring) ==\
    \ 0) {\n            count++;\n        }\n        pos += sublen;\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length() - substring.length();\n    while (start < end) {\n   \
    \     long mid = (start + end) / 2;\n        if (string.compare(mid, substring)\
    \ == 0) {\n            count++;\n            start = mid + 1;\n        } else\
    \ {\n            end = mid;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long i = 0;\n\
    \    long j = 0;\n    while (i < end && j < substring.length()) {\n        if\
    \ (string[i] == substring[j]) {\n            i++;\n            j++;\n        \
    \    count++;\n        }\n        else if (string[i] > substring[j]) {\n     \
    \       end = i;\n        }\n        else if (string[i] < substring[j]) {\n  \
    \          start = i;\n        }\n        else {\n            i++;\n         \
    \   j++;\n        }\n    }\n    return count;", "    long count = 0;\n    size_t\
    \ pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    for (auto it = string.begin(); it != string.end(); ++it) {\n     \
    \   if (*it == substring[0]) {\n            for (auto it2 = substring.begin();\
    \ it2 != substring.end(); ++it2) {\n                if (*it == *it2) {\n     \
    \               ++count;\n                }\n            }\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len\
    \ = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  count += how_many_times(string.substr(1, string.size() - 1), substring);\n\
    \        }\n        if (*it == substring[1]) {\n            count += how_many_times(string.substr(1,\
    \ string.size() - 1), substring);\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    long start = 0;\n    long end = string.length();\n    long\
    \ i = 0;\n    while (start < end) {\n        long mid = (start + end) / 2;\n \
    \       if (string.substr(mid, substring.length()).compare(substring) == 0) {\n\
    \            count++;\n            start = mid + 1;\n        }\n        else if\
    \ (string.substr(mid, substring.length()).compare(substring) > 0) {\n        \
    \    end = mid;\n        }\n        else {\n            start = mid + 1;\n   \
    \     }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] < substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            pos += sublen;\n\
    \            count++;\n        }\n        else if (string[pos] == substring[sublen\
    \ - 1]) {\n            pos += sublen;\n            count++;\n        }\n     \
    \   else {\n            pos += 1;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n  \
    \  size_t sublen = substring.length();\n    while (pos < len) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == std::string::npos) {\n    \
    \        break;\n        }\n        count++;\n        pos += sublen;\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos\
    \ = string.find(substring, pos)) != std::string::npos) {\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long i = 0;\n\
    \    while (i < end) {\n        if (string[i] == substring[0]) {\n           \
    \ start = i;\n            while (i < end && string[i] == substring[1]) {\n   \
    \             i++;\n            }\n            end = i;\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;", "    long count = 0;\n  \
    \  long start = 0;\n    long end = string.length();\n    while (start < end) {\n\
    \        long mid = (start + end) / 2;\n        if (string.substr(mid, substring.length())\
    \ == substring) {\n            count++;\n            start = mid + 1;\n      \
    \  } else {\n            end = mid;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += sublen;\n    }\n   \
    \ return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos =\
    \ string.find(substring, pos)) != std::string::npos) {\n        count++;\n   \
    \     pos += substring.length();\n    }\n    return count;", "    long count =\
    \ 0;\n    long pos = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string.at(pos) == substring.at(pos)) {\n\
    \            count++;\n            pos += sublen;\n        } else {\n        \
    \    pos = 0;\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        if (string[pos] == substring[0]) {\n            if (pos +\
    \ sublen == len) {\n                count++;\n                pos += sublen;\n\
    \            } else {\n                for (size_t i = 1; i < sublen; i++) {\n\
    \                    if (string[pos + i] != substring[i]) {\n                \
    \        break;\n                    }\n                }\n                count\
    \ += sublen - i;\n                pos += i;\n            }\n        } else {\n\
    \            count++;\n            pos++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long pos = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    while (pos < len) {\n        if (string.at(pos)\
    \ == substring.at(sublen)) {\n            count++;\n            pos += sublen;\n\
    \        } else {\n            pos = 0;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos)\n            break;\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    long i = 0;\n    while (i < len) {\n        while (start < end && string.at(start)\
    \ == substring.at(i)) {\n            start++;\n            i++;\n        }\n \
    \       while (start < end && string.at(end) == substring.at(i)) {\n         \
    \   end--;\n            i++;\n        }\n        if (start >= end) {\n       \
    \     count++;\n            start = end;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] < substring[j]) {\n            i++;\n        }\n        else\
    \ {\n            j++;\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        if (c == substring[0]) {\n            count += how_many_times(string.substr(1),\
    \ substring);\n        } else if (c == substring[1]) {\n            count += how_many_times(string.substr(1),\
    \ substring.substr(1));\n        } else {\n            count += 1;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        }\n       \
    \ else if (string[i] == substring[j]) {\n            i++;\n            count++;\n\
    \        }\n        else if (string[i] == substring[j]) {\n            j++;\n\
    \            count++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            count++;\n            i++;\n            j++;\n        }\n   \
    \     else if (string[i] == substring[j]) {\n            count++;\n          \
    \  i++;\n        }\n        else if (string[i] == substring[j]) {\n          \
    \  count++;\n            i++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            count++;\n            i++;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            count++;\n            i++;\n        }\n    \
    \    else if (string[i] == substring[j]) {\n            count++;\n           \
    \ i++;\n        }\n        else if (string[i] == substring[j]) {\n           \
    \ count++;\n            i++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            count++;\n            i++;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            count++;\n            i++;\n        }\n    \
    \    else if (string[i] == substring[j]) {\n            count++;\n           \
    \ i++;\n        }\n        else if (string[i] == substring[j]) {\n           \
    \ count++;\n            i++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            count++;\n            i++;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            count++;\n            i++;\n        }\n    \
    \    else if (string[i] == substring[j]) {\n            count++;\n           \
    \ i++;\n        }\n        else if (string[i] == substring[j]) {\n           \
    \ count++;\n            i++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            count++;\n            i++;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            count++;\n            i++;\n        }\n    \
    \    else if (string[i] == substring[j]) {\n            count++;\n           \
    \ i++;\n        }\n        else if (string[i] == substring[j]) {\n           \
    \ count++;\n            i++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            count++;\n            i++;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            count++;\n            i++;\n        }\n    \
    \    else if (string[i] == substring[j]) {\n            count++;\n           \
    \ i++;\n        }\n        else if (string[i] == substring[j]) {\n           \
    \ count++;\n            i++;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            count++;\n            i++;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            count++;\n", "    long count = 0;\n    size_t\
    \ pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string[pos] == substring[0]) {\n       \
    \     pos = pos + sublen;\n            count++;\n        }\n        else if (string[pos]\
    \ == substring[sublen - 1]) {\n            pos = pos + sublen;\n            count++;\n\
    \        }\n        else {\n            pos = pos + 1;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    long start = 0;\n    long end = string.length();\n\
    \    long substring_length = substring.length();\n    while (start < end) {\n\
    \        long mid = (start + end) / 2;\n        if (string.substr(mid, substring_length)\
    \ == substring) {\n            count++;\n            start = mid + 1;\n      \
    \  } else {\n            end = mid;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen\
    \ && string[i] == substring[j]) {\n            j++;\n        }\n        if (j\
    \ == sublen) {\n            count++;\n            i = i + 1;\n            j =\
    \ 0;\n        }\n    }\n    return count;", "    long count = 0;\n    size_t pos\
    \ = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n\
    \        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n \
    \   size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            count++;\n            pos += sublen;\n     \
    \   }\n        else if (string[pos] == substring[sublen - 1]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else {\n            pos++;\n \
    \       }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == std::string::npos)\n            break;\n        count++;\n      \
    \  pos += sublen;\n    }\n    return count;", "    long count = 0;\n    size_t\
    \ pos = 0;\n    size_t len = string.length();\n    while (pos < len) {\n     \
    \   pos = string.find(substring, pos);\n        if (pos == string::npos) {\n \
    \           break;\n        }\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long len = substring.length();\n    while (start\
    \ < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ len) == substring) {\n            count++;\n            start = mid + 1;\n \
    \       } else {\n            end = mid;\n        }\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  for (auto it2 = substring.begin(); it2 != substring.end(); ++it2) {\n     \
    \           if (*it == *it2) {\n                    ++count;\n               \
    \ }\n            }\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long len = string.length();\n    long sublen = substring.length();\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n        if (string[i]\
    \ == substring[j]) {\n            i++;\n            j++;\n            count++;\n\
    \        }\n        else if (string[i] > substring[j]) {\n            i++;\n \
    \       }\n        else {\n            j++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto it = string.begin(); it != string.end(); it++)\
    \ {\n        if (*it == substring[0]) {\n            for (auto it2 = substring.begin();\
    \ it2 != substring.end(); it2++) {\n                if (*it == *it2) {\n     \
    \               count++;\n                }\n            }\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos\
    \ = string.find(substring, pos)) != std::string::npos) {\n        count++;\n \
    \       pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long index = string.find(substring);\n    while\
    \ (index != std::string::npos) {\n        start = index;\n        index = string.find(substring,\
    \ index + 1);\n        end = index;\n        count++;\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while(pos < string.size()) {\n  \
    \      pos = string.find(substring, pos);\n        if(pos != string::npos) {\n\
    \            count++;\n            pos += substring.length();\n        }\n   \
    \     else {\n            break;\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i++;\n\
    \            j++;\n        }\n        else if (string[i] > substring[j]) {\n \
    \           i++;\n        }\n        else {\n            j++;\n        }\n   \
    \ }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\n\
    \            break;\n        count++;\n        pos += sublen;\n    }\n    return\
    \ count;", "    long count = 0;\n    long start = 0;\n    long end = string.length();\n\
    \    long len = substring.length();\n    while (start < end) {\n        if (string.compare(start,\
    \ len, substring) == 0) {\n            count++;\n        }\n        start = end\
    \ + 1;\n        end = start + len;\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long start_pos\
    \ = 0;\n    long end_pos = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    while (i < end && j < substring.length()) {\n        if (string[i] ==\
    \ substring[j]) {\n            count++;\n            i++;\n            j++;\n\
    \        } else if (string[i] == substring[j] && string[i] != substring[k]) {\n\
    \            count++;\n            i++;\n            k++;\n        } else {\n\
    \            i++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long start_sub = string.find(substring);\n    long end_sub = string.find(substring,\
    \ start_sub + 1);\n    while (start_sub != std::string::npos && end_sub != std::string::npos)\
    \ {\n        start = start_sub;\n        end = end_sub;\n        start_sub = string.find(substring,\
    \ start_sub + 1);\n        end_sub = string.find(substring, end_sub + 1);\n  \
    \      ++count;\n    }\n    return count;", "    long count = 0;\n    size_t pos\
    \ = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string[pos] == substring[0]) {\n       \
    \     pos += sublen;\n            count++;\n        }\n        else if (string[pos]\
    \ == substring[sublen - 1]) {\n            pos += sublen;\n            count++;\n\
    \        }\n        else {\n            pos += 1;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    long len = string.length();\n    long sublen\
    \ = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < len\
    \ && j < sublen) {\n        if (string[i] == substring[j]) {\n            i++;\n\
    \            j++;\n            count++;\n        }\n        else if (string[i]\
    \ > substring[j]) {\n            j++;\n        }\n        else if (string[i] <\
    \ substring[j]) {\n            i++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else if (string[i] < substring[j]) {\n \
    \           j++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto &c : string) {\n        if (c == substring[0]) {\n            count\
    \ += how_many_times(string.substr(1), substring);\n        } else if (c == substring[1])\
    \ {\n            count += how_many_times(string.substr(2), substring);\n     \
    \   } else if (c == substring[2]) {\n            count += how_many_times(string.substr(3),\
    \ substring);\n        } else if (c == substring[3]) {\n            count += how_many_times(string.substr(4),\
    \ substring);\n        } else if (c == substring[4]) {\n            count += how_many_times(string.substr(5),\
    \ substring);\n        } else if (c == substring[5]) {\n            count += how_many_times(string.substr(6),\
    \ substring);\n        } else if (c == substring[6]) {\n            count += how_many_times(string.substr(7),\
    \ substring);\n        } else if (c == substring[7]) {\n            count += how_many_times(string.substr(8),\
    \ substring);\n        } else if (c == substring[8]) {\n            count += how_many_times(string.substr(9),\
    \ substring);\n        } else if (c == substring[9]) {\n            count += how_many_times(string.substr(10),\
    \ substring);\n        } else if (c == substring[10]) {\n            count +=\
    \ how_many_times(string.substr(11), substring);\n        } else if (c == substring[11])\
    \ {\n            count += how_many_times(string.substr(12), substring);\n    \
    \    } else if (c == substring[12]) {\n            count += how_many_times(string.substr(13),\
    \ substring);\n        } else if (c == substring[13]) {\n            count +=\
    \ how_many_times(string.substr(14), substring);\n        } else if (c == substring[14])\
    \ {\n            count += how_many_times(string.substr(15), substring);\n    \
    \    } else if (c == substring[15]) {\n            count += how_many_times(string.substr(16),\
    \ substring);\n        } else if (c == substring[16]) {\n            count +=\
    \ how_many_times(string.substr(17), substring);\n        } else if (c == substring[17])\
    \ {\n            count += how_many_times(string.substr(18), substring);\n    \
    \    } else if (c == substring[18]) {\n            count += how_many_times(string.substr(19),\
    \ substring);\n        } else if (c == substring[19]) {\n            count +=\
    \ how_many_times(string.substr(20), substring);\n        } else if (c == substring[20])\
    \ {\n            count += how_many_times(string.substr(21), substring);\n    \
    \    } else if (c == substring[21]) {\n            count += how_many_times(string.substr(22),\
    \ substring);\n        } else if (c == substring[22]) {\n            count +=\
    \ how_many_times(", "    long count = 0;\n    long len = string.length();\n  \
    \  long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n      \
    \      i++;\n            j++;\n            count++;\n        } else {\n      \
    \      if (j == sublen) {\n                i++;\n                count++;\n  \
    \          }\n        }\n    }\n    return count;", "    long count = 0;\n   \
    \ long start = 0;\n    long end = string.length();\n    while (start < end) {\n\
    \        long mid = (start + end) / 2;\n        if (string.substr(mid, substring.length())\
    \ == substring) {\n            count++;\n            start = mid + 1;\n      \
    \  } else {\n            end = mid;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for (auto it = string.begin(); it != string.end(); ++it)\
    \ {\n        if (*it == substring[0]) {\n            for (auto it2 = substring.begin();\
    \ it2 != substring.end(); ++it2) {\n                if (*it2 == *it) {\n     \
    \               ++count;\n                }\n            }\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 0;\n    long end =\
    \ string.length();\n    long index = string.find(substring);\n    while (index\
    \ != std::string::npos) {\n        start = index;\n        index = string.find(substring,\
    \ index + 1);\n        count++;\n    }\n    return count;", "    long count =\
    \ 0;\n    long start = 0;\n    long end = string.length();\n    while (start <\
    \ end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring.length()).compare(substring) == 0) {\n            count++;\n     \
    \       start = mid + 1;\n        } else {\n            end = mid;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos += sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long len = substring.length();\n    long i = 0;\n\
    \    while (start < end) {\n        if (string[start] == substring[i]) {\n   \
    \         count++;\n            start += len;\n            while (start < end\
    \ && string[start] == substring[i])\n                start++;\n        } else\
    \ {\n            while (start < end && string[start] != substring[i])\n      \
    \          start++;\n        }\n        i++;\n    }\n    return count;", "   \
    \ long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n  \
    \  size_t sublen = substring.length();\n    while (pos < len) {\n        if (string[pos]\
    \ == substring[0]) {\n            count++;\n            pos += sublen;\n     \
    \   } else if (string[pos] == substring[sublen - 1]) {\n            count++;\n\
    \            pos += sublen;\n        } else {\n            pos++;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == substring[0]) {\n            for (size_t j\
    \ = 0; j < substring.length(); j++) {\n                if (string[i + j] == substring[j])\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen)\
    \ {\n            if (string[i] == substring[j]) {\n                count++;\n\
    \                j++;\n            } else {\n                break;\n        \
    \    }\n        }\n        if (j == sublen) {\n            count++;\n        \
    \    j = sublen;\n        }\n        i++;\n    }\n    return count;", "    long\
    \ count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t\
    \ sublen = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        ++count;\n        pos += sublen;\n    }\n    return count;", "  \
    \  long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long len = substring.length();\n    while (start < end) {\n        long mid\
    \ = (start + end) / 2;\n        if (string.substr(mid, len) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ while (start < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring.length()).compare(substring) == 0) {\n            count++;\n     \
    \       start = mid + 1;\n        } else {\n            end = mid;\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        if (*it == substring[0]) {\n          \
    \  for (auto it2 = substring.begin(); it2 != substring.end(); ++it2) {\n     \
    \           if (*it == *it2) {\n                    ++count;\n               \
    \ }\n            }\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos)\
    \ {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long start_pos = 0;\n    long end_pos = 0;\n    bool found = false;\n    while\
    \ (start < end) {\n        start_pos = string.find(substring, start);\n      \
    \  if (start_pos == std::string::npos) {\n            break;\n        }\n    \
    \    end_pos = string.find(substring, start_pos + substring.length());\n     \
    \   if (end_pos == std::string::npos) {\n            break;\n        }\n     \
    \   found = true;\n        count += end_pos - start_pos;\n        start = end_pos\
    \ + 1;\n    }\n    if (!found) {\n        return 0;\n    }\n    return count;",
  "    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        pos = pos + sublen;\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long len = substring.length();\n    while (start\
    \ < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ len) == substring) {\n            count++;\n            start = mid + 1;\n \
    \       } else {\n            end = mid;\n        }\n    }\n    return count;",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long substring_length = substring.length();\n    long i = 0;\n    while (start\
    \ < end) {\n        if (string[start] == substring[0]) {\n            if (start\
    \ == 0) {\n                start = end;\n                end = end;\n        \
    \        i++;\n            } else if (string[start] == substring[substring_length\
    \ - 1]) {\n                end = end;\n                i++;\n            } else\
    \ {\n                start = start + 1;\n                end = end - 1;\n    \
    \            i++;\n            }\n        } else if (string[start] == substring[substring_length\
    \ - 1]) {\n            end = end;\n            i++;\n        } else {\n      \
    \      start = start + 1;\n            end = end - 1;\n            i++;\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n\
    \    while ((pos = string.find(substring, pos)) != std::string::npos) {\n    \
    \    count++;\n        pos += substring.length();\n    }\n    return count;",
  "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 0;\n    long\
    \ end = string.length();\n    long substring_length = substring.length();\n  \
    \  while (start < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring_length) == substring) {\n            count++;\n            start =\
    \ mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    while (pos < len) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == std::string::npos) {\n  \
    \          break;\n        }\n        count++;\n        pos += sublen;\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 0;\n    long end =\
    \ string.length() - substring.length();\n    while (start < end) {\n        long\
    \ mid = (start + end) / 2;\n        if (string.substr(mid, substring.length()).compare(substring)\
    \ == 0) {\n            count++;\n            start = mid + 1;\n        } else\
    \ {\n            end = mid;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string.at(pos) ==\
    \ substring.at(sublen)) {\n            count++;\n            pos += sublen;\n\
    \        }\n        else if (string.at(pos) == substring.at(0)) {\n          \
    \  count++;\n            pos += sublen;\n        }\n        else {\n         \
    \   pos = 0;\n        }\n    }\n    return count;", "    long count = 0;\n   \
    \ size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string.compare(pos, sublen, substring) ==\
    \ 0) {\n            count++;\n        }\n        pos += sublen;\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    while (pos < len) {\n        pos = string.find(substring, pos);\n       \
    \ if (pos == std::string::npos) {\n            break;\n        }\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long i = 0;\n\
    \    while (start < end) {\n        i = string.find(substring, start);\n     \
    \   if (i != std::string::npos) {\n            count++;\n            start = i\
    \ + 1;\n        } else {\n            start = end;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;", "    long count = 0;\n    size_t pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != std::string::npos) {\n        count++;\n\
    \        pos += substring.length();\n    }\n    return count;", "    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long i = 0;\n\
    \    while (start < end) {\n        i = string.find(substring, start);\n     \
    \   if (i == std::string::npos) {\n            break;\n        }\n        start\
    \ = i + 1;\n        count++;\n    }\n    return count;", "    long count = 0;\n\
    \    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    while (pos < len) {\n        if (string.at(pos) == substring.at(sublen))\
    \ {\n            count++;\n            pos += sublen;\n        } else {\n    \
    \        pos = 0;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    long start = 0;\n    long end = string.length();\n    long start_sub = substring.find_first_not_of(substring);\n\
    \    long end_sub = substring.find_last_not_of(substring);\n    long substring_length\
    \ = end_sub - start_sub;\n    long sub_start = start_sub;\n    long sub_end =\
    \ end_sub;\n    long sub_length = substring_length;\n    long sub_start_pos =\
    \ 0;\n    long sub_end_pos = 0;\n    long sub_length_pos = 0;\n    long sub_start_pos_pos\
    \ = 0;\n    long sub_end_pos_pos = 0;\n    long sub_length_pos_pos = 0;\n    long\
    \ sub_start_pos_pos_pos = 0;\n    long sub_end_pos_pos_pos = 0;\n    long sub_length_pos_pos_pos\
    \ = 0;\n    long sub_start_pos_pos_pos_pos = 0;\n    long sub_end_pos_pos_pos_pos\
    \ = 0;\n    long sub_length_pos_pos_pos_pos = 0;\n    long sub_start_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_end_pos_pos_pos_pos_pos = 0;\n    long sub_length_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_start_pos_pos_pos_pos_pos_pos = 0;\n    long sub_end_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_length_pos_pos_pos_pos_pos_pos = 0;\n    long sub_start_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_end_pos_pos_pos_pos_pos_pos_pos = 0;\n    long sub_length_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_start_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    long\
    \ sub_end_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    long sub_length_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_start_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    long\
    \ sub_end_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    long sub_length_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_start_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n\
    \    long sub_end_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    long\
    \ sub_length_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    long sub_start_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_end_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos =\
    \ 0;\n    long sub_length_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n    long sub_start_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_",
  "    long count = 0;\n    long start = 0;\n    long end = string.length();\n   \
    \ long index = string.find(substring);\n    while (index != std::string::npos)\
    \ {\n        start = index;\n        index = string.find(substring, index + 1);\n\
    \        end = index;\n        count++;\n    }\n    return count;"]
stop_tokens:
- "\n}"
