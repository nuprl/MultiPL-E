name: HumanEval_153_Strongest_Extension
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name\
  \ of a class (a string) and a list of extensions.\n// The extensions are to be used\
  \ to load additional classes to the class. The\n// strength of the extension is\
  \ as follows: Let CAP be the number of the uppercase\n// letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n// in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n// You should find the strongest\
  \ extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
  // If there are two or more extensions with the same strength, you should\n// choose\
  \ the one that comes first in the list.\n// For example, if you are given \"Slices\"\
  \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
  \ strongest extension \n// (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
  \ class_name, std::vector<std::string> extensions) {\n"
tests: "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
  Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
  , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
  Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\"\
  , (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
  ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
  t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"\
  NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n   \
  \ assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"\
  TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n  \
  \  assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\"\
  , (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"\
  __HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
  HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
  Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
  finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
  NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n\
  \    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"\
  91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"\
  671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
completions: ["    // Write your code here\n    std::string strongest_extension =\
    \ \"\";\n    int cap_extension = 0;\n    int sml_extension = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (class_name.length() == extensions[i].length())\
    \ {\n            cap_extension = cap_extension + class_name[class_name.length()\
    \ - extensions[i].length()];\n            sml_extension = sml_extension + extensions[i][extensions[i].length()\
    \ - 1];\n        }\n    }\n    if (cap_extension - sml_extension > 0) {\n    \
    \    strongest_extension = class_name + extensions[cap_extension - sml_extension];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        for (auto\
    \ &ext : extensions) {\n            if (ext.length() < strength) {\n         \
    \       strongest_extension = class_name + \".\" + ext;\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;", '    // Your
    code here', "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length();\n    }\n    float\
    \ strength = cap - sm;\n    int index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    if (strength > 0) {\n        strongest_extension = class_name + extensions[index];\n\
    \    }\n    return strongest_extension;", '    // Your code here', "    // Write\
    \ your code here\n    \n    std::string strongest_extension;\n    \n    int cap\
    \ = class_name.size();\n    int sm = class_name.size();\n    \n    for(int i =\
    \ 0; i < extensions.size(); i++){\n        cap = cap - extensions[i].size();\n\
    \        sm = sm - extensions[i].size();\n    }\n    \n    if(cap > sm){\n   \
    \     strongest_extension = class_name + extensions[0];\n    }\n    else{\n  \
    \      strongest_extension = class_name + extensions[1];\n    }\n    \n    return\
    \ strongest_extension;", "    // Write your code here\n    \n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sml_counter = 0;\n    \n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        cap_counter = 0;\n        sml_counter\
    \ = 0;\n        \n        for(int j = 0; j < extensions[i].length(); j++){\n \
    \           if(extensions[i][j] == class_name[cap_counter]){\n               \
    \ cap_counter++;\n            }\n            else if(extensions[i][j] == class_name[sml_counter]){\n\
    \                sml_counter++;\n            }\n        }\n        \n        if(cap_counter\
    \ > sml_counter){\n            strongest_extension = class_name + extensions[i];\n\
    \        }\n    }\n    \n    return strongest_extension;", '    // Your code here',
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    \n    int cap = 0;\n    int sm = 0;\n    \n    for(auto it=extensions.begin();\
    \ it!=extensions.end(); ++it){\n        cap += std::toupper(*it).size();\n   \
    \     sm += std::tolower(*it).size();\n    }\n    \n    float strength = cap -\
    \ sm;\n    \n    for(auto it=extensions.begin(); it!=extensions.end(); ++it){\n\
    \        if(std::toupper(*it) == class_name){\n            strongest_extension\
    \ = class_name + std::toupper(*it);\n            break;\n        }\n    }\n  \
    \  \n    if(strongest_extension == \"\"){\n        for(auto it=extensions.begin();\
    \ it!=extensions.end(); ++it){\n            if(std::tolower(*it) == class_name){\n\
    \                strongest_extension = class_name + std::tolower(*it);\n     \
    \           break;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.size() == strongest_extension.size())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - cap_num;\n    }\n    float strength = cap_num - sm_num;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.length() == cap_num) {\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + ext;\n  \
    \              break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    std::string strongest_extension = \"\";\n    std::string extension_strength\
    \ = \"\";\n    std::string extension_class_name = \"\";\n    std::string extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension = \"\";\n  \
    \  std::string extension_class_name_with_extension_without_extension = \"\";\n\
    \    std::string extension_class_name_without_extension_without_extension = \"\
    \";\n    std::string extension_class_name_with_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_", "    // Write\
    \ your code here\n    \n    std::string extension_strength;\n    \n    for (auto\
    \ extension : extensions) {\n        auto extension_length = extension.length();\n\
    \        auto class_length = class_name.length();\n        auto extension_strength_length\
    \ = extension_strength.length();\n        \n        if (extension_length == class_length)\
    \ {\n            if (extension_strength_length == extension_length) {\n      \
    \          extension_strength = extension;\n            }\n        }\n    }\n\
    \    \n    return class_name + extension_strength;", "    // Your code here\n\
    \    std::string result;\n    double cap = class_name.size();\n    double sm =\
    \ class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap -\
    \ ext.size();\n        sm = sm - ext.size();\n    }\n    double strength = cap\
    \ - sm;\n    if (strength > 0) {\n        std::cout << \"The strongest extension\
    \ is \" << class_name << \".\" << extensions[0] << std::endl;\n    }\n    else\
    \ {\n        std::cout << \"The strongest extension is \" << class_name << \"\
    .\" << extensions[0] << std::endl;\n    }\n    return result;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap = 0;\n   \
    \ int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length() - ext.length();\n    }\n    float strength = cap -\
    \ sm;\n    int index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    strongest_extension = class_name + extensions[index];\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n      \
    \  cap += ext.length();\n        sm += ext.length();\n    }\n    float strength\
    \ = cap - sm;\n    for(auto &ext : extensions) {\n        if(ext.length() == strength)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n           \
    \ break;\n        }\n    }\n    return strongest_extension;", "    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n    }\n    double strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n      \
    \  if (ext.length() > strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string extension = \"\";\n    int cap = 0;\n  \
    \  int sm = 0;\n    for (auto e : extensions) {\n        if (e == class_name[0])\
    \ {\n            cap++;\n        }\n        if (e == class_name[class_name.size()\
    \ - 1]) {\n            sm++;\n        }\n    }\n    double strength = cap - sm;\n\
    \    if (strength > 0) {\n        extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (strength == 1) {\n        extension = class_name + \".\" + extensions[1];\n\
    \    }\n    if (strength > 1) {\n        extension = class_name + \".\" + extensions[2];\n\
    \    }\n    return extension;", "    // Write your code here\n    \n    std::string\
    \ extension_strength;\n    \n    for(int i = 0; i < extensions.size(); i++){\n\
    \        std::string extension = extensions[i];\n        \n        for(int j =\
    \ 0; j < extension.size(); j++){\n            if(extension[j] >= 'A' && extension[j]\
    \ <= 'Z'){\n                extension_strength += extension[j];\n            }\n\
    \        }\n    }\n    \n    std::string strongest_extension = class_name + extension_strength;\n\
    \    \n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    double strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strongest_extension.size()) {\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + ext;\n  \
    \          }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &i : extensions) {\n        if (i[0] == i[1]) {\n      \
    \      continue;\n        }\n        float s = i[0]-'A' + i[1]-'a';\n        if\
    \ (strength > s) {\n            strongest_extension = class_name + \".\" + i;\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.length() == strength) {\n            strongest_extension =\
    \ class_name + \".\" + ext;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;", "    std::string strongest_extension;\n    int cap_extension_strength\
    \ = 0;\n    int sma_extension_strength = 0;\n    for (auto &extension : extensions)\
    \ {\n        cap_extension_strength += (extension.at(0) - 'A');\n        sma_extension_strength\
    \ += (extension.at(1) - 'a');\n    }\n    if (cap_extension_strength > sma_extension_strength)\
    \ {\n        strongest_extension = class_name + extensions[0];\n    } else {\n\
    \        strongest_extension = class_name + extensions[1];\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n      \
    \  cap += ext.size();\n        sm += ext.size();\n    }\n    float strength =\
    \ cap - sm;\n    for(auto &ext : extensions) {\n        if(ext.size() == strength)\
    \ {\n            strongest_extension = class_name + ext;\n            break;\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[cap\
    \ - sm];\n    else\n        strongest_extension = class_name + extensions[0];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto &ext :\
    \ extensions){\n        cap += ext.size();\n        sm += ext.size();\n    }\n\
    \    float strength = cap - sm;\n    for(auto &ext : extensions){\n        if(ext.size()\
    \ == strongest_extension.size()){\n            strongest_extension = ext;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;", "    //\
    \ Write your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n \
    \       if (extensions[i].size() > 0) {\n            cap += extensions[i].size();\n\
    \        }\n        if (extensions[i].size() < 0) {\n            sm += extensions[i].size();\n\
    \        }\n    }\n    float strength = cap - sm;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].size() > 0) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \            }\n        }\n        if (extensions[i].size() < 0) {\n         \
    \   if (extensions[i].compare(class_name) == 0) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            }\n        }\n    }\n   \
    \ if (strength > 0) {\n        for (int i = 0; i < extensions.size(); i++) {\n\
    \            if (extensions[i].size() > 0) {\n                if (extensions[i].compare(class_name)\
    \ == 0) {\n                    strongest_extension = class_name + \".\" + extensions[i];\n\
    \                }\n            }\n            if (extensions[i].size() < 0) {\n\
    \                if (extensions[i].compare(class_name) == 0) {\n             \
    \       strongest_extension = class_name + \".\" + extensions[i];\n          \
    \      }\n            }\n        }\n    }\n    return strongest_extension;", " \
    \   // Write your code here\n    std::string strongest_extension = \"\";\n   \
    \ int cap = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        cap\
    \ += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &i : extensions) {\n        if (i[0] == i[1]) {\n      \
    \      continue;\n        }\n        float strength_i = cap - i[0] - i[1];\n \
    \       if (strength_i > strength) {\n            strongest_extension = class_name\
    \ + \".\" + i;\n            strength = strength_i;\n        }\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.size();\n        sm += ext.size();\n    }\n    float strength =\
    \ cap - sm;\n    for (auto &ext : extensions) {\n        if (ext.size() == strength)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n           \
    \ break;\n        }\n    }\n    return strongest_extension;", "    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sml_counter =\
    \ 0;\n    for (auto &ext : extensions) {\n        if (ext.size() > cap_counter)\
    \ {\n            cap_counter = ext.size();\n        }\n        if (ext.size()\
    \ > sml_counter) {\n            sml_counter = ext.size();\n        }\n    }\n\
    \    double strength = cap_counter - sml_counter;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == cap_counter) {\n            if (ext.compare(0,\
    \ cap_counter, class_name.substr(0, cap_counter)) == 0) {\n                strongest_extension\
    \ = class_name + ext;\n            }\n        }\n        if (ext.size() == sml_counter)\
    \ {\n            if (ext.compare(0, sml_counter, class_name.substr(0, sml_counter))\
    \ == 0) {\n                strongest_extension = class_name + ext;\n         \
    \   }\n        }\n    }\n    return strongest_extension;", "    // Write your\
    \ code here\n    \n    std::string strongest_extension;\n    \n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        cap = extensions[i].size();\n        sm = extensions[i].size();\n\
    \    }\n    \n    int strength = cap - sm;\n    \n    if(strength == 0){\n   \
    \     strongest_extension = class_name;\n    }\n    else if(strength == 1){\n\
    \        strongest_extension = class_name + extensions[0];\n    }\n    else if(strength\
    \ == 2){\n        strongest_extension = class_name + extensions[0] + extensions[1];\n\
    \    }\n    else if(strength == 3){\n        strongest_extension = class_name\
    \ + extensions[0] + extensions[1] + extensions[2];\n    }\n    else if(strength\
    \ == 4){\n        strongest_extension = class_name + extensions[0] + extensions[1]\
    \ + extensions[2] + extensions[3];\n    }\n    else if(strength == 5){\n     \
    \   strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4];\n    }\n    else if(strength == 6){\n     \
    \   strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4] + extensions[5];\n    }\n    else if(strength\
    \ == 7){\n        strongest_extension = class_name + extensions[0] + extensions[1]\
    \ + extensions[2] + extensions[3] + extensions[4] + extensions[5] + extensions[6];\n\
    \    }\n    else if(strength == 8){\n        strongest_extension = class_name\
    \ + extensions[0] + extensions[1] + extensions[2] + extensions[3] + extensions[4]\
    \ + extensions[5] + extensions[6] + extensions[7];\n    }\n    else if(strength\
    \ == 9){\n        strongest_extension = class_name + extensions[0] + extensions[1]\
    \ + extensions[2] + extensions[3] + extensions[4] + extensions[5] + extensions[6]\
    \ + extensions[7] + extensions[8];\n    }\n    else if(strength == 10){\n    \
    \    strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4] + extensions[5] + extensions[6] + extensions[7]\
    \ + extensions[8] + extensions[9];\n    }\n    else if(strength == 11){\n    \
    \    strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4] + extensions[5] + extensions[6] + extensions[7]\
    \ + extensions[8] + extensions[9] + extensions[10];\n    }\n    else if(strength\
    \ == 12){\n        strongest_extension = class_name + extensions[0] + extension",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n        if(ext.size()\
    \ == cap){\n            cap++;\n        }\n        else if(ext.size() == sm){\n\
    \            sm++;\n        }\n        else{\n            cap++;\n           \
    \ sm++;\n        }\n    }\n    float strength = cap - sm;\n    if(strength > 0){\n\
    \        strongest_extension = class_name + extensions[0];\n    }\n    else if(strength\
    \ < 0){\n        strongest_extension = class_name + extensions[extensions.size()-1];\n\
    \    }\n    else{\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &extension : extensions){\n        cap += extension.size()-1;\n   \
    \     sm += extension.size()-1;\n    }\n    float strength = cap - sm;\n    \n\
    \    for(auto &extension : extensions){\n        if(extension == class_name){\n\
    \            strongest_extension = class_name;\n            break;\n        }\n\
    \        if(strength > 0){\n            if(extension.find(class_name) != std::string::npos){\n\
    \                strongest_extension = class_name + extension;\n             \
    \   break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    cap = cap / extensions.size();\n\
    \    sm = sm / extensions.size();\n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + extensions[0];\n    else\n        strongest_extension = class_name\
    \ + extensions[extensions.size() - 1];\n    return strongest_extension;", "  \
    \  // Write your code here\n    \n    std::string strongest_extension;\n    \n\
    \    for(auto extension : extensions){\n        std::transform(extension.begin(),\
    \ extension.end(), extension.begin(), ::toupper);\n        std::transform(extension.begin(),\
    \ extension.end(), extension.begin(), ::tolower);\n        \n        auto cap\
    \ = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        auto sm\
    \ = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n        \n     \
    \   auto strength = cap - sm;\n        \n        if(strength > 0){\n         \
    \   strongest_extension = class_name + extension;\n            break;\n      \
    \  }\n    }\n    \n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap\
    \ - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap > sm) {\n \
    \       strongest_extension = class_name + extensions[0];\n    } else {\n    \
    \    strongest_extension = class_name + extensions[1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension;\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == strength) {\n            strongest_extension\
    \ = class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = class_name;\n\
    \    int cap = class_name.size();\n    int sm = class_name.size();\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        cap = cap - extensions[i].size();\n\
    \        sm = sm - extensions[i].size();\n    }\n    if (cap > sm) {\n       \
    \ strongest_extension = class_name + extensions[0];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.length() == strongest_extension.length()) {\n            if(strength\
    \ > ext.length())\n                strongest_extension = ext;\n        }\n   \
    \ }\n    return class_name + \".\" + strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n \
    \   int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.length() < strongest_extension.length()) {\n        \
    \        strongest_extension = class_name + \".\" + ext;\n            }\n    \
    \    }\n    }\n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else if (sm - cap > 0)\n        strongest_extension = class_name + extensions[1];\n\
    \    else\n        strongest_extension = class_name + extensions[2];\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.length();\n        sm += ext.length();\n    }\n    double strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n      \
    \  if (ext.length() == strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    int strongest_strength = -1;\n    for (auto &ext : extensions) {\n      \
    \  float ext_strength = ext.size();\n        if (ext_strength > strongest_strength)\
    \ {\n            strongest_strength = ext_strength;\n            strongest_extension\
    \ = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n\
    \        if (extensions[i].size() > 0) {\n            cap += extensions[i].at(0);\n\
    \            sm += extensions[i].at(0);\n        }\n    }\n    float strength\
    \ = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ > 0) {\n            if (extensions[i].at(0) >= strength) {\n               \
    \ strongest_extension = class_name + \".\" + extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_counter =\
    \ 0;\n    int sml_counter = 0;\n    for(auto &extension : extensions) {\n    \
    \    if(std::toupper(extension[0]) == extension[0]) {\n            cap_counter++;\n\
    \        }\n        if(std::tolower(extension[0]) == extension[0]) {\n       \
    \     sml_counter++;\n        }\n    }\n    float strength = cap_counter - sml_counter;\n\
    \    if(strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    else {\n        strongest_extension\
    \ = class_name;\n    }\n    return strongest_extension;", "    // Write your code\
    \ here\n    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n\
    \    int sm_counter = 0;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > cap_counter) {\n            cap_counter = ext.length();\n        }\n     \
    \   if (ext.length() > sm_counter) {\n            sm_counter = ext.length();\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == cap_counter) {\n         \
    \   if (ext.compare(class_name.substr(0, cap_counter)) == 0) {\n             \
    \   strongest_extension = class_name + ext;\n            }\n        }\n      \
    \  if (ext.length() == sm_counter) {\n            if (ext.compare(class_name.substr(0,\
    \ sm_counter)) == 0) {\n                strongest_extension = class_name + ext;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap = 0;\n   \
    \ int sm = 0;\n    for (auto &i : extensions) {\n        cap += i[0]-'A';\n  \
    \      sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto &i : extensions) {\n            if (i[0]\
    \ == i[1]) {\n                strongest_extension = class_name + \".\" + i;\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = class_name.size();\n    int sm = class_name.size();\n    for (auto &extension\
    \ : extensions) {\n        cap = cap - extension.size();\n        sm = sm - extension.size();\n\
    \    }\n    if (cap > sm) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for (int i = 0; i < extensions.size(); i++) {\n        cap = cap +\
    \ toupper(extensions[i][0]) - toupper(extensions[i][0]);\n        sm = sm + tolower(extensions[i][0])\
    \ - tolower(extensions[i][0]);\n    }\n    \n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + extensions[0];\n    else if (cap - sm == 0)\n        strongest_extension\
    \ = class_name + extensions[0];\n    else\n        strongest_extension = class_name\
    \ + extensions[1];\n    \n    return strongest_extension;", "    // Your code\
    \ here\n    ", "    // Your code here\n    \n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    \n    for (auto &ext : extensions) {\n        if (ext.size()\
    \ == strength) {\n            strongest_extension = class_name + \".\" + ext;\n\
    \            break;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    int index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end()));\n    if (strength == -1) {\n        return class_name;\n\
    \    }\n    if (strength == 0) {\n        return class_name + \".\" + extensions[index];\n\
    \    }\n    if (strength > 0) {\n        return class_name + \".\" + extensions[index];\n\
    \    }\n    return class_name;", "    // Write your code here\n    std::string\
    \ extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i <\
    \ extensions.size(); i++){\n        if(extensions[i][0] >= 'A' && extensions[i][0]\
    \ <= 'Z'){\n            cap++;\n        }\n        else if(extensions[i][0] >=\
    \ 'a' && extensions[i][0] <= 'z'){\n            sm++;\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for(int i = 0; i < extensions.size(); i++){\n    \
    \    if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n            cap--;\n\
    \        }\n        else if(extensions[i][0] >= 'a' && extensions[i][0] <= 'z'){\n\
    \            sm--;\n        }\n    }\n    if(cap == sm){\n        for(int i =\
    \ 0; i < extensions.size(); i++){\n            if(extensions[i][0] >= 'A' && extensions[i][0]\
    \ <= 'Z'){\n                cap++;\n            }\n            else if(extensions[i][0]\
    \ >= 'a' && extensions[i][0] <= 'z'){\n                sm++;\n            }\n\
    \        }\n        strength = cap - sm;\n    }\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n   \
    \         cap++;\n        }\n        else if(extensions[i][0] >= 'a' && extensions[i][0]\
    \ <= 'z'){\n            sm++;\n        }\n    }\n    if(cap == sm){\n        for(int\
    \ i = 0; i < extensions.size(); i++){\n            if(extensions[i][0] >= 'A'\
    \ && extensions[i][0] <= 'Z'){\n                cap++;\n            }\n      \
    \      else if(extensions[i][0] >= 'a' && extensions[i][0] <= 'z'){\n        \
    \        sm++;\n            }\n        }\n        strength = cap - sm;\n    }\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i][0]\
    \ >= 'A' && extensions[i][0] <= 'Z'){\n            cap++;\n        }\n       \
    \ else if(extensions[i][0] >= 'a' && extensions[i][0] <= 'z'){\n            sm++;\n\
    \        }\n    }\n    if(cap == sm){\n        for(int i = 0; i < extensions.size();\
    \ i++){\n            if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n\
    \                cap++;\n            }\n            else if(extensions[i][0] >=\
    \ 'a' && extensions[i][0] <= 'z'){\n                sm++;\n            }\n   \
    \     }\n        strength = cap - sm;\n    }\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n   \
    \         cap++;\n        }\n        else if(extensions[i][0] >= '", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap = cap + 1;\n        }\n        if(extensions[i].at(1)\
    \ == class_name[1]){\n            sm = sm + 1;\n        }\n    }\n    float strength\
    \ = cap - sm;\n    if(strength > 0){\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0){\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_extension\
    \ = class_name.size();\n    int sm_extension = class_name.size();\n    for(auto\
    \ extension : extensions) {\n        cap_extension = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::toupper(c) == c;\n  \
    \      });\n        sm_extension = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::tolower(c) == c;\n        });\n    }\n\
    \    double strength = cap_extension - sm_extension;\n    if(strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else if(strength == 0 && extensions.size() > 1) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    else if(strength == 0 && extensions.size()\
    \ == 1) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto it=extensions.begin();\
    \ it!=extensions.end(); ++it) {\n        cap += std::toupper(*it).size();\n  \
    \      sm += std::tolower(*it).size();\n    }\n    float strength = cap - sm;\n\
    \    for(auto it=extensions.begin(); it!=extensions.end(); ++it) {\n        if(std::toupper(*it)\
    \ == class_name) {\n            strongest_extension = class_name + \".\" + std::toupper(*it);\n\
    \            break;\n        }\n    }\n    if(extensions.size() > 1) {\n     \
    \   for(auto it=extensions.begin(); it!=extensions.end(); ++it) {\n          \
    \  if(std::toupper(*it) == class_name) {\n                strongest_extension\
    \ = class_name + \".\" + std::toupper(*it);\n                break;\n        \
    \    }\n        }\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    ", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].at(0) == class_name[0]) {\n            cap\
    \ = cap + 1;\n        }\n        if (extensions[i].at(1) == class_name[1]) {\n\
    \            sm = sm + 1;\n        }\n    }\n    if (cap - sm == 0) {\n      \
    \  for (int i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0)\
    \ == class_name[0]) {\n                strongest_extension = extensions[i];\n\
    \            }\n        }\n    }\n    else if (cap - sm == 1) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 2) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 3) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 4) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 5) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 6) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 7) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 8) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 9) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 10) {\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions[i].at(0) ==\
    \ class_name[0]) {\n                strongest_extension = extensions[i];\n   \
    \         }\n        }\n    }\n    else if (cap - sm == 11) {\n        for (int\
    \ i = 0; i < ", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.size();\n        sm += ext.size();\n    }\n    double strength\
    \ = cap - sm;\n    int index = std::distance(extensions.begin(), std::min_element(extensions.begin(),\
    \ extensions.end(), \n        [](const std::string &a, const std::string &b) {\
    \ return a.size() < b.size(); }));\n    strongest_extension = class_name + extensions[index];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions) {\n  \
    \      if(ext.size() == strength) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        cap +=\
    \ i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto &i : extensions) {\n            if (i[0]-'A'\
    \ > cap) {\n                strongest_extension = class_name + \".\" + i;\n  \
    \              break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            if (extensions[i].size() > strongest_extension.size()) {\n\
    \                strongest_extension = class_name + \".\" + extensions[i];\n \
    \           }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for(int i = 0; i < extensions.size(); i++){\n        cap\
    \ += (extensions[i].size()-1);\n        sm += (extensions[i].size()-1);\n    }\n\
    \    double strength = cap - sm;\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(strength > 0){\n            if(extensions[i].size() > strongest_extension.size()){\n\
    \                strongest_extension = extensions[i];\n            }\n       \
    \ }\n    }\n    return strongest_extension;", "    // Write your code here\n \
    \   std::string strongest_extension = \"\";\n    std::string extension_strength\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n\
    \        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    extension_strength\
    \ = cap - sm;\n    if (extension_strength > 0) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    for (auto &i : extensions) {\n   \
    \     if (extension_strength == i[0]-'A' && extension_strength == i[1]-'a') {\n\
    \            strongest_extension = class_name + i;\n        }\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    cap = cap\
    \ / 2;\n    sm = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension =\
    \ class_name + \".\" + extensions[0];\n    else if (sm - cap > 0)\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    else\n        strongest_extension\
    \ = class_name + \".\" + extensions[2];\n    return strongest_extension;", " \
    \   // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    for(auto\
    \ &ext : extensions) {\n        if(ext.size() == strength) {\n            strongest_extension\
    \ = class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n \
    \       cap += (extensions[i].size() - 1);\n        sm += (extensions[i].size());\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            if (extensions[i].size() >\
    \ strongest_extension.size()) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[i];\n            }\n        }\n        else {\n       \
    \     if (extensions[i].size() < strongest_extension.size()) {\n             \
    \   strongest_extension = class_name + \".\" + extensions[i];\n            }\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    double strength = cap - sm;\n    for(auto &i : extensions) {\n   \
    \     if(i[0] == class_name[0] && i[1] == class_name[1]) {\n            if(i[0]-'A'\
    \ > i[1]-'a') {\n                strongest_extension = class_name + i;\n     \
    \       }\n        }\n    }\n    if(strength == -1) {\n        for(auto &i : extensions)\
    \ {\n            if(i[0] == class_name[0] && i[1] == class_name[1]) {\n      \
    \          if(i[0]-'A' < i[1]-'a') {\n                    strongest_extension\
    \ = class_name + i;\n                }\n            }\n        }\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &ext\
    \ : extensions) {\n        if(ext.size() > cap_counter) {\n            cap_counter\
    \ = ext.size();\n        }\n        if(ext.size() > sm_counter) {\n          \
    \  sm_counter = ext.size();\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    for(auto &ext : extensions) {\n        if(ext.size() == cap_counter)\
    \ {\n            if(ext.compare(class_name.substr(0, ext.size())) == 0) {\n  \
    \              strongest_extension = class_name + ext;\n            }\n      \
    \  }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ >= cap) {\n            cap = extensions[i].size();\n        }\n        if (extensions[i].size()\
    \ >= sm) {\n            sm = extensions[i].size();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      if (extensions[i].size() == cap) {\n            if (strength > 0) {\n \
    \               strongest_extension = class_name + \".\" + extensions[i];\n  \
    \              break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(auto &ext : extensions){\n        if(ext.size()\
    \ >= cap_counter){\n            cap_counter = ext.size();\n        }\n       \
    \ if(ext.size() >= sm_counter){\n            sm_counter = ext.size();\n      \
    \  }\n    }\n    float strength = cap_counter - sm_counter;\n    for(auto &ext\
    \ : extensions){\n        if(ext.size() == cap_counter){\n            strongest_extension\
    \ = class_name + ext;\n        }\n        if(ext.size() == sm_counter){\n    \
    \        strongest_extension = strongest_extension + class_name + ext;\n     \
    \   }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.length();\n        sm +=\
    \ ext.length()-1;\n    }\n    \n    double strength = cap - sm;\n    \n    for(auto\
    \ &ext : extensions){\n        if(ext.length() == strongest_extension.length()){\n\
    \            if(cap - ext.length() < sm){\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;", "    // Write your code here\n    \n    std::string\
    \ strongest_extension;\n    int cap_extension = class_name.size();\n    int sma_extension\
    \ = class_name.size();\n    for(auto &extension : extensions){\n        if(extension.size()>cap_extension){\n\
    \            cap_extension = extension.size();\n        }\n        if(extension.size()>sma_extension){\n\
    \            sma_extension = extension.size();\n        }\n    }\n    double strength\
    \ = cap_extension - sma_extension;\n    if(strength>0){\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(strength==0){\n  \
    \      strongest_extension = class_name;\n    }\n    else if(strength<0){\n  \
    \      for(int i = 1; i<extensions.size(); i++){\n            if(extensions[i].size()>sma_extension){\n\
    \                sma_extension = extensions[i].size();\n            }\n      \
    \  }\n        double strength = cap_extension - sma_extension;\n        if(strength>0){\n\
    \            strongest_extension = class_name + \".\" + extensions[0];\n     \
    \   }\n        else if(strength==0){\n            strongest_extension = class_name;\n\
    \        }\n        else if(strength<0){\n            strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = class_name.size();\n    int sm = class_name.size();\n    for(int i=0;i<extensions.size();i++){\n\
    \        cap = cap - extensions[i].size();\n        sm = sm - extensions[i].size();\n\
    \        if(cap==sm){\n            strongest_extension = class_name + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &extension : extensions){\n        cap += extension.size()-1;\n\
    \        sm += extension.size()-1;\n    }\n    double strength = cap - sm;\n \
    \   for(auto &extension : extensions){\n        if(extension.size()==cap){\n \
    \           strongest_extension = class_name + extension;\n            break;\n\
    \        }\n    }\n    if(strongest_extension.empty()){\n        for(auto &extension\
    \ : extensions){\n            if(extension.size()==sm){\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    std::string extension_str;\n    int extension_strength;\n\
    \    int cap_strength;\n    int sm_strength;\n    int total_strength;\n    int\
    \ total_cap_strength;\n    int total_sm_strength;\n    int total_extension_strength;\n\
    \    int total_extension_cap_strength;\n    int total_extension_sm_strength;\n\
    \    int total_extension_total_strength;\n    int total_extension_total_cap_strength;\n\
    \    int total_extension_total_sm_strength;\n    int total_extension_total_total_strength;\n\
    \    int total_extension_total_total_cap_strength;\n    int total_extension_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_strength;\n    int total_extension_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_sm_strength;\n    int total_extension_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_cap_strength;\n    int total_extension_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_strength;\n    int total_extension_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_sm_strength;\n    int total_extension_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_cap_strength;\n \
    \   int total_extension_total_total_total_total_total_total_sm_strength;\n   \
    \ int total_extension_total_total_total_total_total_total_total_strength;\n  \
    \  int total_extension_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_", "    // Write your code here\n    std::string strongest_extension;\n\
    \    double strongest_extension_strength;\n    for(auto extension : extensions)\
    \ {\n        double extension_strength = std::count_if(extension.begin(), extension.end(),\
    \ \n            [](char c){ return std::toupper(c) - std::tolower(c); }) / extension.size();\n\
    \        if(extension_strength > strongest_extension_strength) {\n           \
    \ strongest_extension = extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i].at(0) == class_name[0]){\n            cap_counter++;\n\
    \        }\n        if(extensions[i].at(1) == class_name[1]){\n            sm_counter++;\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    if(strength\
    \ > 0){\n        strongest_extension = class_name + \".\" + extensions[0];\n \
    \   }\n    else if(strength < 0){\n        strongest_extension = class_name +\
    \ \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension;\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension: extensions)\
    \ {\n        if(extension == class_name) {\n            strongest_extension =\
    \ class_name;\n        }\n        else if(extension.at(0) == class_name.at(0))\
    \ {\n            cap_counter++;\n        }\n        else {\n            sm_counter++;\n\
    \        }\n    }\n    \n    double strength = cap_counter - sm_counter;\n   \
    \ \n    if(strength > 0) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    else if(strength < 0) {\n        strongest_extension = class_name\
    \ + extensions[extensions.size()-1];\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n        cap +=\
    \ ext.length();\n        sm += ext.length()-1;\n    }\n    \n    float strength\
    \ = cap - sm;\n    \n    for(auto &ext : extensions){\n        if(ext.length()\
    \ == strongest_extension.length()){\n            if(strength > ext.length()-1){\n\
    \                strongest_extension = ext;\n            }\n        }\n    }\n\
    \    \n    return class_name + \".\" + strongest_extension;", "    std::string\
    \ extension_strength;\n    std::string extension_class;\n    std::string extension_class_name;\n\
    \    std::string extension_class_name_with_extension;\n    std::string extension_class_name_with_extension_strength;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension",
  '    // Your code here', "    // Write your code here\n    \n    std::string strongest_extension;\n\
    \    \n    for(auto &extension : extensions){\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        auto strength = cap\
    \ - sm;\n        if(strength > 0){\n            strongest_extension = class_name\
    \ + extension;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    std::string result;\n    std::string extension;\n    int cap = 0;\n    int\
    \ sm = 0;\n    for (auto &e : extensions) {\n        cap += e.size();\n      \
    \  sm += e.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    int strength = cap - sm;\n    for (auto &e : extensions) {\n        if (e.size()\
    \ == extension.size()) {\n            if (e.compare(extension) == 0) {\n     \
    \           result = class_name + e;\n                break;\n            }\n\
    \        }\n    }\n    if (result.empty()) {\n        std::cout << \"No extensions\
    \ found\" << std::endl;\n    }\n    return result;", "    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap_counter += std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::toupper(c) == c;\n        });\n      \
    \  sm_counter += std::count_if(extension.begin(), extension.end(), [](char c)\
    \ {\n            return std::tolower(c) == c;\n        });\n    }\n    double\
    \ strength = cap_counter - sm_counter;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (size_t i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            double temp_strength = cap_counter\
    \ - sm_counter;\n            if (temp_strength > strength) {\n               \
    \ strongest_extension = class_name + \".\" + extensions[i];\n                strength\
    \ = temp_strength;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string extension_strength;\n    \n\
    \    for (auto &extension : extensions) {\n        extension_strength += extension.at(class_name.size()\
    \ - extension.size()) / 2;\n    }\n    \n    return class_name + extension_strength;",
  "    // Your code here\n    std::string strongest_extension;\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + extensions[0];\n    }\n \
    \   else {\n        for (auto &ext : extensions) {\n            if (ext.size()\
    \ == strength) {\n                strongest_extension = class_name + ext;\n  \
    \              break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    double strongest_extension_strength\
    \ = -1;\n    for (auto &extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('S');\n        auto strength = cap\
    \ - sm;\n        if (strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = strength;\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap = 0;\n   \
    \ int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    } else {\n        for (auto &ext : extensions) {\n            if (ext.size()\
    \ > strongest_extension.size()) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        if (ext.size()\
    \ > cap) {\n            cap = ext.size();\n        }\n        if (ext.size() <\
    \ sm) {\n            sm = ext.size();\n        }\n    }\n    float strength =\
    \ cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n      \
    \  if (ext.size() == strongest_extension.size()) {\n            if (ext.compare(strongest_extension)\
    \ == 0) {\n                strongest_extension = class_name + \".\" + ext;\n \
    \           }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    \n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(extensions[i].size() > cap_counter){\n            cap_counter = extensions[i].size();\n\
    \        }\n        if(extensions[i].size() > sm_counter){\n            sm_counter\
    \ = extensions[i].size();\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ == cap_counter){\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n        if(extensions[i].size() == sm_counter){\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string result;\n    for(auto &ext : extensions){\n\
    \        auto cap = ext.find_first_of('A');\n        auto sm = ext.find_first_of('S');\n\
    \        auto strength = cap - sm;\n        if(strength > 0){\n            result\
    \ += class_name + \".\" + ext + \".\";\n        }\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += extensions[extensions.size()-1]\
    \ + \".\" + ext + \".\";\n        }\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += extensions[0] + \".\" + ext\
    \ + \".\";\n        }\n    }\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += class_name + \".\" + ext;\n\
    \        }\n    }\n    std::sort(extensions.begin(), extensions.end());\n    for(auto\
    \ &ext : extensions){\n        auto cap = ext.find_first_of('A');\n        auto\
    \ sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n        if(strength\
    \ > 0){\n            result += class_name + \".\" + ext;\n        }\n    }\n \
    \   std::sort(extensions.begin(), extensions.end());\n    for(auto &ext : extensions){\n\
    \        auto cap = ext.find_first_of('A');\n        auto sm = ext.find_first_of('S');\n\
    \        auto strength = cap - sm;\n        if(strength > 0){\n            result\
    \ += class_name + \".\" + ext;\n        }\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += class_name + \".\" + ext;\n\
    \        }\n    }\n    std::sort(extensions.begin(), extensions.end());\n    for(auto\
    \ &ext : extensions){\n        auto ", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n   \
    \ }\n    float strength = cap - sm;\n    for (auto &ext : extensions) {\n    \
    \    if (ext.size() == strength) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n        }\n    }\n    return strongest_extension;", "    //\
    \ Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(extensions[i].at(0) == class_name[0]){\n            cap_counter++;\n\
    \        }\n        else if(extensions[i].at(0) != class_name[0]){\n         \
    \   sm_counter++;\n        }\n    }\n    float strength = cap_counter - sm_counter;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap_counter--;\n        }\n        else if(extensions[i].at(0)\
    \ != class_name[0]){\n            sm_counter--;\n        }\n    }\n    if(cap_counter\
    \ == 0){\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(sm_counter == 0){\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size() - 1];\n    }\n    else if(strength >\
    \ 0){\n        strongest_extension = class_name + \".\" + extensions[0];\n   \
    \ }\n    else if(strength < 0){\n        strongest_extension = class_name + \"\
    .\" + extensions[extensions.size() - 1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n\
    \        cap += (extensions[i].size() - 1);\n        sm += extensions[i].size();\n\
    \    }\n    float strength = cap - sm;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].size() == strongest_extension.size()) {\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[i];\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto &i : extensions)\
    \ {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength\
    \ = cap - sm;\n    for(auto &i : extensions) {\n        if(strength == i[0]-'A'\
    \ && strength == i[1]-'a') {\n            strongest_extension = class_name + \"\
    .\" + i;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    for(auto &ext : extensions) {\n        if(ext.length() == strength)\
    \ {\n            strongest_extension = class_name + ext;\n        }\n    }\n \
    \   return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions){\n        if(ext.length() > cap){\n            cap = ext.length();\n\
    \        }\n        if(ext.length() < sm){\n            sm = ext.length();\n \
    \       }\n    }\n    double strength = cap - sm;\n    for(auto &ext : extensions){\n\
    \        if(ext.length() == cap){\n            if(ext.compare(0, cap, class_name.cbegin(),\
    \ class_name.cend(), 0, cap) == 0){\n                strongest_extension = class_name\
    \ + ext;\n            }\n        }\n        if(ext.length() == sm){\n        \
    \    if(ext.compare(0, sm, class_name.cbegin(), class_name.cend(), 0, sm) == 0){\n\
    \                strongest_extension = class_name + ext;\n            }\n    \
    \    }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strongest_extension.size()) {\n            if (strength\
    \ > ext.size()) {\n                strongest_extension = ext;\n            }\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n       \
    \ cap += ext.length();\n        sm += ext.length()-1;\n    }\n    float strength\
    \ = cap - sm;\n    \n    for(auto &ext : extensions){\n        if(ext.length()\
    \ == strongest_extension.length()){\n            if(strength > ext.length()){\n\
    \                strongest_extension = ext;\n            }\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    // Write your code\
    \ here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for (auto e : extensions) {\n        cap += e.size();\n       \
    \ sm += e.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else if (sm - cap > 0)\n        strongest_extension = class_name + extensions[1];\n\
    \    else\n        strongest_extension = class_name + extensions[2];\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = class_name.size();\n    int sm = class_name.size();\n    for (auto\
    \ ext : extensions) {\n        cap = cap - ext.size();\n        sm = sm - ext.size();\n\
    \    }\n    if (cap > sm) {\n        strongest_extension = class_name + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + extensions[extensions.size()-1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto e : extensions){\n\
    \        cap += e.size();\n        sm += std::count(e.begin(), e.end(), 'a');\n\
    \    }\n    float strength = cap - sm;\n    for(auto e : extensions){\n      \
    \  if(e.size() == strongest_extension.size()){\n            strongest_extension\
    \ = e;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(auto &extension : extensions){\n    \
    \    if(extension.at(0) == class_name.at(0)) cap_counter++;\n        if(extension.at(1)\
    \ == class_name.at(0)) sm_counter++;\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0){\n        strongest_extension = class_name\
    \ + extensions[0];\n    }\n    else if(strength == 0){\n        strongest_extension\
    \ = class_name;\n    }\n    else if(strength < 0){\n        for(auto &extension\
    \ : extensions){\n            if(extension.at(0) == class_name.at(0)) cap_counter++;\n\
    \            if(extension.at(1) == class_name.at(0)) sm_counter++;\n        }\n\
    \        float strength_2 = cap_counter - sm_counter;\n        if(strength_2 >\
    \ 0){\n            strongest_extension = class_name + extensions[0];\n       \
    \ }\n        else if(strength_2 == 0){\n            strongest_extension = class_name;\n\
    \        }\n        else if(strength_2 < 0){\n            strongest_extension\
    \ = class_name + extensions[1];\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension;\n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        cap = cap - extensions[i].size();\n        sm = sm - extensions[i].size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > extensions[i].size()) {\n            strongest_extension\
    \ = class_name + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string extension_strength;\n    std::string\
    \ extension_str;\n    \n    for(int i = 0; i < extensions.size(); i++){\n    \
    \    for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j]\
    \ == class_name[j]){\n                extension_strength += extensions[i][j];\n\
    \            }\n        }\n    }\n    \n    extension_strength = extension_strength.substr(0,\
    \ extension_strength.size() - 1);\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j]\
    \ == extension_strength[j]){\n                extension_str += extensions[i][j];\n\
    \            }\n        }\n    }\n    \n    return class_name + \".\" + extension_str;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &extension : extensions) {\n      \
    \  cap += (extension.size()-1);\n        sm += (extension.size()-1);\n    }\n\
    \    float strength = cap - sm;\n    for (auto &extension : extensions) {\n  \
    \      if (extension.find(class_name) != std::string::npos) {\n            float\
    \ extension_strength = extension.find(class_name)-extension.find(class_name.substr(0,1));\n\
    \            if (strength > extension_strength) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = class_name;\n\
    \    \n    for(auto &extension : extensions) {\n        auto cap = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::isupper(c);\n       \
    \ });\n        auto sm = std::count_if(extension.begin(), extension.end(), [](char\
    \ c) {\n            return std::islower(c);\n        });\n        auto strength\
    \ = cap - sm;\n        if(strength > 0) {\n            strongest_extension +=\
    \ \".\" + extension;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    cap = cap / 2;\n    sm\
    \ = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension = class_name +\
    \ extensions[0];\n    else if (cap - sm == 0)\n        strongest_extension = class_name\
    \ + extensions[0];\n    else\n        strongest_extension = class_name + extensions[1];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    for(auto it=extensions.begin(); it!=extensions.end();\
    \ ++it){\n        auto it1=std::find(class_name.begin(), class_name.end(), *it);\n\
    \        if(it1!=class_name.end()){\n            auto it2=std::find(it1, class_name.end(),\
    \ *it);\n            if(it2!=class_name.end()){\n                auto it3=std::find(it2,\
    \ class_name.end(), *it);\n                if(it3!=class_name.end()){\n      \
    \              auto it4=std::find(it3, class_name.end(), *it);\n             \
    \       if(it4!=class_name.end()){\n                        auto it5=std::find(it4,\
    \ class_name.end(), *it);\n                        if(it5!=class_name.end()){\n\
    \                            auto it6=std::find(it5, class_name.end(), *it);\n\
    \                            if(it6!=class_name.end()){\n                    \
    \            auto it7=std::find(it6, class_name.end(), *it);\n               \
    \                 if(it7!=class_name.end()){\n                               \
    \     auto it8=std::find(it7, class_name.end(), *it);\n                      \
    \              if(it8!=class_name.end()){\n                                  \
    \      auto it9=std::find(it8, class_name.end(), *it);\n                     \
    \                   if(it9!=class_name.end()){\n                             \
    \               auto it10=std::find(it9, class_name.end(), *it);\n           \
    \                                 if(it10!=class_name.end()){\n              \
    \                                  auto it11=std::find(it10, class_name.end(),\
    \ *it);\n                                                if(it11!=class_name.end()){\n\
    \                                                    auto it12=std::find(it11,\
    \ class_name.end(), *it);\n                                                  \
    \  if(it12!=class_name.end()){\n                                             \
    \           auto it13=std::find(it12, class_name.end(), *it);\n              \
    \                                          if(it13!=class_name.end()){\n     \
    \                                                       auto it14=std::find(it13,\
    \ class_name.end(), *it);\n                                                  \
    \          if(it14!=class_name.end()){\n                                     \
    \                           auto it15=std::find(it14, class_name.end(), *it);\n\
    \                                                                if(it15!=class_name.end()){\n\
    \                                                                    auto it16=std::find(it15,\
    \ class_name.end(), *it);\n                                                  \
    \                  if(it16!=class_name.end()){\n                             \
    \                                           auto it17=std::find(it16, class_name.end(),\
    \ *it);\n                                                                    \
    \    if(it17!=class_name.end()){\n                                           \
    \                                 auto it18=std::", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    std::string extension_strength\
    \ = \"\";\n    int cap_extension = 0;\n    int sm_extension = 0;\n    int strength\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        cap_extension\
    \ = class_name[cap_extension].size();\n        sm_extension = class_name[sm_extension].size();\n\
    \        extension_strength = cap_extension - sm_extension;\n        strength\
    \ = extension_strength;\n        if (strength > 0) {\n            strongest_extension\
    \ = class_name + extensions[i];\n            break;\n        }\n    }\n    return\
    \ strongest_extension;", "    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(auto &extension: extensions) {\n    \
    \    cap_counter += std::count(extension.begin(), extension.end(), std::toupper(extension[0]));\n\
    \        sm_counter += std::count(extension.begin(), extension.end(), std::tolower(extension[0]));\n\
    \    }\n    float strength = cap_counter - sm_counter;\n    for(auto &extension:\
    \ extensions) {\n        if(std::count(extension.begin(), extension.end(), std::toupper(extension[0]))\
    \ > cap_counter) {\n            strongest_extension = class_name + extension;\n\
    \            break;\n        }\n    }\n    if(strongest_extension.empty()) {\n\
    \        for(auto &extension: extensions) {\n            if(std::count(extension.begin(),\
    \ extension.end(), std::tolower(extension[0])) > sm_counter) {\n             \
    \   strongest_extension = class_name + extension;\n                break;\n  \
    \          }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    \n    std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = 0;\n    \n    for (auto &extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('z');\n        \n        if (cap !=\
    \ std::string::npos && sm != std::string::npos) {\n            int cap_strength\
    \ = cap - sm;\n            \n            if (strongest_extension_strength < cap_strength)\
    \ {\n                strongest_extension_strength = cap_strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n    }\n   \
    \ \n    return class_name + \".\" + strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension;\n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    for (auto &ext : extensions) {\n       \
    \ cap = cap - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap <\
    \ sm) {\n        strongest_extension = class_name;\n    } else {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    return strongest_extension;", "  \
    \  // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() == strength) {\n \
    \           strongest_extension = class_name + ext;\n            break;\n    \
    \    }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ >= cap){\n            cap = extensions[i].size();\n        }\n        if(extensions[i].size()\
    \ >= sm){\n            sm = extensions[i].size();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for(int i = 0; i < extensions.size(); i++){\n    \
    \    if(extensions[i].size() == cap){\n            strongest_extension += class_name\
    \ + \".\" + extensions[i];\n        }\n        if(extensions[i].size() == sm){\n\
    \            strongest_extension += \".\" + extensions[i];\n        }\n    }\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    for (auto &ext : extensions) {\n \
    \       if (ext.length() == strongest_extension.length()) {\n            if (ext.length()\
    \ < strongest_extension.length()) {\n                strongest_extension = ext;\n\
    \            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_extension\
    \ = class_name.size();\n    int sml_extension = class_name.size();\n    for(auto\
    \ ext : extensions) {\n        cap_extension = std::max(cap_extension, ext.size());\n\
    \        sml_extension = std::max(sml_extension, ext.size());\n    }\n    int\
    \ strength = cap_extension - sml_extension;\n    for(auto ext : extensions) {\n\
    \        strength = std::max(strength, ext.size());\n    }\n    strongest_extension\
    \ = class_name + extensions[0];\n    for(auto ext : extensions) {\n        if(strength\
    \ == ext.size()) {\n            strongest_extension = class_name + ext;\n    \
    \        break;\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_counter =\
    \ 0;\n    int sml_counter = 0;\n    for(auto &extension : extensions) {\n    \
    \    if(extension.at(0) == class_name.at(0)) {\n            cap_counter++;\n \
    \       }\n        if(extension.at(1) == class_name.at(0)) {\n            sml_counter++;\n\
    \        }\n    }\n    float strength = cap_counter - sml_counter;\n    if(strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    for(auto &ext : extensions){\n        if(ext.length() == strongest_extension.length()){\n\
    \            if(strength > ext.length()){\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    double strongest_extension_strength\
    \ = 0;\n    double cap_extension_strength = 0;\n    double sm_extension_strength\
    \ = 0;\n    double extension_strength = 0;\n    double total_extension_strength\
    \ = 0;\n    double total_extension_strength_percentage = 0;\n    double total_extension_percentage\
    \ = 0;\n    double total_percentage = 0;\n    double total_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage = 0;\n    double total_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage",
  "    // Your code here\n    std::string extension_strength;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() > cap_counter) {\n            cap_counter = ext.length();\n  \
    \      }\n        if (ext.length() > sm_counter) {\n            sm_counter = ext.length();\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == cap_counter) {\n         \
    \   if (ext.compare(extension_strength) == 0) {\n                extension_strength\
    \ = class_name + \".\" + ext;\n            }\n        }\n    }\n    return extension_strength;",
  "    // Write your code here\n    \n    std::string extension_str;\n    int max_strength\
    \ = -1;\n    for(auto &ext : extensions) {\n        int strength = ext.length();\n\
    \        if(strength > max_strength) {\n            max_strength = strength;\n\
    \            extension_str = ext;\n        }\n    }\n    return class_name + extension_str;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() > strongest_extension.length())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", '    // Your code here', "    // Write\
    \ your code here\n    \n    std::string extension_strength;\n    \n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        std::string extension = extensions[i];\n\
    \        \n        for(int j = 0; j < extension.size(); j++){\n            char\
    \ c = extension[j];\n            \n            if(c == 'S' || c == 's'){\n   \
    \             extension_strength += c;\n            }\n            \n        \
    \    if(c == 'C' || c == 'c'){\n                extension_strength += c;\n   \
    \         }\n            \n            if(c == 'E' || c == 'e'){\n           \
    \     extension_strength += c;\n            }\n            \n            if(c\
    \ == 'T' || c == 't'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'I' || c == 'i'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'G' || c == 'g'){\n\
    \                extension_strength += c;\n            }\n            \n     \
    \       if(c == 'N' || c == 'n'){\n                extension_strength += c;\n\
    \            }\n            \n            if(c == 'G' || c == 'g'){\n        \
    \        extension_strength += c;\n            }\n            \n            if(c\
    \ == 'R' || c == 'r'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'I' || c == 'i'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'S' || c == 's'){\n\
    \                extension_strength += c;\n            }\n            \n     \
    \       if(c == 'L' || c == 'l'){\n                extension_strength += c;\n\
    \            }\n            \n            if(c == 'E' || c == 'e'){\n        \
    \        extension_strength += c;\n            }\n            \n            if(c\
    \ == 'D' || c == 'd'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'A' || c == 'a'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'E' || c == 'e'){\n\
    \                extension_strength += c;\n            }\n            \n     \
    \       if(c == 'S' || c == 's'){\n                extension_strength += c;\n\
    \            }\n            \n            if(c == 'I' || c == 'i'){\n        \
    \        extension_strength += c;\n            }\n            \n            if(c\
    \ == 'T' || c == 't'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'E' || c == 'e'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'E' || c", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_counter =\
    \ 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions) {\n        cap_counter\
    \ += ext.size();\n        sm_counter += ext.size();\n    }\n    double strength\
    \ = cap_counter - sm_counter;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strength) {\n            strongest_extension =\
    \ class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        cap += (extensions[i].size() - extensions[i].find_first_of('a') - 1);\n\
    \        sm += (extensions[i].size() - extensions[i].find_first_of('a') + 1);\n\
    \    }\n    float strength = cap - sm;\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(strength > 0){\n            if(strongest_extension == \"\"\
    ){\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \            }else{\n                if(strongest_extension.find(class_name +\
    \ \".\" + extensions[i]) == std::string::npos){\n                    strongest_extension\
    \ = strongest_extension + \".\" + class_name + \".\" + extensions[i];\n      \
    \          }\n            }\n        }\n        strength -= (extensions[i].size()\
    \ - extensions[i].find_first_of('a') - 1);\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap_counter = 0;\n    int sml_counter = 0;\n    \n    for (auto &ext\
    \ : extensions) {\n        cap_counter += ext.length();\n        sml_counter +=\
    \ ext.length() - 1;\n    }\n    \n    float strength = cap_counter - sml_counter;\n\
    \    \n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    \n    for (auto &ext : extensions) {\n      \
    \  if (ext.length() == strongest_extension.length()) {\n            if (ext.length()\
    \ > strongest_extension.length()) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    double strength = cap\
    \ - sm;\n    for(auto &ext : extensions){\n        if(ext.length() == strength){\n\
    \            strongest_extension = class_name + \".\" + ext;\n            break;\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength >\
    \ 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.compare(strongest_extension) == 0) {\n              \
    \  strongest_extension = class_name + \".\" + ext;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0;\
    \ i < extensions.size(); i++){\n        if(extensions[i].length() > cap){\n  \
    \          cap = extensions[i].length();\n        }\n        if(extensions[i].length()\
    \ < sm){\n            sm = extensions[i].length();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for(int i = 0; i < extensions.size(); i++){\n    \
    \    if(extensions[i].length() == cap){\n            strongest_extension += class_name\
    \ + \".\" + extensions[i] + \".\";\n        }\n        if(extensions[i].length()\
    \ == sm){\n            strongest_extension += class_name + \".\" + extensions[i]\
    \ + \".\";\n        }\n    }\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(extensions[i].length() > cap){\n            strongest_extension +=\
    \ class_name + \".\" + extensions[i] + \".\";\n        }\n        if(extensions[i].length()\
    \ < sm){\n            strongest_extension += class_name + \".\" + extensions[i]\
    \ + \".\";\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    \n    std::string extension_strength;\n    \n    for(auto\
    \ &extension : extensions){\n        extension_strength += extension.substr(0,\
    \ extension.find_first_of('c')) - extension.substr(0, extension.find_first_of('s'));\n\
    \    }\n    \n    extension_strength = extension_strength.substr(0, extension_strength.find_first_of('.'));\n\
    \    \n    std::string class_name_with_extension = class_name + extension_strength;\n\
    \    \n    return class_name_with_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions){\n   \
    \     if(ext.size() == strength){\n            strongest_extension = class_name\
    \ + ext;\n        }\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    \n    std::string strongest_extension;\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ == cap){\n            cap++;\n        }\n        else if(extensions[i].size()\
    \ == sm){\n            sm++;\n        }\n        else{\n            cap = 0;\n\
    \            sm = 0;\n        }\n    }\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i].size() == cap){\n            strongest_extension\
    \ += class_name + extensions[i];\n        }\n        else if(extensions[i].size()\
    \ == sm){\n            strongest_extension += class_name + extensions[i];\n  \
    \      }\n        else{\n            strongest_extension += class_name + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    \n    std::string strongest_extension = class_name;\n    int cap = 0;\n \
    \   int sm = 0;\n    for(auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    \n    int strength = cap - sm;\n    \n\
    \    if(strength > 0) {\n        for(auto &ext : extensions) {\n            if(ext.size()\
    \ == strength) {\n                strongest_extension = class_name + ext;\n  \
    \              break;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() == strongest_extension.size())\
    \ {\n            if (strength > ext.size()) {\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    return class_name + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = class_name.size();\n    int sm = class_name.size();\n    int strength = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        cap = extensions[i].size();\n\
    \        sm = extensions[i].size();\n        strength = cap - sm;\n        if\
    \ (strength > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            break;\n        }\n    }\n    return strongest_extension;", "   \
    \ // Write your code here\n    std::string strongest_extension;\n    int cap =\
    \ 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        std::sort(extensions.begin(), extensions.end());\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  return strongest_extension;", "    // Write your code here\n    \n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sml_counter = 0;\n \
    \   for(auto &extension : extensions) {\n        cap_counter += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sml_counter += std::tolower(extension[0])\
    \ - std::tolower(extension[1]);\n    }\n    \n    double strength = cap_counter\
    \ - sml_counter;\n    \n    if(strength > 0) {\n        strongest_extension =\
    \ class_name + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n  \
    \      for(auto &extension : extensions) {\n            if(strength > 0) {\n \
    \               strongest_extension = class_name + \".\" + extension;\n      \
    \          break;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() == strength) {\n \
    \           strongest_extension = class_name + \".\" + ext;\n            break;\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[cap\
    \ - sm];\n    else\n        strongest_extension = class_name;\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == strength) {\n            strongest_extension\
    \ = class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for(auto it=extensions.begin();it!=extensions.end();it++){\n\
    \        cap += std::toupper(*it).size();\n        sm += std::tolower(*it).size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto it=extensions.begin();it!=extensions.end();it++){\n\
    \        if(std::toupper(*it) == class_name){\n            strongest_extension\
    \ = class_name + std::toupper(*it);\n            break;\n        }\n    }\n  \
    \  if(extensions.size() > 1){\n        for(auto it=extensions.begin();it!=extensions.end();it++){\n\
    \            if(std::toupper(*it) == strongest_extension){\n                strongest_extension\
    \ = class_name + std::toupper(*it);\n                break;\n            }\n \
    \       }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        if(ext.size() > cap) {\n         \
    \   cap = ext.size();\n        }\n        if(ext.size() < sm) {\n            sm\
    \ = ext.size();\n        }\n    }\n    double strength = cap - sm;\n    if(strength\
    \ > 0) {\n        for(auto &ext : extensions) {\n            if(ext.size() ==\
    \ strength) {\n                strongest_extension = class_name + \".\" + ext;\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    ", "    // Write your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    \n    float strength = cap - sm;\n    \n    if (strength > 0) {\n\
    \        strongest_extension = class_name + extensions[0];\n    }\n    \n    for\
    \ (int i = 1; i < extensions.size(); i++) {\n        if (strength > 0) {\n   \
    \         strongest_extension = class_name + extensions[i];\n            break;\n\
    \        }\n        \n        strength = cap - sm;\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string extension_strength;\n    std::string\
    \ extension_str;\n    \n    int cap_num = 0, sm_num = 0;\n    \n    for (auto\
    \ &ext : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - cap_num;\n    }\n    \n    extension_strength = class_name + \".\";\n    \n\
    \    for (int i = 0; i < cap_num; i++) {\n        extension_strength += extensions[i];\n\
    \    }\n    \n    for (int i = 0; i < sm_num; i++) {\n        extension_strength\
    \ += extensions[i].substr(0, 1);\n    }\n    \n    return extension_strength;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        cap +=\
    \ i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &i : extensions) {\n        if (i[0] == i[1]) {\n      \
    \      continue;\n        }\n        if (strength > 0) {\n            if (i[0]\
    \ < i[1]) {\n                strongest_extension = class_name + \".\" + extensions[0];\n\
    \                break;\n            }\n        }\n        if (i[0] > i[1]) {\n\
    \            strongest_extension = class_name + \".\" + extensions[1];\n     \
    \       break;\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &extension : extensions) {\n        cap += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sm += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto &ext : extensions) {\n            if (ext.length()\
    \ < strongest_extension.length()) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    double strength = cap - sm;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.size() == strength) {\n            strongest_extension\
    \ = class_name + ext;\n        }\n    }\n    return strongest_extension;", " \
    \   // Write your code here\n    std::string strongest_extension = \"\";\n   \
    \ int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        if (extensions[i].size() > 0) {\n            cap += (extensions[i].at(0)\
    \ >= 'A' && extensions[i].at(0) <= 'Z') ? 1 : 0;\n            sm += (extensions[i].at(0)\
    \ >= 'a' && extensions[i].at(0) <= 'z') ? 1 : 0;\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      if (extensions[i].size() > 0) {\n            if (extensions[i].at(0) >=\
    \ 'A' && extensions[i].at(0) <= 'Z') {\n                if (strength > 0) {\n\
    \                    strongest_extension += class_name + \".\" + extensions[i];\n\
    \                    strength = 0;\n                }\n            }\n       \
    \     if (extensions[i].at(0) >= 'a' && extensions[i].at(0) <= 'z') {\n      \
    \          if (strength > 0) {\n                    strongest_extension += class_name\
    \ + \".\" + extensions[i];\n                    strength = 0;\n              \
    \  }\n            }\n        }\n    }\n    return strongest_extension;", "   \
    \ // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n\
    \        if (extensions[i].size() > cap) {\n            cap = extensions[i].size();\n\
    \        }\n        if (extensions[i].size() < sm) {\n            sm = extensions[i].size();\n\
    \        }\n    }\n    float strength = cap - sm;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].size() == cap) {\n            if (strongest_extension\
    \ == \"\") {\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \            } else {\n                strongest_extension = strongest_extension\
    \ + \".\" + extensions[i];\n            }\n        }\n    }\n    return strongest_extension;",
  "    std::string strongest_extension;\n    int cap_counter = 0;\n    int sml_counter\
    \ = 0;\n    for (auto &extension : extensions) {\n        cap_counter += extension.find_first_of('A');\n\
    \        sml_counter += extension.find_first_of('z');\n    }\n    if (cap_counter\
    \ > sml_counter) {\n        strongest_extension = class_name + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + extensions[extensions.size()\
    \ - 1];\n    }\n    return strongest_extension;", "    // Your code here\n   \
    \ std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &i : extensions)\
    \ {\n        if (i[0]-'A' > strongest_extension[0]-'A') {\n            strongest_extension\
    \ = class_name + \".\" + i;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.size() == strongest_extension.size())\
    \ {\n            if (strength > ext.size()) {\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0) strongest_extension = class_name + \".\" + extensions[0];\n\
    \    else if (sm - cap > 0) strongest_extension = class_name + \".\" + extensions[1];\n\
    \    else strongest_extension = class_name + \".\" + extensions[2];\n    return\
    \ strongest_extension;", "    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sml_counter = 0;\n    for (auto &ext : extensions) {\n       \
    \ if (ext.length() > cap_counter) {\n            cap_counter = ext.length();\n\
    \        }\n        if (ext.length() > sml_counter) {\n            sml_counter\
    \ = ext.length();\n        }\n    }\n    double strength = cap_counter - sml_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() == cap_counter)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    \n    float strength = cap - sm;\n    \n    for(auto\
    \ &ext : extensions) {\n        if(ext.size() == strongest_extension.size()) {\n\
    \            strongest_extension = ext;\n        }\n    }\n    \n    return class_name\
    \ + \".\" + strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto &ext :\
    \ extensions){\n        if(ext.size() > cap){\n            cap = ext.size();\n\
    \        }\n        if(ext.size() < sm){\n            sm = ext.size();\n     \
    \   }\n    }\n    double strength = cap - sm;\n    for(auto &ext : extensions){\n\
    \        if(ext.size() == cap){\n            if(strength > 0){\n             \
    \   strongest_extension = class_name + ext.substr(0,cap);\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    \n    for(auto &extension\
    \ : extensions){\n        int cap = std::count_if(extension.begin(), extension.end(),\
    \ [](char ch){return std::toupper(ch) == ch;});\n        int sm = std::count_if(extension.begin(),\
    \ extension.end(), [](char ch){return std::tolower(ch) == ch;});\n        float\
    \ strength = (float)cap - sm;\n        if(strength > 0){\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions){\n        cap += ext.length();\n        sm += ext.length()-1;\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions){\n   \
    \     if(ext.length() == cap){\n            strongest_extension = class_name +\
    \ ext;\n        }\n        if(ext.length() == sm){\n            strongest_extension\
    \ = class_name + ext.substr(0,1);\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ == 0) {\n        return class_name;\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strength) {\n            strongest_extension =\
    \ class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n \
    \       }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (strength == -1) {\n        for (auto &extension : extensions)\
    \ {\n            if (extension.at(0) == class_name[0]) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[0];\n            }\n        }\n    }\n   \
    \ return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = class_name.size();\n    int sm = class_name.size();\n\
    \    for (auto &ext : extensions) {\n        cap = cap - ext.size();\n       \
    \ sm = sm - ext.size();\n    }\n    if (cap > sm) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    } else {\n        strongest_extension = class_name\
    \ + extensions[1];\n    }\n    return strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension;\n    int cap = 0;\n    int sm\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n   \
    \     sm += ext.length() - cap;\n    }\n    float strength = cap - sm;\n    int\
    \ index = std::distance(extensions.begin(), std::min_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    strongest_extension = class_name + extensions[index];\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &e : extensions) {\n       \
    \ if (e.size() > cap) {\n            cap = e.size();\n        }\n        if (e.size()\
    \ < sm) {\n            sm = e.size();\n        }\n    }\n    float strength =\
    \ cap - sm;\n    for (auto &e : extensions) {\n        if (e.size() == cap) {\n\
    \            if (e.find(class_name) == 0) {\n                strongest_extension\
    \ = e;\n            }\n        }\n    }\n    return strongest_extension;", " \
    \   // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto &i : extensions) {\n            if (i[0]-'A'\
    \ > cap) {\n                strongest_extension = class_name + \".\" + i;\n  \
    \              break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    \n    float strength\
    \ = cap - sm;\n    \n    for(auto &ext : extensions) {\n        if(ext.length()\
    \ == strength) {\n            strongest_extension = class_name + ext;\n      \
    \      break;\n        }\n    }\n    \n    return strongest_extension;", "   \
    \ // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    for (auto &ext : extensions) {\n        if (ext.length() == strength)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for (int i = 0; i < extensions.size(); i++) {\n        cap += (extensions[i].size()\
    \ - 1);\n        sm += extensions[i].size();\n    }\n    \n    if (cap - sm >\
    \ 0) strongest_extension = class_name + extensions[0];\n    else if (cap - sm\
    \ == 0) strongest_extension = class_name;\n    else strongest_extension = class_name\
    \ + extensions[cap - sm];\n    \n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_counter =\
    \ 0;\n    int sm_counter = 0;\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(extensions[i].at(0) == class_name[0]){\n            cap_counter++;\n\
    \        }\n        if(extensions[i].at(1) == class_name[1]){\n            sm_counter++;\n\
    \        }\n    }\n    double strength = cap_counter - sm_counter;\n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0) == class_name[0]){\n\
    \            cap_counter--;\n        }\n        if(extensions[i].at(1) == class_name[1]){\n\
    \            sm_counter--;\n        }\n    }\n    if(cap_counter > sm_counter){\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else{\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap_counter += ext.length();\n        sm_counter += ext.length();\n\
    \    }\n    float strength = cap_counter - sm_counter;\n    if (strength > 0)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\
    \ else {\n        for (auto &ext : extensions) {\n            if (ext.length()\
    \ < strength) {\n                strongest_extension = class_name + \".\" + ext;\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int strongest_extension_strength = -1;\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        int extension_strength = std::count(extensions[i].begin(), extensions[i].end(),\
    \ std::toupper(class_name[0]));\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.length();\n        sm += ext.length();\n    }\n    \n    if (cap\
    \ - sm > 0)\n        strongest_extension += \".\";\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    for(auto &ext : extensions) {\n        if(ext.length() == strength)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n           \
    \ break;\n        }\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    std::string result;\n    std::string extension;\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    cap = cap / 2;\n    sm = sm / 2;\n  \
    \  if (cap - sm > 1) {\n        for (auto &ext : extensions) {\n            if\
    \ (cap - ext.length() > sm) {\n                extension = ext;\n            }\n\
    \        }\n    }\n    if (extension != \"\") {\n        result = class_name +\
    \ \".\" + extension;\n    }\n    return result;", "    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap\
    \ - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap > sm) {\n \
    \       strongest_extension = class_name + extensions[0];\n    }\n    else {\n\
    \        strongest_extension = class_name + extensions[extensions.size() - 1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ > cap_counter){\n            cap_counter = extensions[i].size();\n        }\n\
    \        if(extensions[i].size() > sm_counter){\n            sm_counter = extensions[i].size();\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        if(extensions[i].size() == cap_counter){\n\
    \            strongest_extension += class_name + \".\" + extensions[i];\n    \
    \    }\n        if(extensions[i].size() == sm_counter){\n            strongest_extension\
    \ += \".\" + extensions[i];\n        }\n    }\n    if(strength > 0){\n       \
    \ for(int i = 0; i < extensions.size(); i++){\n            if(extensions[i].size()\
    \ == cap_counter){\n                strongest_extension += \".\" + extensions[i];\n\
    \            }\n            if(extensions[i].size() == sm_counter){\n        \
    \        strongest_extension += \".\" + extensions[i];\n            }\n      \
    \  }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    std::string strongest_extension_strength\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    cap = cap\
    \ / extensions.size();\n    sm = sm / extensions.size();\n    if (cap - sm > 0)\n\
    \        strongest_extension_strength = class_name + \".\" + extensions[0];\n\
    \    else if (sm - cap > 0)\n        strongest_extension_strength = class_name\
    \ + \".\" + extensions[1];\n    else\n        strongest_extension_strength = class_name\
    \ + \".\" + extensions[2];\n    return strongest_extension_strength;", "    //\
    \ Your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        cap\
    \ += (extensions[i].size() - 1);\n        sm += (extensions[i].size());\n    }\n\
    \    float strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        if (extensions[i].size() == strongest_extension.size()) {\n     \
    \       if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[i];\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ extension_strength;\n    int cap_counter = 0;\n    int sm_counter = 0;\n   \
    \ for(auto &extension : extensions) {\n        auto cap = extension.substr(0,\
    \ CAP);\n        auto sm = extension.substr(CAP, SM);\n        cap_counter +=\
    \ std::count(cap.begin(), cap.end(), cap.begin(), ::toupper);\n        sm_counter\
    \ += std::count(sm.begin(), sm.end(), sm.begin(), ::tolower);\n    }\n    extension_strength\
    \ = class_name + \".\" + extensions[0];\n    if(cap_counter > sm_counter) {\n\
    \        extension_strength = class_name + \".\" + extensions[1];\n    }\n   \
    \ return extension_strength;", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    for (auto &ext : extensions) {\n        if (ext.size() == strength)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n           \
    \ break;\n        }\n    }\n    return strongest_extension;", "    std::string\
    \ result;\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap_counter += ext.size();\n        sm_counter += ext.size();\n\
    \    }\n    double strength = cap_counter - sm_counter;\n    if (strength > 0)\
    \ {\n        std::sort(extensions.begin(), extensions.end(), [](const std::string\
    \ &a, const std::string &b) { return a.size() < b.size(); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::", "    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() > cap_counter) {\n            cap_counter = ext.length();\n  \
    \      }\n        if (ext.length() < sm_counter) {\n            sm_counter = ext.length();\n\
    \        }\n    }\n    double strength = cap_counter - sm_counter;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == cap_counter) {\n         \
    \   if (ext.compare(0, cap_counter, class_name.cbegin(), cap_counter, class_name.cend())\
    \ == 0) {\n                strongest_extension = class_name + \".\" + ext;\n \
    \           }\n        }\n        if (ext.length() == sm_counter) {\n        \
    \    if (ext.compare(0, sm_counter, class_name.cbegin(), sm_counter, class_name.cend())\
    \ == 0) {\n                strongest_extension = class_name + \".\" + ext;\n \
    \           }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_counter =\
    \ 0;\n    int sml_counter = 0;\n    for(auto &extension : extensions){\n     \
    \   cap_counter += std::toupper(extension[0]) - std::toupper(extension[1]);\n\
    \        sml_counter += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    double strength = cap_counter - sml_counter;\n    if(strength > 0){\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else if(strength == 0){\n        strongest_extension = class_name;\n    }\n\
    \    else if(strength < 0){\n        for(auto &extension : extensions){\n    \
    \        if(std::toupper(extension[0]) - std::toupper(extension[1]) > 0){\n  \
    \              strongest_extension = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    int max_strength\
    \ = -1;\n    for (auto &i : extensions) {\n        if (i[0]-'A' > max_strength)\
    \ {\n            max_strength = i[0]-'A';\n        }\n        if (i[1]-'a' > max_strength)\
    \ {\n            max_strength = i[1]-'a';\n        }\n    }\n    if (max_strength\
    \ > 0) {\n        strongest_extension = class_name + std::to_string(max_strength);\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = class_name.size();\n    int sm =\
    \ class_name.size();\n    for (auto &ext : extensions) {\n        cap -= ext.size();\n\
    \        sm -= ext.size();\n    }\n    if (cap > sm) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + extensions[extensions.size() - 1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string result;\n    int cap = 0;\n    int sm =\
    \ 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n       \
    \ sm += ext.size();\n    }\n    int strength = cap - sm;\n    if (strength > 0)\
    \ {\n        std::string temp = class_name;\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::toupper);\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::tolower);\n        temp = temp + \".\";\n      \
    \  std::transform(temp.begin(), temp.end(), temp.begin(), ::toupper);\n      \
    \  std::transform(temp.begin(), temp.end(), temp.begin(), ::tolower);\n      \
    \  temp = temp + extensions[0];\n        result = temp;\n    } else {\n      \
    \  std::transform(class_name.begin(), class_name.end(), class_name.begin(), ::toupper);\n\
    \        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::toupper);\n        std::transform(class_name.begin(), class_name.end(), class_name.begin(),\
    \ ::tolower);\n        std::transform(class_name.", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() > cap) {\n     \
    \       cap = ext.length();\n        }\n        if (ext.length() < sm) {\n   \
    \         sm = ext.length();\n        }\n    }\n    float strength = cap - sm;\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() == cap) {\n    \
    \        if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    \n    int cap = 0;\n    int sm = 0;\n    \n    for (auto ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    \n    float\
    \ strength = cap - sm;\n    \n    for (auto ext : extensions) {\n        if (ext.size()\
    \ == strongest_extension.size()) {\n            if (strength > 0) {\n        \
    \        if (ext.size() > strongest_extension.size()) {\n                    strongest_extension\
    \ = ext;\n                }\n            }\n        }\n    }\n    \n    return\
    \ class_name + \".\" + strongest_extension;", "    // Write your code here\n \
    \   \n    std::string strongest_extension;\n    \n    for(int i=0;i<extensions.size();i++){\n\
    \        for(int j=0;j<extensions[i].size();j++){\n            if((extensions[i][j]>='A'&&extensions[i][j]<='Z')||(extensions[i][j]>='a'&&extensions[i][j]<='z')){\n\
    \                strongest_extension+=extensions[i][j];\n            }\n     \
    \   }\n    }\n    \n    return strongest_extension;", "    // Write your code\
    \ here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n  \
    \      sm += ext.size();\n    }\n    float strength = cap - sm;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.size() == cap) {\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + ext;\n  \
    \              break;\n            }\n        }\n    }\n    return strongest_extension;",
  '    // Your code here', "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &ext : extensions){\n\
    \        cap_counter += ext.size();\n        sm_counter += ext.size();\n    }\n\
    \    float strength = cap_counter - sm_counter;\n    for(auto &ext : extensions){\n\
    \        if(ext.size() == strongest_extension.size()){\n            strongest_extension\
    \ = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    cap = cap - sm;\n   \
    \ cap = cap / extensions.size();\n    for(auto &ext : extensions) {\n        if(ext.length()\
    \ == cap) {\n            strongest_extension = class_name + ext;\n           \
    \ break;\n        }\n    }\n    return strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n \
    \   int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    cap = cap - sm;\n    if (cap > 0) {\n \
    \       auto it = std::max_element(extensions.begin(), extensions.end(), [](const\
    \ std::string &a, const std::string &b) { return a.size() < b.size(); });\n  \
    \      strongest_extension = class_name + \".\" + extensions[it - extensions.begin()];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string extension_strength;\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            char c = extension[j];\n   \
    \         \n            if(c == toupper(extension[j])){\n                extension_strength\
    \ += c;\n            }\n        }\n    }\n    \n    extension_strength += \".\"\
    ;\n    \n    for(int i = 0; i < extensions.size(); i++){\n        std::string\
    \ extension = extensions[i];\n        \n        for(int j = 0; j < extension.size();\
    \ j++){\n            char c = extension[j];\n            \n            if(c ==\
    \ tolower(extension[j])){\n                extension_strength += c;\n        \
    \    }\n        }\n    }\n    \n    extension_strength += class_name;\n    \n\
    \    return extension_strength;"]
stop_tokens:
- "\n}"
