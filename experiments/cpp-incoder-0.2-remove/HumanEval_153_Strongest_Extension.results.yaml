language: cpp
name: HumanEval_153_Strongest_Extension
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_extension = 0;\n   \
    \ int sml_extension = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n\
    \        if (class_name.length() == extensions[i].length()) {\n            cap_extension\
    \ = cap_extension + class_name[class_name.length() - extensions[i].length()];\n\
    \            sml_extension = sml_extension + extensions[i][extensions[i].length()\
    \ - 1];\n        }\n    }\n    if (cap_extension - sml_extension > 0) {\n    \
    \    strongest_extension = class_name + extensions[cap_extension - sml_extension];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmu0urom1: /tmp/tmpmu0urom1.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    if (strength > 0)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        for (auto &ext : extensions) {\n            if (ext.length()\
    \ < strength) {\n                strongest_extension = class_name + \".\" + ext;\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpe_fr5imn: /tmp/tmpe_fr5imn.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n    if (strength > 0) {\n       \
    \ strongest_extension = class_name + extensions[index];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7inta5uj: /tmp/tmp7inta5uj.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    \n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        cap = cap - extensions[i].size();\n        sm = sm - extensions[i].size();\n\
    \    }\n    \n    if(cap > sm){\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    else{\n        strongest_extension = class_name + extensions[1];\n\
    \    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmps4nniel9: /tmp/tmps4nniel9.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n\
    \    int sml_counter = 0;\n    \n    for(int i = 0; i < extensions.size(); i++){\n\
    \        cap_counter = 0;\n        sml_counter = 0;\n        \n        for(int\
    \ j = 0; j < extensions[i].length(); j++){\n            if(extensions[i][j] ==\
    \ class_name[cap_counter]){\n                cap_counter++;\n            }\n \
    \           else if(extensions[i][j] == class_name[sml_counter]){\n          \
    \      sml_counter++;\n            }\n        }\n        \n        if(cap_counter\
    \ > sml_counter){\n            strongest_extension = class_name + extensions[i];\n\
    \        }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n  \
    \  auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"),\
    \ (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7f6xed43: /tmp/tmp7f6xed43.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123441
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    \n    int cap = 0;\n \
    \   int sm = 0;\n    \n    for(auto it=extensions.begin(); it!=extensions.end();\
    \ ++it){\n        cap += std::toupper(*it).size();\n        sm += std::tolower(*it).size();\n\
    \    }\n    \n    float strength = cap - sm;\n    \n    for(auto it=extensions.begin();\
    \ it!=extensions.end(); ++it){\n        if(std::toupper(*it) == class_name){\n\
    \            strongest_extension = class_name + std::toupper(*it);\n         \
    \   break;\n        }\n    }\n    \n    if(strongest_extension == \"\"){\n   \
    \     for(auto it=extensions.begin(); it!=extensions.end(); ++it){\n         \
    \   if(std::tolower(*it) == class_name){\n                strongest_extension\
    \ = class_name + std::tolower(*it);\n                break;\n            }\n \
    \       }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n   \
    \ auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6fz6htit.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp6fz6htit.cpp:26:32:\
    \ error: no matching function for call to \u2018toupper(std::__cxx11::basic_string<char>&)\u2019\
    \n   26 |         cap += std::toupper(*it).size();\n      |                  \
    \              ^\nIn file included from /usr/include/c++/9/cctype:42,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n     \
    \            from /tmp/tmp6fz6htit.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6fz6htit.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6fz6htit.cpp:26:32: note:   candidate expects 2 arguments,\
    \ 1 provided\n   26 |         cap += std::toupper(*it).size();\n      |      \
    \                          ^\n/tmp/tmp6fz6htit.cpp:27:31: error: no matching function\
    \ for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\n   27 |\
    \         sm += std::tolower(*it).size();\n      |                           \
    \    ^\nIn file included from /usr/include/c++/9/"
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strongest_extension.size()) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpnlngpq_l: /tmp/tmpnlngpq_l.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &ext : extensions) {\n        cap_num += ext.length();\n      \
    \  sm_num += ext.length() - cap_num;\n    }\n    float strength = cap_num - sm_num;\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() == cap_num) {\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n                break;\n            }\n        }\n    }\n  \
    \  return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp6wlgprg3: /tmp/tmp6wlgprg3.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    std::string extension_strength = \"\";\n    std::string extension_class_name\
    \ = \"\";\n    std::string extension_class_name_with_extension = \"\";\n    std::string\
    \ extension_class_name_without_extension = \"\";\n    std::string extension_class_name_with_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n    std::string extension_class_name_without_extension_\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpynlbui1x.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpynlbui1x.cpp:35:17:\
    \ error: redeclaration of \u2018std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\u2019\
    \n   35 |     std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpynlbui1x.cpp:33:17: note: \u2018std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\u2019\
    \ previously declared here\n   33 |     std::string extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpynlbui1x.cpp:36:17: error: redeclaration of \u2018std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\u2019\
    \n   36 |     std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpynlbui1x.cpp:34:17: note: \u2018std::string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\u2019\
    \ previously declared here\n   34 "
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    \n    for (auto extension : extensions)\
    \ {\n        auto extension_length = extension.length();\n        auto class_length\
    \ = class_name.length();\n        auto extension_strength_length = extension_strength.length();\n\
    \        \n        if (extension_length == class_length) {\n            if (extension_strength_length\
    \ == extension_length) {\n                extension_strength = extension;\n  \
    \          }\n        }\n    }\n    \n    return class_name + extension_strength;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0680fkpe: /tmp/tmp0680fkpe.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string result;\n    double cap = class_name.size();\n    double sm =\
    \ class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap -\
    \ ext.size();\n        sm = sm - ext.size();\n    }\n    double strength = cap\
    \ - sm;\n    if (strength > 0) {\n        std::cout << \"The strongest extension\
    \ is \" << class_name << \".\" << extensions[0] << std::endl;\n    }\n    else\
    \ {\n        std::cout << \"The strongest extension is \" << class_name << \"\
    .\" << extensions[0] << std::endl;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpov9i6xdy: /tmp/tmpov9i6xdy.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: 'The strongest extension is Watashi.tEN

    '
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length() - ext.length();\n    }\n    float strength = cap - sm;\n    int\
    \ index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    strongest_extension = class_name + extensions[index];\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpe7217_2f: /tmp/tmpe7217_2f.cpp:33: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions) {\n  \
    \      if(ext.length() == strength) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4eh8vxvd: /tmp/tmp4eh8vxvd.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length() - ext.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\");\n    }\n    double strength = cap - sm;\n    if\
    \ (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() > strongest_extension.length())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpzauxpq0w: /tmp/tmpzauxpq0w.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for\
    \ (auto e : extensions) {\n        if (e == class_name[0]) {\n            cap++;\n\
    \        }\n        if (e == class_name[class_name.size() - 1]) {\n          \
    \  sm++;\n        }\n    }\n    double strength = cap - sm;\n    if (strength\
    \ > 0) {\n        extension = class_name + \".\" + extensions[0];\n    }\n   \
    \ if (strength == 1) {\n        extension = class_name + \".\" + extensions[1];\n\
    \    }\n    if (strength > 1) {\n        extension = class_name + \".\" + extensions[2];\n\
    \    }\n    return extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppferhu6f.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmppferhu6f.cpp:23:15:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   23 |         if (e == class_name[0]) {\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppferhu6f.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmppferhu6f.cpp:23:30:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   23 |         if (e == class_name[0])\
    \ {\n      |                              ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppferhu6f.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmppferhu6f.cpp:23:30: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   23 |         if ("
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            if(extension[j] >= 'A' && extension[j]\
    \ <= 'Z'){\n                extension_strength += extension[j];\n            }\n\
    \        }\n    }\n    \n    std::string strongest_extension = class_name + extension_strength;\n\
    \    \n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp2j_e9lx2: /tmp/tmp2j_e9lx2.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    double strength = cap - sm;\n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  for (auto &ext : extensions) {\n        if (ext.size() == strongest_extension.size())\
    \ {\n            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsxqqpuru: /tmp/tmpsxqqpuru.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &i : extensions)\
    \ {\n        if (i[0] == i[1]) {\n            continue;\n        }\n        float\
    \ s = i[0]-'A' + i[1]-'a';\n        if (strength > s) {\n            strongest_extension\
    \ = class_name + \".\" + i;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmph10g11b7: /tmp/tmph10g11b7.cpp:44: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.length() == strength) {\n            strongest_extension =\
    \ class_name + \".\" + ext;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp1rswuetx: /tmp/tmp1rswuetx.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_extension_strength = 0;\n    int sma_extension_strength = 0;\n  \
    \  for (auto &extension : extensions) {\n        cap_extension_strength += (extension.at(0)\
    \ - 'A');\n        sma_extension_strength += (extension.at(1) - 'a');\n    }\n\
    \    if (cap_extension_strength > sma_extension_strength) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    } else {\n        strongest_extension = class_name\
    \ + extensions[1];\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpoelq2cdf: /tmp/tmpoelq2cdf.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions) {\n  \
    \      if(ext.size() == strength) {\n            strongest_extension = class_name\
    \ + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpb7mjl_ce: /tmp/tmpb7mjl_ce.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[cap\
    \ - sm];\n    else\n        strongest_extension = class_name + extensions[0];\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp659fjto5: /tmp/tmp659fjto5.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &ext : extensions){\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions){\n   \
    \     if(ext.size() == strongest_extension.size()){\n            strongest_extension\
    \ = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpi2tpjx3i: /tmp/tmpi2tpjx3i.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ > 0) {\n            cap += extensions[i].size();\n        }\n        if (extensions[i].size()\
    \ < 0) {\n            sm += extensions[i].size();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      if (extensions[i].size() > 0) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \            }\n        }\n        if (extensions[i].size() < 0) {\n         \
    \   if (extensions[i].compare(class_name) == 0) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            }\n        }\n    }\n   \
    \ if (strength > 0) {\n        for (int i = 0; i < extensions.size(); i++) {\n\
    \            if (extensions[i].size() > 0) {\n                if (extensions[i].compare(class_name)\
    \ == 0) {\n                    strongest_extension = class_name + \".\" + extensions[i];\n\
    \                }\n            }\n            if (extensions[i].size() < 0) {\n\
    \                if (extensions[i].compare(class_name) == 0) {\n             \
    \       strongest_extension = class_name + \".\" + extensions[i];\n          \
    \      }\n            }\n        }\n    }\n    return strongest_extension;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsslxx0n4: /tmp/tmpsslxx0n4.cpp:61: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &i : extensions)\
    \ {\n        if (i[0] == i[1]) {\n            continue;\n        }\n        float\
    \ strength_i = cap - i[0] - i[1];\n        if (strength_i > strength) {\n    \
    \        strongest_extension = class_name + \".\" + i;\n            strength =\
    \ strength_i;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpofu2jz2r: /tmp/tmpofu2jz2r.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for (auto &ext : extensions) {\n \
    \       if (ext.size() == strength) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpm31kb19y: /tmp/tmpm31kb19y.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.size() > cap_counter) {\n            cap_counter\
    \ = ext.size();\n        }\n        if (ext.size() > sml_counter) {\n        \
    \    sml_counter = ext.size();\n        }\n    }\n    double strength = cap_counter\
    \ - sml_counter;\n    for (auto &ext : extensions) {\n        if (ext.size() ==\
    \ cap_counter) {\n            if (ext.compare(0, cap_counter, class_name.substr(0,\
    \ cap_counter)) == 0) {\n                strongest_extension = class_name + ext;\n\
    \            }\n        }\n        if (ext.size() == sml_counter) {\n        \
    \    if (ext.compare(0, sml_counter, class_name.substr(0, sml_counter)) == 0)\
    \ {\n                strongest_extension = class_name + ext;\n            }\n\
    \        }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp8kk5od2w: /tmp/tmp8kk5od2w.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    \n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        cap = extensions[i].size();\n        sm = extensions[i].size();\n\
    \    }\n    \n    int strength = cap - sm;\n    \n    if(strength == 0){\n   \
    \     strongest_extension = class_name;\n    }\n    else if(strength == 1){\n\
    \        strongest_extension = class_name + extensions[0];\n    }\n    else if(strength\
    \ == 2){\n        strongest_extension = class_name + extensions[0] + extensions[1];\n\
    \    }\n    else if(strength == 3){\n        strongest_extension = class_name\
    \ + extensions[0] + extensions[1] + extensions[2];\n    }\n    else if(strength\
    \ == 4){\n        strongest_extension = class_name + extensions[0] + extensions[1]\
    \ + extensions[2] + extensions[3];\n    }\n    else if(strength == 5){\n     \
    \   strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4];\n    }\n    else if(strength == 6){\n     \
    \   strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4] + extensions[5];\n    }\n    else if(strength\
    \ == 7){\n        strongest_extension = class_name + extensions[0] + extensions[1]\
    \ + extensions[2] + extensions[3] + extensions[4] + extensions[5] + extensions[6];\n\
    \    }\n    else if(strength == 8){\n        strongest_extension = class_name\
    \ + extensions[0] + extensions[1] + extensions[2] + extensions[3] + extensions[4]\
    \ + extensions[5] + extensions[6] + extensions[7];\n    }\n    else if(strength\
    \ == 9){\n        strongest_extension = class_name + extensions[0] + extensions[1]\
    \ + extensions[2] + extensions[3] + extensions[4] + extensions[5] + extensions[6]\
    \ + extensions[7] + extensions[8];\n    }\n    else if(strength == 10){\n    \
    \    strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4] + extensions[5] + extensions[6] + extensions[7]\
    \ + extensions[8] + extensions[9];\n    }\n    else if(strength == 11){\n    \
    \    strongest_extension = class_name + extensions[0] + extensions[1] + extensions[2]\
    \ + extensions[3] + extensions[4] + extensions[5] + extensions[6] + extensions[7]\
    \ + extensions[8] + extensions[9] + extensions[10];\n    }\n    else if(strength\
    \ == 12){\n        strongest_extension = class_name + extensions[0] + extension\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfiih03yl.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpfiih03yl.cpp:69:60:\
    \ error: \u2018extension\u2019 was not declared in this scope; did you mean \u2018\
    extensions\u2019?\n   69 |         strongest_extension = class_name + extensions[0]\
    \ + extension\n      |                                                       \
    \     ^~~~~~~~~\n      |                                                     \
    \       extensions\n/tmp/tmpfiih03yl.cpp:71:12: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 token\n   71 | int main() {\n      | \
    \           ^\n/tmp/tmpfiih03yl.cpp:82:1: error: expected \u2018}\u2019 at end\
    \ of input\n   82 | }\n      | ^\n/tmp/tmpfiih03yl.cpp:17:94: note: to match this\
    \ \u2018{\u2019\n   17 | std::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n      |                            \
    \                                                                  ^\n/tmp/tmpfiih03yl.cpp:82:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   82 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &ext : extensions){\n        if(ext.size() == cap){\n            cap++;\n\
    \        }\n        else if(ext.size() == sm){\n            sm++;\n        }\n\
    \        else{\n            cap++;\n            sm++;\n        }\n    }\n    float\
    \ strength = cap - sm;\n    if(strength > 0){\n        strongest_extension = class_name\
    \ + extensions[0];\n    }\n    else if(strength < 0){\n        strongest_extension\
    \ = class_name + extensions[extensions.size()-1];\n    }\n    else{\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpr2whh8oo: /tmp/tmpr2whh8oo.cpp:48: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &extension : extensions){\n        cap += extension.size()-1;\n\
    \        sm += extension.size()-1;\n    }\n    float strength = cap - sm;\n  \
    \  \n    for(auto &extension : extensions){\n        if(extension == class_name){\n\
    \            strongest_extension = class_name;\n            break;\n        }\n\
    \        if(strength > 0){\n            if(extension.find(class_name) != std::string::npos){\n\
    \                strongest_extension = class_name + extension;\n             \
    \   break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp89znknsa: /tmp/tmp89znknsa.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else\n        strongest_extension = class_name + extensions[extensions.size()\
    \ - 1];\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmkreluuj: /tmp/tmpmkreluuj.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    \n    for(auto extension : extensions){\n\
    \        std::transform(extension.begin(), extension.end(), extension.begin(),\
    \ ::toupper);\n        std::transform(extension.begin(), extension.end(), extension.begin(),\
    \ ::tolower);\n        \n        auto cap = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    );\n        auto sm = extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n\
    \        \n        auto strength = cap - sm;\n        \n        if(strength >\
    \ 0){\n            strongest_extension = class_name + extension;\n           \
    \ break;\n        }\n    }\n    \n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp2q1lobdm: /tmp/tmp2q1lobdm.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap\
    \ - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap > sm) {\n \
    \       strongest_extension = class_name + extensions[0];\n    } else {\n    \
    \    strongest_extension = class_name + extensions[1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpkgd4b6y8: /tmp/tmpkgd4b6y8.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strength) {\n            strongest_extension\
    \ = class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpo9sdzktg: /tmp/tmpo9sdzktg.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = class_name;\n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        cap = cap - extensions[i].size();\n        sm = sm - extensions[i].size();\n\
    \    }\n    if (cap > sm) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp2nffny6r: /tmp/tmp2nffny6r.cpp:33: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  for (int i = 1; i < extensions.size(); i++) {\n        if (strength > 0) {\n\
    \            strongest_extension = class_name + \".\" + extensions[i];\n     \
    \   }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp81q5c0fr: /tmp/tmp81q5c0fr.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.length() == strongest_extension.length()) {\n            if(strength\
    \ > ext.length())\n                strongest_extension = ext;\n        }\n   \
    \ }\n    return class_name + \".\" + strongest_extension;\n}\nint main() {\n \
    \   auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"),\
    \ (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7j4msid0: /tmp/tmp7j4msid0.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength >\
    \ 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.length() < strongest_extension.length()) {\n        \
    \        strongest_extension = class_name + \".\" + ext;\n            }\n    \
    \    }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsoblqp5h: /tmp/tmpsoblqp5h.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else if (sm - cap > 0)\n        strongest_extension = class_name + extensions[1];\n\
    \    else\n        strongest_extension = class_name + extensions[2];\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpelt1wkml: /tmp/tmpelt1wkml.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    double strength = cap - sm;\n    if (strength > 0)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpza5d61rk: /tmp/tmpza5d61rk.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    int strongest_strength\
    \ = -1;\n    for (auto &ext : extensions) {\n        float ext_strength = ext.size();\n\
    \        if (ext_strength > strongest_strength) {\n            strongest_strength\
    \ = ext_strength;\n            strongest_extension = ext;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp560zp43m: /tmp/tmp560zp43m.cpp:41: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ > 0) {\n            cap += extensions[i].at(0);\n            sm += extensions[i].at(0);\n\
    \        }\n    }\n    float strength = cap - sm;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].size() > 0) {\n            if (extensions[i].at(0)\
    \ >= strength) {\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp87jijn3z: /tmp/tmp87jijn3z.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sml_counter\
    \ = 0;\n    for(auto &extension : extensions) {\n        if(std::toupper(extension[0])\
    \ == extension[0]) {\n            cap_counter++;\n        }\n        if(std::tolower(extension[0])\
    \ == extension[0]) {\n            sml_counter++;\n        }\n    }\n    float\
    \ strength = cap_counter - sml_counter;\n    if(strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[extensions.size()-1];\n\
    \    }\n    else {\n        strongest_extension = class_name;\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpnv6o4dnb: /tmp/tmpnv6o4dnb.cpp:45: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > cap_counter) {\n            cap_counter = ext.length();\n        }\n     \
    \   if (ext.length() > sm_counter) {\n            sm_counter = ext.length();\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == cap_counter) {\n         \
    \   if (ext.compare(class_name.substr(0, cap_counter)) == 0) {\n             \
    \   strongest_extension = class_name + ext;\n            }\n        }\n      \
    \  if (ext.length() == sm_counter) {\n            if (ext.compare(class_name.substr(0,\
    \ sm_counter)) == 0) {\n                strongest_extension = class_name + ext;\n\
    \            }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpzg05y3i5: /tmp/tmpzg05y3i5.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        for (auto\
    \ &i : extensions) {\n            if (i[0] == i[1]) {\n                strongest_extension\
    \ = class_name + \".\" + i;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmps470qppv: /tmp/tmps470qppv.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    for (auto &extension : extensions) {\n \
    \       cap = cap - extension.size();\n        sm = sm - extension.size();\n \
    \   }\n    if (cap > sm) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpx6mln1di: /tmp/tmpx6mln1di.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    \n    for (int i = 0; i < extensions.size(); i++) {\n        cap\
    \ = cap + toupper(extensions[i][0]) - toupper(extensions[i][0]);\n        sm =\
    \ sm + tolower(extensions[i][0]) - tolower(extensions[i][0]);\n    }\n    \n \
    \   if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else if (cap - sm == 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else\n        strongest_extension = class_name + extensions[1];\n    \n \
    \   return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7eylv3i7: /tmp/tmp7eylv3i7.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    \n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n  \
    \      sm += ext.size();\n    }\n    float strength = cap - sm;\n    \n    for\
    \ (auto &ext : extensions) {\n        if (ext.size() == strength) {\n        \
    \    strongest_extension = class_name + \".\" + ext;\n            break;\n   \
    \     }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbdhmyskr: /tmp/tmpbdhmyskr.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end()));\n    if (strength ==\
    \ -1) {\n        return class_name;\n    }\n    if (strength == 0) {\n       \
    \ return class_name + \".\" + extensions[index];\n    }\n    if (strength > 0)\
    \ {\n        return class_name + \".\" + extensions[index];\n    }\n    return\
    \ class_name;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n  \
    \  assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4h691ri_: /tmp/tmp4h691ri_.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        if(extensions[i][0] >= 'A' && extensions[i][0]\
    \ <= 'Z'){\n            cap++;\n        }\n        else if(extensions[i][0] >=\
    \ 'a' && extensions[i][0] <= 'z'){\n            sm++;\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for(int i = 0; i < extensions.size(); i++){\n    \
    \    if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n            cap--;\n\
    \        }\n        else if(extensions[i][0] >= 'a' && extensions[i][0] <= 'z'){\n\
    \            sm--;\n        }\n    }\n    if(cap == sm){\n        for(int i =\
    \ 0; i < extensions.size(); i++){\n            if(extensions[i][0] >= 'A' && extensions[i][0]\
    \ <= 'Z'){\n                cap++;\n            }\n            else if(extensions[i][0]\
    \ >= 'a' && extensions[i][0] <= 'z'){\n                sm++;\n            }\n\
    \        }\n        strength = cap - sm;\n    }\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n   \
    \         cap++;\n        }\n        else if(extensions[i][0] >= 'a' && extensions[i][0]\
    \ <= 'z'){\n            sm++;\n        }\n    }\n    if(cap == sm){\n        for(int\
    \ i = 0; i < extensions.size(); i++){\n            if(extensions[i][0] >= 'A'\
    \ && extensions[i][0] <= 'Z'){\n                cap++;\n            }\n      \
    \      else if(extensions[i][0] >= 'a' && extensions[i][0] <= 'z'){\n        \
    \        sm++;\n            }\n        }\n        strength = cap - sm;\n    }\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i][0]\
    \ >= 'A' && extensions[i][0] <= 'Z'){\n            cap++;\n        }\n       \
    \ else if(extensions[i][0] >= 'a' && extensions[i][0] <= 'z'){\n            sm++;\n\
    \        }\n    }\n    if(cap == sm){\n        for(int i = 0; i < extensions.size();\
    \ i++){\n            if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n\
    \                cap++;\n            }\n            else if(extensions[i][0] >=\
    \ 'a' && extensions[i][0] <= 'z'){\n                sm++;\n            }\n   \
    \     }\n        strength = cap - sm;\n    }\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n   \
    \         cap++;\n        }\n        else if(extensions[i][0] >= '\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpisx2fltp.cpp:92:37: warning: missing terminating ' character\n\
    \   92 |         else if(extensions[i][0] >= '\n      |                      \
    \               ^\n/tmp/tmpisx2fltp.cpp:92:37: error: missing terminating ' character\n\
    /tmp/tmpisx2fltp.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpisx2fltp.cpp:93:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   93 | }\n \
    \     | ^\n/tmp/tmpisx2fltp.cpp:92:36: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   92 |         else if(extensions[i][0] >= '\n      |        \
    \        ~                   ^\n      |                                    )\n\
    \   93 | }\n      | ~                                   \n/tmp/tmpisx2fltp.cpp:93:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   93 | }\n \
    \     | ^\n/tmp/tmpisx2fltp.cpp:94:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   94 | int main() {\n      |            ^\n\
    /tmp/tmpisx2fltp.cpp:105:1: error: expected \u2018}\u2019 at end of input\n  105\
    \ | }\n      | ^\n/tmp/tmpisx2fltp.cpp:17:94: note: to match this \u2018{\u2019\
    \n   17 | std::string Strongest_Extension(std::string class_name, std::vector<std::string>\
    \ extensions) {\n      |                                                     \
    \                                         ^\n/tmp/tmpisx2fltp.cpp:105:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  105 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap = cap + 1;\n        }\n        if(extensions[i].at(1)\
    \ == class_name[1]){\n            sm = sm + 1;\n        }\n    }\n    float strength\
    \ = cap - sm;\n    if(strength > 0){\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0){\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpwmfnq9ir: /tmp/tmpwmfnq9ir.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_extension = class_name.size();\n\
    \    int sm_extension = class_name.size();\n    for(auto extension : extensions)\
    \ {\n        cap_extension = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::toupper(c) == c;\n        });\n      \
    \  sm_extension = std::count_if(extension.begin(), extension.end(), [](char c)\
    \ {\n            return std::tolower(c) == c;\n        });\n    }\n    double\
    \ strength = cap_extension - sm_extension;\n    if(strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(strength == 0 && extensions.size()\
    \ > 1) {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    else if(strength == 0 && extensions.size() == 1) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpgbta_y_6: /tmp/tmpgbta_y_6.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto it=extensions.begin(); it!=extensions.end(); ++it) {\n        cap +=\
    \ std::toupper(*it).size();\n        sm += std::tolower(*it).size();\n    }\n\
    \    float strength = cap - sm;\n    for(auto it=extensions.begin(); it!=extensions.end();\
    \ ++it) {\n        if(std::toupper(*it) == class_name) {\n            strongest_extension\
    \ = class_name + \".\" + std::toupper(*it);\n            break;\n        }\n \
    \   }\n    if(extensions.size() > 1) {\n        for(auto it=extensions.begin();\
    \ it!=extensions.end(); ++it) {\n            if(std::toupper(*it) == class_name)\
    \ {\n                strongest_extension = class_name + \".\" + std::toupper(*it);\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpuez5qo.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpdpuez5qo.cpp:23:32:\
    \ error: no matching function for call to \u2018toupper(std::__cxx11::basic_string<char>&)\u2019\
    \n   23 |         cap += std::toupper(*it).size();\n      |                  \
    \              ^\nIn file included from /usr/include/c++/9/cctype:42,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n     \
    \            from /tmp/tmpdpuez5qo.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdpuez5qo.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdpuez5qo.cpp:23:32: note:   candidate expects 2 arguments,\
    \ 1 provided\n   23 |         cap += std::toupper(*it).size();\n      |      \
    \                          ^\n/tmp/tmpdpuez5qo.cpp:24:31: error: no matching function\
    \ for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\n   24 |\
    \         sm += std::tolower(*it).size();\n      |                           \
    \    ^\nIn file included from /usr/include/c++/9/"
  stdout: ''
  timestamp: 1660123444
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    \n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123444
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0)\
    \ == class_name[0]) {\n            cap = cap + 1;\n        }\n        if (extensions[i].at(1)\
    \ == class_name[1]) {\n            sm = sm + 1;\n        }\n    }\n    if (cap\
    \ - sm == 0) {\n        for (int i = 0; i < extensions.size(); i++) {\n      \
    \      if (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 1) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 2) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 3) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 4) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 5) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 6) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 7) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 8) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 9) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 10) {\n        for (int i = 0; i < extensions.size(); i++) {\n            if\
    \ (extensions[i].at(0) == class_name[0]) {\n                strongest_extension\
    \ = extensions[i];\n            }\n        }\n    }\n    else if (cap - sm ==\
    \ 11) {\n        for (int i = 0; i < \n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2usqi1hx.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp2usqi1hx.cpp:109:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  109 | }\n \
    \     | ^\n/tmp/tmp2usqi1hx.cpp:108:28: error: expected \u2018;\u2019 before \u2018\
    }\u2019 token\n  108 |         for (int i = 0; i <\n      |                  \
    \          ^\n      |                            ;\n  109 | }\n      | ~     \
    \                      \n/tmp/tmp2usqi1hx.cpp:109:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmp2usqi1hx.cpp:108:28:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  108 |         for\
    \ (int i = 0; i <\n      |             ~              ^\n      |             \
    \               )\n  109 | }\n      | ~                           \n/tmp/tmp2usqi1hx.cpp:109:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  109 | }\n \
    \     | ^\n/tmp/tmp2usqi1hx.cpp:110:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  110 | int main() {\n      |            ^\n\
    /tmp/tmp2usqi1hx.cpp:121:1: error: expected \u2018}\u2019 at end of input\n  121\
    \ | }\n      | ^\n/tmp/tmp2usqi1hx.cpp:17:94: note: to match this \u2018{\u2019\
    \n   17 | std::string Strongest_Extension(std::string class_name, std::vector<std::string>\
    \ extensions) {\n      |                                                     \
    \                                         ^\n/tmp/tmp2usqi1hx.cpp:121:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  121 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    double strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::min_element(extensions.begin(), extensions.end(), \n        [](const std::string\
    \ &a, const std::string &b) { return a.size() < b.size(); }));\n    strongest_extension\
    \ = class_name + extensions[index];\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpf_1t4prl: /tmp/tmpf_1t4prl.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.size() == strength) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp73iy1rty: /tmp/tmp73iy1rty.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        for (auto\
    \ &i : extensions) {\n            if (i[0]-'A' > cap) {\n                strongest_extension\
    \ = class_name + \".\" + i;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbqklyrfe: /tmp/tmpbqklyrfe.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  for (int i = 1; i < extensions.size(); i++) {\n        if (strength > 0) {\n\
    \            if (extensions[i].size() > strongest_extension.size()) {\n      \
    \          strongest_extension = class_name + \".\" + extensions[i];\n       \
    \     }\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpb_fc_dx7: /tmp/tmpb_fc_dx7.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        cap += (extensions[i].size()-1);\n\
    \        sm += (extensions[i].size()-1);\n    }\n    double strength = cap - sm;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(strength > 0){\n\
    \            if(extensions[i].size() > strongest_extension.size()){\n        \
    \        strongest_extension = extensions[i];\n            }\n        }\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0xyvaiaq: /tmp/tmp0xyvaiaq.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    std::string extension_strength\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n\
    \        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    extension_strength\
    \ = cap - sm;\n    if (extension_strength > 0) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    for (auto &i : extensions) {\n   \
    \     if (extension_strength == i[0]-'A' && extension_strength == i[1]-'a') {\n\
    \            strongest_extension = class_name + i;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcwt2u46g.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpcwt2u46g.cpp:28:28:\
    \ error: no match for \u2018operator>\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n  \
    \ 28 |     if (extension_strength > 0) {\n      |         ~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n      |         |                    |\n      |         |               \
    \     int\n      |         std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpcwt2u46g.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpcwt2u46g.cpp:28:30:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   28\
    \ |     if (extension_strength > 0) {\n      |                              ^\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpcwt2u46g.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpcwt2u46g.cpp:28:30: note:   mismatched types \u2018const"
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / 2;\n    sm = sm / 2;\n    if (cap - sm >\
    \ 0)\n        strongest_extension = class_name + \".\" + extensions[0];\n    else\
    \ if (sm - cap > 0)\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    else\n        strongest_extension = class_name + \".\" + extensions[2];\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpv7db1soo: /tmp/tmpv7db1soo.cpp:40: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions) {\n  \
    \      if(ext.size() == strength) {\n            strongest_extension = class_name\
    \ + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpb7mjl_ce: /tmp/tmpb7mjl_ce.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (int i = 0; i < extensions.size(); i++) {\n        cap += (extensions[i].size()\
    \ - 1);\n        sm += (extensions[i].size());\n    }\n    float strength = cap\
    \ - sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size(); i++) {\n\
    \        if (strength > 0) {\n            if (extensions[i].size() > strongest_extension.size())\
    \ {\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \            }\n        }\n        else {\n            if (extensions[i].size()\
    \ < strongest_extension.size()) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[i];\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp83y8ylcc: /tmp/tmp83y8ylcc.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    double strength = cap - sm;\n    for(auto &i : extensions) {\n   \
    \     if(i[0] == class_name[0] && i[1] == class_name[1]) {\n            if(i[0]-'A'\
    \ > i[1]-'a') {\n                strongest_extension = class_name + i;\n     \
    \       }\n        }\n    }\n    if(strength == -1) {\n        for(auto &i : extensions)\
    \ {\n            if(i[0] == class_name[0] && i[1] == class_name[1]) {\n      \
    \          if(i[0]-'A' < i[1]-'a') {\n                    strongest_extension\
    \ = class_name + i;\n                }\n            }\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpu_hvjtgc: /tmp/tmpu_hvjtgc.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for(auto &ext : extensions) {\n        if(ext.size() >\
    \ cap_counter) {\n            cap_counter = ext.size();\n        }\n        if(ext.size()\
    \ > sm_counter) {\n            sm_counter = ext.size();\n        }\n    }\n  \
    \  float strength = cap_counter - sm_counter;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.size() == cap_counter) {\n            if(ext.compare(class_name.substr(0,\
    \ ext.size())) == 0) {\n                strongest_extension = class_name + ext;\n\
    \            }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmptbrddcno: /tmp/tmptbrddcno.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ >= cap) {\n            cap = extensions[i].size();\n        }\n        if (extensions[i].size()\
    \ >= sm) {\n            sm = extensions[i].size();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      if (extensions[i].size() == cap) {\n            if (strength > 0) {\n \
    \               strongest_extension = class_name + \".\" + extensions[i];\n  \
    \              break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpuzod_t1u: /tmp/tmpuzod_t1u.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for(auto &ext : extensions){\n        if(ext.size() >= cap_counter){\n\
    \            cap_counter = ext.size();\n        }\n        if(ext.size() >= sm_counter){\n\
    \            sm_counter = ext.size();\n        }\n    }\n    float strength =\
    \ cap_counter - sm_counter;\n    for(auto &ext : extensions){\n        if(ext.size()\
    \ == cap_counter){\n            strongest_extension = class_name + ext;\n    \
    \    }\n        if(ext.size() == sm_counter){\n            strongest_extension\
    \ = strongest_extension + class_name + ext;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp3jd9e8oi: /tmp/tmp3jd9e8oi.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.length();\n        sm +=\
    \ ext.length()-1;\n    }\n    \n    double strength = cap - sm;\n    \n    for(auto\
    \ &ext : extensions){\n        if(ext.length() == strongest_extension.length()){\n\
    \            if(cap - ext.length() < sm){\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpjuin86hd: /tmp/tmpjuin86hd.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap_extension = class_name.size();\n\
    \    int sma_extension = class_name.size();\n    for(auto &extension : extensions){\n\
    \        if(extension.size()>cap_extension){\n            cap_extension = extension.size();\n\
    \        }\n        if(extension.size()>sma_extension){\n            sma_extension\
    \ = extension.size();\n        }\n    }\n    double strength = cap_extension -\
    \ sma_extension;\n    if(strength>0){\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength==0){\n        strongest_extension\
    \ = class_name;\n    }\n    else if(strength<0){\n        for(int i = 1; i<extensions.size();\
    \ i++){\n            if(extensions[i].size()>sma_extension){\n               \
    \ sma_extension = extensions[i].size();\n            }\n        }\n        double\
    \ strength = cap_extension - sma_extension;\n        if(strength>0){\n       \
    \     strongest_extension = class_name + \".\" + extensions[0];\n        }\n \
    \       else if(strength==0){\n            strongest_extension = class_name;\n\
    \        }\n        else if(strength<0){\n            strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpt1lv8hlq: /tmp/tmpt1lv8hlq.cpp:59: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for(int i=0;i<extensions.size();i++){\n       \
    \ cap = cap - extensions[i].size();\n        sm = sm - extensions[i].size();\n\
    \        if(cap==sm){\n            strongest_extension = class_name + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpepdom0dg: /tmp/tmpepdom0dg.cpp:33: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &extension : extensions){\n        cap += extension.size()-1;\n\
    \        sm += extension.size()-1;\n    }\n    double strength = cap - sm;\n \
    \   for(auto &extension : extensions){\n        if(extension.size()==cap){\n \
    \           strongest_extension = class_name + extension;\n            break;\n\
    \        }\n    }\n    if(strongest_extension.empty()){\n        for(auto &extension\
    \ : extensions){\n            if(extension.size()==sm){\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpntrxmw5q: /tmp/tmpntrxmw5q.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    std::string extension_str;\n    int\
    \ extension_strength;\n    int cap_strength;\n    int sm_strength;\n    int total_strength;\n\
    \    int total_cap_strength;\n    int total_sm_strength;\n    int total_extension_strength;\n\
    \    int total_extension_cap_strength;\n    int total_extension_sm_strength;\n\
    \    int total_extension_total_strength;\n    int total_extension_total_cap_strength;\n\
    \    int total_extension_total_sm_strength;\n    int total_extension_total_total_strength;\n\
    \    int total_extension_total_total_cap_strength;\n    int total_extension_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_strength;\n    int total_extension_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_sm_strength;\n    int total_extension_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_cap_strength;\n    int total_extension_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_strength;\n    int total_extension_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_sm_strength;\n    int total_extension_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_cap_strength;\n \
    \   int total_extension_total_total_total_total_total_total_sm_strength;\n   \
    \ int total_extension_total_total_total_total_total_total_total_strength;\n  \
    \  int total_extension_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_sm_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_strength;\n\
    \    int total_extension_total_total_total_total_total_total_total_total_total_cap_strength;\n\
    \    int total_extension_\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxmq98b4.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmphxmq98b4.cpp:53:9:\
    \ error: redeclaration of \u2018int total_extension_total_total_total_total_total_total_total_sm_strength\u2019\
    \n   53 |     int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphxmq98b4.cpp:50:9: note: \u2018int total_extension_total_total_total_total_total_total_total_sm_strength\u2019\
    \ previously declared here\n   50 |     int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphxmq98b4.cpp:55:9: error: redeclaration of \u2018int total_extension_total_total_total_total_total_total_total_total_cap_strength\u2019\
    \n   55 |     int total_extension_total_total_total_total_total_total_total_total_cap_strength;\n\
    \      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphxmq98b4.cpp:52:9: note: \u2018int total_extension_total_total_total_total_total_total_total_total_cap_strength\u2019\
    \ previously declared here\n   52 |     int total_extension_total_total_total_total_total_total_total_total_cap_strength;\n\
    \      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphxmq98b4.cpp:56:9: error: redeclaration of \u2018int total_extension_total_total_total_total_total_total_total_sm_strength\u2019\
    \n   56 |     int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphxmq98b4.cpp:50:9: note: \u2018int total_extension_total_total_total_total_total_total_total_sm_strength\u2019\
    \ previously declared here\n   50 |     int total_extension_total_total_total_total_total_total_total_sm_strength;\n\
    \      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphxmq98b4.cpp:57:9: "
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    double strongest_extension_strength;\n\
    \    for(auto extension : extensions) {\n        double extension_strength = std::count_if(extension.begin(),\
    \ extension.end(), \n            [](char c){ return std::toupper(c) - std::tolower(c);\
    \ }) / extension.size();\n        if(extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0ybnwh0g: /tmp/tmp0ybnwh0g.cpp:33: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap_counter++;\n        }\n        if(extensions[i].at(1)\
    \ == class_name[1]){\n            sm_counter++;\n        }\n    }\n    float strength\
    \ = cap_counter - sm_counter;\n    if(strength > 0){\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(strength < 0){\n \
    \       strongest_extension = class_name + \".\" + extensions[extensions.size()-1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmphen0ypam: /tmp/tmphen0ypam.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for(auto &extension: extensions) {\n        if(extension\
    \ == class_name) {\n            strongest_extension = class_name;\n        }\n\
    \        else if(extension.at(0) == class_name.at(0)) {\n            cap_counter++;\n\
    \        }\n        else {\n            sm_counter++;\n        }\n    }\n    \n\
    \    double strength = cap_counter - sm_counter;\n    \n    if(strength > 0) {\n\
    \        strongest_extension = class_name + extensions[0];\n    }\n    else if(strength\
    \ < 0) {\n        strongest_extension = class_name + extensions[extensions.size()-1];\n\
    \    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp1q7p0opf: /tmp/tmp1q7p0opf.cpp:48: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.length();\n        sm +=\
    \ ext.length()-1;\n    }\n    \n    float strength = cap - sm;\n    \n    for(auto\
    \ &ext : extensions){\n        if(ext.length() == strongest_extension.length()){\n\
    \            if(strength > ext.length()-1){\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmps9zph_qv: /tmp/tmps9zph_qv.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string extension_strength;\n\
    \    std::string extension_class;\n    std::string extension_class_name;\n   \
    \ std::string extension_class_name_with_extension;\n    std::string extension_class_name_with_extension_strength;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension;\n\
    \    std::string extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq8tf_q7o.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpq8tf_q7o.cpp:35:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   35 | }\n      | ^\n\
    /tmp/tmpq8tf_q7o.cpp:35:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660123444
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    \n    for(auto &extension : extensions){\n\
    \        auto cap = extension.find_first_of('A');\n        auto sm = extension.find_first_of('l');\n\
    \        auto strength = cap - sm;\n        if(strength > 0){\n            strongest_extension\
    \ = class_name + extension;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsbe766jx: /tmp/tmpsbe766jx.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string result;\n\
    \    std::string extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &e : extensions) {\n        cap += e.size();\n        sm += e.size();\n    }\n\
    \    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n    int\
    \ strength = cap - sm;\n    for (auto &e : extensions) {\n        if (e.size()\
    \ == extension.size()) {\n            if (e.compare(extension) == 0) {\n     \
    \           result = class_name + e;\n                break;\n            }\n\
    \        }\n    }\n    if (result.empty()) {\n        std::cout << \"No extensions\
    \ found\" << std::endl;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp5_t1urg6: /tmp/tmp5_t1urg6.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: 'No extensions found

    '
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap_counter += std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::toupper(c) == c;\n        });\n      \
    \  sm_counter += std::count_if(extension.begin(), extension.end(), [](char c)\
    \ {\n            return std::tolower(c) == c;\n        });\n    }\n    double\
    \ strength = cap_counter - sm_counter;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (size_t i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            double temp_strength = cap_counter\
    \ - sm_counter;\n            if (temp_strength > strength) {\n               \
    \ strongest_extension = class_name + \".\" + extensions[i];\n                strength\
    \ = temp_strength;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpblrd3_p_: /tmp/tmpblrd3_p_.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    \n    for (auto &extension : extensions)\
    \ {\n        extension_strength += extension.at(class_name.size() - extension.size())\
    \ / 2;\n    }\n    \n    return class_name + extension_strength;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 3)\n"
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    else {\n        for (auto &ext : extensions)\
    \ {\n            if (ext.size() == strength) {\n                strongest_extension\
    \ = class_name + ext;\n                break;\n            }\n        }\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp940id9or: /tmp/tmp940id9or.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    double strongest_extension_strength\
    \ = -1;\n    for (auto &extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('S');\n        auto strength = cap\
    \ - sm;\n        if (strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = strength;\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmo2yocb5: /tmp/tmpmo2yocb5.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    } else {\n        for (auto &ext\
    \ : extensions) {\n            if (ext.size() > strongest_extension.size()) {\n\
    \                strongest_extension = class_name + \".\" + ext;\n           \
    \ }\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp18m6sp69: /tmp/tmp18m6sp69.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() > cap) {\n       \
    \     cap = ext.size();\n        }\n        if (ext.size() < sm) {\n         \
    \   sm = ext.size();\n        }\n    }\n    float strength = cap - sm;\n    if\
    \ (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.size() == strongest_extension.size())\
    \ {\n            if (ext.compare(strongest_extension) == 0) {\n              \
    \  strongest_extension = class_name + \".\" + ext;\n            }\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp71px2x88: /tmp/tmp71px2x88.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n\
    \    int sm_counter = 0;\n    for(int i = 0; i < extensions.size(); i++){\n  \
    \      if(extensions[i].size() > cap_counter){\n            cap_counter = extensions[i].size();\n\
    \        }\n        if(extensions[i].size() > sm_counter){\n            sm_counter\
    \ = extensions[i].size();\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ == cap_counter){\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n        if(extensions[i].size() == sm_counter){\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp422t2wad: /tmp/tmp422t2wad.cpp:46: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string result;\n    for(auto &ext : extensions){\n        auto cap =\
    \ ext.find_first_of('A');\n        auto sm = ext.find_first_of('S');\n       \
    \ auto strength = cap - sm;\n        if(strength > 0){\n            result +=\
    \ class_name + \".\" + ext + \".\";\n        }\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += extensions[extensions.size()-1]\
    \ + \".\" + ext + \".\";\n        }\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += extensions[0] + \".\" + ext\
    \ + \".\";\n        }\n    }\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += class_name + \".\" + ext;\n\
    \        }\n    }\n    std::sort(extensions.begin(), extensions.end());\n    for(auto\
    \ &ext : extensions){\n        auto cap = ext.find_first_of('A');\n        auto\
    \ sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n        if(strength\
    \ > 0){\n            result += class_name + \".\" + ext;\n        }\n    }\n \
    \   std::sort(extensions.begin(), extensions.end());\n    for(auto &ext : extensions){\n\
    \        auto cap = ext.find_first_of('A');\n        auto sm = ext.find_first_of('S');\n\
    \        auto strength = cap - sm;\n        if(strength > 0){\n            result\
    \ += class_name + \".\" + ext;\n        }\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for(auto &ext : extensions){\n        auto cap = ext.find_first_of('A');\n\
    \        auto sm = ext.find_first_of('S');\n        auto strength = cap - sm;\n\
    \        if(strength > 0){\n            result += class_name + \".\" + ext;\n\
    \        }\n    }\n    std::sort(extensions.begin(), extensions.end());\n    for(auto\
    \ &ext : extensions){\n        auto \n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwfpa4rqt.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpwfpa4rqt.cpp:85:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   85 | }\n     \
    \ | ^\n/tmp/tmpwfpa4rqt.cpp:86:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   86 | int main() {\n      |            ^\n\
    /tmp/tmpwfpa4rqt.cpp:97:1: error: expected \u2018}\u2019 at end of input\n   97\
    \ | }\n      | ^\n/tmp/tmpwfpa4rqt.cpp:17:94: note: to match this \u2018{\u2019\
    \n   17 | std::string Strongest_Extension(std::string class_name, std::vector<std::string>\
    \ extensions) {\n      |                                                     \
    \                                         ^\n/tmp/tmpwfpa4rqt.cpp:97:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   97 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for (auto &ext : extensions) {\n \
    \       if (ext.size() == strength) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpaoecb_2w: /tmp/tmpaoecb_2w.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap_counter++;\n        }\n        else if(extensions[i].at(0)\
    \ != class_name[0]){\n            sm_counter++;\n        }\n    }\n    float strength\
    \ = cap_counter - sm_counter;\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(extensions[i].at(0) == class_name[0]){\n            cap_counter--;\n\
    \        }\n        else if(extensions[i].at(0) != class_name[0]){\n         \
    \   sm_counter--;\n        }\n    }\n    if(cap_counter == 0){\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(sm_counter == 0){\n\
    \        strongest_extension = class_name + \".\" + extensions[extensions.size()\
    \ - 1];\n    }\n    else if(strength > 0){\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0){\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmplswcpz69: /tmp/tmplswcpz69.cpp:55: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        cap += (extensions[i].size()\
    \ - 1);\n        sm += extensions[i].size();\n    }\n    float strength = cap\
    \ - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ == strongest_extension.size()) {\n            if (strength > 0) {\n        \
    \        strongest_extension = class_name + \".\" + extensions[i];\n         \
    \       break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpz2w1dp08: /tmp/tmpz2w1dp08.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    for(auto &i : extensions) {\n    \
    \    if(strength == i[0]-'A' && strength == i[1]-'a') {\n            strongest_extension\
    \ = class_name + \".\" + i;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp13bp4sjn: /tmp/tmp13bp4sjn.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123445
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.length() == strength) {\n            strongest_extension =\
    \ class_name + ext;\n        }\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp1eeo97o9: /tmp/tmp1eeo97o9.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        if(ext.length() > cap){\n         \
    \   cap = ext.length();\n        }\n        if(ext.length() < sm){\n         \
    \   sm = ext.length();\n        }\n    }\n    double strength = cap - sm;\n  \
    \  for(auto &ext : extensions){\n        if(ext.length() == cap){\n          \
    \  if(ext.compare(0, cap, class_name.cbegin(), class_name.cend(), 0, cap) == 0){\n\
    \                strongest_extension = class_name + ext;\n            }\n    \
    \    }\n        if(ext.length() == sm){\n            if(ext.compare(0, sm, class_name.cbegin(),\
    \ class_name.cend(), 0, sm) == 0){\n                strongest_extension = class_name\
    \ + ext;\n            }\n        }\n    }\n    return strongest_extension;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnzbdhcte.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpnzbdhcte.cpp:33:82:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(int,\
    \ int&, std::__cxx11::basic_string<char>::const_iterator, std::__cxx11::basic_string<char>::const_iterator,\
    \ int, int&)\u2019\n   33 |             if(ext.compare(0, cap, class_name.cbegin(),\
    \ class_name.cend(), 0, cap) == 0){\n      |                                 \
    \                                                 ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnzbdhcte.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note: candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 6 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argum"
  stdout: ''
  timestamp: 1660123446
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strongest_extension.size()) {\n            if (strength\
    \ > ext.size()) {\n                strongest_extension = ext;\n            }\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_0f0kka9: /tmp/tmp_0f0kka9.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(auto &ext : extensions){\n        cap += ext.length();\n  \
    \      sm += ext.length()-1;\n    }\n    float strength = cap - sm;\n    \n  \
    \  for(auto &ext : extensions){\n        if(ext.length() == strongest_extension.length()){\n\
    \            if(strength > ext.length()){\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmplm0uxyho: /tmp/tmplm0uxyho.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto e : extensions) {\n        cap += e.size();\n        sm += e.size();\n\
    \    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else if (sm - cap > 0)\n        strongest_extension = class_name + extensions[1];\n\
    \    else\n        strongest_extension = class_name + extensions[2];\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpp86nw0rj: /tmp/tmpp86nw0rj.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (auto ext : extensions) {\n        cap = cap\
    \ - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap > sm) {\n \
    \       strongest_extension = class_name + extensions[0];\n    } else {\n    \
    \    strongest_extension = class_name + extensions[extensions.size()-1];\n   \
    \ }\n    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpk2wxezz4: /tmp/tmpk2wxezz4.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto e : extensions){\n        cap += e.size();\n        sm += std::count(e.begin(),\
    \ e.end(), 'a');\n    }\n    float strength = cap - sm;\n    for(auto e : extensions){\n\
    \        if(e.size() == strongest_extension.size()){\n            strongest_extension\
    \ = e;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7um8t4az: /tmp/tmp7um8t4az.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for(auto &extension : extensions){\n        if(extension.at(0) ==\
    \ class_name.at(0)) cap_counter++;\n        if(extension.at(1) == class_name.at(0))\
    \ sm_counter++;\n    }\n    float strength = cap_counter - sm_counter;\n    if(strength\
    \ > 0){\n        strongest_extension = class_name + extensions[0];\n    }\n  \
    \  else if(strength == 0){\n        strongest_extension = class_name;\n    }\n\
    \    else if(strength < 0){\n        for(auto &extension : extensions){\n    \
    \        if(extension.at(0) == class_name.at(0)) cap_counter++;\n            if(extension.at(1)\
    \ == class_name.at(0)) sm_counter++;\n        }\n        float strength_2 = cap_counter\
    \ - sm_counter;\n        if(strength_2 > 0){\n            strongest_extension\
    \ = class_name + extensions[0];\n        }\n        else if(strength_2 == 0){\n\
    \            strongest_extension = class_name;\n        }\n        else if(strength_2\
    \ < 0){\n            strongest_extension = class_name + extensions[1];\n     \
    \   }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp6171y0t0: /tmp/tmp6171y0t0.cpp:53: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (int i = 0; i < extensions.size(); i++) {\n\
    \        cap = cap - extensions[i].size();\n        sm = sm - extensions[i].size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > extensions[i].size()) {\n            strongest_extension\
    \ = class_name + extensions[i];\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp5jt2n0xr: /tmp/tmp5jt2n0xr.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    std::string extension_str;\n \
    \   \n    for(int i = 0; i < extensions.size(); i++){\n        for(int j = 0;\
    \ j < extensions[i].size(); j++){\n            if(extensions[i][j] == class_name[j]){\n\
    \                extension_strength += extensions[i][j];\n            }\n    \
    \    }\n    }\n    \n    extension_strength = extension_strength.substr(0, extension_strength.size()\
    \ - 1);\n    \n    for(int i = 0; i < extensions.size(); i++){\n        for(int\
    \ j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j] == extension_strength[j]){\n\
    \                extension_str += extensions[i][j];\n            }\n        }\n\
    \    }\n    \n    return class_name + \".\" + extension_str;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4ga7hvt7: /tmp/tmp4ga7hvt7.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &extension : extensions) {\n        cap += (extension.size()-1);\n\
    \        sm += (extension.size()-1);\n    }\n    float strength = cap - sm;\n\
    \    for (auto &extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            float extension_strength = extension.find(class_name)-extension.find(class_name.substr(0,1));\n\
    \            if (strength > extension_strength) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpa_l4hw5m: /tmp/tmpa_l4hw5m.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = class_name;\n    \n    for(auto &extension\
    \ : extensions) {\n        auto cap = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::isupper(c);\n        });\n        auto\
    \ sm = std::count_if(extension.begin(), extension.end(), [](char c) {\n      \
    \      return std::islower(c);\n        });\n        auto strength = cap - sm;\n\
    \        if(strength > 0) {\n            strongest_extension += \".\" + extension;\n\
    \        }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n  \
    \  auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"),\
    \ (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpwemb0111: /tmp/tmpwemb0111.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    cap = cap / 2;\n    sm = sm / 2;\n    if (cap -\
    \ sm > 0)\n        strongest_extension = class_name + extensions[0];\n    else\
    \ if (cap - sm == 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else\n        strongest_extension = class_name + extensions[1];\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpj0k24nmj: /tmp/tmpj0k24nmj.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    for(auto it=extensions.begin(); it!=extensions.end();\
    \ ++it){\n        auto it1=std::find(class_name.begin(), class_name.end(), *it);\n\
    \        if(it1!=class_name.end()){\n            auto it2=std::find(it1, class_name.end(),\
    \ *it);\n            if(it2!=class_name.end()){\n                auto it3=std::find(it2,\
    \ class_name.end(), *it);\n                if(it3!=class_name.end()){\n      \
    \              auto it4=std::find(it3, class_name.end(), *it);\n             \
    \       if(it4!=class_name.end()){\n                        auto it5=std::find(it4,\
    \ class_name.end(), *it);\n                        if(it5!=class_name.end()){\n\
    \                            auto it6=std::find(it5, class_name.end(), *it);\n\
    \                            if(it6!=class_name.end()){\n                    \
    \            auto it7=std::find(it6, class_name.end(), *it);\n               \
    \                 if(it7!=class_name.end()){\n                               \
    \     auto it8=std::find(it7, class_name.end(), *it);\n                      \
    \              if(it8!=class_name.end()){\n                                  \
    \      auto it9=std::find(it8, class_name.end(), *it);\n                     \
    \                   if(it9!=class_name.end()){\n                             \
    \               auto it10=std::find(it9, class_name.end(), *it);\n           \
    \                                 if(it10!=class_name.end()){\n              \
    \                                  auto it11=std::find(it10, class_name.end(),\
    \ *it);\n                                                if(it11!=class_name.end()){\n\
    \                                                    auto it12=std::find(it11,\
    \ class_name.end(), *it);\n                                                  \
    \  if(it12!=class_name.end()){\n                                             \
    \           auto it13=std::find(it12, class_name.end(), *it);\n              \
    \                                          if(it13!=class_name.end()){\n     \
    \                                                       auto it14=std::find(it13,\
    \ class_name.end(), *it);\n                                                  \
    \          if(it14!=class_name.end()){\n                                     \
    \                           auto it15=std::find(it14, class_name.end(), *it);\n\
    \                                                                if(it15!=class_name.end()){\n\
    \                                                                    auto it16=std::find(it15,\
    \ class_name.end(), *it);\n                                                  \
    \                  if(it16!=class_name.end()){\n                             \
    \                                           auto it17=std::find(it16, class_name.end(),\
    \ *it);\n                                                                    \
    \    if(it17!=class_name.end()){\n                                           \
    \                                 auto it18=std::\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27trk0ob.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp27trk0ob.cpp:56:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   56 | }\n     \
    \ | ^\n/tmp/tmp27trk0ob.cpp:56:1: error: expected \u2018,\u2019 or \u2018;\u2019\
    \ before \u2018}\u2019 token\n/tmp/tmp27trk0ob.cpp:57:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   57 | int main() {\n     \
    \ |            ^\n/tmp/tmp27trk0ob.cpp:68:1: error: expected \u2018}\u2019 at\
    \ end of input\n   68 | }\n      | ^\n/tmp/tmp27trk0ob.cpp:52:95: note: to match\
    \ this \u2018{\u2019\n   52 |                                                \
    \                     if(it16!=class_name.end()){\n      |                   \
    \                                                                            ^\n\
    /tmp/tmp27trk0ob.cpp:68:1: error: expected \u2018}\u2019 at end of input\n   68\
    \ | }\n      | ^\n/tmp/tmp27trk0ob.cpp:50:91: note: to match this \u2018{\u2019\
    \n   50 |                                                                 if(it15!=class_name.end()){\n\
    \      |                                                                     \
    \                      ^\n/tmp/tmp27trk0ob.cpp:68:1: error: expected \u2018}\u2019\
    \ at end of input\n   68 | }\n      | ^\n/tmp/tmp27trk0ob.cpp:48:87: note: to\
    \ match this \u2018{\u2019\n   48 |                                          \
    \                   if(it14!=class_name.end()){\n      |                     \
    \                                                                  ^\n/tmp/tmp27trk0ob.cpp:68:1:\
    \ error: expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmp27trk0ob.cpp:46:83:\
    \ note: to match this \u2018{\u2019\n   46 |                                 \
    \                        if(it13!=class_name.end()){\n      |                \
    \                                                                   ^\n/tmp/tmp27trk0ob.cpp:68:1:\
    \ error: expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmp27trk0ob.cpp:44:79:\
    \ note: to match this \u2018{\u2019\n   44 |                                 \
    \                    if(it12!=class_name.end()){\n     "
  stdout: ''
  timestamp: 1660123447
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    std::string extension_strength\
    \ = \"\";\n    int cap_extension = 0;\n    int sm_extension = 0;\n    int strength\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        cap_extension\
    \ = class_name[cap_extension].size();\n        sm_extension = class_name[sm_extension].size();\n\
    \        extension_strength = cap_extension - sm_extension;\n        strength\
    \ = extension_strength;\n        if (strength > 0) {\n            strongest_extension\
    \ = class_name + extensions[i];\n            break;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaicxrvig.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpaicxrvig.cpp:25:51:\
    \ error: request for member \u2018size\u2019 in \u2018class_name.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)cap_extension))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   25 |         cap_extension\
    \ = class_name[cap_extension].size();\n      |                               \
    \                    ^~~~\n/tmp/tmpaicxrvig.cpp:26:49: error: request for member\
    \ \u2018size\u2019 in \u2018class_name.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)sm_extension))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   26 |         sm_extension\
    \ = class_name[sm_extension].size();\n      |                                \
    \                 ^~~~\n/tmp/tmpaicxrvig.cpp:28:20: error: cannot convert \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018\
    int\u2019 in assignment\n   28 |         strength = extension_strength;\n    \
    \  |                    ^~~~~~~~~~~~~~~~~~\n      |                    |\n   \
    \   |                    std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension: extensions)\
    \ {\n        cap_counter += std::count(extension.begin(), extension.end(), std::toupper(extension[0]));\n\
    \        sm_counter += std::count(extension.begin(), extension.end(), std::tolower(extension[0]));\n\
    \    }\n    float strength = cap_counter - sm_counter;\n    for(auto &extension:\
    \ extensions) {\n        if(std::count(extension.begin(), extension.end(), std::toupper(extension[0]))\
    \ > cap_counter) {\n            strongest_extension = class_name + extension;\n\
    \            break;\n        }\n    }\n    if(strongest_extension.empty()) {\n\
    \        for(auto &extension: extensions) {\n            if(std::count(extension.begin(),\
    \ extension.end(), std::tolower(extension[0])) > sm_counter) {\n             \
    \   strongest_extension = class_name + extension;\n                break;\n  \
    \          }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp2ezpgcv0: /tmp/tmp2ezpgcv0.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = 0;\n    \n    for (auto &extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('z');\n        \n        if (cap !=\
    \ std::string::npos && sm != std::string::npos) {\n            int cap_strength\
    \ = cap - sm;\n            \n            if (strongest_extension_strength < cap_strength)\
    \ {\n                strongest_extension_strength = cap_strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n    }\n   \
    \ \n    return class_name + \".\" + strongest_extension;\n}\nint main() {\n  \
    \  auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"),\
    \ (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpe2bpg_co: /tmp/tmpe2bpg_co.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap\
    \ - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap < sm) {\n \
    \       strongest_extension = class_name;\n    } else {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp3f6_dpqr: /tmp/tmp3f6_dpqr.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strength) {\n            strongest_extension =\
    \ class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp3h486bhf: /tmp/tmp3h486bhf.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ >= cap){\n            cap = extensions[i].size();\n        }\n        if(extensions[i].size()\
    \ >= sm){\n            sm = extensions[i].size();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for(int i = 0; i < extensions.size(); i++){\n    \
    \    if(extensions[i].size() == cap){\n            strongest_extension += class_name\
    \ + \".\" + extensions[i];\n        }\n        if(extensions[i].size() == sm){\n\
    \            strongest_extension += \".\" + extensions[i];\n        }\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpwqknq2m5: /tmp/tmpwqknq2m5.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.length() == strongest_extension.length()) {\n\
    \            if (ext.length() < strongest_extension.length()) {\n            \
    \    strongest_extension = ext;\n            }\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpwymtktm7: /tmp/tmpwymtktm7.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_extension = class_name.size();\n\
    \    int sml_extension = class_name.size();\n    for(auto ext : extensions) {\n\
    \        cap_extension = std::max(cap_extension, ext.size());\n        sml_extension\
    \ = std::max(sml_extension, ext.size());\n    }\n    int strength = cap_extension\
    \ - sml_extension;\n    for(auto ext : extensions) {\n        strength = std::max(strength,\
    \ ext.size());\n    }\n    strongest_extension = class_name + extensions[0];\n\
    \    for(auto ext : extensions) {\n        if(strength == ext.size()) {\n    \
    \        strongest_extension = class_name + ext;\n            break;\n       \
    \ }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39shg9df.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp39shg9df.cpp:23:59:\
    \ error: no matching function for call to \u2018max(int&, std::__cxx11::basic_string<char>::size_type)\u2019\
    \n   23 |         cap_extension = std::max(cap_extension, ext.size());\n     \
    \ |                                                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp39shg9df.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39shg9df.cpp:23:59: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   23 |         cap_extension = std::max(cap_extension,\
    \ ext.size());\n      |                                                      \
    \     ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n       \
    \          from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp39shg9df.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp39shg9df.cpp:23:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019})\n  "
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sml_counter\
    \ = 0;\n    for(auto &extension : extensions) {\n        if(extension.at(0) ==\
    \ class_name.at(0)) {\n            cap_counter++;\n        }\n        if(extension.at(1)\
    \ == class_name.at(0)) {\n            sml_counter++;\n        }\n    }\n    float\
    \ strength = cap_counter - sml_counter;\n    if(strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[extensions.size()-1];\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpetyid8x3: /tmp/tmpetyid8x3.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions){\n\
    \        if(ext.length() == strongest_extension.length()){\n            if(strength\
    \ > ext.length()){\n                strongest_extension = ext;\n            }\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_noc63hx: /tmp/tmp_noc63hx.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    double strongest_extension_strength = 0;\n    double cap_extension_strength\
    \ = 0;\n    double sm_extension_strength = 0;\n    double extension_strength =\
    \ 0;\n    double total_extension_strength = 0;\n    double total_extension_strength_percentage\
    \ = 0;\n    double total_extension_percentage = 0;\n    double total_percentage\
    \ = 0;\n    double total_percentage_percentage = 0;\n    double total_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage = 0;\n  \
    \  double total_percentage_percentage_percentage_percentage_percentage = 0;\n\
    \    double total_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n    double total_percentage_percentage_percentage_percentage_percentage_percentage\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5d2rm8e.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpy5d2rm8e.cpp:38:12:\
    \ error: redeclaration of \u2018double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\u2019\
    \n   38 |     double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy5d2rm8e.cpp:37:12: note: \u2018double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\u2019\
    \ previously declared here\n   37 |     double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy5d2rm8e.cpp:41:12: error: redeclaration of \u2018double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\u2019\
    \n   41 |     double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\
    \ = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy5d2rm8e.cpp:40:12: note: \u2018double total_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage\u2019\
    \ previously declared here\n   40 |     double total_percentage_percent"
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string extension_strength;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto &ext : extensions) {\n        if (ext.length() > cap_counter)\
    \ {\n            cap_counter = ext.length();\n        }\n        if (ext.length()\
    \ > sm_counter) {\n            sm_counter = ext.length();\n        }\n    }\n\
    \    float strength = cap_counter - sm_counter;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == cap_counter) {\n            if (ext.compare(extension_strength)\
    \ == 0) {\n                extension_strength = class_name + \".\" + ext;\n  \
    \          }\n        }\n    }\n    return extension_strength;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpj07md_7b: /tmp/tmpj07md_7b.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_str;\n    int max_strength = -1;\n    for(auto\
    \ &ext : extensions) {\n        int strength = ext.length();\n        if(strength\
    \ > max_strength) {\n            max_strength = strength;\n            extension_str\
    \ = ext;\n        }\n    }\n    return class_name + extension_str;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7fugfltl: /tmp/tmp7fugfltl.cpp:33: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength >\
    \ 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    for (auto &ext : extensions) {\n        if (ext.length() > strongest_extension.length())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_wbkn0k1: /tmp/tmp_wbkn0k1.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123441
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            char c = extension[j];\n   \
    \         \n            if(c == 'S' || c == 's'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'C' || c == 'c'){\n\
    \                extension_strength += c;\n            }\n            \n     \
    \       if(c == 'E' || c == 'e'){\n                extension_strength += c;\n\
    \            }\n            \n            if(c == 'T' || c == 't'){\n        \
    \        extension_strength += c;\n            }\n            \n            if(c\
    \ == 'I' || c == 'i'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'G' || c == 'g'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'N' || c == 'n'){\n\
    \                extension_strength += c;\n            }\n            \n     \
    \       if(c == 'G' || c == 'g'){\n                extension_strength += c;\n\
    \            }\n            \n            if(c == 'R' || c == 'r'){\n        \
    \        extension_strength += c;\n            }\n            \n            if(c\
    \ == 'I' || c == 'i'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'S' || c == 's'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'L' || c == 'l'){\n\
    \                extension_strength += c;\n            }\n            \n     \
    \       if(c == 'E' || c == 'e'){\n                extension_strength += c;\n\
    \            }\n            \n            if(c == 'D' || c == 'd'){\n        \
    \        extension_strength += c;\n            }\n            \n            if(c\
    \ == 'A' || c == 'a'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'E' || c == 'e'){\n                extension_strength\
    \ += c;\n            }\n            \n            if(c == 'S' || c == 's'){\n\
    \                extension_strength += c;\n            }\n            \n     \
    \       if(c == 'I' || c == 'i'){\n                extension_strength += c;\n\
    \            }\n            \n            if(c == 'T' || c == 't'){\n        \
    \        extension_strength += c;\n            }\n            \n            if(c\
    \ == 'E' || c == 'e'){\n                extension_strength += c;\n           \
    \ }\n            \n            if(c == 'E' || c\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2q892bd8.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp2q892bd8.cpp:108:29:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  108 |          \
    \   if(c == 'E' || c\n      |               ~             ^\n      |         \
    \                    )\n  109 | }\n      | ~                            \n/tmp/tmp2q892bd8.cpp:109:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  109 | }\n \
    \     | ^\n/tmp/tmp2q892bd8.cpp:110:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  110 | int main() {\n      |            ^\n\
    /tmp/tmp2q892bd8.cpp:121:1: error: expected \u2018}\u2019 at end of input\n  121\
    \ | }\n      | ^\n/tmp/tmp2q892bd8.cpp:22:47: note: to match this \u2018{\u2019\
    \n   22 |     for(int i = 0; i < extensions.size(); i++){\n      |           \
    \                                    ^\n/tmp/tmp2q892bd8.cpp:121:1: error: expected\
    \ \u2018}\u2019 at end of input\n  121 | }\n      | ^\n/tmp/tmp2q892bd8.cpp:17:94:\
    \ note: to match this \u2018{\u2019\n   17 | std::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n      |                \
    \                                                                            \
    \  ^\n/tmp/tmp2q892bd8.cpp:121:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  121 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_counter += ext.size();\n\
    \        sm_counter += ext.size();\n    }\n    double strength = cap_counter -\
    \ sm_counter;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n      \
    \  if (ext.size() == strength) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp8e3fxbwj: /tmp/tmp8e3fxbwj.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        cap += (extensions[i].size()\
    \ - extensions[i].find_first_of('a') - 1);\n        sm += (extensions[i].size()\
    \ - extensions[i].find_first_of('a') + 1);\n    }\n    float strength = cap -\
    \ sm;\n    for(int i = 0; i < extensions.size(); i++){\n        if(strength >\
    \ 0){\n            if(strongest_extension == \"\"){\n                strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            }else{\n                if(strongest_extension.find(class_name\
    \ + \".\" + extensions[i]) == std::string::npos){\n                    strongest_extension\
    \ = strongest_extension + \".\" + class_name + \".\" + extensions[i];\n      \
    \          }\n            }\n        }\n        strength -= (extensions[i].size()\
    \ - extensions[i].find_first_of('a') - 1);\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmphyzuu05f: /tmp/tmphyzuu05f.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n\
    \    int sml_counter = 0;\n    \n    for (auto &ext : extensions) {\n        cap_counter\
    \ += ext.length();\n        sml_counter += ext.length() - 1;\n    }\n    \n  \
    \  float strength = cap_counter - sml_counter;\n    \n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  \n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.length() > strongest_extension.length()) {\n        \
    \        strongest_extension = class_name + \".\" + ext;\n            }\n    \
    \    }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqe0mgqkp: /tmp/tmpqe0mgqkp.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    double strength = cap - sm;\n    for(auto &ext : extensions){\n\
    \        if(ext.length() == strength){\n            strongest_extension = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpb66tj1k5: /tmp/tmpb66tj1k5.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength >\
    \ 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.compare(strongest_extension) == 0) {\n              \
    \  strongest_extension = class_name + \".\" + ext;\n            }\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmphc6maccb: /tmp/tmphc6maccb.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].length()\
    \ > cap){\n            cap = extensions[i].length();\n        }\n        if(extensions[i].length()\
    \ < sm){\n            sm = extensions[i].length();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for(int i = 0; i < extensions.size(); i++){\n    \
    \    if(extensions[i].length() == cap){\n            strongest_extension += class_name\
    \ + \".\" + extensions[i] + \".\";\n        }\n        if(extensions[i].length()\
    \ == sm){\n            strongest_extension += class_name + \".\" + extensions[i]\
    \ + \".\";\n        }\n    }\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(extensions[i].length() > cap){\n            strongest_extension +=\
    \ class_name + \".\" + extensions[i] + \".\";\n        }\n        if(extensions[i].length()\
    \ < sm){\n            strongest_extension += class_name + \".\" + extensions[i]\
    \ + \".\";\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpzk0185l_: /tmp/tmpzk0185l_.cpp:51: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    \n    for(auto &extension : extensions){\n\
    \        extension_strength += extension.substr(0, extension.find_first_of('c'))\
    \ - extension.substr(0, extension.find_first_of('s'));\n    }\n    \n    extension_strength\
    \ = extension_strength.substr(0, extension_strength.find_first_of('.'));\n   \
    \ \n    std::string class_name_with_extension = class_name + extension_strength;\n\
    \    \n    return class_name_with_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcgfvqeer.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpcgfvqeer.cpp:23:81:\
    \ error: no match for \u2018operator-\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019)\n   23 |         extension_strength\
    \ += extension.substr(0, extension.find_first_of('c')) - extension.substr(0, extension.find_first_of('s'));\n\
    \      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |               \
    \                                |                                           \
    \        |\n      |                                               basic_string<[...]>\
    \                                 basic_string<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcgfvqeer.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcgfvqeer.cpp:23:131:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   23 |         extension_strength\
    \ += extension.substr(0, extension.find_first_of('c')) - extension.substr(0, extension.find_first_of('s'));\n\
    \      |                                                                     \
    \                                                              ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n"
  stdout: ''
  timestamp: 1660123447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions){\n   \
    \     if(ext.size() == strength){\n            strongest_extension = class_name\
    \ + ext;\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmptu2j8ytc: /tmp/tmptu2j8ytc.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    \n    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ == cap){\n            cap++;\n        }\n        else if(extensions[i].size()\
    \ == sm){\n            sm++;\n        }\n        else{\n            cap = 0;\n\
    \            sm = 0;\n        }\n    }\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i].size() == cap){\n            strongest_extension\
    \ += class_name + extensions[i];\n        }\n        else if(extensions[i].size()\
    \ == sm){\n            strongest_extension += class_name + extensions[i];\n  \
    \      }\n        else{\n            strongest_extension += class_name + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpj4cxce4p: /tmp/tmpj4cxce4p.cpp:51: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = class_name;\n    int cap = 0;\n \
    \   int sm = 0;\n    for(auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    \n    int strength = cap - sm;\n    \n\
    \    if(strength > 0) {\n        for(auto &ext : extensions) {\n            if(ext.size()\
    \ == strength) {\n                strongest_extension = class_name + ext;\n  \
    \              break;\n            }\n        }\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_ir4s2or: /tmp/tmp_ir4s2or.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strongest_extension.size()) {\n            if (strength\
    \ > ext.size()) {\n                strongest_extension = ext;\n            }\n\
    \        }\n    }\n    return class_name + strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp1pv7pzde: /tmp/tmp1pv7pzde.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    int strength = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        cap = extensions[i].size();\n        sm = extensions[i].size();\n\
    \        strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            break;\n        }\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7nompkjs: /tmp/tmp7nompkjs.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    if (strength > 0)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        std::sort(extensions.begin(), extensions.end());\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0xuh119u: /tmp/tmp0xuh119u.cpp:39: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap_counter = 0;\n    int\
    \ sml_counter = 0;\n    for(auto &extension : extensions) {\n        cap_counter\
    \ += std::toupper(extension[0]) - std::toupper(extension[1]);\n        sml_counter\
    \ += std::tolower(extension[0]) - std::tolower(extension[1]);\n    }\n    \n \
    \   double strength = cap_counter - sml_counter;\n    \n    if(strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else if(strength < 0) {\n        for(auto &extension : extensions) {\n    \
    \        if(strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \ }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpyts7ofc7: /tmp/tmpyts7ofc7.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strength) {\n            strongest_extension =\
    \ class_name + \".\" + ext;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmn5m16uh: /tmp/tmpmn5m16uh.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[cap\
    \ - sm];\n    else\n        strongest_extension = class_name;\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpp1wxmkfu: /tmp/tmpp1wxmkfu.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.length() == strength) {\n            strongest_extension\
    \ = class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_6_bj8ld: /tmp/tmp_6_bj8ld.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123448
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto it=extensions.begin();it!=extensions.end();it++){\n        cap += std::toupper(*it).size();\n\
    \        sm += std::tolower(*it).size();\n    }\n    float strength = cap - sm;\n\
    \    for(auto it=extensions.begin();it!=extensions.end();it++){\n        if(std::toupper(*it)\
    \ == class_name){\n            strongest_extension = class_name + std::toupper(*it);\n\
    \            break;\n        }\n    }\n    if(extensions.size() > 1){\n      \
    \  for(auto it=extensions.begin();it!=extensions.end();it++){\n            if(std::toupper(*it)\
    \ == strongest_extension){\n                strongest_extension = class_name +\
    \ std::toupper(*it);\n                break;\n            }\n        }\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5w36mlv.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpk5w36mlv.cpp:23:32:\
    \ error: no matching function for call to \u2018toupper(std::__cxx11::basic_string<char>&)\u2019\
    \n   23 |         cap += std::toupper(*it).size();\n      |                  \
    \              ^\nIn file included from /usr/include/c++/9/cctype:42,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n     \
    \            from /tmp/tmpk5w36mlv.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk5w36mlv.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpk5w36mlv.cpp:23:32: note:   candidate expects 2 arguments,\
    \ 1 provided\n   23 |         cap += std::toupper(*it).size();\n      |      \
    \                          ^\n/tmp/tmpk5w36mlv.cpp:24:31: error: no matching function\
    \ for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\n   24 |\
    \         sm += std::tolower(*it).size();\n      |                           \
    \    ^\nIn file included from /usr/include/c++/9/"
  stdout: ''
  timestamp: 1660123448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        if(ext.size() > cap) {\n         \
    \   cap = ext.size();\n        }\n        if(ext.size() < sm) {\n            sm\
    \ = ext.size();\n        }\n    }\n    double strength = cap - sm;\n    if(strength\
    \ > 0) {\n        for(auto &ext : extensions) {\n            if(ext.size() ==\
    \ strength) {\n                strongest_extension = class_name + \".\" + ext;\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpxyw80piq: /tmp/tmpxyw80piq.cpp:45: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    \n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123444
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    \n    for (auto &i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    \n    float strength = cap - sm;\n    \n\
    \    if (strength > 0) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    \n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + extensions[i];\n    \
    \        break;\n        }\n        \n        strength = cap - sm;\n    }\n  \
    \  \n    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp900c4d1s: /tmp/tmp900c4d1s.cpp:48: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    std::string extension_str;\n \
    \   \n    int cap_num = 0, sm_num = 0;\n    \n    for (auto &ext : extensions)\
    \ {\n        cap_num += ext.length();\n        sm_num += ext.length() - cap_num;\n\
    \    }\n    \n    extension_strength = class_name + \".\";\n    \n    for (int\
    \ i = 0; i < cap_num; i++) {\n        extension_strength += extensions[i];\n \
    \   }\n    \n    for (int i = 0; i < sm_num; i++) {\n        extension_strength\
    \ += extensions[i].substr(0, 1);\n    }\n    \n    return extension_strength;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  basic_string::_M_create\n"
  stdout: ''
  timestamp: 1660123449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &i : extensions)\
    \ {\n        if (i[0] == i[1]) {\n            continue;\n        }\n        if\
    \ (strength > 0) {\n            if (i[0] < i[1]) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[0];\n                break;\n            }\n\
    \        }\n        if (i[0] > i[1]) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[1];\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpol6_z_4c: /tmp/tmpol6_z_4c.cpp:49: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &extension : extensions) {\n        cap += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sm += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp40dygzw9: /tmp/tmp40dygzw9.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    if (strength > 0)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        for (auto &ext : extensions) {\n            if (ext.length()\
    \ < strongest_extension.length()) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp5lswk_r_: /tmp/tmp5lswk_r_.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    double strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strength) {\n            strongest_extension =\
    \ class_name + ext;\n        }\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpcee_ahv4: /tmp/tmpcee_ahv4.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ > 0) {\n            cap += (extensions[i].at(0) >= 'A' && extensions[i].at(0)\
    \ <= 'Z') ? 1 : 0;\n            sm += (extensions[i].at(0) >= 'a' && extensions[i].at(0)\
    \ <= 'z') ? 1 : 0;\n        }\n    }\n    float strength = cap - sm;\n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ > 0) {\n            if (extensions[i].at(0) >= 'A' && extensions[i].at(0) <=\
    \ 'Z') {\n                if (strength > 0) {\n                    strongest_extension\
    \ += class_name + \".\" + extensions[i];\n                    strength = 0;\n\
    \                }\n            }\n            if (extensions[i].at(0) >= 'a'\
    \ && extensions[i].at(0) <= 'z') {\n                if (strength > 0) {\n    \
    \                strongest_extension += class_name + \".\" + extensions[i];\n\
    \                    strength = 0;\n                }\n            }\n       \
    \ }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpv7qzr63n: /tmp/tmpv7qzr63n.cpp:49: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ > cap) {\n            cap = extensions[i].size();\n        }\n        if (extensions[i].size()\
    \ < sm) {\n            sm = extensions[i].size();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      if (extensions[i].size() == cap) {\n            if (strongest_extension\
    \ == \"\") {\n                strongest_extension = class_name + \".\" + extensions[i];\n\
    \            } else {\n                strongest_extension = strongest_extension\
    \ + \".\" + extensions[i];\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpy95r90h5: /tmp/tmpy95r90h5.cpp:46: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap_counter += extension.find_first_of('A');\n    \
    \    sml_counter += extension.find_first_of('z');\n    }\n    if (cap_counter\
    \ > sml_counter) {\n        strongest_extension = class_name + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + extensions[extensions.size()\
    \ - 1];\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbvt21zf7: /tmp/tmpbvt21zf7.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &i : extensions)\
    \ {\n        if (i[0]-'A' > strongest_extension[0]-'A') {\n            strongest_extension\
    \ = class_name + \".\" + i;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmppsajrzy7: /tmp/tmppsajrzy7.cpp:41: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for (auto &ext : extensions) {\n \
    \       if (ext.size() == strongest_extension.size()) {\n            if (strength\
    \ > ext.size()) {\n                strongest_extension = ext;\n            }\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp5ojznhgq: /tmp/tmp5ojznhgq.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    cap = cap\
    \ / extensions.size();\n    sm = sm / extensions.size();\n    if (cap - sm > 0)\
    \ strongest_extension = class_name + \".\" + extensions[0];\n    else if (sm -\
    \ cap > 0) strongest_extension = class_name + \".\" + extensions[1];\n    else\
    \ strongest_extension = class_name + \".\" + extensions[2];\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpc9r_7vnf: /tmp/tmpc9r_7vnf.cpp:36: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > cap_counter) {\n            cap_counter = ext.length();\n\
    \        }\n        if (ext.length() > sml_counter) {\n            sml_counter\
    \ = ext.length();\n        }\n    }\n    double strength = cap_counter - sml_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() == cap_counter)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpdilv7spp: /tmp/tmpdilv7spp.cpp:44: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(auto &ext : extensions) {\n        cap += ext.size();\n   \
    \     sm += ext.size();\n    }\n    \n    float strength = cap - sm;\n    \n \
    \   for(auto &ext : extensions) {\n        if(ext.size() == strongest_extension.size())\
    \ {\n            strongest_extension = ext;\n        }\n    }\n    \n    return\
    \ class_name + \".\" + strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmptcsvvitf: /tmp/tmptcsvvitf.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto &ext : extensions){\n        if(ext.size() > cap){\n            cap\
    \ = ext.size();\n        }\n        if(ext.size() < sm){\n            sm = ext.size();\n\
    \        }\n    }\n    double strength = cap - sm;\n    for(auto &ext : extensions){\n\
    \        if(ext.size() == cap){\n            if(strength > 0){\n             \
    \   strongest_extension = class_name + ext.substr(0,cap);\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpf2oitryh: /tmp/tmpf2oitryh.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    \n    for(auto &extension : extensions){\n\
    \        int cap = std::count_if(extension.begin(), extension.end(), [](char ch){return\
    \ std::toupper(ch) == ch;});\n        int sm = std::count_if(extension.begin(),\
    \ extension.end(), [](char ch){return std::tolower(ch) == ch;});\n        float\
    \ strength = (float)cap - sm;\n        if(strength > 0){\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpauock1py: /tmp/tmpauock1py.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions){\n        cap += ext.length();\n        sm +=\
    \ ext.length()-1;\n    }\n    float strength = cap - sm;\n    for(auto &ext :\
    \ extensions){\n        if(ext.length() == cap){\n            strongest_extension\
    \ = class_name + ext;\n        }\n        if(ext.length() == sm){\n          \
    \  strongest_extension = class_name + ext.substr(0,1);\n        }\n    }\n   \
    \ return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpcns_2bw6: /tmp/tmpcns_2bw6.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength == 0) {\n        return\
    \ class_name;\n    }\n    for (auto &ext : extensions) {\n        if (ext.size()\
    \ == strength) {\n            strongest_extension = class_name + ext;\n      \
    \      break;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpfvel524w: /tmp/tmpfvel524w.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    float\
    \ strength = cap_counter - sm_counter;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    if (strength == -1) {\n  \
    \      for (auto &extension : extensions) {\n            if (extension.at(0) ==\
    \ class_name[0]) {\n                strongest_extension = class_name + \".\" +\
    \ extensions[0];\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsr2l1mo9: /tmp/tmpsr2l1mo9.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap\
    \ - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap > sm) {\n \
    \       strongest_extension = class_name + extensions[0];\n    } else {\n    \
    \    strongest_extension = class_name + extensions[1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpkgd4b6y8: /tmp/tmpkgd4b6y8.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length() - cap;\n    }\n    float strength = cap - sm;\n    int index =\
    \ std::distance(extensions.begin(), std::min_element(extensions.begin(), extensions.end(),\
    \ [&](std::string a, std::string b) { return a.length() < b.length(); }));\n \
    \   strongest_extension = class_name + extensions[index];\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmby36zlr: /tmp/tmpmby36zlr.cpp:33: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &e : extensions) {\n        if (e.size() > cap) {\n            cap\
    \ = e.size();\n        }\n        if (e.size() < sm) {\n            sm = e.size();\n\
    \        }\n    }\n    float strength = cap - sm;\n    for (auto &e : extensions)\
    \ {\n        if (e.size() == cap) {\n            if (e.find(class_name) == 0)\
    \ {\n                strongest_extension = e;\n            }\n        }\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpv1gnbh4f: /tmp/tmpv1gnbh4f.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        for (auto\
    \ &i : extensions) {\n            if (i[0]-'A' > cap) {\n                strongest_extension\
    \ = class_name + \".\" + i;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpnoepdtnt: /tmp/tmpnoepdtnt.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    \n    float strength = cap - sm;\n    \n    for(auto\
    \ &ext : extensions) {\n        if(ext.length() == strength) {\n            strongest_extension\
    \ = class_name + ext;\n            break;\n        }\n    }\n    \n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpf09pt9c2: /tmp/tmpf09pt9c2.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.length() == strength) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpfeesb8vq: /tmp/tmpfeesb8vq.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    \n    for (int i = 0; i < extensions.size(); i++) {\n        cap\
    \ += (extensions[i].size() - 1);\n        sm += extensions[i].size();\n    }\n\
    \    \n    if (cap - sm > 0) strongest_extension = class_name + extensions[0];\n\
    \    else if (cap - sm == 0) strongest_extension = class_name;\n    else strongest_extension\
    \ = class_name + extensions[cap - sm];\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpi6lwn2ui: /tmp/tmpi6lwn2ui.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap_counter++;\n        }\n        if(extensions[i].at(1)\
    \ == class_name[1]){\n            sm_counter++;\n        }\n    }\n    double\
    \ strength = cap_counter - sm_counter;\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i].at(0) == class_name[0]){\n            cap_counter--;\n\
    \        }\n        if(extensions[i].at(1) == class_name[1]){\n            sm_counter--;\n\
    \        }\n    }\n    if(cap_counter > sm_counter){\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else{\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmppfl444ko: /tmp/tmppfl444ko.cpp:49: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap_counter += ext.length();\n        sm_counter += ext.length();\n\
    \    }\n    float strength = cap_counter - sm_counter;\n    if (strength > 0)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\
    \ else {\n        for (auto &ext : extensions) {\n            if (ext.length()\
    \ < strength) {\n                strongest_extension = class_name + \".\" + ext;\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmps35ngska: /tmp/tmps35ngska.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = -1;\n    \n    for(int i = 0; i < extensions.size(); i++){\n        int extension_strength\
    \ = std::count(extensions[i].begin(), extensions[i].end(), std::toupper(class_name[0]));\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp8hcv6w6o: /tmp/tmp8hcv6w6o.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = class_name;\n    int cap = 0;\n \
    \   int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    \n    if (cap - sm > 0)\n        strongest_extension\
    \ += \".\";\n    \n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpr5npk6hj: /tmp/tmpr5npk6hj.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.length() == strength) {\n            strongest_extension =\
    \ class_name + \".\" + ext;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp1rswuetx: /tmp/tmp1rswuetx.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123442
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string result;\n    std::string extension;\n    int cap = 0;\n    int\
    \ sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    cap = cap / 2;\n    sm = sm / 2;\n  \
    \  if (cap - sm > 1) {\n        for (auto &ext : extensions) {\n            if\
    \ (cap - ext.length() > sm) {\n                extension = ext;\n            }\n\
    \        }\n    }\n    if (extension != \"\") {\n        result = class_name +\
    \ \".\" + extension;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpj91rijwq: /tmp/tmpj91rijwq.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = class_name.size();\n    int\
    \ sm = class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap\
    \ - ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap > sm) {\n \
    \       strongest_extension = class_name + extensions[0];\n    }\n    else {\n\
    \        strongest_extension = class_name + extensions[extensions.size() - 1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpintm0pc1: /tmp/tmpintm0pc1.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ > cap_counter){\n            cap_counter = extensions[i].size();\n        }\n\
    \        if(extensions[i].size() > sm_counter){\n            sm_counter = extensions[i].size();\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        if(extensions[i].size() == cap_counter){\n\
    \            strongest_extension += class_name + \".\" + extensions[i];\n    \
    \    }\n        if(extensions[i].size() == sm_counter){\n            strongest_extension\
    \ += \".\" + extensions[i];\n        }\n    }\n    if(strength > 0){\n       \
    \ for(int i = 0; i < extensions.size(); i++){\n            if(extensions[i].size()\
    \ == cap_counter){\n                strongest_extension += \".\" + extensions[i];\n\
    \            }\n            if(extensions[i].size() == sm_counter){\n        \
    \        strongest_extension += \".\" + extensions[i];\n            }\n      \
    \  }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpoiok62gl: /tmp/tmpoiok62gl.cpp:53: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    std::string strongest_extension_strength\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    cap = cap\
    \ / extensions.size();\n    sm = sm / extensions.size();\n    if (cap - sm > 0)\n\
    \        strongest_extension_strength = class_name + \".\" + extensions[0];\n\
    \    else if (sm - cap > 0)\n        strongest_extension_strength = class_name\
    \ + \".\" + extensions[1];\n    else\n        strongest_extension_strength = class_name\
    \ + \".\" + extensions[2];\n    return strongest_extension_strength;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpxii8lixk: /tmp/tmpxii8lixk.cpp:41: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        cap += (extensions[i].size()\
    \ - 1);\n        sm += (extensions[i].size());\n    }\n    float strength = cap\
    \ - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ == strongest_extension.size()) {\n            if (strength > 0) {\n        \
    \        strongest_extension = class_name + \".\" + extensions[i];\n         \
    \       break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpvt9svy5j: /tmp/tmpvt9svy5j.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string extension_strength;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for(auto &extension : extensions) {\n        auto cap = extension.substr(0,\
    \ CAP);\n        auto sm = extension.substr(CAP, SM);\n        cap_counter +=\
    \ std::count(cap.begin(), cap.end(), cap.begin(), ::toupper);\n        sm_counter\
    \ += std::count(sm.begin(), sm.end(), sm.begin(), ::tolower);\n    }\n    extension_strength\
    \ = class_name + \".\" + extensions[0];\n    if(cap_counter > sm_counter) {\n\
    \        extension_strength = class_name + \".\" + extensions[1];\n    }\n   \
    \ return extension_strength;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1o7xn_ov.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp1o7xn_ov.cpp:23:40:\
    \ error: \u2018CAP\u2019 was not declared in this scope\n   23 |         auto\
    \ cap = extension.substr(0, CAP);\n      |                                   \
    \     ^~~\n/tmp/tmp1o7xn_ov.cpp:24:41: error: \u2018SM\u2019 was not declared\
    \ in this scope\n   24 |         auto sm = extension.substr(CAP, SM);\n      |\
    \                                         ^~\n"
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strength) {\n            strongest_extension =\
    \ class_name + \".\" + ext;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmksvey6n: /tmp/tmpmksvey6n.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123450
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string result;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap_counter += ext.size();\n        sm_counter += ext.size();\n \
    \   }\n    double strength = cap_counter - sm_counter;\n    if (strength > 0)\
    \ {\n        std::sort(extensions.begin(), extensions.end(), [](const std::string\
    \ &a, const std::string &b) { return a.size() < b.size(); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::tolower(s); });\n        std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n        std::\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbctuv_9b.cpp: In lambda function:\n/tmp/tmpbctuv_9b.cpp:28:130:\
    \ error: no matching function for call to \u2018toupper(const string&)\u2019\n\
    \   28 |         std::transform(extensions.begin(), extensions.end(), extensions.begin(),\
    \ [](const std::string &s) { return std::toupper(s); });\n      |            \
    \                                                                            \
    \                                          ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpbctuv_9b.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018const string\u2019 {aka \u2018const\
    \ std::__cxx11::basic_string<char>\u2019} to \u2018int\u2019\n  125 | extern int\
    \ toupper (int __c) __THROW;\n      |                     ~~~~^~~\nIn file included\
    \ from /usr/include/c++/9/bits/basic_ios.h:37,\n                 from /usr/include/c++/9/ios:44,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbctuv_9b.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const\
    \ std::locale&)\u2019\n 2643 |     toupper(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpbctuv_9b.cpp:28:130:\
    \ note:   candidate expects 2 arguments, 1 provided\n   28 |         std::transform(extensions.begin(),\
    \ extensions.end(), extensions.begin(), [](const std::string &s) { return std::toupper(s);\
    \ });\n      |                                                               \
    \        "
  stdout: ''
  timestamp: 1660123450
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.length() > cap_counter) {\n            cap_counter\
    \ = ext.length();\n        }\n        if (ext.length() < sm_counter) {\n     \
    \       sm_counter = ext.length();\n        }\n    }\n    double strength = cap_counter\
    \ - sm_counter;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == cap_counter) {\n            if (ext.compare(0, cap_counter, class_name.cbegin(),\
    \ cap_counter, class_name.cend()) == 0) {\n                strongest_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n        if (ext.length()\
    \ == sm_counter) {\n            if (ext.compare(0, sm_counter, class_name.cbegin(),\
    \ sm_counter, class_name.cend()) == 0) {\n                strongest_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpodzdmyr_.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpodzdmyr_.cpp:32:96:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(int,\
    \ int&, std::__cxx11::basic_string<char>::const_iterator, int&, std::__cxx11::basic_string<char>::const_iterator)\u2019\
    \n   32 |             if (ext.compare(0, cap_counter, class_name.cbegin(), cap_counter,\
    \ class_name.cend()) == 0) {\n      |                                        \
    \                                                        ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpodzdmyr_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7: note:\
    \ candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 5 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2"
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sml_counter\
    \ = 0;\n    for(auto &extension : extensions){\n        cap_counter += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sml_counter += std::tolower(extension[0])\
    \ - std::tolower(extension[1]);\n    }\n    double strength = cap_counter - sml_counter;\n\
    \    if(strength > 0){\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(strength == 0){\n        strongest_extension = class_name;\n\
    \    }\n    else if(strength < 0){\n        for(auto &extension : extensions){\n\
    \            if(std::toupper(extension[0]) - std::toupper(extension[1]) > 0){\n\
    \                strongest_extension = class_name + \".\" + extension;\n     \
    \           break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4yj17ob5: /tmp/tmp4yj17ob5.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    int max_strength = -1;\n    for (auto\
    \ &i : extensions) {\n        if (i[0]-'A' > max_strength) {\n            max_strength\
    \ = i[0]-'A';\n        }\n        if (i[1]-'a' > max_strength) {\n           \
    \ max_strength = i[1]-'a';\n        }\n    }\n    if (max_strength > 0) {\n  \
    \      strongest_extension = class_name + std::to_string(max_strength);\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpl695kyt7: /tmp/tmpl695kyt7.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    for (auto &ext : extensions) {\n       \
    \ cap -= ext.size();\n        sm -= ext.size();\n    }\n    if (cap > sm) {\n\
    \        strongest_extension = class_name + extensions[0];\n    }\n    else {\n\
    \        strongest_extension = class_name + extensions[extensions.size() - 1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpxo_9ihqg: /tmp/tmpxo_9ihqg.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    \    std::string result;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n   \
    \ }\n    int strength = cap - sm;\n    if (strength > 0) {\n        std::string\
    \ temp = class_name;\n        std::transform(temp.begin(), temp.end(), temp.begin(),\
    \ ::toupper);\n        std::transform(temp.begin(), temp.end(), temp.begin(),\
    \ ::tolower);\n        temp = temp + \".\";\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::toupper);\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::tolower);\n        temp = temp + extensions[0];\n\
    \        result = temp;\n    } else {\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::toupper);\n        std::transform(class_name.begin(),\
    \ class_name.end(), class_name.begin(), ::tolower);\n        std::transform(class_name.\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohrpgbih.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpohrpgbih.cpp:56:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   56 | }\n     \
    \ | ^\n/tmp/tmpohrpgbih.cpp:57:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n\
    /tmp/tmpohrpgbih.cpp:68:1: error: expected \u2018}\u2019 at end of input\n   68\
    \ | }\n      | ^\n/tmp/tmpohrpgbih.cpp:17:94: note: to match this \u2018{\u2019\
    \n   17 | std::string Strongest_Extension(std::string class_name, std::vector<std::string>\
    \ extensions) {\n      |                                                     \
    \                                         ^\n/tmp/tmpohrpgbih.cpp:68:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   68 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660123450
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() > cap) {\n     \
    \       cap = ext.length();\n        }\n        if (ext.length() < sm) {\n   \
    \         sm = ext.length();\n        }\n    }\n    float strength = cap - sm;\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() == cap) {\n    \
    \        if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpxo9mg0jo: /tmp/tmpxo9mg0jo.cpp:44: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    \n    int cap = 0;\n \
    \   int sm = 0;\n    \n    for (auto ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    \n    float strength = cap - sm;\n    \n\
    \    for (auto ext : extensions) {\n        if (ext.size() == strongest_extension.size())\
    \ {\n            if (strength > 0) {\n                if (ext.size() > strongest_extension.size())\
    \ {\n                    strongest_extension = ext;\n                }\n     \
    \       }\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpyts7s2vq: /tmp/tmpyts7s2vq.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    \n    for(int i=0;i<extensions.size();i++){\n\
    \        for(int j=0;j<extensions[i].size();j++){\n            if((extensions[i][j]>='A'&&extensions[i][j]<='Z')||(extensions[i][j]>='a'&&extensions[i][j]<='z')){\n\
    \                strongest_extension+=extensions[i][j];\n            }\n     \
    \   }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsve4bm4r: /tmp/tmpsve4bm4r.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == cap) {\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + ext;\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpk1u4kuma: /tmp/tmpk1u4kuma.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123451
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123441
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for(auto &ext : extensions){\n        cap_counter += ext.size();\n\
    \        sm_counter += ext.size();\n    }\n    float strength = cap_counter -\
    \ sm_counter;\n    for(auto &ext : extensions){\n        if(ext.size() == strongest_extension.size()){\n\
    \            strongest_extension = ext;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpemtv_usn: /tmp/tmpemtv_usn.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    cap = cap - sm;\n    cap = cap / extensions.size();\n\
    \    for(auto &ext : extensions) {\n        if(ext.length() == cap) {\n      \
    \      strongest_extension = class_name + ext;\n            break;\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp23ab80c0: /tmp/tmp23ab80c0.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap - sm;\n    if (cap > 0) {\n        auto it\
    \ = std::max_element(extensions.begin(), extensions.end(), [](const std::string\
    \ &a, const std::string &b) { return a.size() < b.size(); });\n        strongest_extension\
    \ = class_name + \".\" + extensions[it - extensions.begin()];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpyy8528b3: /tmp/tmpyy8528b3.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\nstd::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n    // Write your code here\n\
    \    \n    std::string extension_strength;\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            char c = extension[j];\n   \
    \         \n            if(c == toupper(extension[j])){\n                extension_strength\
    \ += c;\n            }\n        }\n    }\n    \n    extension_strength += \".\"\
    ;\n    \n    for(int i = 0; i < extensions.size(); i++){\n        std::string\
    \ extension = extensions[i];\n        \n        for(int j = 0; j < extension.size();\
    \ j++){\n            char c = extension[j];\n            \n            if(c ==\
    \ tolower(extension[j])){\n                extension_strength += c;\n        \
    \    }\n        }\n    }\n    \n    extension_strength += class_name;\n    \n\
    \    return extension_strength;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpgir_90gr: /tmp/tmpgir_90gr.cpp:54: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123452
