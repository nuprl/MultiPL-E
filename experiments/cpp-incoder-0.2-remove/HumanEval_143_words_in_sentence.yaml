name: HumanEval_143_words_in_sentence
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing\
  \ a sentence,\n// the sentence contains some words separated by a space,\n// and\
  \ you have to return a string that contains the words from the original sentence,\n\
  // whose lengths are prime numbers,\n// the order of the words in the new string\
  \ should be the same as the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n\
  // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
  \ words_in_sentence(std::string sentence) {\n"
tests: "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
  This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
  )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
  )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
  \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
  ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
  \ is\")) == (\"is\"));\n}\n"
completions: ["    std::string ans = \"\";\n    std::string temp = \"\";\n    bool\
    \ flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n        } else\
    \ {\n            ans = ans + \" \" + temp;\n            temp = \"\";\n       \
    \ }\n    }\n    ans = ans + \" \" + temp;\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] % 2 == 0) {\n            ans = ans.substr(0, i) +\
    \ \"*\" + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    std::string word;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        word = sentence[i];\n        for (int\
    \ j = i + 1; j < n; j++) {\n            if (isPrime(j - i)) {\n              \
    \  ans += word + \" \";\n                i = j;\n            }\n        }\n  \
    \  }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n        } else {\n\
    \            flag = true;\n        }\n    }\n    if (flag == false) {\n      \
    \  ans += ' ';\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] !=\
    \ '\\n' && ans[i] != '\\t' && ans[i] != '\\r') {\n            int count = 0;\n\
    \            int j = 0;\n            while (j < i) {\n                if (ans[j]\
    \ == ' ') {\n                    count++;\n                }\n               \
    \ j++;\n            }\n            if (count == 2) {\n                ans += ans[i];\n\
    \            }\n        }\n    }\n    return ans;", "    // write your code here\n\
    \    std::string ans = \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        for(int j = i + 1; j < sentence.length(); j++) {\n            if(isPrime(sentence.length()\
    \ - i - j)) {\n                ans += sentence.substr(i, j);\n            }\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    int len = sentence.length();\n   \
    \ for (int i = 0; i < len; i++) {\n        if (sentence[i] == ' ') {\n       \
    \     if (flag) {\n                ans += temp;\n                temp = \"\";\n\
    \                flag = false;\n            } else {\n                flag = true;\n\
    \            }\n        } else {\n            temp += sentence[i];\n        }\n\
    \    }\n    if (flag) {\n        ans += temp;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] == ' ') {\n            flag\
    \ = true;\n            ans += sentence[i];\n        }\n        else if (flag)\
    \ {\n            ans += sentence[i];\n            flag = false;\n        }\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    for (char c : sentence) {\n        if (c\
    \ == ' ') {\n            flag = true;\n            temp += c;\n        } else\
    \ {\n            if (flag) {\n                ans += temp;\n                temp\
    \ = \"\";\n                flag = false;\n            }\n            ans += c;\n\
    \        }\n    }\n    if (flag) {\n        ans += temp;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    std::string word = \"\";\n    int n = sentence.length();\n\
    \    for(int i = 0; i < n; i++) {\n        word = sentence + i;\n        int count\
    \ = 0;\n        for(int j = 0; j < n; j++) {\n            if(j != i) {\n     \
    \           if(word == sentence + j) {\n                    count++;\n       \
    \         }\n            }\n        }\n        if(count == 2) {\n            ans\
    \ += word;\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n  \
    \      if(isalpha(sentence[i])) {\n            flag = true;\n            ans +=\
    \ sentence[i];\n        }\n        if(flag) {\n            ans += \" \";\n   \
    \         flag = false;\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    std::string temp;\n    bool flag = false;\n    for(int i = 0; i <\
    \ sentence.length(); i++) {\n        if(isalpha(sentence[i])) {\n            flag\
    \ = true;\n            ans += sentence[i];\n        }\n        if(flag) {\n  \
    \          flag = false;\n            temp = ans;\n            ans = temp;\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ == ' ') {\n            flag = true;\n        }\n        if (flag) {\n      \
    \      ans += sentence[i];\n        }\n    }\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for(int i=0;i<sentence.size();i++){\n        if(isalpha(sentence[i])){\n\
    \            flag = true;\n        }\n        if(flag == true){\n            ans\
    \ += sentence[i];\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    std::string temp = \"\";\n    std::string temp_ans = \"\";\n    int\
    \ n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            temp = temp + sentence[i];\n        } else {\n      \
    \      ans = ans + temp;\n            temp = \"\";\n        }\n    }\n    ans\
    \ = ans + temp;\n    int count = 0;\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] >= 'a' && ans[i] <= 'z') {\n            count++;\n   \
    \     }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_ans + ans[i];\n    \
    \    }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ >= 'a' && ans[i] <= 'z') {\n            temp_ans = temp_an", "    // Write your\
    \ code here\n    std::string ans = \"\";\n    for(int i = 0; i < sentence.length();\
    \ i++){\n        for(int j = i+1; j < sentence.length(); j++){\n            int\
    \ n = 1;\n            for(int k = i; k < j; k++){\n                n = n*sentence[k];\n\
    \            }\n            if(n%j == 0){\n                ans += sentence[i]\
    \ + \" \";\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            flag\
    \ = true;\n        }\n    }\n    if (flag) {\n        std::cout << \"No spaces\
    \ found\" << std::endl;\n        return ans;\n    }\n    for (int i = 0; i < n;\
    \ i++) {\n        if (sentence[i] != ' ') {\n            int count = 0;\n    \
    \        for (int j = i; j < n; j++) {\n                if (sentence[j] == ' ')\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count % 2 == 0) {\n                ans += sentence[i];\n            }\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    int n =\
    \ sentence.length();\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n\
    \        for (int j = i; j < n; j++) {\n            if (sentence[j] == ' ') {\n\
    \                count++;\n            }\n        }\n        if (count == 2) {\n\
    \            ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans\
    \ += sentence[i];\n        } else {\n            flag = true;\n        }\n   \
    \ }\n    if (flag) {\n        std::cout << \"No space in sentence\" << std::endl;\n\
    \        return ans;\n    }\n    ans = ans + \" \";\n    ans = ans + ans;\n  \
    \  for (int i = 2; i < n; i++) {\n        if (ans[i] == '0') {\n            ans\
    \ = ans + ans;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        if\
    \ (ans[i] == '1') {\n            ans = ans + ans;\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        if (ans[i] == '2') {\n            ans = ans +\
    \ ans;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i]\
    \ == '3') {\n            ans = ans + ans;\n        }\n    }\n    for (int i =\
    \ 2; i < n; i++) {\n        if (ans[i] == '4') {\n            ans = ans + ans;\n\
    \        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i] == '5')\
    \ {\n            ans = ans + ans;\n        }\n    }\n    for (int i = 2; i < n;\
    \ i++) {\n        if (ans[i] == '6') {\n            ans = ans + ans;\n       \
    \ }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i] == '7') {\n\
    \            ans = ans + ans;\n        }\n    }\n    for (int i = 2; i < n; i++)\
    \ {\n        if (ans[i] == '8') {\n            ans = ans + ans;\n        }\n \
    \   }\n    for (int i = 2; i < n; i++) {\n        if (ans[i] == '9') {\n     \
    \       ans = ans + ans;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n\
    \        if (ans[i] == 'a') {\n            ans = ans + ans;\n        }\n    }\n\
    \    for (int i = 2; i < n; i++) {\n        if (ans[i] == 'b') {\n           \
    \ ans = ans + ans;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n    \
    \    if (ans[i] == 'c') {\n            ans = ans + ans;\n        }\n    }\n  \
    \  for (int i = 2; i < n; i++) {\n        if (ans[i] == 'd') {\n            ans\
    \ = ans + ans;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        if\
    \ (ans[i] == 'e') {\n            ans = ans + ans;\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        if (ans[i] == 'f') {\n            ans = ans +\
    \ ans;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i]\
    \ == 'g') {\n            ", "    std::string ans = \"\";\n    std::string temp\
    \ = \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n\
    \        if (temp.length() == 0) {\n            temp = sentence[i];\n        }\
    \ else {\n            if (sentence[i] == ' ') {\n                ans += temp;\n\
    \                temp = \"\";\n            } else {\n                temp += sentence[i];\n\
    \            }\n        }\n    }\n    ans += temp;\n    return ans;", "    std::string\
    \ ans;\n    for(int i=0;i<sentence.size();i++){\n        for(int j=i+1;j<sentence.size();j++){\n\
    \            int flag=0;\n            for(int k=0;k<sentence.size();k++){\n  \
    \              if(sentence[i]==sentence[k]){\n                    flag=1;\n  \
    \                  break;\n                }\n            }\n            if(flag==0){\n\
    \                ans.push_back(sentence[i]);\n            }\n        }\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (std::find(sentence.begin(), sentence.end(),\
    \ ' ') != sentence.end()) {\n            int count = 0;\n            for (int\
    \ j = i; j < n; j++) {\n                if (std::find(sentence.begin(), sentence.end(),\
    \ ' ') != sentence.end()) {\n                    count++;\n                }\n\
    \            }\n            if (count % 2 == 0) {\n                ans += sentence[i];\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans;\n  \
    \  std::string temp;\n    int n = sentence.length();\n    for(int i = 0; i < n;\
    \ i++) {\n        for(int j = i + 1; j < n; j++) {\n            if((std::stoi(sentence.substr(i,\
    \ 1)) % j) == 0) {\n                temp = sentence.substr(i, j);\n          \
    \      ans += temp;\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] == ' ') {\n            flag\
    \ = true;\n        }\n        if (flag) {\n            ans += sentence[i];\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (auto &i : sentence) {\n        if (i == '.' || i == '!' ||\
    \ i == '?' || i == '-' || i == '_' || i == '+' || i == '/' || i == '(' || i ==\
    \ ')' || i == '{' || i == '}' || i == '[' || i == ']' || i == '<' || i == '>'\
    \ || i == '=' || i == '|' || i == '~' || i == '*' || i == '&' || i == '^' || i\
    \ == '%' || i == '$' || i == '@' || i == '!' || i == '#' || i == '$' || i == '%'\
    \ || i == '&' || i == '*' || i == '(' || i == ')' || i == '+' || i == '-' || i\
    \ == '=' || i == '<' || i == '>' || i == '|' || i == '~' || i == '!' || i == '#'\
    \ || i == '%' || i == '<' || i == '>' || i == '[' || i == ']' || i == '{' || i\
    \ == '}' || i == '|' || i == '~' || i == '*' || i == '^' || i == '&' || i == '$'\
    \ || i == '@' || i == '%' || i == '(' || i == ')' || i == '+' || i == '-' || i\
    \ == '=' || i == '<' || i == '>' || i == '[' || i == ']' || i == '{' || i == '}'\
    \ || i == '|' || i == '~' || i == '!' || i == '#' || i == '%' || i == '<' || i\
    \ == '>' || i == '[' || i == ']' || i == '{' || i == '}' || i == '|' || i == '~'\
    \ || i == '*' || i == '^' || i == '&' || i == '$' || i == '@' || i == '%' || i\
    \ == '(' || i == ')' || i == '+' || i == '-' || i == '=' || i == '<' || i == '>'\
    \ || i == '[' || i == ']' || i == '{' || i == '}' || i == '|' || i == '~' || i\
    \ == '!' || i == '#' || i == '%' || i == '<' || i == '>' || i == '[' || i == ']'\
    \ || i == '{' || i == '}' || i == '|' || i == '~' || i == '*' || i == '^' || i\
    \ == '&' || i == '$' || i == '@' || i == '%' || i == '(' || i == ')' || i == '+'\
    \ || i == '-' || i == '=' || i == '<' || i == '>' || i == '[' || i == ']' || i\
    \ == '{' || i == '}' || i == '|' || ", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n      \
    \  }\n        if (flag) {\n            temp += sentence[i];\n        }\n    }\n\
    \    for (int i = 0; i < temp.length(); i++) {\n        if (temp[i] == '.') {\n\
    \            flag = true;\n        }\n        if (flag) {\n            ans +=\
    \ temp;\n            temp = \"\";\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    for(int i =\
    \ 0; i < ans.length(); i++) {\n        if(i == ans.length() - 1) {\n         \
    \   flag = false;\n        }\n        if(flag == true) {\n            for(int\
    \ j = i + 1; j < ans.length(); j++) {\n                if(isPrime(ans[j])) {\n\
    \                    ans = ans.substr(0, i) + ans.substr(i + 1, ans.length() -\
    \ j);\n                    i = j;\n                    break;\n              \
    \  }\n            }\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      temp = temp + sentence[i];\n        } else {\n            temp = temp +\
    \ \" \";\n            flag = true;\n        }\n    }\n    if (flag == true) {\n\
    \        ans = temp;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    std::string word = \"\";\n    bool flag = false;\n    int len = 0;\n    for\
    \ (int i = 0; i < sentence.length(); i++) {\n        flag = false;\n        for\
    \ (int j = 0; j < len; j++) {\n            if (sentence[i] == word[j]) {\n   \
    \             flag = true;\n                break;\n            }\n        }\n\
    \        if (!flag) {\n            ans += sentence[i];\n            len++;\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    int n = sentence.length();\n    for(int i = 0; i < n; i++) {\n\
    \        if(isalpha(sentence[i])) {\n            flag = true;\n        }\n   \
    \     if(flag) {\n            ans += sentence[i];\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      flag = true;\n        }\n    }\n    if (flag) {\n        ans = sentence;\n\
    \    } else {\n        for (int i = 0; i < n; i++) {\n            if (sentence[i]\
    \ != ' ') {\n                for (int j = i + 1; j < n; j++) {\n             \
    \       if (sentence[i] == sentence[j]) {\n                        for (int k\
    \ = j + 1; k < n; k++) {\n                            if (sentence[i] == sentence[k])\
    \ {\n                                for (int l = k + 1; l < n; l++) {\n     \
    \                               if (sentence[i] == sentence[l]) {\n          \
    \                              for (int m = l + 1; m < n; m++) {\n           \
    \                                 if (sentence[i] == sentence[m]) {\n        \
    \                                        for (int n = m + 1; n < n; n++) {\n \
    \                                                   if (sentence[i] == sentence[n])\
    \ {\n                                                        for (int o = n +\
    \ 1; o < n; o++) {\n                                                         \
    \   if (sentence[i] == sentence[o]) {\n                                      \
    \                          for (int p = o + 1; p < n; p++) {\n               \
    \                                                     if (sentence[i] == sentence[p])\
    \ {\n                                                                        for\
    \ (int q = p + 1; q < n; q++) {\n                                            \
    \                                if (sentence[i] == sentence[q]) {\n         \
    \                                                                       for (int\
    \ r = q + 1; r < n; r++) {\n                                                 \
    \                                   if (sentence[i] == sentence[r]) {\n      \
    \                                                                            \
    \      for (int s = r + 1; s < n; s++) {\n                                   \
    \                                                         if (sentence[i] == sentence[s])\
    \ {\n                                                                        \
    \                        for (int t = s + 1; t < n; t++) {\n                 \
    \                                                                            \
    \       if (sentence[i] == sentence[t]) {\n                                  \
    \                                                                      for (int\
    \ u = t + 1; u < n; u++) {\n                                                 \
    \                                                           if (sentence[i] ==\
    \ sentence[u]) {\n                                                           \
    \                                                     for (int v = u + 1; v <\
    \ n; v++) {\n                                                                \
    \                                                    if (sentence[i] == sentence[v])\
    \ {\n                                                                        \
    \                                                for (int w = v + 1; w < n; w++)\
    \ {\n                                                                        \
    \                                                    if (sentence[i] == sentence[w])\
    \ {\n                                                                        \
    \                                                        for (int x = w + 1; x\
    \ < n; x++) {\n                                                              \
    \                                                                      if (sentence[i]\
    \ == sentence[x]) {\n                                                        \
    \                                                                            \
    \    for (int y = x + 1; y < n; y++) {\n                                     \
    \                                                                            \
    \                           if (sentence[i] == sentence[y]) {\n              \
    \                                                                            \
    \                                                      for (int z = y + 1; z <\
    \ n; z++) {\n                                                                \
    \                                                                            \
    \        if (sentence[i] == sentence[z]) {\n                                 \
    \                                                                            \
    \                                           for (int a = z + 1; a < n; a++) {\n\
    \                                                                            \
    \                                                                            \
    \    if (sentence[i] == sentence[a]) {\n                                     \
    \                                                                            \
    \                                               for (int b = a + 1; b < n; b++)\
    \ {\n                                                                        \
    \                                                                            \
    \                if (sentence[i] == sentence[b]) {\n                         \
    \                                                                            \
    \                                                                   for (int c\
    \ = b + 1; c < n; c++) {\n                                                   \
    \                                                                            \
    \                                             if (sentence[i] == sentence[c])\
    \ {\n                                                                        \
    \                                                                            \
    \                            for (int d = c + 1; ", "    std::string result;\n\
    \    std::string temp;\n    bool flag = true;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      flag = false;\n        }\n    }\n    if (flag) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (sentence[i] != ' ') {\n                temp\
    \ = temp + sentence[i];\n            }\n        }\n        result = temp;\n  \
    \  }\n    else {\n        std::cout << \"No spaces found\" << std::endl;\n   \
    \ }\n    return result;", "    // Write your code here\n    std::string ans =\
    \ \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n        for(int j =\
    \ i + 1; j < sentence.length(); j++) {\n            if(isPrime(sentence.length()\
    \ - i - j)) {\n                ans += sentence.substr(i, j);\n            }\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    int n =\
    \ sentence.length();\n    vector<int> primes(n);\n    for (int i = 0; i < n; i++)\
    \ {\n        primes[i] = 1;\n    }\n    for (int i = 2; i < n; i++) {\n      \
    \  if (primes[i] == 1) {\n            for (int j = i; j < n; j++) {\n        \
    \        if (sentence[j] % i == 0) {\n                    primes[j] = 0;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    for (int i = 0; i < n; i++) {\n        if (primes[i] == 1) {\n          \
    \  ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    \n    // Your code here\n    \n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(isalpha(sentence[i])) {\n            temp += sentence[i];\n\
    \        }\n    }\n    for(int i = 0; i < temp.length(); i++) {\n        if(isalpha(temp[i]))\
    \ {\n            ans += temp[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    std::string temp;\n    bool flag = true;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(sentence[i]==' '){\n            flag = true;\n        }\n        else{\n\
    \            if(flag){\n                temp+=sentence[i];\n                flag\
    \ = false;\n            }\n            else{\n                if(temp.length()%2==0){\n\
    \                    ans+=\" \"+temp;\n                    temp.clear();\n   \
    \             }\n                else{\n                    ans+=\" \"+temp;\n\
    \                    temp.clear();\n                }\n            }\n       \
    \ }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n        } else {\n\
    \            flag = true;\n        }\n    }\n    if (flag) {\n        return ans;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    std::string temp;\n    int len = sentence.length();\n    for(int i=0;i<len;i++){\n\
    \        if(isPrime(len-i)){\n            temp.clear();\n            temp = sentence;\n\
    \            temp = temp.substr(0,i);\n            ans = ans + temp;\n       \
    \ }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string word\
    \ = \"\";\n    int n = 1;\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] == ' ') {\n            ans += word;\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    ans += word;\n    for (int i = 0; i < ans.length(); i++) {\n        if\
    \ (ans[i] == '\\n') ans.erase(ans.begin() + i);\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin() +\
    \ i);\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\n') ans.erase(ans.begin() + i);\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin() + i);\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin()\
    \ + i);\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\n') ans.erase(ans.begin() + i);\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin() + i);\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin()\
    \ + i);\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\n') ans.erase(ans.begin() + i);\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin() + i);\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin()\
    \ + i);\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\n') ans.erase(ans.begin() + i);\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin() + i);\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin()\
    \ + i);\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\n') ans.erase(ans.begin() + i);\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin() + i);\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\n') ans.erase(ans.begin()\
    \ + i);\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\n') ans.erase(ans.begin() + i);\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {", "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool\
    \ flag = false;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++)\
    \ {\n        if (sentence[i] == ' ') {\n            flag = true;\n        }\n\
    \        if (flag) {\n            temp += sentence[i];\n        }\n    }\n   \
    \ for (int i = 0; i < n; i++) {\n        if (temp.length() == i) {\n         \
    \   ans += temp;\n            temp = \"\";\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z') {\n          \
    \  flag = true;\n        }\n    }\n    if (flag == false) {\n        return ans;\n\
    \    }\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ >= 'a' && sentence[i] <= 'z') {\n            int n = sentence[i] - 'a';\n  \
    \          if (n % 2 == 0) {\n                for (int j = i + 1; j < sentence.length();\
    \ j++) {\n                    if (sentence[j] >= 'a' && sentence[j] <= 'z') {\n\
    \                        int m = sentence[j] - 'a';\n                        if\
    \ (m % 2 == 0) {\n                            for (int k = j + 1; k < sentence.length();\
    \ k++) {\n                                if (sentence[k] >= 'a' && sentence[k]\
    \ <= 'z') {\n                                    int p = sentence[k] - 'a';\n\
    \                                    if (p % 2 == 0) {\n                     \
    \                   for (int l = k + 1; l < sentence.length(); l++) {\n      \
    \                                      if (sentence[l] >= 'a' && sentence[l] <=\
    \ 'z') {\n                                                int q = sentence[l]\
    \ - 'a';\n                                                if (q % 2 == 0) {\n\
    \                                                    for (int m = l + 1; m < sentence.length();\
    \ m++) {\n                                                        if (sentence[m]\
    \ >= 'a' && sentence[m] <= 'z') {\n                                          \
    \                  int r = sentence[m] - 'a';\n                              \
    \                              if (r % 2 == 0) {\n                           \
    \                                     for (int n = m + 1; n < sentence.length();\
    \ n++) {\n                                                                   \
    \ if (sentence[n] >= 'a' && sentence[n] <= 'z') {\n                          \
    \                                              int s = sentence[n] - 'a';\n  \
    \                                                                      if (s %\
    \ 2 == 0) {\n                                                                \
    \            for (int o = n + 1; o < sentence.length(); o++) {\n             \
    \                                                                   if (sentence[o]\
    \ >= 'a' && sentence[o] <= 'z') {\n                                          \
    \                                          int t = sentence[o] - 'a';\n      \
    \                                                                            \
    \  if (t % 2 == 0) {\n                                                       \
    \                                 for (int p = o + 1; p < sentence.length(); p++)\
    \ {\n                                                                        \
    \                    if (sentence[p] >= 'a' && sentence[p] <= 'z') {\n       \
    \                                                                            \
    \             int u = sentence[p] - 'a';\n                                   \
    \                                                             if (u % 2 == 0)\
    \ {\n                                                                        \
    \                            for (int q = p + 1; q < sentence.length(); q++) {\n\
    \                                                                            \
    \                            if (sentence[q] >= 'a' && sentence[q] <= 'z') {\n\
    \                                                                            \
    \                                int v = sentence[q] - 'a';\n                \
    \                                                                            \
    \                if (v % 2 == 0) {\n                                         \
    \                                                                       for (int\
    \ r = q + 1; r < sentence.length(); r++) {\n                                 \
    \                                                                            \
    \       if (sentence[r] >= 'a' && sentence[r] <= 'z') {", "    std::string ans\
    \ = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        ans += \" \";\n    }\n    for (int i = 0; i < sentence.length(); i++)\
    \ {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n    \
    \    }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ != ' ') {\n            ans += \" \";\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] >= 'a' && sentence[i]\
    \ <= 'z') {\n            flag = true;\n        }\n    }\n    if (flag == false)\
    \ {\n        std::cout << \"Invalid Input\" << std::endl;\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z')\
    \ {\n            int count = 0;\n            int j = 0;\n            while (j\
    \ < n) {\n                if (sentence[i] == ' ') {\n                    count++;\n\
    \                }\n                j++;\n            }\n            if (count\
    \ == 2) {\n                ans += sentence[i];\n            }\n        }\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    std::string temp = \"\
    \";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n     \
    \   if (sentence[i] != ' ') {\n            temp += sentence[i];\n        } else\
    \ {\n            if (temp.length() % 2 == 0) {\n                ans += temp;\n\
    \                temp = \"\";\n            }\n        }\n    }\n    if (temp.length()\
    \ > 0) {\n        ans += temp;\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n  \
    \          temp = temp + sentence[i];\n        } else {\n            ans = ans\
    \ + \" \" + temp;\n            temp = temp;\n        }\n    }\n    ans = ans +\
    \ \" \" + temp;\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ % 2 != 0) {\n            ans = ans.substr(0, i) + \" \" + ans.substr(i + 1,\
    \ ans.length());\n        }\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n     \
    \   int count = 0;\n        for (int j = i; j < n; j++) {\n            if (sentence[i]\
    \ == sentence[j]) {\n                count++;\n            }\n        }\n    \
    \    if (count == 2) {\n            ans += sentence[i];\n        }\n    }\n  \
    \  return ans;", "    std::string ans = \"\";\n    bool flag = false;\n    for\
    \ (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n\
    \            ans += sentence[i];\n        } else {\n            flag = true;\n\
    \        }\n    }\n    if (flag) {\n        ans += ' ';\n    }\n    for (int i\
    \ = 0; i < ans.length(); i++) {\n        for (int j = i + 1; j < ans.length();\
    \ j++) {\n            if (ans[i] == ans[j]) {\n                ans[j] += ' ';\n\
    \            }\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n\
    \        if (ans[i] == '\\n') {\n            ans[i] = ' ';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        for (int j = i + 1; j <\
    \ ans.length(); j++) {\n            if (ans[i] == ans[j]) {\n                ans[j]\
    \ -= ' ';\n            }\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n') {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        for (int j = i +\
    \ 1; j < ans.length(); j++) {\n            if (ans[i] == ans[j]) {\n         \
    \       ans[j] += ' ';\n            }\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        if (ans[i] == '\\n') {\n            ans[i] =\
    \ ' ';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n     \
    \   for (int j = i + 1; j < ans.length(); j++) {\n            if (ans[i] == ans[j])\
    \ {\n                ans[j] -= ' ';\n            }\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == '\\n') {\n     \
    \       ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        for (int j = i + 1; j < ans.length(); j++) {\n            if\
    \ (ans[i] == ans[j]) {\n                ans[j] += ' ';\n            }\n      \
    \  }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '\\n') {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        for (int j = i + 1; j < ans.length(); j++)\
    \ {\n            if (ans[i] == ans[j]) {\n                ans[j] -= ' ';\n   \
    \         }\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n\
    \        if (ans[i] == '\\n') {\n            ans[i] = ' ';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        for (int j = i + 1; j <\
    \ ans.length(); j++) {\n            if (ans[i] == ans[j]) {\n                ans[j]\
    \ += ' ';\n            }\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == '\\n') {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        for (int j = i + ",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    std::string temp2\
    \ = \"\";\n    int n = sentence.length();\n    bool flag = true;\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp +=\
    \ sentence[i];\n        } else {\n            if (flag) {\n                temp2\
    \ += temp;\n                flag = false;\n            }\n            temp = \"\
    \";\n        }\n    }\n    if (flag) {\n        temp2 += temp;\n    }\n    for\
    \ (int i = 0; i < n; i++) {\n        if (temp2[i] % 2 == 0) {\n            ans\
    \ += temp2[i];\n        }\n    }\n    return ans;", "    std::string result;\n\
    \    std::string word;\n    std::string temp;\n    bool flag = false;\n    int\
    \ n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        word = sentence[i];\n\
    \        temp = result;\n        for (int j = i; j < n; j++) {\n            if\
    \ (flag == true) {\n                temp = temp + \" \" + word;\n            \
    \    flag = false;\n            } else {\n                if (word == sentence[j])\
    \ {\n                    flag = true;\n                }\n            }\n    \
    \    }\n        result = temp;\n    }\n    return result;", "    std::string ans\
    \ = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sentence[i] != ' ') {\n            flag = true;\n        }\n    }\n    if (flag)\
    \ {\n        ans += \" \";\n    }\n    for (int i = 0; i < n; i++) {\n       \
    \ if (sentence[i] != ' ') {\n            ans += sentence[i];\n        }\n    }\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      ans += sentence[i];\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n    \
    \    }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i] != '\
    \ ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i = 0;\
    \ i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int ",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            temp\
    \ = temp + \" \" + sentence[i];\n        } else {\n            ans = ans + \"\
    \ \" + temp;\n            temp = \"\";\n        }\n    }\n    ans = ans + \" \"\
    \ + temp;\n    return ans;", "    std::string ans = \"\";\n    std::string temp\
    \ = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n      \
    \      temp += sentence[i];\n        } else {\n            if (flag) {\n     \
    \           ans += temp;\n                temp = \"\";\n                flag =\
    \ false;\n            }\n        }\n    }\n    if (flag) {\n        ans += temp;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++)\
    \ {\n        if (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n\
    \        } else {\n            if (flag == false) {\n                ans = ans\
    \ + temp;\n                temp = \"\";\n                flag = true;\n      \
    \      } else {\n                ans = ans + \" \" + temp;\n                temp\
    \ = \"\";\n                flag = false;\n            }\n        }\n    }\n  \
    \  return ans;", "    // Write your code here\n    std::string ans = \"\";\n \
    \   std::string temp = \"\";\n    int n = sentence.length();\n    for (int i =\
    \ 0; i < n; i++) {\n        if (i % 2 == 0) {\n            temp = temp + sentence[i];\n\
    \        }\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (i % 2 == 0) {\n            int j = i;\n            while (j > 0) {\n\
    \                if (temp[j - 1] == ' ') {\n                    count++;\n   \
    \                 break;\n                }\n                j--;\n          \
    \  }\n            if (count == 2) {\n                ans = ans + temp;\n     \
    \           count = 0;\n            }\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    \n    // Write your code here\n    \n    return\
    \ ans;", "    std::string ans = \"\";\n    \n    // Write your code here\n   \
    \ \n    return ans;", "    std::string ans;\n    std::string word;\n    int n\
    \ = sentence.length();\n    for (int i = 0; i < n; i++) {\n        word = sentence.substr(i,\
    \ 1);\n        ans += word;\n    }\n    for (int i = 2; i < n; i++) {\n      \
    \  ans += \" \";\n        for (int j = i; j < n; j++) {\n            if (i % j\
    \ == 0) {\n                ans += \" \";\n                break;\n           \
    \ }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++)\
    \ {\n        if (temp.length() == 0) {\n            temp = sentence[i];\n    \
    \    } else {\n            temp = temp + \" \" + sentence[i];\n        }\n   \
    \ }\n    temp = temp.substr(0, temp.length() - 1);\n    temp = temp.substr(0,\
    \ temp.length() / 2);\n    int count = 0;\n    for (int i = 0; i < temp.length();\
    \ i++) {\n        if (temp[i] != ' ') {\n            count++;\n        }\n   \
    \ }\n    for (int i = 0; i < temp.length(); i++) {\n        if (temp[i] != ' ')\
    \ {\n            ans = ans + temp[i];\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    bool flag = true;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            if (isPrime(j - i) && isPrime(j - i + 1)) {\n                ans\
    \ += sentence.substr(i, j);\n                flag = false;\n                break;\n\
    \            }\n        }\n    }\n    if (flag) {\n        ans += sentence;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for(int i=0;i<sentence.size();i++){\n        if(isalpha(sentence[i])){\n\
    \            flag = true;\n            ans += sentence[i];\n        }\n      \
    \  if(flag == true){\n            flag = false;\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = i; j\
    \ < n; j++) {\n            if (sentence[j] == ' ') {\n                count++;\n\
    \            }\n        }\n        if (count == 2) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    std::string ans\
    \ = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            flag =\
    \ true;\n        }\n    }\n    if (flag == false) {\n        ans = sentence;\n\
    \    } else {\n        for (int i = 0; i < n; i++) {\n            if (sentence[i]\
    \ != ' ') {\n                for (int j = i + 1; j < n; j++) {\n             \
    \       if (sentence[j] == ' ') {\n                        for (int k = j + 1;\
    \ k < n; k++) {\n                            if (sentence[k] == ' ') {\n     \
    \                           for (int l = k + 1; l < n; l++) {\n              \
    \                      if (sentence[l] == ' ') {\n                           \
    \             for (int m = l + 1; m < n; m++) {\n                            \
    \                if (sentence[m] == ' ') {\n                                 \
    \               for (int n = m + 1; n < n; n++) {\n                          \
    \                          if (sentence[n] == ' ') {\n                       \
    \                                 for (int o = n + 1; o < n; o++) {\n        \
    \                                                    if (sentence[o] == ' ') {\n\
    \                                                                for (int p =\
    \ o + 1; p < n; p++) {\n                                                     \
    \               if (sentence[p] == ' ') {\n                                  \
    \                                      for (int q = p + 1; q < n; q++) {\n   \
    \                                                                         if (sentence[q]\
    \ == ' ') {\n                                                                \
    \                for (int r = q + 1; r < n; r++) {\n                         \
    \                                                           if (sentence[r] ==\
    \ ' ') {\n                                                                   \
    \                     for (int s = r + 1; s < n; s++) {\n                    \
    \                                                                        if (sentence[s]\
    \ == ' ') {\n                                                                \
    \                                for (int t = s + 1; t < n; t++) {\n         \
    \                                                                            \
    \               if (sentence[t] == ' ') {\n                                  \
    \                                                                      for (int\
    \ u = t + 1; u < n; u++) {\n                                                 \
    \                                                           if (sentence[u] ==\
    \ ' ') {\n                                                                   \
    \                                             for (int v = u + 1; v < n; v++)\
    \ {\n                                                                        \
    \                                            if (sentence[v] == ' ') {\n     \
    \                                                                            \
    \                                       for (int w = v + 1; w < n; w++) {\n  \
    \                                                                            \
    \                                              if (sentence[w] == ' ') {\n   \
    \                                                                            \
    \                                                 for (int x = w + 1; x < n; x++)\
    \ {\n                                                                        \
    \                                                            if (sentence[x] ==\
    \ ' ') {\n                                                                   \
    \                                                                     for (int\
    \ y = x + 1; y < n; y++) {\n                                                 \
    \                                                                            \
    \               if (sentence[y] == ' ') {\n                                  \
    \                                                                            \
    \                                  for (int z = y + 1; z < n; z++) {\n       \
    \                                                                            \
    \                                                                 if (sentence[z]\
    \ == ' ') {\n                                                                \
    \                                                                            \
    \            for (int a = z + 1; a < n; a++) {\n                             \
    \                                                                            \
    \                                                   if (sentence[a] == ' ') {\n\
    \                                                                            \
    \                                                                            \
    \        for (int b = a + 1; b < n; b++) {\n                                 \
    \                                                                            \
    \                                                       if (sentence[b] == ' ')\
    \ {\n                                                                        \
    \                                                                            \
    \                    for (int c = b + 1; c < n; c++) {\n                     \
    \                                                                            \
    \                                                                           if\
    \ (sentence[c] == ' ') {\n                                                   \
    \                                                                             ",
  "    std::string ans = \"\";\n    int n = sentence.length();\n    for(int i = 0;\
    \ i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            int k =\
    \ j + 1;\n            while(k <= n && k % j == 0) {\n                k++;\n  \
    \          }\n            if(k != n && k % j == 0) {\n                ans += sentence.substr(i,\
    \ j - i) + \" \"; \n                i = j;\n                j = k;\n         \
    \   }\n        }\n    }\n    return ans;", "    // Write your code here\n    std::string\
    \ ans = \"\";\n    for(int i=0;i<sentence.size();i++){\n        if(isPrime(sentence[i])){\n\
    \            ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z') {\n          \
    \  flag = true;\n        }\n    }\n    if (flag == false) {\n        std::cout\
    \ << \"Invalid input\" << std::endl;\n    }\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z') {\n          \
    \  ans += sentence[i];\n        }\n    }\n    for (int i = 2; i < ans.length();\
    \ i++) {\n        if (ans[i] == '0') {\n            ans = ans.substr(0, ans.length()\
    \ - 1);\n        }\n    }\n    for (int i = 3; i < ans.length(); i++) {\n    \
    \    if (ans[i] == '0') {\n            ans = ans.substr(0, ans.length() - 1);\n\
    \        }\n    }\n    for (int i = 5; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '0') {\n            ans = ans.substr(0, ans.length() - 1);\n        }\n \
    \   }\n    for (int i = 7; i < ans.length(); i++) {\n        if (ans[i] == '0')\
    \ {\n            ans = ans.substr(0, ans.length() - 1);\n        }\n    }\n  \
    \  for (int i = 9; i < ans.length(); i++) {\n        if (ans[i] == '0') {\n  \
    \          ans = ans.substr(0, ans.length() - 1);\n        }\n    }\n    for (int\
    \ i = 11; i < ans.length(); i++) {\n        if (ans[i] == '0') {\n           \
    \ ans = ans.substr(0, ans.length() - 1);\n        }\n    }\n    for (int i = 13;\
    \ i < ans.length(); i++) {\n        if (ans[i] == '0') {\n            ans = ans.substr(0,\
    \ ans.length() - 1);\n        }\n    }\n    for (int i = 15; i < ans.length();\
    \ i++) {\n        if (ans[i] == '0') {\n            ans = ans.substr(0, ans.length()\
    \ - 1);\n        }\n    }\n    for (int i = 17; i < ans.length(); i++) {\n   \
    \     if (ans[i] == '0') {\n            ans = ans.substr(0, ans.length() - 1);\n\
    \        }\n    }\n    for (int i = 19; i < ans.length(); i++) {\n        if (ans[i]\
    \ == '0') {\n            ans = ans.substr(0, ans.length() - 1);\n        }\n \
    \   }\n    for (int i = 21; i < ans.length(); i++) {\n        if (ans[i] == '0')\
    \ {\n            ans = ans.substr(0, ans.length() - 1);\n        }\n    }\n  \
    \  for (int i = 23; i < ans.length(); i++) {\n        if (ans[i] == '0') {\n \
    \           ans = ans.substr(0, ans.length() - 1);\n        }\n    }\n    for\
    \ (int i = 25; i < ans.length(); i++) {\n        if (ans[i] == '0') {\n      \
    \      ans = ans.substr(0, ans.length() - 1);\n        }\n    }\n    for (int\
    \ i = 27; i < ans.length(); i++) {\n        if (", "    std::string result;\n\
    \    bool flag = false;\n    int n = sentence.length();\n    for (int i = 0; i\
    \ < n; i++) {\n        if (sentence[i] != ' ') {\n            flag = true;\n \
    \       }\n    }\n    if (flag) {\n        return result;\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            result\
    \ += sentence[i];\n        }\n    }\n    for (int i = n; i >= 0; i--) {\n    \
    \    if (sentence[i] != ' ') {\n            result += sentence[i];\n        }\n\
    \    }\n    return result;", "    std::string ans;\n    std::string temp;\n  \
    \  bool flag = true;\n    int n = sentence.length();\n    for(int i = 0; i < n;\
    \ i++) {\n        if(isalpha(sentence[i])) {\n            temp = temp + sentence[i];\n\
    \        } else {\n            ans = ans + \" \" + temp;\n            temp = sentence[i];\n\
    \        }\n    }\n    ans = ans + \" \" + temp;\n    for(int i = 0; i < n; i++)\
    \ {\n        if(isalpha(sentence[i])) {\n            temp = temp + sentence[i];\n\
    \        } else {\n            ans = ans + \" \" + temp;\n            temp = sentence[i];\n\
    \        }\n    }\n    ans = ans + \" \" + temp;\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    int n = sentence.length();\n\
    \    for(int i = 0; i < n; i++) {\n        if(isalpha(sentence[i])) {\n      \
    \      temp = temp + sentence[i];\n        }\n    }\n    for(int i = 0; i < n;\
    \ i++) {\n        if(isalpha(sentence[i])) {\n            for(int j = i + 1; j\
    \ < n; j++) {\n                if(isalpha(sentence[j])) {\n                  \
    \  if(temp.length() == 0) {\n                        ans = ans + sentence[i];\n\
    \                    } else {\n                        ans = ans + \" \" + sentence[i];\n\
    \                    }\n                    temp = temp + sentence[j];\n     \
    \           }\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    bool flag = true;\n    for(int i=0;i<sentence.size();i++){\n     \
    \   for(int j=i+1;j<sentence.size();j++){\n            for(int k=j+1;k<sentence.size();k++){\n\
    \                for(int l=k+1;l<sentence.size();l++){\n                    if(isPrime(sentence.at(i).length())\
    \ && isPrime(sentence.at(j).length()) && isPrime(sentence.at(k).length()) && isPrime(sentence.at(l).length())){\n\
    \                        if(sentence.at(i) == sentence.at(j) && sentence.at(i)\
    \ == sentence.at(k)&& sentence.at(i) == sentence.at(l)){\n                   \
    \         ans = ans + sentence.at(i) + \" \";\n                            flag\
    \ = false;\n                        }\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++)\
    \ {\n        if(isalpha(sentence[i])) {\n            flag = true;\n          \
    \  ans += sentence[i];\n        }\n        if(flag) {\n            ans += \" \"\
    ;\n            flag = false;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    \n    for(int i = 0; i < sentence.length(); i++) {\n      \
    \  for(int j = i + 1; j < sentence.length(); j++) {\n            int len1 = (int)sqrt(sentence.length());\n\
    \            int len2 = (int)sqrt(j);\n            \n            if((len1 * len2)\
    \ != sentence.length() && (len1 * len2) != j && sentence[i] != ' ' && sentence[j]\
    \ != ' ') {\n                ans += sentence[i] + \" \";\n                ans\
    \ += sentence[j] + \" \";\n            }\n        }\n    }\n    \n    return ans;",
  "    std::string ans = \"\";\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(isalpha(sentence[i])){\n            flag = true;\n            ans\
    \ += sentence[i];\n        }\n        else{\n            if(flag){\n         \
    \       ans += \" \";\n                flag = false;\n            }\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    for(int i = 0; i < sentence.length(); i++) {\n        if(isalpha(sentence[i]))\
    \ {\n            ans += sentence[i];\n        }\n    }\n    for(int i = 0; i <\
    \ ans.length(); i++) {\n        temp = ans.substr(i, 1);\n        if(isalpha(temp))\
    \ {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.length() - i);\n\
    \        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        if(isalpha(ans.substr(i,\
    \ 1))) {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.length()\
    \ - i);\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n     \
    \   if(isalpha(ans.substr(i, 1))) {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.length() - i);\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        if(isalpha(ans.substr(i, 1))) {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.length() - i);\n        }\n    }\n    for(int i =\
    \ 0; i < ans.length(); i++) {\n        if(isalpha(ans.substr(i, 1))) {\n     \
    \       ans = ans.substr(0, i) + ans.substr(i + 1, ans.length() - i);\n      \
    \  }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        if(isalpha(ans.substr(i,\
    \ 1))) {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.length()\
    \ - i);\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n     \
    \   if(isalpha(ans.substr(i, 1))) {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.length() - i);\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        if(isalpha(ans.substr(i, 1))) {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.length() - i);\n        }\n    }\n    for(int i =\
    \ 0; i < ans.length(); i++) {\n        if(isalpha(ans.substr(i, 1))) {\n     \
    \       ans = ans.substr(0, i) + ans.substr(i + 1, ans.length() - i);\n      \
    \  }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        if(isalpha(ans.substr(i,\
    \ 1))) {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.length()\
    \ - i);\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n     \
    \   if(isalpha(ans.substr(i, 1))) {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.length() - i);\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        if(", "    std::string ans = \"\";\n    std::string temp = \"\
    \";\n    for(int i = 0; i < sentence.length(); i++) {\n        if(isalpha(sentence[i]))\
    \ {\n            temp = temp + sentence[i];\n        }\n    }\n    for(int i =\
    \ 0; i < temp.length(); i++) {\n        if(isalpha(temp[i])) {\n            ans\
    \ = ans + temp[i];\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z')\
    \ {\n            flag = true;\n        }\n    }\n    if (flag) {\n        for\
    \ (int i = 0; i < n; i++) {\n            if (sentence[i] >= 'a' && sentence[i]\
    \ <= 'z') {\n                for (int j = i; j < n; j++) {\n                 \
    \   if (sentence[j] >= 'a' && sentence[j] <= 'z') {\n                        for\
    \ (int k = i; k < j; k++) {\n                            if (sentence[k] >= 'a'\
    \ && sentence[k] <= 'z') {\n                                for (int l = i; l\
    \ < k; l++) {\n                                    if (sentence[l] >= 'a' && sentence[l]\
    \ <= 'z') {\n                                        for (int m = i; m < l; m++)\
    \ {\n                                            if (sentence[m] >= 'a' && sentence[m]\
    \ <= 'z') {\n                                                for (int n = i; n\
    \ < m; n++) {\n                                                    if (sentence[n]\
    \ >= 'a' && sentence[n] <= 'z') {\n                                          \
    \              for (int o = i; o < n; o++) {\n                               \
    \                             if (sentence[o] >= 'a' && sentence[o] <= 'z') {\n\
    \                                                                for (int p =\
    \ i; p < o; p++) {\n                                                         \
    \           if (sentence[p] >= 'a' && sentence[p] <= 'z') {\n                \
    \                                                        for (int q = i; q < p;\
    \ q++) {\n                                                                   \
    \         if (sentence[q] >= 'a' && sentence[q] <= 'z') {\n                  \
    \                                                              for (int r = i;\
    \ r < q; r++) {\n                                                            \
    \                        if (sentence[r] >= 'a' && sentence[r] <= 'z') {\n   \
    \                                                                            \
    \         for (int s = i; s < r; s++) {\n                                    \
    \                                                        if (sentence[s] >= 'a'\
    \ && sentence[s] <= 'z') {\n                                                 \
    \                                               for (int t = i; t < s; t++) {\n\
    \                                                                            \
    \                        if (sentence[t] >= 'a' && sentence[t] <= 'z') {\n   \
    \                                                                            \
    \                         for (int u = i; u < t; u++) {\n                    \
    \                                                                            \
    \            if (sentence[u] >= 'a' && sentence[u] <= 'z') {\n               \
    \                                                                            \
    \                     for (int v = i; v < u; v++) {\n                        \
    \                                                                            \
    \                if (sentence[v] >= 'a' && sentence[v] <= 'z') {\n           \
    \                                                                            \
    \                                 for (int w = i; w < v; w++) {\n            \
    \                                                                            \
    \                                    if (sentence[w] >= 'a' && sentence[w] <=\
    \ 'z') {\n                                                                   \
    \                                                             for (int x = i;\
    \ x < w; x++) {\n                                                            \
    \                                                                        if (sentence[x]\
    \ >= 'a' && sentence[x] <= 'z') {", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        } else {\n            flag\
    \ = true;\n        }\n    }\n    if (flag) {\n        ans += \" \";\n    }\n \
    \   for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] != '\\n' && ans[i]\
    \ != '\\t') {\n            ans += \"0\";\n        }\n    }\n    for (int i = ans.length()\
    \ - 1; i >= 0; i--) {\n        if (ans[i] == '0') {\n            ans = ans.substr(0,\
    \ i) + \"1\" + ans.substr(i + 1);\n        }\n    }\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() - 1);\n    ans = ans.", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (auto\
    \ &c : sentence) {\n        if (c == ' ') {\n            flag = true;\n      \
    \  }\n        if (flag) {\n            temp += c;\n        }\n    }\n    ans =\
    \ temp;\n    int n = ans.size();\n    for (int i = 1; i < n; i++) {\n        bool\
    \ flag = false;\n        for (int j = i; j < n; j++) {\n            if (ans[j]\
    \ != ' ') {\n                flag = true;\n                break;\n          \
    \  }\n        }\n        if (flag) {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, n - i);\n            break;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n  \
    \          flag = true;\n            ans += sentence[i];\n        } else {\n \
    \           if (flag) {\n                ans += temp;\n                temp =\
    \ \"\";\n                flag = false;\n            }\n        }\n    }\n    if\
    \ (flag) {\n        ans += temp;\n    }\n    return ans;", "    std::string ans;\n\
    \    ans = sentence;\n    int n = sentence.length();\n    for (int i = 0; i <\
    \ n; i++) {\n        ans = ans.replace(sentence[i], \"\");\n    }\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == \"\") {\n   \
    \         count++;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n    \
    \    if (ans[i] == \"\") {\n            ans = ans.replace(i + 1, \"\");\n    \
    \    }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == \"\")\
    \ {\n            ans = ans.replace(i + 2, \"\");\n        }\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (ans[i] == \"\") {\n            ans = ans.replace(i\
    \ + 3, \"\");\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if\
    \ (ans[i] == \"\") {\n            ans = ans.replace(i + 4, \"\");\n        }\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == \"\") {\n   \
    \         ans = ans.replace(i + 5, \"\");\n        }\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        if (ans[i] == \"\") {\n            ans = ans.replace(i\
    \ + 6, \"\");\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if\
    \ (ans[i] == \"\") {\n            ans = ans.replace(i + 7, \"\");\n        }\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == \"\") {\n   \
    \         ans = ans.replace(i + 8, \"\");\n        }\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        if (ans[i] == \"\") {\n            ans = ans.replace(i\
    \ + 9, \"\");\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if\
    \ (ans[i] == \"\") {\n            ans = ans.replace(i + 10, \"\");\n        }\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == \"\") {\n   \
    \         ans = ans.replace(i + 11, \"\");\n        }\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        if (ans[i] == \"\") {\n            ans = ans.replace(i\
    \ + 12, \"\");\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if\
    \ (ans[i] == \"\") {\n            ans = ans.replace(i + 13, \"\");\n        }\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == \"\") {\n   \
    \         ans = ans.replace(i + 14, \"\");\n        }\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        if (ans[i] == \"\") {\n            ans = ans.replace(i\
    \ + 15, \"\");\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if\
    \ (ans[i] == \"\") {\n            ans = ans.replace(i + 16, \"\");\n        }\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == \"\") {\n   \
    \         ans = ans.replace(i + 17, \"\");\n        }\n", "    std::string ans\
    \ = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z')\
    \ {\n            flag = true;\n        }\n    }\n    if (flag) {\n        for\
    \ (int i = 0; i < n; i++) {\n            if (sentence[i] >= 'a' && sentence[i]\
    \ <= 'z') {\n                for (int j = i + 1; j < n; j++) {\n             \
    \       if (sentence[j] >= 'a' && sentence[j] <= 'z') {\n                    \
    \    for (int k = j + 1; k < n; k++) {\n                            if (sentence[k]\
    \ >= 'a' && sentence[k] <= 'z') {\n                                for (int l\
    \ = k + 1; l < n; l++) {\n                                    if (sentence[l]\
    \ >= 'a' && sentence[l] <= 'z') {\n                                        for\
    \ (int m = l + 1; m < n; m++) {\n                                            if\
    \ (sentence[m] >= 'a' && sentence[m] <= 'z') {\n                             \
    \                   for (int n = m + 1; n < n; n++) {\n                      \
    \                              if (sentence[n] >= 'a' && sentence[n] <= 'z') {\n\
    \                                                        for (int o = n + 1; o\
    \ < n; o++) {\n                                                            if\
    \ (sentence[o] >= 'a' && sentence[o] <= 'z') {\n                             \
    \                                   for (int p = o + 1; p < n; p++) {\n      \
    \                                                              if (sentence[p]\
    \ >= 'a' && sentence[p] <= 'z') {\n                                          \
    \                              for (int q = p + 1; q < n; q++) {\n           \
    \                                                                 if (sentence[q]\
    \ >= 'a' && sentence[q] <= 'z') {\n                                          \
    \                                      for (int r = q + 1; r < n; r++) {\n   \
    \                                                                            \
    \     if (sentence[r] >= 'a' && sentence[r] <= 'z') {\n                      \
    \                                                                  for (int s\
    \ = r + 1; s < n; s++) {\n                                                   \
    \                                         if (sentence[s] >= 'a' && sentence[s]\
    \ <= 'z') {\n                                                                \
    \                                for (int t = s + 1; t < n; t++) {\n         \
    \                                                                            \
    \               if (sentence[t] >= 'a' && sentence[t] <= 'z') {\n            \
    \                                                                            \
    \                for (int u = t + 1; u < n; u++) {\n                         \
    \                                                                            \
    \       if (sentence[u] >= 'a' && sentence[u] <= 'z') {\n                    \
    \                                                                            \
    \                for (int v = u + 1; v < n; v++) {\n                         \
    \                                                                            \
    \               if (sentence[v] >= 'a' && sentence[v] <= 'z') {\n            \
    \                                                                            \
    \                                for (int w = v + 1; w < n; w++) {\n         \
    \                                                                            \
    \                                       if (sentence[w] >= 'a' && sentence[w]\
    \ <= 'z') {\n                                                                \
    \                                                                for (int x =\
    \ w + 1; x < n; x++) {\n                                                     \
    \                                                                            \
    \   if (sentence", "    std::string ans;\n    for(int i=0;i<sentence.size();i++){\n\
    \        for(int j=i+1;j<sentence.size();j++){\n            int n = pow(2,j-i);\n\
    \            if(n%sentence[i]==0){\n                ans += sentence[i] + \" \"\
    ;\n            }\n        }\n    }\n    return ans;", "    std::string result;\n\
    \    std::string temp;\n    int n = sentence.length();\n    bool flag = false;\n\
    \    for(int i=0;i<n;i++){\n        if(isalpha(sentence[i])){\n            flag\
    \ = true;\n        }\n        if(flag == true){\n            temp = temp + sentence[i];\n\
    \        }\n        if(i == n-1){\n            flag = false;\n            int\
    \ count = 0;\n            for(int j=0;j<temp.length();j++){\n                if(isalpha(temp[j])){\n\
    \                    count++;\n                }\n            }\n            if(count\
    \ == 0){\n                result += temp;\n            }\n        }\n    }\n \
    \   return result;", "    // Write your code here\n    std::string ans = \"\"\
    ;\n    for(int i = 0; i < sentence.length(); i++) {\n        for(int j = i + 1;\
    \ j < sentence.length(); j++) {\n            if(isPrime(j - i) && isPrime(j -\
    \ i + 1)) {\n                ans += sentence.substr(i, j);\n                ans\
    \ += \" \";\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = true;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] != ' ') {\n            flag = false;\n      \
    \      break;\n        }\n    }\n    if(flag) {\n        for(int i = 0; i < sentence.length();\
    \ i++) {\n            if(sentence[i] != ' ') {\n                ans += sentence[i];\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = true;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        if (sentence[i] != ' ') {\n            flag = false;\n\
    \        }\n    }\n    if (flag) {\n        std::cout << \"No spaces found\" <<\
    \ std::endl;\n        return ans;\n    }\n    int count = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            count++;\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    for (int i\
    \ = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += \"\
    \ \";\n        }\n    }\n    for (int i = count; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n\
    \    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] ==\
    \ ' ') {\n            flag = true;\n        }\n        if (flag) {\n         \
    \   temp += sentence[i];\n        }\n        if ((i + 1) % 2 == 0) {\n       \
    \     ans += temp;\n            temp = \"\";\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n\
    \    int len = sentence.length();\n    for (int i = 0; i < len; i++) {\n     \
    \   if (sentence[i] == ' ') {\n            flag = true;\n            ans += temp;\n\
    \            temp = \"\";\n        } else {\n            temp += sentence[i];\n\
    \        }\n    }\n    ans += temp;\n    return ans;", "    std::string ans =\
    \ \"\";\n    std::string temp = \"\";\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp\
    \ += sentence[i];\n        } else {\n            ans += temp;\n            temp\
    \ = \"\";\n        }\n    }\n    ans += temp;\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    int n\
    \ = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ == ' ') {\n            if (flag) {\n                ans += temp;\n         \
    \       temp = \"\";\n                flag = false;\n            } else {\n  \
    \              flag = true;\n            }\n        } else {\n            temp\
    \ += sentence[i];\n        }\n    }\n    if (flag) {\n        ans += temp;\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    std::string word =\
    \ \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n \
    \       word = sentence + i;\n        if (is_prime(word.length())) {\n       \
    \     ans += word;\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int i\
    \ = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n    \
    \        if (flag) {\n                ans += temp;\n                temp = \"\"\
    ;\n                flag = false;\n            } else {\n                flag =\
    \ true;\n            }\n        } else {\n            temp += sentence[i];\n \
    \       }\n    }\n    ans += temp;\n    return ans;", "    std::string ans = \"\
    \";\n    std::string temp = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      flag = true;\n            temp += sentence[i];\n        } else {\n    \
    \        if (flag) {\n                ans += temp;\n                flag = false;\n\
    \                temp = \"\";\n            }\n        }\n    }\n    if (flag)\
    \ {\n        ans += temp;\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    std::string temp = \"\";\n    bool flag = false;\n    for(int i = 0; i\
    \ < sentence.length(); i++) {\n        if(sentence[i] == ' ') {\n            flag\
    \ = true;\n            ans += temp;\n            temp = \"\";\n        } else\
    \ {\n            temp += sentence[i];\n        }\n    }\n    ans += temp;\n  \
    \  for(int i = 0; i < ans.length(); i++) {\n        if(i%2 != 0) {\n         \
    \   assert(ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' ||\
    \ ans[i] == 'u');\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int i\
    \ = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n    \
    \        temp = temp + sentence[i];\n        } else {\n            ans = ans +\
    \ \" \" + temp;\n            temp = temp;\n        }\n    }\n    ans = ans + \"\
    \ \" + temp;\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" \") {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 2; i < ans.length(); i++) {\n        if (ans[i]\
    \ == \" ", "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool\
    \ flag = false;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++)\
    \ {\n        if (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n\
    \        } else {\n            ans = ans + temp;\n            temp = \"\";\n \
    \       }\n    }\n    ans = ans + temp;\n    for (int i = 0; i < n; i++) {\n \
    \       if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\0' || ans[i] == ' ') {", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    int n = sentence.length();\n    for(int i = 0;\
    \ i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if((isPrime(sentence.at(i)))\
    \ && (isPrime(sentence.at(j)))) {\n                flag = true;\n            \
    \    ans += sentence.at(i) + \" \";\n                ans += sentence.at(j) + \"\
    \ \";\n                break;\n            }\n        }\n    }\n    if(flag) {\n\
    \        ans = ans.substr(0, ans.length() - 2);\n    }\n    return ans;", "  \
    \  std::string ans;\n    ans = sentence;\n    int n = sentence.length();\n   \
    \ for (int i = 1; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n \
    \           if (isPrime(j - i) && isPrime(i)) {\n                ans.replace(i,\
    \ j - i, \" \");\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++)\
    \ {\n        int count = 0;\n        for (int j = i; j < n; j++) {\n         \
    \   if (sentence[j] == ' ') {\n                count++;\n            }\n     \
    \   }\n        if (count == 0) {\n            ans += sentence[i];\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    for (auto &c : sentence) {\n        if (c\
    \ == ' ') {\n            flag = true;\n            temp += c;\n        } else\
    \ {\n            if (flag) {\n                ans += temp;\n                temp\
    \ = \"\";\n                flag = false;\n            }\n            ans += c;\n\
    \        }\n    }\n    return ans;", "    std::string ans;\n    ans = sentence;\n\
    \    int n = sentence.length();\n    for (int i = 1; i < n; i++) {\n        bool\
    \ flag = false;\n        for (int j = i; j < n; j++) {\n            if (isPrime(j))\
    \ {\n                flag = true;\n                break;\n            }\n   \
    \     }\n        if (flag) {\n            ans = ans + \" \" + sentence[i];\n \
    \       }\n    }\n    return ans;", "    std::string ans;\n    std::string temp;\n\
    \    int n = sentence.length();\n    for(int i=0;i<n;i++){\n        if(isPrime(sentence.at(i))){\n\
    \            ans += sentence.at(i);\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        int count = 0;\n        for (int j = i; j < n; j++) {\n\
    \            if (sentence[i] == sentence[j]) {\n                count++;\n   \
    \         }\n        }\n        if (count == 2) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans;\n    bool flag = false;\n\
    \    int n = sentence.length();\n    for(int i = 0; i<n; i++){\n        if(isalpha(sentence[i])){\n\
    \            flag = true;\n            ans += sentence[i];\n        }\n      \
    \  if(flag == true){\n            flag = false;\n            ans += \" \";\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        }\
    \ else {\n            flag = true;\n        }\n    }\n    if (flag) {\n      \
    \  std::cout << \"No words in the sentence\" << std::endl;\n        return ans;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n;\
    \ j++) {\n            if (isPrime(j - i)) {\n                ans += sentence[i]\
    \ + \" \";\n                flag = true;\n                break;\n           \
    \ }\n        }\n    }\n    if (flag) {\n        std::cout << \"No words in the\
    \ sentence\" << std::endl;\n        return ans;\n    }\n    return ans;", "  \
    \  std::string result;\n    std::string word;\n    bool flag = false;\n    int\
    \ len = sentence.length();\n    for (int i = 0; i < len; i++) {\n        flag\
    \ = false;\n        word = sentence[i];\n        for (int j = i + 1; j < len;\
    \ j++) {\n            if (isPrime(j - i) && isPrime(j - i + 1)) {\n          \
    \      flag = true;\n                break;\n            }\n        }\n      \
    \  if (flag) {\n            result += \" \" + word;\n        }\n    }\n    return\
    \ result;", "    // Write your code here\n    std::string ans;\n    for(int i=0;i<sentence.size();i++){\n\
    \        for(int j=i+1;j<sentence.size();j++){\n            if(isPrime(sentence.size()-i)&&isPrime(sentence.size()-j)){\n\
    \                ans.push_back(sentence[i]);\n                ans.push_back(sentence[j]);\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n\
    \            ans += sentence[i];\n        }\n        if (flag) {\n           \
    \ ans += sentence[i];\n        }\n    }\n    for (int i = 2; i < n; i++) {\n \
    \       if (ans.find(std::to_string(i)) != std::string::npos) {\n            flag\
    \ = true;\n        }\n        if (flag) {\n            ans += sentence[i];\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    \n    //\
    \ Your code goes here\n    \n    return ans;", "    std::string ans = \"\";\n\
    \    \n    // Your code goes here\n    \n    return ans;", "    std::string ans\
    \ = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n        } else {\n            flag = true;\n        }\n    }\n\
    \    if (flag) {\n        std::cout << \"No space found\" << std::endl;\n    }\n\
    \    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(\" \"));\n        }\n    }\n   \
    \ for (int i = 1; i < n; i++) {\n        if (ans.find(i) != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for\
    \ (int i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n\
    \            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int\
    \ i = 3; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n    \
    \        ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i =\
    \ 4; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n        \
    \    ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 5;\
    \ i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n           \
    \ ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 6; i <\
    \ n; i++) {\n        if (ans.find(i) != std::string::npos) {\n            ans\
    \ = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 7; i < n;\
    \ i++) {\n        if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(i));\n        }\n    }\n    for (int i = 8; i < n; i++) {\n       \
    \ if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n\
    \        }\n    }\n    for (int i = 9; i < n; i++) {\n        if (ans.find(i)\
    \ != std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n   \
    \     }\n    }\n    for (int i = 10; i < n; i++) {\n        if (ans.find(i) !=\
    \ std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n      \
    \  }\n    }\n    for (int i = 11; i < n; i++) {\n        if (ans.find(i) != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for\
    \ (int i = 12; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n\
    \            an", "    std::string ans = \"\";\n    int n = sentence.length();\n\
    \    bool flag = false;\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        } else {\n            flag\
    \ = true;\n        }\n    }\n    if (flag) {\n        ans += \" \";\n    }\n \
    \   for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n       \
    \     ans += sentence[i];\n        }\n    }\n    for (int i = 2; i < n; i++) {\n\
    \        if (ans.find(std::to_string(i)) != std::string::npos) {\n           \
    \ ans.replace(ans.find(std::to_string(i)), std::to_string(i), \"\");\n       \
    \ }\n    }\n    return ans;", "    std::string ans = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        std::string temp = sentence;\n   \
    \     int count = 0;\n        for (int j = 0; j < i; j++) {\n            if (temp[j]\
    \ == ' ') {\n                count++;\n            }\n        }\n        if (count\
    \ == i) {\n            ans += temp;\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    \n    // Your code here\n    \n    return ans;",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n\
    \    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] !=\
    \ ' ') {\n            temp = temp + sentence[i];\n        } else {\n         \
    \   if (flag == false) {\n                ans = ans + temp;\n                flag\
    \ = true;\n                temp = \"\";\n            } else {\n              \
    \  ans = ans + \" \" + temp;\n                flag = false;\n                temp\
    \ = \"\";\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    ans = sentence;\n    int n = sentence.length();\n    for (int i =\
    \ 1; i < n; i++) {\n        for (int j = i + 1; j <= n; j++) {\n            if\
    \ (isPrime(j - i) && ans[j - i] == ' ') {\n                ans[j - i] = ans[i];\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans;\n  \
    \  ans = sentence;\n    int n = sentence.length();\n    for (int i = 1; i < n;\
    \ i++) {\n        for (int j = 1; j <= n / i; j++) {\n            if (i % j ==\
    \ 0) {\n                ans = ans.substr(0, i - 1) + ans.substr(i - 1, j - 1)\
    \ + ans.substr(i - 1, j);\n            }\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n        } else\
    \ {\n            ans = ans + temp;\n            temp = \"\";\n        }\n    }\n\
    \    ans = ans + temp;\n    for (int i = 0; i < n; i++) {\n        if (ans[i]\
    \ == '\\n' || ans[i] == '\\r' || ans[i] == '\\t') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans[i] == '\\n' || ans[i] == '\\r' || ans[i] == '\\t') {\n      \
    \      ans = ans.substr(0, i);\n            break;\n        }\n    }\n    for\
    \ (int i = 0; i < n; i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\r' ||\
    \ ans[i] == '\\t') {\n            ans = ans.substr(0, i);\n            break;\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == '\\\
    n' || ans[i] == '\\r' || ans[i] == '\\t') {\n            ans = ans.substr(0, i);\n\
    \            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n   \
    \     if (ans[i] == '\\n' || ans[i] == '\\r' || ans[i] == '\\t') {\n         \
    \   ans = ans.substr(0, i);\n            break;\n        }\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\r' || ans[i]\
    \ == '\\t') {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == '\\n' ||\
    \ ans[i] == '\\r' || ans[i] == '\\t') {\n            ans = ans.substr(0, i);\n\
    \            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n   \
    \     if (ans[i] == '\\n' || ans[i] == '\\r' || ans[i] == '\\t') {\n         \
    \   ans = ans.substr(0, i);\n            break;\n        }\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\r' || ans[i]\
    \ == '\\t') {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == '\\n' ||\
    \ ans[i] == '\\r' || ans[i] == '\\t') {\n            ans = ans.substr(0, i);\n\
    \            break;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n   \
    \     if (ans[i] == '\\n' || ans[i] == '\\r' || ans[i] == '\\t') {\n         \
    \   ans = ans.substr(0, i);\n            break;\n        }\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (ans[i] == '\\n' || ans[i] == '\\r' || ans[i]\
    \ == '\\t') {\n            ans = ans.substr(0, i);\n            break;\n     \
    \   }\n    }\n    for (int i = 0; i < ", "    std::string result;\n    std::string\
    \ word;\n    int n = sentence.length();\n    for(int i = 0; i < n; i++) {\n  \
    \      word = sentence[i];\n        for(int j = i + 1; j < n; j++) {\n       \
    \     if(isPrime(j - i) && isPrime(j - i + 1)) {\n                result += word;\n\
    \                i = j;\n            }\n        }\n    }\n    return result;",
  "    // Write your code here\n    std::string ans = \"\";\n    std::string temp\
    \ = \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n\
    \        if (i % 2 == 0) {\n            temp = temp + sentence[i];\n        }\
    \ else {\n            ans = ans + temp;\n            temp = \"\";\n        }\n\
    \    }\n    ans = ans + temp;\n    return ans;", "    std::string ans = \"\";\n\
    \    std::string word = \"\";\n    int n = sentence.length();\n    for (int i\
    \ = 0; i < n; i++) {\n        word = sentence + i;\n        int count = 0;\n \
    \       for (int j = i; j < n; j++) {\n            if (isPrime(j)) {\n       \
    \         count++;\n            }\n        }\n        if (count == 2) {\n    \
    \        ans += word;\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans +=\
    \ sentence[i];\n        } else {\n            flag = true;\n        }\n    }\n\
    \    if (flag) {\n        return ans;\n    }\n    ans = \"\";\n    for (int i\
    \ = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool isPrime\
    \ = true;\n    for (int i = 0; i < sentence.length(); i++) {\n        char c =\
    \ sentence[i];\n        if (isdigit(c)) {\n            ans += c;\n        }\n\
    \        else {\n            ans += ' ';\n            isPrime = false;\n     \
    \   }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            isPrime = false;\n        }\n    }\n    if (isPrime) {\n    \
    \    return ans;\n    }\n    for (int i = 0; i < ans.length(); i++) {\n      \
    \  if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i])) {\n     \
    \       ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (isdigit(ans[i])) {\n            ans[i] = ' ';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (isdigit(ans[i]))\
    \ {", "    std::string ans = \"\";\n    std::string temp = \"\";\n    bool flag\
    \ = false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        } else {\n            flag\
    \ = true;\n            temp = ans;\n            ans = \"\";\n            for (int\
    \ j = 0; j < temp.length(); j++) {\n                if (isPrime(temp.length()\
    \ - j - 1) && temp.length() - j - 1 != i) {\n                    ans += temp.substr(j,\
    \ 1);\n                    flag = false;\n                    break;\n       \
    \         }\n            }\n            if (flag) {\n                ans += temp.substr(temp.length()\
    \ - 1, 1);\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] >= 'a' && sentence[i] <= 'z') {\n          \
    \  flag = true;\n            ans += sentence[i];\n        }\n        else if (flag)\
    \ {\n            ans += \" \";\n            flag = false;\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i]\
    \ <= 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] % 2 != 0) {\n     \
    \       ans[i] = ans[i] + 1;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] % 3 != 0) {\n            ans[i] = ans[i] + 2;\n \
    \       }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ % 5 != 0) {\n            ans[i] = ans[i] + 3;\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] % 7 != 0) {\n          \
    \  ans[i] = ans[i] + 4;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] % 11 != 0) {\n            ans[i] = ans[i] + 5;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ % 13 != 0) {\n            ans[i] = ans[i] + 6;\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] % 17 != 0) {\n         \
    \   ans[i] = ans[i] + 7;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] % 19 != 0) {\n            ans[i] = ans[i] + 8;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ % 23 != 0) {\n            ans[i] = ans[i] + 9;\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] % 29 != 0) {\n         \
    \   ans[i] = ans[i] + 10;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] % 31 != 0) {\n            ans[i] = ans[i] + 11;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ % 37 != 0) {\n            ans[i] = ans[i] + 12;\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] % 41 != 0) {\n         \
    \   ans[i] = ans[i] + 13;\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] % 43 == 0) {\n            ans[i] = ans[i] + 14;\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i]\
    \ % 47 != 0) {\n            ans[i] = ans[i] + 15;\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] ", "    // Write your code\
    \ here\n    std::string result;\n    for(int i=0;i<sentence.size();i++){\n   \
    \     for(int j=i+1;j<sentence.size();j++){\n            if(isPrime(sentence.size()-i)&&isPrime(sentence.size()-j)){\n\
    \                result += sentence.substr(i,j);\n            }\n        }\n \
    \   }\n    return result;", "    // Write your code here\n    \n    std::string\
    \ ans = \"\";\n    \n    for(int i = 0; i < sentence.length(); i++) {\n      \
    \  \n        for(int j = i + 1; j < sentence.length(); j++) {\n            \n\
    \            if(isPrime(j - i)) {\n                ans += sentence[i] + \" \"\
    ;\n                ans += sentence[j];\n            }\n        }\n    }\n    \n\
    \    return ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n\
    \    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n \
    \       if (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n  \
    \      } else {\n            if (flag) {\n                ans = ans + \" \" +\
    \ temp;\n                temp = \"\";\n                flag = false;\n       \
    \     } else {\n                ans = ans + \" \" + temp;\n                temp\
    \ = \"\";\n                flag = true;\n            }\n        }\n    }\n   \
    \ return ans;", "    std::string ans = \"\";\n    std::string temp = \"\";\n \
    \   std::string temp2 = \"\";\n    bool flag = false;\n    int count = 0;\n  \
    \  int flag2 = 0;\n    for (int i = 0; i < sentence.length(); i++) {\n       \
    \ if (sentence[i] != ' ') {\n            ans += sentence[i];\n            count++;\n\
    \        } else {\n            if (flag == false) {\n                temp = ans;\n\
    \                ans = \"\";\n                flag = true;\n            }\n  \
    \          if (flag2 == false) {\n                temp2 = temp;\n            \
    \    temp = \"\";\n                flag2 = true;\n            }\n            if\
    \ (count == 2) {\n                ans += temp2;\n                ans += temp;\n\
    \                count = 0;\n                temp2 = \"\";\n                temp\
    \ = \"\";\n                flag2 = false;\n                flag = false;\n   \
    \         }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    std::string temp = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      temp = temp + sentence[i];\n        } else {\n            if (flag == true)\
    \ {\n                ans = ans + \" \" + temp;\n                temp = \"\";\n\
    \                flag = false;\n            } else {\n                ans = ans\
    \ + \" \" + temp;\n                temp = \"\";\n                flag = true;\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = true;\n    for(int i=0;i<sentence.size();i++){\n        if(isalpha(sentence[i])){\n\
    \            if(flag){\n                ans += sentence[i];\n                flag\
    \ = false;\n            }\n        }\n        else{\n            flag = true;\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    int n =\
    \ sentence.length();\n    for (int i = 0; i < n; i++) {\n        std::string s\
    \ = sentence.substr(i, 1);\n        int count = 0;\n        for (int j = 0; j\
    \ < n; j++) {\n            if (s[j] == s[i]) {\n                count++;\n   \
    \         }\n        }\n        if (count % 2 == 0) {\n            ans += s;\n\
    \        }\n    }\n    return ans;", "    std::string ans;\n    std::string temp;\n\
    \    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n        if(sentence[i]=='\
    \ '){\n            flag = true;\n        }\n        if(flag){\n            temp.push_back(sentence[i]);\n\
    \        }\n    }\n    for(int i=0;i<temp.size();i++){\n        for(int j=i+1;j<temp.size();j++){\n\
    \            if(temp[i]==temp[j]){\n                flag = false;\n          \
    \  }\n        }\n        if(flag){\n            ans.push_back(temp[i]);\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag =\
    \ false;\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ != ' ') {\n            ans += sentence[i];\n        } else {\n            flag\
    \ = true;\n        }\n    }\n    if (flag) {\n        ans += \" \";\n    }\n \
    \   for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i]\
    \ <= 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = ans.length() - 1; i >= 0; i--) {\n        if (ans[i] >= 'a' && ans[i]\
    \ <= 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= '0' && ans[i] <=\
    \ '9') {\n            ans[i] = ans[i] - '0' + '0';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <=\
    \ 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= '0' && ans[i] <=\
    \ '9') {\n            ans[i] = ans[i] - '0' + '0';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <=\
    \ 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= '0' && ans[i] <=\
    \ '9') {\n            ans[i] = ans[i] - '0' + '0';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <=\
    \ 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= '0' && ans[i] <=\
    \ '9') {\n            ans[i] = ans[i] - '0' + '0';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <=\
    \ 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= '0' && ans[i] <=\
    \ '9') {\n            ans[i] = ans[i] - '0' + '0';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] >= 'a' && ans[i] <=\
    \ 'z') {\n            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] ", "    std::string\
    \ ans = \"\";\n    \n    // Your code goes here\n    \n    return ans;", "   \
    \ // Write your code here\n    std::string ans = \"\";\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(isPrime(sentence[i])){\n            ans += sentence[i];\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp =\
    \ temp + sentence[i];\n        } else {\n            ans = ans + temp;\n     \
    \       temp = temp + sentence[i];\n        }\n    }\n    ans = ans + temp;\n\
    \    ans = ans + \" \";\n    for (int i = 0; i < n; i++) {\n        if (ans[i]\
    \ == ' ') {\n            flag = true;\n        }\n    }\n    if (flag) {\n   \
    \     ans = ans + temp;\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] == ' ') {\n            flag = true;\n            ans\
    \ += sentence[i];\n        }\n        else if (flag) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    int n =\
    \ sentence.length();\n    for (int i = 0; i < n; i++) {\n        std::string word\
    \ = sentence.substr(i, 1);\n        bool isPrime = true;\n        for (int j =\
    \ i; j < n; j++) {\n            if (j % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          ans += word;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++)\
    \ {\n        bool flag = true;\n        for (int j = i + 1; j < n; j++) {\n  \
    \          if (isPrime(j - i)) {\n                flag = false;\n            \
    \    break;\n            }\n        }\n        if (flag) {\n            ans +=\
    \ sentence[i] + \" \";\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    std::string word = \"\";\n    bool flag = false;\n    for (auto\
    \ &c : sentence) {\n        if (c == ' ') {\n            flag = true;\n      \
    \      ans += word;\n            word = \"\";\n        } else {\n            word\
    \ += c;\n        }\n    }\n    if (flag) {\n        ans += word;\n    }\n    return\
    \ ans;", "    std::string ans;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(isalpha(sentence[i])){\n            flag = true;\n            ans\
    \ += sentence[i];\n        }\n        else{\n            if(flag){\n         \
    \       ans += \" \";\n                flag = false;\n            }\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            temp =\
    \ temp + sentence[i];\n        } else {\n            ans = ans + temp;\n     \
    \       temp = temp + sentence[i];\n        }\n    }\n    ans = ans + temp;\n\
    \    for (int i = 0; i < n; i++) {\n        if (ans[i] % 2 == 0) {\n         \
    \   flag = true;\n            break;\n        }\n    }\n    if (flag) {\n    \
    \    return ans;\n    } else {\n        return \"\";\n    }", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    int n\
    \ = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            temp += sentence[i];\n        } else {\n            if\
    \ (flag) {\n                ans += temp;\n                temp = \"\";\n     \
    \           flag = false;\n            }\n        }\n    }\n    if (flag) {\n\
    \        ans += temp;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    bool flag = false;\n    int n = sentence.length();\n    for (int i = 0; i\
    \ < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag ==\
    \ true) {\n        ans += \" \";\n    }\n    for (int i = 0; i < n; i++) {\n \
    \       if (ans.find(\" \") != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(\" \"));\n        }\n    }\n    for (int i = 0; i < n; i++) {\n   \
    \     if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(i));\n        }\n    }\n    for (int i = 2; i < n; i++) {\n       \
    \ if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n\
    \        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans.find(i)\
    \ != std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n   \
    \     }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans.find(i) !=\
    \ std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n      \
    \  }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for\
    \ (int i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n\
    \            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n    \
    \        ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i =\
    \ 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n        \
    \    ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 2;\
    \ i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n           \
    \ ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 2; i <\
    \ n; i++) {\n        if (ans.find(i) != std::string::npos) {\n            ans\
    \ = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 2; i < n;\
    \ i++) {\n        if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(i));\n        }\n    }\n    for (int i = 2; i < n; i++) {\n       \
    \ if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(", " \
    \   std::string ans;\n    for(int i=0;i<sentence.size();i++){\n        for(int\
    \ j=i+1;j<sentence.size();j++){\n            for(int k=j+1;k<sentence.size();k++){\n\
    \                if(isPrime(sentence[i]+sentence[j]+sentence[k])){\n         \
    \           ans += sentence[i]+sentence[j]+sentence[k];\n                }\n \
    \           }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        if(sentence[i] != ' ') {\n            ans += sentence[i];\n         \
    \   flag = true;\n        }\n    }\n    if(flag) {\n        for(int i = 0; i <\
    \ ans.length(); i++) {\n            for(int j = i + 1; j < ans.length(); j++)\
    \ {\n                if(isPrime(ans.length()) && isPrime(j)) {\n             \
    \       if(ans[i] == ans[j]) {\n                        ans = ans.substr(0, i)\
    \ + ans.substr(j + 1);\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans;\n    std::string temp;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(isalpha(sentence[i])){\n            flag = true;\n            ans\
    \ += sentence[i];\n        }\n        if(flag){\n            flag = false;\n \
    \           temp = ans + \" \" + sentence[i];\n            for(int j=i+1;j<sentence.size();j++){\n\
    \                if(isalpha(sentence[j])){\n                    flag = true;\n\
    \                    ans += \" \" + sentence[j];\n                }\n        \
    \    }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n   \
    \ int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        int count\
    \ = 0;\n        for (int j = i; j < n; j++) {\n            if (sentence[i] ==\
    \ sentence[j]) {\n                count++;\n            }\n        }\n       \
    \ if (count % 2 == 0) {\n            ans += sentence[i] + \" \";\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for (auto &i : sentence) {\n        if (i == '.') {\n            flag = true;\n\
    \            continue;\n        }\n        if (flag) {\n            ans += i;\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for(int i=0;i<sentence.size();i++){\n        if(isalpha(sentence[i])){\n\
    \            flag = true;\n            ans += sentence[i];\n        }\n      \
    \  if(flag){\n            flag = false;\n            ans += \" \";\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++)\
    \ {\n        if(sentence[i] == ' ') {\n            flag = true;\n            ans\
    \ += temp;\n            temp = \"\";\n        } else {\n            temp += sentence[i];\n\
    \        }\n    }\n    ans += temp;\n    for(int i = 0; i < ans.length(); i++)\
    \ {\n        if(i == ans.length() - 1) {\n            flag = true;\n        }\n\
    \        if(flag == true) {\n            int count = 0;\n            for(int j\
    \ = i; j < ans.length(); j++) {\n                if(ans[j] == ' ') {\n       \
    \             count++;\n                }\n            }\n            if(count\
    \ == 2) {\n                ans = ans.substr(0, i);\n            }\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    std::string word =\
    \ \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n \
    \       word = sentence[i];\n        int count = 0;\n        for (int j = i; j\
    \ < n; j++) {\n            if (j % i == 0) {\n                count++;\n     \
    \       }\n        }\n        if (count == 2) {\n            ans += word;\n  \
    \      }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    \n    // Your code here\n    \n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        std::cout << \"No space found\" << std::endl;\n        return ans;\n\
    \    }\n    int n = ans.length();\n    for (int i = 0; i < n; i++) {\n       \
    \ if (ans[i] == '.') {\n            ans[i] = ' ';\n        }\n    }\n    std::string\
    \ new_ans = \"\";\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == '.')\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        if (ans[i] != 'a' && ans[i] != 'e' && ans[i] != 'i' && ans[i] !=\
    \ 'o' && ans[i] != 'u') {\n            ans[i] = ' ';\n        }\n    }\n    for\
    \ (int i = 0; i < n; i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i]\
    \ == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ' ';\n   \
    \     }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == 'a' ||\
    \ ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n      \
    \      ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' ||\
    \ ans[i] == 'u') {\n            ans[i] = ' ';\n        }\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] ==\
    \ 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ' ';\n      \
    \  }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ' ';\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ' ';\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] ==\
    \ 'o' || ans[i] == 'u') {\n            ans[i] = ' ';\n        }\n    }\n    for\
    \ (int i = 0; i < n; i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i]\
    \ == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ' ';\n   \
    \     }\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] == 'a' ||\
    \ ans[i] == 'e' || an", "    std::string ans = \"\";\n    std::string word;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        word\
    \ = sentence[i];\n        for (int j = i + 1; j < n; j++) {\n            if (isPrime(j\
    \ - i) && isPrime(j - i)) {\n                ans += word;\n                i =\
    \ j;\n            }\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < sentence.length(); i++) {\n        if (sentence[i] != ' ') {\n  \
    \          temp += sentence[i];\n        } else {\n            if (flag == true)\
    \ {\n                ans += temp;\n                temp = \"\";\n            \
    \    flag = false;\n            }\n        }\n    }\n    if (flag == true) {\n\
    \        ans += temp;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    bool flag = false;\n    int n = sentence.length();\n    for (int i = 0; i\
    \ < n; i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag ==\
    \ false) {\n        return ans;\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      if (ans.find(\" \") != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(\" \"));\n        }\n    }\n    int count = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (ans.find(sentence[i]) != std::string::npos) {\n \
    \           count++;\n        }\n    }\n    for (int i = 2; i <= n / 2; i++) {\n\
    \        if (n % i == 0) {\n            ans = ans + \" \";\n            n = n\
    \ / i;\n            count = 0;\n            for (int i = 0; i < n; i++) {\n  \
    \              if (ans.find(sentence[i]) != std::string::npos) {\n           \
    \         count++;\n                }\n            }\n            if (count ==\
    \ n) {\n                ans = ans + sentence[i];\n            }\n        }\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    for (auto &c : sentence) {\n        if (c == ' ') {\n            flag = true;\n\
    \        }\n        if (flag) {\n            ans += c;\n        }\n    }\n   \
    \ ans = ans.substr(0, ans.length() - 1);\n    ans = ans.substr(0, ans.length()\
    \ / 2);\n    return ans;", "    std::string ans = \"\";\n    bool flag = true;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        char\
    \ ch = sentence[i];\n        if (ch == ' ') {\n            flag = true;\n    \
    \    } else {\n            flag = false;\n        }\n        if (flag) {\n   \
    \         ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n            ans += ch;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        char ch = sentence[i];\n        if (ans.find(ch) == std::string::npos)\
    \ {\n", "    std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n\
    \            if((isPrime(sentence.at(i))) && (isPrime(sentence.at(j)))) {\n  \
    \              flag = true;\n                ans += sentence.at(i) + \" \";\n\
    \                ans += sentence.at(j) + \" \";\n                break;\n    \
    \        }\n        }\n    }\n    if(flag) {\n        ans = ans.substr(0, ans.length()\
    \ - 2);\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            flag\
    \ = true;\n        }\n    }\n    if (flag == false) {\n        std::cout << \"\
    Invalid input\" << std::endl;\n    }\n    for (int i = 0; i < n; i++) {\n    \
    \    if (sentence[i] != ' ') {\n            temp = temp + sentence[i];\n     \
    \   }\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if\
    \ (temp[i] != ' ') {\n            count++;\n        }\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        if (temp[i] != ' ') {\n            if (temp[i] % 2\
    \ == 0) {\n                ans = ans + temp[i];\n            }\n        }\n  \
    \  }\n    return ans;", "    std::string ans = \"\";\n    bool flag = true;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        char\
    \ c = sentence[i];\n        if (c == ' ') {\n            flag = true;\n      \
    \      continue;\n        }\n        if (flag) {\n            ans += c;\n    \
    \        flag = false;\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n\
    \        bool isPrime = true;\n        for (int j = 2; j < i; j++) {\n       \
    \     if (i % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n\
    \        if (sentence[i] != ' ') {\n            ans += sentence[i];\n        }\
    \ else {\n            flag = true;\n        }\n    }\n    if (flag) {\n      \
    \  ans += ' ';\n    }\n    for (int i = 0; i < n; i++) {\n        if (ans[i] ==\
    \ ' ') {\n            ans = ans.substr(0, i);\n            break;\n        }\n\
    \    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i] == ' ') {\n    \
    \        ans = ans.substr(0, i);\n            break;\n        }\n    }\n    for\
    \ (int i = 2; i < n; i++) {\n        if (ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n\
    \        if (ans[i] == ' ') {\n            ans = ans.substr(0, i);\n         \
    \   break;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i]\
    \ == ' ') {\n            ans = ans.substr(0, i);\n            break;\n       \
    \ }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i] == ' ') {\n\
    \            ans = ans.substr(0, i);\n            break;\n        }\n    }\n \
    \   for (int i = 2; i < n; i++) {\n        if (ans[i] == ' ') {\n            ans\
    \ = ans.substr(0, i);\n            break;\n        }\n    }\n    for (int i =\
    \ 2; i < n; i++) {\n        if (ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n\
    \        if (ans[i] == ' ') {\n            ans = ans.substr(0, i);\n         \
    \   break;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i]\
    \ == ' ') {\n            ans = ans.substr(0, i);\n            break;\n       \
    \ }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i] == ' ') {\n\
    \            ans = ans.substr(0, i);\n            break;\n        }\n    }\n \
    \   for (int i = 2; i < n; i++) {\n        if (ans[i] == ' ') {\n            ans\
    \ = ans.substr(0, i);\n            break;\n        }\n    }\n    for (int i =\
    \ 2; i < n; i++) {\n        if (ans[i] == ' ') {\n            ans = ans.substr(0,\
    \ i);\n            break;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n\
    \        if (ans[i] == ' ') {\n            ans = ans.substr(0, i);\n         \
    \   break;\n        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i]\
    \ == ' ') {\n            ans = ans.substr(0, i);\n            break;\n       \
    \ }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans[i] == ' ') {\n\
    \            ans = ans.substr(0, i);", "    std::string ans = \"\";\n    bool\
    \ isPrime = true;\n    for(int i = 0; i <= 100; i++){\n        for(int j = 2;\
    \ j <= i; j++){\n            if(i%j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime){\n    \
    \        ans += std::to_string(i);\n            isPrime = true;\n        }\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    std::string temp =\
    \ \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n \
    \       if (temp.length() == 0) {\n            temp = sentence[i];\n        }\
    \ else {\n            if (sentence[i] == ' ') {\n                ans += temp;\n\
    \                temp = \"\";\n            } else {\n                temp += sentence[i];\n\
    \            }\n        }\n    }\n    ans += temp;\n    return ans;", "    std::string\
    \ ans = \"\";\n    int n = sentence.length();\n    bool flag = true;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    if (flag) {\n        for\
    \ (int i = 0; i < n; i++) {\n            if (sentence[i] != ' ') {\n         \
    \       for (int j = i + 1; j < n; j++) {\n                    if (sentence[j]\
    \ != ' ') {\n                        for (int k = j + 1; k < n; k++) {\n     \
    \                       if (sentence[k] != ' ') {\n                          \
    \      for (int l = k + 1; l < n; l++) {\n                                   \
    \ if (sentence[l] != ' ') {\n                                        for (int\
    \ m = l + 1; m < n; m++) {\n                                            if (sentence[m]\
    \ != ' ') {\n                                                for (int n = m +\
    \ 1; n < n; n++) {\n                                                    if (sentence[n]\
    \ != ' ') {\n                                                        for (int\
    \ o = n + 1; o < n; o++) {\n                                                 \
    \           if (sentence[o] != ' ') {\n                                      \
    \                          for (int p = o + 1; p < n; p++) {\n               \
    \                                                     if (sentence[p] != ' ')\
    \ {\n                                                                        for\
    \ (int q = p + 1; q < n; q++) {\n                                            \
    \                                if (sentence[q] != ' ') {\n                 \
    \                                                               for (int r = q\
    \ + 1; r < n; r++) {\n                                                       \
    \                             if (sentence[r] != ' ') {\n                    \
    \                                                                    for (int\
    \ s = r + 1; s < n; s++) {\n                                                 \
    \                                           if (sentence[s] != ' ') {\n      \
    \                                                                            \
    \              for (int t = s + 1; t < n; t++) {\n                           \
    \                                                                         if (sentence[t]\
    \ != ' ') {\n                                                                \
    \                                        for (int u = t + 1; u < n; u++) {\n \
    \                                                                            \
    \                               if (sentence[u] != ' ') {\n                  \
    \                                                                            \
    \                  for (int v = u + 1; v < n; v++) {\n                       \
    \                                                                            \
    \                 if (sentence[v] != ' ') {\n                                \
    \                                                                            \
    \            for (int w = v + 1; w < n; w++) {\n                             \
    \                                                                            \
    \                   if (sentence[w] != ' ') {\n                              \
    \                                                                            \
    \                      for (int x = w + 1; x < n; x++) {\n                   \
    \                                                                            \
    \                                     if (sentence[x] != ' ') {\n            \
    \                                                                            \
    \                                                for (int y = x + 1; y < n; y++)\
    \ {\n                                                                        \
    \                                                                    if (sentence[y]\
    \ != ' ') {\n                                                                \
    \                                                                            \
    \    for (int z = y + 1; z < n; z++) {\n                                     \
    \                                                                            \
    \                                   if (sentence[z] != ' ') {\n              \
    \                                                                            \
    \                                                              for (int a = z\
    \ + 1; a < n; a++) {\n                                                       \
    \                                                                            \
    \                         if (sentence[a] != ' ') {\n                        \
    \                                                                            \
    \                                                            for (int b = a +\
    \ 1; b < n; b++) {\n                                                         \
    \                                                                            \
    \                               if (sentence[b] != ' ') {\n                  \
    \                                                                            \
    \                                                                          for\
    \ (int c = b + 1; c < n; c++) {\n                                            \
    \                                                                            \
    \                                                    ans += sentence[i];\n   \
    \                                                                            \
    \                                                                            \
    \             }\n                                                            \
    \                                                                            \
    \                            }\n                                             \
    \                                                                            \
    \                                       }\n                                  \
    \                              ", "    std::string ans = \"\";\n    bool flag\
    \ = false;\n    for(int i=0;i<sentence.size();i++){\n        if(sentence[i]=='\
    \ '){\n            flag = true;\n        }\n        if(flag){\n            ans\
    \ += sentence[i];\n        }\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    int len = sentence.length();\n\
    \    for (int i = 0; i < len; i++) {\n        if (sentence[i] == ' ') {\n    \
    \        flag = true;\n        }\n        if (flag) {\n            temp += sentence[i];\n\
    \        }\n        if ((i + 1) % 2 == 0) {\n            int n = stoi(temp);\n\
    \            if (isPrime(n)) {\n                ans += temp;\n               \
    \ temp = \"\";\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    \n    // Your code here\n    \n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = true;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] != ' ') {\n            flag = false;\n      \
    \      break;\n        }\n    }\n    if(flag) {\n        for(int i = 0; i < sentence.length();\
    \ i++) {\n            if(sentence[i] != ' ') {\n                ans += sentence[i];\n\
    \            }\n        }\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] == ' ') {\n            flag = true;\n        } else {\n\
    \            if (flag) {\n                ans += sentence[i];\n              \
    \  flag = false;\n            }\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      temp += sentence[i];\n        } else {\n            ans += temp;\n    \
    \        temp = \"\";\n        }\n    }\n    ans += temp;\n    return ans;", " \
    \   std::string ans = \"\";\n    bool flag = false;\n    for (auto &i : sentence)\
    \ {\n        if (i == '.') {\n            flag = true;\n        }\n        if\
    \ (flag) {\n            ans += i;\n        }\n    }\n    ans = ans.substr(0, ans.length()\
    \ - 1);\n    ans = ans.substr(0, ans.length() / 2);\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    for(int i = 0; i < sentence.length();\
    \ i++) {\n        if(sentence[i] != ' ') {\n            flag = true;\n       \
    \     ans += sentence[i];\n        }\n    }\n    if(flag == true) {\n        for(int\
    \ i = sentence.length() - 1; i >= 0; i--) {\n            if(isPrime(sentence.length()\
    \ - i)) {\n                ans += sentence[i];\n            }\n        }\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j\
    \ = i; j < n; j++) {\n            if (sentence[i] == sentence[j]) {\n        \
    \        count++;\n            }\n        }\n        if (count == 2) {\n     \
    \       ans += sentence[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n            ans\
    \ += sentence[i];\n        } else {\n            flag = true;\n        }\n   \
    \ }\n    if (flag) {\n        ans += \" \";\n    }\n    for (int i = 0; i < n;\
    \ i++) {\n        if (ans.find(\" \") != std::string::npos) {\n            ans\
    \ = ans.substr(0, ans.find(\" \"));\n        }\n    }\n    ans = ans.substr(0,\
    \ ans.length() - 1);\n    ans = ans.substr(0, ans.find_first_not_of(\"0123456789\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"!@#$%^&*()_+=-`~[]{};:,./<>?\"\
    ));\n    ans = ans.substr(0, ans.find_first_not_of(\"~`-_+='\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"~`-_+='\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    ~`-_+='\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"~`-_+='\"));\n \
    \   ans = ans.substr(0, ans.find_first_not_of(\"~`-_+='\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"~`-_+='\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    ~`-_+='\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"~`-_+='\"));\n \
    \   ans = ans.substr(0, ans.find_first_not_of(\"~`-_+='\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"~`-_+='\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"\
    ~`-_+='\"));\n    ans = ans.substr(0, ans.find_first_not_of(\"~`-_+='\"));\n \
    \   ans = ans.substr(0, ans.find_first_not_of(\"~`-_+='\"));\n    ans = ans.substr(0,\
    \ ans.find_first_not_of(\"", "    std::string ans = \"\";\n    int n = sentence.length();\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n\
    \            int m = 1;\n            for(int k = i; k <= j; k++) {\n         \
    \       if((k % i) == 0) {\n                    m++;\n                }\n    \
    \        }\n            if(m == 2) {\n                ans += sentence[i] + \"\
    \ \";\n            }\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    bool flag = false;\n    int n = sentence.length();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(sentence[i])) {\n            flag =\
    \ true;\n        }\n        if(flag) {\n            ans += sentence[i];\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    bool flag =\
    \ true;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n \
    \       char c = sentence[i];\n        if (c == ' ') {\n            flag = true;\n\
    \            continue;\n        }\n        if (flag) {\n            ans += c;\n\
    \            flag = false;\n        }\n    }\n    int count = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        char c = ans[i];\n        if (c == ' ') {\n  \
    \          count++;\n        }\n    }\n    for (int i = n; i >= 0; i--) {\n  \
    \      char c = ans[i];\n        if (c == ' ') {\n            count--;\n     \
    \   }\n        if (count == 0) {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1);\n            break;\n        }\n    }\n    return ans;", "    // write\
    \ your code here\n    \n    std::string ans = \"\";\n    \n    for(int i = 0;\
    \ i < sentence.length(); i++) {\n        \n        for(int j = i + 1; j < sentence.length();\
    \ j++) {\n            \n            int n = 1;\n            \n            for(int\
    \ k = i; k < j; k++) {\n                \n                if((sentence[k] >= 'a'\
    \ && sentence[k] <= 'z') || (sentence[k] >= 'A' && sentence[k] <= 'Z')) {\n  \
    \                  \n                    n++;\n                }\n           \
    \     \n            }\n            \n            if(n == 2) {\n              \
    \  \n                ans += sentence[i] + \" \";\n                \n         \
    \   }\n            \n        }\n        \n    }\n    \n    return ans;", "   \
    \ std::string ans = \"\";\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      ans += sentence[i];\n        } else {\n            flag = true;\n     \
    \   }\n    }\n    if (flag == true) {\n        ans += \" \";\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos) {\n\
    \            ans = ans.substr(0, ans.find(\" \"));\n        }\n    }\n    for\
    \ (int i = 0; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n\
    \            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n    \
    \        ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i =\
    \ 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n        \
    \    ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 2;\
    \ i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n           \
    \ ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 2; i <\
    \ n; i++) {\n        if (ans.find(i) != std::string::npos) {\n            ans\
    \ = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int i = 2; i < n;\
    \ i++) {\n        if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(i));\n        }\n    }\n    for (int i = 2; i < n; i++) {\n       \
    \ if (ans.find(i) != std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n\
    \        }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans.find(i)\
    \ != std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n   \
    \     }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans.find(i) !=\
    \ std::string::npos) {\n            ans = ans.substr(0, ans.find(i));\n      \
    \  }\n    }\n    for (int i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for\
    \ (int i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n\
    \            ans = ans.substr(0, ans.find(i));\n        }\n    }\n    for (int\
    \ i = 2; i < n; i++) {\n        if (ans.find(i) != std::string::npos) {\n    \
    \        ans = ans.substr(", "    std::string ans = \"\";\n    bool flag = false;\n\
    \    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sentence[i] != ' ') {\n            ans += sentence[i];\n        } else {\n\
    \            flag = true;\n        }\n    }\n    if (flag) {\n        return ans;\n\
    \    }\n    ans = ans.substr(0, ans.length() - 1);\n    for (int i = 0; i < n;\
    \ i++) {\n        if (ans.find(\" \") != std::string::npos) {\n            ans\
    \ = ans.substr(0, ans.find(\" \"));\n        }\n    }\n    ans = ans.substr(0,\
    \ ans.length() - 1);\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\"\
    \ \") != std::string::npos) {\n            ans = ans.substr(0, ans.find(\" \"\
    ));\n        }\n    }\n    ans = ans.substr(0, ans.length() - 1);\n    for (int\
    \ i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos) {\n\
    \            ans = ans.substr(0, ans.find(\" \"));\n        }\n    }\n    ans\
    \ = ans.substr(0, ans.length() - 1);\n    for (int i = 0; i < n; i++) {\n    \
    \    if (ans.find(\" \") != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(\" \"));\n        }\n    }\n    ans = ans.substr(0, ans.length() -\
    \ 1);\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(\" \"));\n        }\n    }\n   \
    \ ans = ans.substr(0, ans.length() - 1);\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans.find(\" \") != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(\" \"));\n        }\n    }\n    ans = ans.substr(0, ans.length() -\
    \ 1);\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(\" \"));\n        }\n    }\n   \
    \ ans = ans.substr(0, ans.length() - 1);\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans.find(\" \") != std::string::npos) {\n            ans = ans.substr(0,\
    \ ans.find(\" \"));\n        }\n    }\n    ans = ans.substr(0, ans.length() -\
    \ 1);\n    for (int i = 0; i < n; i++) {\n        if (ans.find(\" \") != std::string::npos)\
    \ {\n            ans = ans.substr(0, ans.find(\" \"));\n        }\n    }\n   \
    \ ans = ans.substr(0, ans.length() - 1);\n    for (int i = 0; i < n; i++) {\n\
    \        if (ans.find(\" \") != std::string::npos) {\n            ans = an", " \
    \   std::string ans = \"\";\n    int n = sentence.length();\n    for(int i = 0;\
    \ i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(isPrime(j\
    \ - i)) {\n                ans += sentence.substr(i, j);\n            }\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = false;\n    int len = 0;\n    for(int i = 0; i\
    \ < sentence.length(); i++) {\n        if(sentence[i] == ' ') {\n            flag\
    \ = true;\n            len++;\n        }\n        if(flag == true) {\n       \
    \     flag = false;\n            temp += sentence[i];\n        }\n    }\n    for(int\
    \ i = 2; i < len + 1; i++) {\n        if(!isPrime(i)) {\n            ans += temp;\n\
    \            temp = \"\";\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    bool flag = false;\n    int n\
    \ = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if (sentence[i]\
    \ != ' ') {\n            temp = temp + sentence[i];\n        } else {\n      \
    \      if (flag == true) {\n                ans = ans + \" \" + temp;\n      \
    \          temp = \"\";\n                flag = false;\n            } else {\n\
    \                ans = ans + \" \" + temp;\n                temp = \"\";\n   \
    \             flag = true;\n            }\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        int count = 0;\n        for (int j = i; j < n; j++) {\n\
    \            if (sentence[i] == sentence[j]) {\n                count++;\n   \
    \         }\n        }\n        if (count == 2) {\n            ans += sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans;\n    for(int i=0;i<sentence.size();i++){\n\
    \        for(int j=i+1;j<sentence.size();j++){\n            int n = 1;\n     \
    \       for(int k=0;k<j;k++){\n                if((sentence[i]==sentence[k])&&(sentence[j]==sentence[k+1])){\n\
    \                    n++;\n                }\n            }\n            if(n==2){\n\
    \                ans += sentence[i] + \" \";\n            }\n        }\n    }\n\
    \    return ans;", "    std::string ans;\n    std::string word;\n    int n = sentence.length();\n\
    \    for(int i = 0; i < n; i++) {\n        word = sentence[i];\n        if(isPrime(word.length()))\
    \ {\n            ans += word;\n        }\n    }\n    return ans;", "    std::string\
    \ result;\n    std::string word;\n    std::string temp;\n    bool flag = true;\n\
    \    for (int i = 0; i < sentence.length(); i++) {\n        word = sentence[i];\n\
    \        temp = result;\n        for (int j = i; j < sentence.length(); j++) {\n\
    \            if (sentence[j] == ' ') {\n                flag = false;\n      \
    \          break;\n            }\n            temp = temp + \" \" + word;\n  \
    \      }\n        if (flag) {\n            result += temp;\n        }\n      \
    \  flag = true;\n    }\n    return result;", "    std::string ans;\n    std::string\
    \ temp;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n   \
    \     if(sentence[i]==' '){\n            flag = true;\n            temp.clear();\n\
    \        }\n        if(flag){\n            temp += sentence[i];\n        }\n \
    \       if((i%2==0)&&(temp.length()%2==0)){\n            ans += temp;\n      \
    \      temp.clear();\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            ans += sentence[i];\n\
    \        } else {\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        std::cout << \"No space found\" << std::endl;\n    } else {\n       \
    \ std::cout << \"Space found\" << std::endl;\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] != '\\n' && ans[i] != '\\0') {\n            int count\
    \ = 0;\n            int j = 0;\n            while (ans[i] != '\\n' && ans[i] !=\
    \ '\\0') {\n                if (ans[i] == ' ') {\n                    count++;\n\
    \                }\n                j++;\n                i++;\n            }\n\
    \            if (count % 2 == 0) {\n                ans += ans[j];\n         \
    \   }\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    bool flag = true;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(sentence[i]==' '){\n            flag = true;\n        }\n        else{\n\
    \            if(flag){\n                temp += sentence[i];\n               \
    \ flag = false;\n            }\n            else{\n                ans += temp;\n\
    \                temp = \"\";\n                flag = true;\n            }\n \
    \       }\n    }\n    ans += temp;\n    return ans;", "    std::string ans = \"\
    \";\n    bool flag = false;\n    for (int i = 0; i < sentence.length(); i++) {\n\
    \        if (sentence[i] >= 'a' && sentence[i] <= 'z') {\n            flag = true;\n\
    \        }\n    }\n    if (flag) {\n        for (int i = 0; i < sentence.length();\
    \ i++) {\n            if (sentence[i] >= 'a' && sentence[i] <= 'z') {\n      \
    \          for (int j = i + 1; j < sentence.length(); j++) {\n               \
    \     if (sentence[j] >= 'a' && sentence[j] <= 'z') {\n                      \
    \  for (int k = j + 1; k < sentence.length(); k++) {\n                       \
    \     if (sentence[k] >= 'a' && sentence[k] <= 'z') {\n                      \
    \          for (int l = k + 1; l < sentence.length(); l++) {\n               \
    \                     if (sentence[l] >= 'a' && sentence[l] <= 'z') {\n      \
    \                                  for (int m = l + 1; m < sentence.length();\
    \ m++) {\n                                            if (sentence[m] >= 'a' &&\
    \ sentence[m] <= 'z') {\n                                                for (int\
    \ n = m + 1; n < sentence.length(); n++) {\n                                 \
    \                   if (sentence[n] >= 'a' && sentence[n] <= 'z') {\n        \
    \                                                for (int o = n + 1; o < sentence.length();\
    \ o++) {\n                                                            if (sentence[o]\
    \ >= 'a' && sentence[o] <= 'z') {\n                                          \
    \                      for (int p = o + 1; p < sentence.length(); p++) {\n   \
    \                                                                 if (sentence[p]\
    \ >= 'a' && sentence[p] <= 'z') {\n                                          \
    \                              for (int q = p + 1; q < sentence.length(); q++)\
    \ {\n                                                                        \
    \    if (sentence[q] >= 'a' && sentence[q] <= 'z') {\n                       \
    \                                                         for (int r = q + 1;\
    \ r < sentence.length(); r++) {\n                                            \
    \                                        if (sentence[r] >= 'a' && sentence[r]\
    \ <= 'z') {\n                                                                \
    \                        for (int s = r + 1; s < sentence.length(); s++) {\n \
    \                                                                            \
    \               if (sentence[s] >= 'a' && sentence[s] <= 'z') {\n            \
    \                                                                            \
    \        for (int t = s + 1; t < sentence.length(); t++) {\n                 \
    \                                                                            \
    \       if (sentence[t] >= 'a' && sentence[t] <= 'z') {\n                    \
    \                                                                            \
    \        for (int u = t + 1; u < sentence.length(); u++) {\n                 \
    \                                                                            \
    \               if (sentence[u] >= 'a' && sentence[u] <= 'z') {\n            \
    \                                                                            \
    \                        for (int v = u + 1; v < sentence.length(); v++) {\n \
    \                                                                            \
    \                                       if (sentence[v] >= 'a' && sentence[v]\
    \ <= 'z') {\n                                                                \
    \                                                        for (int w = v + 1; w\
    \ < sentence.length(); w++) {\n                                              \
    \                                                                            \
    \  if (sentence[w] >= 'a' && sentence[w] <= 'z') {\n                         \
    \                                                                            \
    \                           for (int x = ", "    std::string result;\n    std::string\
    \ word;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n \
    \       word = sentence[i];\n        if (is_prime(word.length())) {\n        \
    \    result += word;\n        }\n    }\n    return result;", "    std::string\
    \ ans;\n    std::string temp;\n    bool flag = false;\n    int n = sentence.length();\n\
    \    for(int i=0;i<n;i++){\n        if(sentence[i]==' '){\n            flag =\
    \ true;\n        }\n        if(flag){\n            temp.push_back(sentence[i]);\n\
    \        }\n    }\n    for(int i=0;i<n;i++){\n        if(i%2==0){\n          \
    \  ans.push_back(temp[i]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    std::string temp = \"\";\n    std::string temp2 = \"\";\n \
    \   int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n        if\
    \ (sentence[i] != ' ') {\n            temp += sentence[i];\n        } else {\n\
    \            temp2 += temp;\n            temp = \"\";\n        }\n    }\n    temp2\
    \ += temp;\n    temp2 = temp2.substr(0, temp2.length() - 1);\n    for (int i =\
    \ 0; i < n; i++) {\n        if (temp2.length() % i == 0) {\n            ans +=\
    \ temp2;\n            temp2 = \"\";\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    std::string temp = \"\";\n    int n = sentence.length();\n\
    \    for (int i = 0; i < n; i++) {\n        if (sentence[i] != ' ') {\n      \
    \      temp = temp + sentence[i];\n        } else {\n            ans = ans + temp;\n\
    \            temp = \"\";\n        }\n    }\n    ans = ans + temp;\n    return\
    \ ans;", "    std::string ans = \"\";\n    std::string word = \"\";\n    bool\
    \ flag = false;\n    int n = sentence.length();\n    for (int i = 0; i < n; i++)\
    \ {\n        flag = false;\n        for (int j = i + 1; j < n; j++) {\n      \
    \      if (isPrime(j - i)) {\n                flag = true;\n                break;\n\
    \            }\n        }\n        if (flag) {\n            ans += \" \" + sentence[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    int n =\
    \ sentence.length();\n    for(int i = 0; i < n; i++) {\n        for(int j = i\
    \ + 1; j < n; j++) {\n            int k = j + 1;\n            while(k <= n &&\
    \ k % j == 0) {\n                k++;\n            }\n            if(k != n &&\
    \ k % i == 0) {\n                ans += sentence[i] + \" \";\n            }\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++)\
    \ {\n        if (sentence[i] != ' ') {\n            temp += sentence[i];\n   \
    \     } else {\n            ans += temp;\n            temp = \"\";\n        }\n\
    \    }\n    ans += temp;\n    return ans;"]
stop_tokens:
- "\n}"
