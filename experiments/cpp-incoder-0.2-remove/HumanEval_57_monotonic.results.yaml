language: cpp
name: HumanEval_57_monotonic
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, x = 0, y = 0, z = 0, i;\n    for (i = 0; i < l.size();\
    \ i++) {\n        x = l[i];\n        y = l[i + 1];\n        z = l[i + 2];\n  \
    \      if (x > y && x > z) {\n            ans = 1;\n        } else if (y > z)\
    \ {\n            ans = -1;\n        }\n    }\n    return ans == 1;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp4v_l3fz: /tmp/tmpp4v_l3fz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = 1;\n    long long\
    \ int k = -1;\n    long long int k1 = -1;\n    long long int k2 = -1;\n    long\
    \ long int k3 = -1;\n    long long int k4 = -1;\n    long long int k5 = -1;\n\
    \    long long int k6 = -1;\n    long long int k7 = -1;\n    long long int k8\
    \ = -1;\n    long long int k9 = -1;\n    long long int k10 = -1;\n    long long\
    \ int k11 = -1;\n    long long int k12 = -1;\n    long long int k13 = -1;\n  \
    \  long long int k14 = -1;\n    long long int k15 = -1;\n    long long int k16\
    \ = -1;\n    long long int k17 = -1;\n    long long int k18 = -1;\n    long long\
    \ int k19 = -1;\n    long long int k20 = -1;\n    long long int k21 = -1;\n  \
    \  long long int k22 = -1;\n    long long int k23 = -1;\n    long long int k24\
    \ = -1;\n    long long int k25 = -1;\n    long long int k26 = -1;\n    long long\
    \ int k27 = -1;\n    long long int k28 = -1;\n    long long int k29 = -1;\n  \
    \  long long int k30 = -1;\n    long long int k31 = -1;\n    long long int k32\
    \ = -1;\n    long long int k33 = -1;\n    long long int k34 = -1;\n    long long\
    \ int k35 = -1;\n    long long int k36 = -1;\n    long long int k37 = -1;\n  \
    \  long long int k38 = -1;\n    long long int k39 = -1;\n    long long int k40\
    \ = -1;\n    long long int k41 = -1;\n    long long int k42 = -1;\n    long long\
    \ int k43 = -1;\n    long long int k44 = -1;\n    long long int k45 = -1;\n  \
    \  long long int k46 = -1;\n    long long int k47 = -1;\n    long long int k48\
    \ = -1;\n    long long int k49 = -1;\n    long long int k50 = -1;\n    long long\
    \ int k51 = -1;\n    long long int k52 = -1;\n    long long int k53 = -1;\n  \
    \  long long int k54 = -1;\n    long long int k55 = -1;\n    long long int k56\
    \ = \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwzowhf6b.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwzowhf6b.cpp:64:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmpwzowhf6b.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n;\n    long long\
    \ int k = n;\n    long long int l = 0;\n    long long int h = 0;\n    long long\
    \ int mid = 0;\n    long long int mid2 = 0;\n    long long int mid3 = 0;\n   \
    \ long long int mid4 = 0;\n    long long int mid5 = 0;\n    long long int mid6\
    \ = 0;\n    long long int mid7 = 0;\n    long long int mid8 = 0;\n    long long\
    \ int mid9 = 0;\n    long long int mid10 = 0;\n    long long int mid11 = 0;\n\
    \    long long int mid12 = 0;\n    long long int mid13 = 0;\n    long long int\
    \ mid14 = 0;\n    long long int mid15 = 0;\n    long long int mid16 = 0;\n   \
    \ long long int mid17 = 0;\n    long long int mid18 = 0;\n    long long int mid19\
    \ = 0;\n    long long int mid20 = 0;\n    long long int mid21 = 0;\n    long long\
    \ int mid22 = 0;\n    long long int mid23 = 0;\n    long long int mid24 = 0;\n\
    \    long long int mid25 = 0;\n    long long int mid26 = 0;\n    long long int\
    \ mid27 = 0;\n    long long int mid28 = 0;\n    long long int mid29 = 0;\n   \
    \ long long int mid30 = 0;\n    long long int mid31 = 0;\n    long long int mid32\
    \ = 0;\n    long long int mid33 = 0;\n    long long int mid34 = 0;\n    long long\
    \ int mid35 = 0;\n    long long int mid36 = 0;\n    long long int mid37 = 0;\n\
    \    long long int mid38 = 0;\n    long long int mid39 = 0;\n    long long int\
    \ mid40 = 0;\n    long long int mid41 = 0;\n    long long int mid42 = 0;\n   \
    \ long long int mid43 = 0;\n    long long int mid44 = 0;\n    long long int mid45\
    \ = 0;\n    long long int mid46 = 0;\n    long long int mid47 = 0;\n    long long\
    \ int mid48 = 0;\n    long long int mid49 = 0;\n    long long int mid50 = 0;\n\
    \    long long int mid51 = 0;\n    long long int mid52 = 0;\n    long long int\
    \ mid53 = 0;\n    long long int mid54 = 0;\n    long long int mid55 = 0;\n   \
    \ long long int mid56 = 0;\n    long long int mid57 = 0;\n    long long int mid58\
    \ = 0;\n    long long int mid59 = 0;\n    long long int mid60 = 0;\n\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9u70ljb3.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9u70ljb3.cpp:8:19: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    8 |     long long int l = 0;\n      | \
    \                  ^\n/tmp/tmp9u70ljb3.cpp:71:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   71 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      long long cur = l[i];\n        long long prev = l[i - 1];\n        if (cur\
    \ > prev) {\n            ans = 1;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5t45d5ko: /tmp/tmp5t45d5ko.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = m * (m+1) / 2;\n    long long int x = l[k];\n    long long int\
    \ y = l[m];\n    long long int z = l[n-1];\n    long long int w = l[0];\n    long\
    \ long int u = 0;\n    long long int v = 0;\n    long long int w1 = l[1];\n  \
    \  long long int w2 = l[2];\n    long long int w3 = l[3];\n    long long int w4\
    \ = l[4];\n    long long int w5 = l[5];\n    long long int w6 = l[6];\n    long\
    \ long int w7 = l[7];\n    long long int w8 = l[8];\n    long long int w9 = l[9];\n\
    \    long long int w10 = l[10];\n    long long int w11 = l[11];\n    long long\
    \ int w12 = l[12];\n    long long int w13 = l[13];\n    long long int w14 = l[14];\n\
    \    long long int w15 = l[15];\n    long long int w16 = l[16];\n    long long\
    \ int w17 = l[17];\n    long long int w18 = l[18];\n    long long int w19 = l[19];\n\
    \    long long int w20 = l[20];\n    long long int w21 = l[21];\n    long long\
    \ int w22 = l[22];\n    long long int w23 = l[23];\n    long long int w24 = l[24];\n\
    \    long long int w25 = l[25];\n    long long int w26 = l[26];\n    long long\
    \ int w27 = l[27];\n    long long int w28 = l[28];\n    long long int w29 = l[29];\n\
    \    long long int w30 = l[30];\n    long long int w31 = l[31];\n    long long\
    \ int w32 = l[32];\n    long long int w33 = l[33];\n    long long int w34 = l[34];\n\
    \    long long int w35 = l[35];\n    long long int w36 = l[36];\n    long long\
    \ int w37 = l[37];\n    long long int w38 = l[38];\n    long long int w\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdv164yds.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdv164yds.cpp:53:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpdv164yds.cpp:53:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0, prev = l[0];\n    for (int\
    \ i = 1; i < n; ++i) {\n        if (l[i] < prev) {\n            ans = false;\n\
    \            break;\n        }\n        prev = l[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_frv6_9t: /tmp/tmp_frv6_9t.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0, i;\n    for (i = 0; i <\
    \ n; i++) {\n        if (l[i] > l[i + 1]) {\n            ans = l[i] - l[i + 1];\n\
    \            break;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk05t35ef: /tmp/tmpk05t35ef.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = l.size();\n    for (long i = 0; i < l; i++)\
    \ {\n        long j = i;\n        while (j > 0 && l[j - 1] > l[j]) {\n       \
    \     ans = l[j - 1];\n            j--;\n        }\n        l[j] = ans;\n    }\n\
    \    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptg3ehc7a.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptg3ehc7a.cpp:5:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    5 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmptg3ehc7a.cpp:5:30: error: request for\
    \ member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n    5 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmptg3ehc7a.cpp:8:32: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n    8 |         while\
    \ (j > 0 && l[j - 1] > l[j]) {\n      |                                ^\n/tmp/tmptg3ehc7a.cpp:8:39:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \    8 |         while (j > 0 && l[j - 1] > l[j]) {\n      |                 \
    \                      ^\n/tmp/tmptg3ehc7a.cpp:9:26: error: invalid types \u2018\
    long long int[long int]\u2019 for array subscript\n    9 |             ans = l[j\
    \ - 1];\n      |                          ^\n/tmp/tmptg3ehc7a.cpp:12:12: error:\
    \ invalid types \u2018long long int[long int]\u2019 for array subscript\n   12\
    \ |         l[j] = ans;\n      |            ^\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n;\n    long long\
    \ int k = n;\n    long long int l = 0;\n    long long int h = 0;\n    long long\
    \ int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n    long long\
    \ int w = 0;\n    long long int u = 0;\n    long long int v = 0;\n    long long\
    \ int w1 = 0;\n    long long int w2 = 0;\n    long long int w3 = 0;\n    long\
    \ long int w4 = 0;\n    long long int w5 = 0;\n    long long int w6 = 0;\n   \
    \ long long int w7 = 0;\n    long long int w8 = 0;\n    long long int w9 = 0;\n\
    \    long long int w10 = 0;\n    long long int w11 = 0;\n    long long int w12\
    \ = 0;\n    long long int w13 = 0;\n    long long int w14 = 0;\n    long long\
    \ int w15 = 0;\n    long long int w16 = 0;\n    long long int w17 = 0;\n    long\
    \ long int w18 = 0;\n    long long int w19 = 0;\n    long long int w20 = 0;\n\
    \    long long int w21 = 0;\n    long long int w22 = 0;\n    long long int w23\
    \ = 0;\n    long long int w24 = 0;\n    long long int w25 = 0;\n    long long\
    \ int w26 = 0;\n    long long int w27 = 0;\n    long long int w28 = 0;\n    long\
    \ long int w29 = 0;\n    long long int w30 = 0;\n    long long int w31 = 0;\n\
    \    long long int w32 = 0;\n    long long int w33 = 0;\n    long long int w34\
    \ = 0;\n    long long int w35 = 0;\n    long long int w36 = 0;\n    long long\
    \ int w37 = 0;\n    long long int w38 = 0;\n    long long int w39 = 0;\n    long\
    \ long int w40 = 0;\n    long long int w41 = 0;\n    long long int w42 = 0;\n\
    \    long long int w43 = 0;\n    long long int w44 = 0;\n    long long int w45\
    \ = 0;\n    long long int w46 = 0;\n    long long int w47 = 0;\n    long long\
    \ int w48 = 0;\n    long long int w49 = 0;\n    long long int w50 = 0;\n    long\
    \ long int w51 = 0;\n    long long int w52 = 0;\n    long long int w53 = 0;\n\
    \    long long int w54 = 0;\n    long long int w55\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppzh0r60z.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppzh0r60z.cpp:8:19: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    8 |     long long int l = 0;\n      | \
    \                  ^\n/tmp/tmppzh0r60z.cpp:71:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   71 | }\n      | ^\n/tmp/tmppzh0r60z.cpp:71:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int maxval = *std::max_element(l.begin(), l.end());\n  \
    \  long long int minval = *std::min_element(l.begin(), l.end());\n    if (maxval\
    \ < minval) return false;\n    if (maxval == minval) return true;\n    long long\
    \ int midval = maxval + minval / 2;\n    long long int midval2 = maxval + minval\
    \ / 2;\n    long long int midval3 = maxval + minval / 2;\n    long long int midval4\
    \ = maxval + minval / 2;\n    long long int midval5 = maxval + minval / 2;\n \
    \   long long int midval6 = maxval + minval / 2;\n    long long int midval7 =\
    \ maxval + minval / 2;\n    long long int midval8 = maxval + minval / 2;\n   \
    \ long long int midval9 = maxval + minval / 2;\n    long long int midval10 = maxval\
    \ + minval / 2;\n    long long int midval11 = maxval + minval / 2;\n    long long\
    \ int midval12 = maxval + minval / 2;\n    long long int midval13 = maxval + minval\
    \ / 2;\n    long long int midval14 = maxval + minval / 2;\n    long long int midval15\
    \ = maxval + minval / 2;\n    long long int midval16 = maxval + minval / 2;\n\
    \    long long int midval17 = maxval + minval / 2;\n    long long int midval18\
    \ = maxval + minval / 2;\n    long long int midval19 = maxval + minval / 2;\n\
    \    long long int midval20 = maxval + minval / 2;\n    long long int midval21\
    \ = maxval + minval / 2;\n    long long int midval22 = maxval + minval / 2;\n\
    \    long long int midval23 = maxval + minval / 2;\n    long long int midval24\
    \ = maxval + minval / 2;\n    long long int midval25 = maxval + minval / 2;\n\
    \    long long int midval26 = maxval + minval / 2;\n    long long int midval27\
    \ = maxval + minval / 2;\n    long long int midval28 = maxval + minval / 2;\n\
    \    long long int midval29 = maxval + minval / 2;\n    long long int midval30\
    \ = maxval\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_y8fum8t.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_y8fum8t.cpp:39:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   39 | }\n      | ^\n/tmp/tmp_y8fum8t.cpp:39:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   39 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int l1 = l[0];\n    long long int l2 = l[1];\n    long long int l3 = l[2];\n\
    \    long long int l4 = l[3];\n    long long int l5 = l[4];\n    long long int\
    \ l6 = l[5];\n    long long int l7 = l[6];\n    long long int l8 = l[7];\n   \
    \ long long int l9 = l[8];\n    long long int l10 = l[9];\n    long long int l11\
    \ = l[10];\n    long long int l12 = l[11];\n    long long int l13 = l[12];\n \
    \   long long int l14 = l[13];\n    long long int l15 = l[14];\n    long long\
    \ int l16 = l[15];\n    long long int l17 = l[16];\n    long long int l18 = l[17];\n\
    \    long long int l19 = l[18];\n    long long int l20 = l[19];\n    long long\
    \ int l21 = l[20];\n    long long int l22 = l[21];\n    long long int l23 = l[22];\n\
    \    long long int l24 = l[23];\n    long long int l25 = l[24];\n    long long\
    \ int l26 = l[25];\n    long long int l27 = l[26];\n    long long int l28 = l[27];\n\
    \    long long int l29 = l[28];\n    long long int l30 = l[29];\n    long long\
    \ int l31 = l[30];\n    long long int l32 = l[31];\n    long long int l33 = l[32];\n\
    \    long long int l34 = l[33];\n    long long int l35 = l[34];\n    long long\
    \ int l36 = l[35];\n    long long int l37 = l[36];\n    long long int l38 = l[37];\n\
    \    long long int l39 = l[38];\n    long long int l40 = l[39];\n    long long\
    \ int l41 = l[40];\n    long long int l42 = l[41];\n    long long int l43 = l[42];\n\
    \    long long int l44 = l[43];\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp14otmalb: /tmp/tmp14otmalb.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    int m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) return false;\n    \
    \    m = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmdnwnovu: /tmp/tmpmdnwnovu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(; i < l.size()-1; i++) {\n    \
    \    if(l[i] > l[i+1]) {\n            ans = l[i+1] - l[i];\n            break;\n\
    \        }\n    }\n    return ans > 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw2pfcvxd: /tmp/tmpw2pfcvxd.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long m =\
    \ 1;\n    for (long long i = 0; i < n; i++) {\n        long long j = i;\n    \
    \    while (j > 0 && l[j-1] > l[j]) {\n            ans += 1;\n            j--;\n\
    \        }\n        while (j < n && l[j+1] < l[j]) {\n            ans += 1;\n\
    \            j++;\n        }\n        while (j < n && l[j-1] < l[j]) {\n     \
    \       ans += 1;\n            j--;\n        }\n        while (j > 0 && l[j-1]\
    \ < l[j]) {\n            ans += 1;\n            j--;\n        }\n    }\n    return\
    \ ans == n;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7mr7uiil: /tmp/tmp7mr7uiil.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        for\
    \ (int j = i + 1; j < n; ++j) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp43bghnrn: /tmp/tmp43bghnrn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long i = 0; i < n; i++)\
    \ {\n        long j = i;\n        while (j > 0 && l[j-1] > l[j]) {\n         \
    \   ans = l[j-1];\n            j--;\n        }\n        l[j] = ans;\n    }\n \
    \   return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaahqxavb: /tmp/tmpaahqxavb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(; i < l.size(); i++) {\n      \
    \  ans = max(ans, l[i]);\n        ans = min(ans, l[i]);\n    }\n    return ans\
    \ == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0e11y7km.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0e11y7km.cpp:7:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n    7 |         ans = max(ans,\
    \ l[i]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0e11y7km.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp0e11y7km.cpp:8:15: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \    8 |         ans = min(ans, l[i]);\n      |               ^~~\n      |   \
    \            std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0e11y7km.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int m = 0, n = 0, x = 0, y = 0, z = 0;\n    for (long long\
    \ int i : l) {\n        if (i == 0) {\n            continue;\n        }\n    \
    \    if (i > m) {\n            m = i;\n        }\n        if (i < n) {\n     \
    \       n = i;\n        }\n    }\n    if (m > n) {\n        return false;\n  \
    \  }\n    for (long long int i : l) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        if (i > x) {\n            x = i;\n        }\n        if (i\
    \ < y) {\n            y = i;\n        }\n    }\n    if (x > y) {\n        return\
    \ false;\n    }\n    for (long long int i : l) {\n        if (i == 0) {\n    \
    \        continue;\n        }\n        if (i > z) {\n            z = i;\n    \
    \    }\n    }\n    if (z > m) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgvo96loe: /tmp/tmpgvo96loe.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        long long cur = l[i];\n        long long prev = l[i - 1];\n\
    \        if (cur > prev) {\n            ans = 1;\n        } else if (cur < prev)\
    \ {\n            ans = -1;\n        } else {\n            ans = 0;\n        }\n\
    \    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7wjvnd2m: /tmp/tmp7wjvnd2m.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int a = 0, b = 0, c = 0, d = 0;\n    for (long long int\
    \ i : l) {\n        if (i < a) {\n            a = i;\n        } else if (i > b)\
    \ {\n            b = i;\n        } else if (i == c) {\n            c = i;\n  \
    \      } else if (i == d) {\n            d = i;\n        }\n    }\n    if (a <\
    \ b) {\n        return true;\n    } else if (b < c) {\n        return false;\n\
    \    } else if (b < d) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_srj_0_5: /tmp/tmp_srj_0_5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int l1 = l[0];\n    long long int l2 = l[1];\n    long long int l3 = l[2];\n\
    \    long long int l4 = l[3];\n    long long int l5 = l[4];\n    long long int\
    \ l6 = l[5];\n    long long int l7 = l[6];\n    long long int l8 = l[7];\n   \
    \ long long int l9 = l[8];\n    long long int l10 = l[9];\n    long long int l11\
    \ = l[10];\n    long long int l12 = l[11];\n    long long int l13 = l[12];\n \
    \   long long int l14 = l[13];\n    long long int l15 = l[14];\n    long long\
    \ int l16 = l[15];\n    long long int l17 = l[16];\n    long long int l18 = l[17];\n\
    \    long long int l19 = l[18];\n    long long int l20 = l[19];\n    long long\
    \ int l21 = l[20];\n    long long int l22 = l[21];\n    long long int l23 = l[22];\n\
    \    long long int l24 = l[23];\n    long long int l25 = l[24];\n    long long\
    \ int l26 = l[25];\n    long long int l27 = l[26];\n    long long int l28 = l[27];\n\
    \    long long int l29 = l[28];\n    long long int l30 = l[29];\n    long long\
    \ int l31 = l[30];\n    long long int l32 = l[31];\n    long long int l33 = l[32];\n\
    \    long long int l34 = l[33];\n    long long int l35 = l[34];\n    long long\
    \ int l36 = l[35];\n    long long int l37 = l[36];\n    long long int l38 = l[37];\n\
    \    long long int l39 = l[38];\n    long long int l40 = l[39];\n    long long\
    \ int l41 = l[40];\n    long long int l42 = l[41];\n    long long int l43 = l[42];\n\
    \    long long int l44 = l[43];\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp14otmalb: /tmp/tmp14otmalb.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] < l[i + 1]) {\n            ans = -1;\n            break;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9y8c_a8u: /tmp/tmp9y8c_a8u.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int l1 = l[0];\n    long long int l2 = l[1];\n    long long\
    \ int l3 = l[2];\n    long long int l4 = l[3];\n    long long int l5 = l[4];\n\
    \    long long int l6 = l[5];\n    long long int l7 = l[6];\n    long long int\
    \ l8 = l[7];\n    long long int l9 = l[8];\n    long long int l10 = l[9];\n  \
    \  long long int l11 = l[10];\n    long long int l12 = l[11];\n    long long int\
    \ l13 = l[12];\n    long long int l14 = l[13];\n    long long int l15 = l[14];\n\
    \    long long int l16 = l[15];\n    long long int l17 = l[16];\n    long long\
    \ int l18 = l[17];\n    long long int l19 = l[18];\n    long long int l20 = l[19];\n\
    \    long long int l21 = l[20];\n    long long int l22 = l[21];\n    long long\
    \ int l23 = l[22];\n    long long int l24 = l[23];\n    long long int l25 = l[24];\n\
    \    long long int l26 = l[25];\n    long long int l27 = l[26];\n    long long\
    \ int l28 = l[27];\n    long long int l29 = l[28];\n    long long int l30 = l[29];\n\
    \    long long int l31 = l[30];\n    long long int l32 = l[31];\n    long long\
    \ int l33 = l[32];\n    long long int l34 = l[33];\n    long long int l35 = l[34];\n\
    \    long long int l36 = l[35];\n    long long int l37 = l[36];\n    long long\
    \ int l38 = l[37];\n    long long int l39 = l[38];\n    long long int l40 = l[39];\n\
    \    long long int l41 = l[40];\n    long long int l42 = l[41];\n    long long\
    \ int l43 = l[42];\n    long long int l44 = l[43];\n    long long int l45 = l[44];\n\
    \    long long int \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqe98fnbo.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqe98fnbo.cpp:51:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmpqe98fnbo.cpp:51:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return false;\n    long prev = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < prev) return false;\n \
    \       prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoj2xdyf5: /tmp/tmpoj2xdyf5.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqt4qqqdn: /tmp/tmpqt4qqqdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i\
    \ - 1] > l[i]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3gnhtxg7: /tmp/tmp3gnhtxg7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqt4qqqdn: /tmp/tmpqt4qqqdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] < l[i + 1]) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_ouvm1u1: /tmp/tmp_ouvm1u1.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int curr = 0, prev = 0;\n  \
    \  for (long long int x : l) {\n        sum += x;\n        if (sum > curr) {\n\
    \            curr = sum;\n            prev = x;\n        }\n    }\n    return\
    \ (curr > prev);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8ak7hqt7: /tmp/tmp8ak7hqt7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i\
    \ - 1] > l[i])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcf335cxk: /tmp/tmpcf335cxk.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = 0;\n    while (i < n) {\n        long long mid = (i +\
    \ j) / 2;\n        if (l[mid] <= l[i]) {\n            ans = 1;\n            j\
    \ = mid;\n        } else {\n            ans = 0;\n            i = mid + 1;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    int m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) {\n            m = l[i];\n\
    \        }\n    }\n    return m >= l[n - 1];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu3rzfitg: /tmp/tmpu3rzfitg.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        for\
    \ (int j = i + 1; j < n; ++j) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp43bghnrn: /tmp/tmp43bghnrn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = 0, mid = 0;\n    for (long long int i\
    \ : l) {\n        if (i > max) {\n            max = i;\n        } else if (i <\
    \ min) {\n            min = i;\n        }\n    }\n    if (max > min) {\n     \
    \   mid = max + (max - min) / 2;\n        if (mid > min) {\n            return\
    \ monotonic(l);\n        } else {\n            return monotonic(l.begin(), l.end(),\
    \ mid);\n        }\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzg41u80g.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzg41u80g.cpp:18:37: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   18 |             return monotonic(l.begin(), l.end(),\
    \ mid);\n      |                              ~~~~~~~^~\n      |             \
    \                        |\n      |                                     std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int l1 = l[0];\n    long long int l2 = l[1];\n    long long int l3 = l[2];\n\
    \    long long int l4 = l[3];\n    long long int l5 = l[4];\n    long long int\
    \ l6 = l[5];\n    long long int l7 = l[6];\n    long long int l8 = l[7];\n   \
    \ long long int l9 = l[8];\n    long long int l10 = l[9];\n    long long int l11\
    \ = l[10];\n    long long int l12 = l[11];\n    long long int l13 = l[12];\n \
    \   long long int l14 = l[13];\n    long long int l15 = l[14];\n    long long\
    \ int l16 = l[15];\n    long long int l17 = l[16];\n    long long int l18 = l[17];\n\
    \    long long int l19 = l[18];\n    long long int l20 = l[19];\n    long long\
    \ int l21 = l[20];\n    long long int l22 = l[21];\n    long long int l23 = l[22];\n\
    \    long long int l24 = l[23];\n    long long int l25 = l[24];\n    long long\
    \ int l26 = l[25];\n    long long int l27 = l[26];\n    long long int l28 = l[27];\n\
    \    long long int l29 = l[28];\n    long long int l30 = l[29];\n    long long\
    \ int l31 = l[30];\n    long long int l32 = l[31];\n    long long int l33 = l[32];\n\
    \    long long int l34 = l[33];\n    long long int l35 = l[34];\n    long long\
    \ int l36 = l[35];\n    long long int l37 = l[36];\n    long long int l38 = l[37];\n\
    \    long long int l39 = l[38];\n    long long int l40 = l[39];\n    long long\
    \ int l41 = l[40];\n    long long int l42 = l[41];\n    long long int l43 = l[42];\n\
    \    long long int l44 = l[43];\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp14otmalb: /tmp/tmp14otmalb.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    long long int\
    \ mn = l[0], mx = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] <\
    \ mn) mn = l[i];\n        if (l[i] > mx) mx = l[i];\n    }\n    return mn > mx;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7onwy0j0: /tmp/tmp7onwy0j0.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long prev = l[0];\n    for (int i = 1; i <\
    \ n; i++) {\n        if (l[i] < prev) {\n            return false;\n        }\n\
    \        prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbgh9cx16: /tmp/tmpbgh9cx16.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0, curr = 0, prev = 0;\n  \
    \  for (int i = 0; i < n; i++) {\n        curr = l[i];\n        if (curr < prev)\
    \ {\n            ans = 1;\n        } else if (curr > prev) {\n            ans\
    \ = 0;\n        } else {\n            ans = -1;\n        }\n        prev = curr;\n\
    \    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp669tcdqr: /tmp/tmp669tcdqr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    if (n == 1) return\
    \ false;\n    long prev = l[0];\n    for (int i = 1; i < n; i++) {\n        if\
    \ (l[i] < prev) {\n            return false;\n        }\n        prev = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5tqicea3: /tmp/tmp5tqicea3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i\
    \ - 1] >= l[i])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpox8pvpil: /tmp/tmpox8pvpil.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      long curr = l[i];\n        long next = l[i + 1];\n        if (curr > next)\
    \ {\n            ans = 1;\n        } else {\n            ans = 0;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmponw8hqpt: /tmp/tmponw8hqpt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return l[0] > l[1];\n    if (l[0] > l[1])\n        return false;\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] > l[i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo0q06zdt: /tmp/tmpo0q06zdt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int max_val = l[0];\n    long\
    \ long int min_val = l[0];\n    for (long long int i : l) {\n        sum += i;\n\
    \        if (sum > max_val) {\n            max_val = sum;\n        }\n       \
    \ if (sum < min_val) {\n            min_val = sum;\n        }\n    }\n    if (max_val\
    \ - min_val == 1) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxsyhjooe: /tmp/tmpxsyhjooe.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n-1;\n    long\
    \ long int k = m+1;\n    long long int l1 = l[k];\n    long long int l2 = l[m];\n\
    \    long long int l3 = l[k-1];\n    long long int l4 = l[m-1];\n    long long\
    \ int l5 = l[k-2];\n    long long int l6 = l[m-2];\n    long long int l7 = l[k-3];\n\
    \    long long int l8 = l[m-3];\n    long long int l9 = l[k-4];\n    long long\
    \ int l10 = l[m-4];\n    long long int l11 = l[k-5];\n    long long int l12 =\
    \ l[m-5];\n    long long int l13 = l[k-6];\n    long long int l14 = l[m-6];\n\
    \    long long int l15 = l[k-7];\n    long long int l16 = l[m-7];\n    long long\
    \ int l17 = l[k-8];\n    long long int l18 = l[m-8];\n    long long int l19 =\
    \ l[k-9];\n    long long int l20 = l[m-9];\n    long long int l21 = l[k-10];\n\
    \    long long int l22 = l[m-10];\n    long long int l23 = l[k-11];\n    long\
    \ long int l24 = l[m-11];\n    long long int l25 = l[k-12];\n    long long int\
    \ l26 = l[m-12];\n    long long int l27 = l[k-13];\n    long long int l28 = l[m-13];\n\
    \    long long int l29 = l[k-14];\n    long long int l30 = l[m-14];\n    long\
    \ long int l31 = l[k-15];\n    long long int l32 = l[m-15];\n    long long int\
    \ l33 = l[k-16];\n    long long int l34 = l[m-16];\n    long long int l35 = l[k-17];\n\
    \    long long int l36 = l[m-17];\n    long long int l37 = l[k-18];\n    long\
    \ long int l38 = l[m-18];\n    long long int l39 = l[k-19];\n    long long int\
    \ l40 = l[m-19];\n    long long int l41 = l[k-20];\n\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg4h7d145: /tmp/tmpg4h7d145.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n <= 1) return false;\n    long prev =\
    \ l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] < prev) {\n     \
    \       return false;\n        }\n        prev = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8erpxre9: /tmp/tmp8erpxre9.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int max = l[0];\n    long long\
    \ int min = l[0];\n    for (long long int i : l) {\n        if (i > max) {\n \
    \           max = i;\n        }\n        if (i < min) {\n            min = i;\n\
    \        }\n        sum += i;\n    }\n    if (sum > 0) {\n        long long int\
    \ diff = max - min;\n        if (diff > sum / 2) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbhho1e10: /tmp/tmpbhho1e10.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = 1;\n    long long\
    \ int k = n;\n    long long int i = 0;\n    long long int j = 0;\n    long long\
    \ int k1 = n;\n    long long int k2 = n;\n    long long int k3 = n;\n    long\
    \ long int k4 = n;\n    long long int k5 = n;\n    long long int k6 = n;\n   \
    \ long long int k7 = n;\n    long long int k8 = n;\n    long long int k9 = n;\n\
    \    long long int k10 = n;\n    long long int k11 = n;\n    long long int k12\
    \ = n;\n    long long int k13 = n;\n    long long int k14 = n;\n    long long\
    \ int k15 = n;\n    long long int k16 = n;\n    long long int k17 = n;\n    long\
    \ long int k18 = n;\n    long long int k19 = n;\n    long long int k20 = n;\n\
    \    long long int k21 = n;\n    long long int k22 = n;\n    long long int k23\
    \ = n;\n    long long int k24 = n;\n    long long int k25 = n;\n    long long\
    \ int k26 = n;\n    long long int k27 = n;\n    long long int k28 = n;\n    long\
    \ long int k29 = n;\n    long long int k30 = n;\n    long long int k31 = n;\n\
    \    long long int k32 = n;\n    long long int k33 = n;\n    long long int k34\
    \ = n;\n    long long int k35 = n;\n    long long int k36 = n;\n    long long\
    \ int k37 = n;\n    long long int k38 = n;\n    long long int k39 = n;\n    long\
    \ long int k40 = n;\n    long long int k41 = n;\n    long long int k42 = n;\n\
    \    long long int k43 = n;\n    long long int k44 = n;\n    long long int k45\
    \ = n;\n    long long int k46 = n;\n    long long int k47 = n;\n    long long\
    \ int k48 = n;\n    long long int k49 = n;\n    long long int k50 = n;\n    long\
    \ long int k51 = n;\n    long long int k52 = n;\n    long long int k53 = n;\n\
    \    long long int k54 = n;\n    long long \n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmped3tcjlh.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmped3tcjlh.cpp:65:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmped3tcjlh.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        } else if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    return max >= min;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwya7rezq: /tmp/tmpwya7rezq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] < l[i + 1]) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_ouvm1u1: /tmp/tmp_ouvm1u1.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n    }\n\
    \    return min <= max;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7lutkjgz: /tmp/tmp7lutkjgz.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int l1 = l[0], l2 = l[1], l3 = l[2], l4 = l[3];\n    if\
    \ (l1 < l2 && l1 < l3 && l1 < l4) {\n        return true;\n    }\n    if (l2 <\
    \ l1 && l2 < l3 && l2 < l4) {\n        return true;\n    }\n    if (l3 < l1 &&\
    \ l3 < l2 && l3 < l4) {\n        return true;\n    }\n    if (l4 < l1 && l4 <\
    \ l2 && l4 < l3) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfmjqciob: /tmp/tmpfmjqciob.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long int max_val = l[0], min_val = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] > max_val) {\n          \
    \  max_val = l[i];\n        } else if (l[i] < min_val) {\n            min_val\
    \ = l[i];\n        }\n    }\n    if (max_val - min_val > 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvfx_z3dm: /tmp/tmpvfx_z3dm.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum < 0)\n        return false;\n    long long int m =\
    \ sum / 2;\n    for (long long int i : l) {\n        if (i < m)\n            return\
    \ false;\n        m -= i;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_8qbv2xt: /tmp/tmp_8qbv2xt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int x : l) {\n        sum\
    \ += x;\n    }\n    if (sum < 0) return false;\n    long long int m = 0, n = l.size()\
    \ - 1;\n    while (n >= 0) {\n        long long int x = l[n];\n        if (x >\
    \ m) return false;\n        if (x < m) m = x;\n        n--;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptlmj6loz: /tmp/tmptlmj6loz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int l1 = l[0];\n    long long int l2 = l[1];\n    long long\
    \ int l3 = l[2];\n    long long int l4 = l[3];\n    long long int l5 = l[4];\n\
    \    long long int l6 = l[5];\n    long long int l7 = l[6];\n    long long int\
    \ l8 = l[7];\n    long long int l9 = l[8];\n    long long int l10 = l[9];\n  \
    \  long long int l11 = l[10];\n    long long int l12 = l[11];\n    long long int\
    \ l13 = l[12];\n    long long int l14 = l[13];\n    long long int l15 = l[14];\n\
    \    long long int l16 = l[15];\n    long long int l17 = l[16];\n    long long\
    \ int l18 = l[17];\n    long long int l19 = l[18];\n    long long int l20 = l[19];\n\
    \    long long int l21 = l[20];\n    long long int l22 = l[21];\n    long long\
    \ int l23 = l[22];\n    long long int l24 = l[23];\n    long long int l25 = l[24];\n\
    \    long long int l26 = l[25];\n    long long int l27 = l[26];\n    long long\
    \ int l28 = l[27];\n    long long int l29 = l[28];\n    long long int l30 = l[29];\n\
    \    long long int l31 = l[30];\n    long long int l32 = l[31];\n    long long\
    \ int l33 = l[32];\n    long long int l34 = l[33];\n    long long int l35 = l[34];\n\
    \    long long int l36 = l[35];\n    long long int l37 = l[36];\n    long long\
    \ int l38 = l[37];\n    long long int l39 = l[38];\n    long long int l40 = l[39];\n\
    \    long long int l41 = l[40];\n    long long int l42 = l[41];\n    long long\
    \ int l43 = l[42];\n    long long int l44 = l[43];\n    long long int l45 = l[44];\n\
    \    long long int \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqe98fnbo.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqe98fnbo.cpp:51:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmpqe98fnbo.cpp:51:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp91lwe6cd: /tmp/tmp91lwe6cd.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int max = l[0];\n    long long\
    \ int min = l[0];\n    for (long long int i : l) {\n        if (i > max) {\n \
    \           max = i;\n        } else if (i < min) {\n            min = i;\n  \
    \      }\n        sum += i;\n    }\n    if (sum < 0) return false;\n    if (sum\
    \ > 0) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0l21en7x: /tmp/tmp0l21en7x.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    long prev = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < prev) return false;\n \
    \       prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpft5zhdnw: /tmp/tmpft5zhdnw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        for\
    \ (int j = i + 1; j < n; ++j) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp43bghnrn: /tmp/tmp43bghnrn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n    \
    \    }\n        if (l[i] < l[i + 1]) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1e7vjczw: /tmp/tmp1e7vjczw.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long prev = l[0];\n    for (int i = 1; i <\
    \ n; i++) {\n        if (l[i] < prev) {\n            return false;\n        }\n\
    \        prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbgh9cx16: /tmp/tmpbgh9cx16.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        for\
    \ (int j = i + 1; j < n; ++j) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp43bghnrn: /tmp/tmp43bghnrn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    for (int i =\
    \ 1; i < n; i++) {\n        if (l[i] > l[i - 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0e4bse8s: /tmp/tmp0e4bse8s.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        long long cur = l[i];\n        long long prev = l[i - 1];\n\
    \        if (cur > prev) {\n            ans = 1;\n            break;\n       \
    \ }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzeas8v_z: /tmp/tmpzeas8v_z.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return false;\n    for (int i =\
    \ 1; i < n; i++) {\n        if (l[i] > l[i - 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3v702zyr: /tmp/tmp3v702zyr.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = l.size();\n    for (long i = 0; i < l; i++)\
    \ {\n        long j = i;\n        while (j > 0 && l[j-1] > l[j]) {\n         \
    \   ans = l[j-1];\n            j--;\n        }\n        ans = max(ans, l[j]);\n\
    \    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1tx10vr.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu1tx10vr.cpp:5:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    5 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpu1tx10vr.cpp:5:30: error: request for\
    \ member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n    5 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpu1tx10vr.cpp:8:30: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n    8 |         while\
    \ (j > 0 && l[j-1] > l[j]) {\n      |                              ^\n/tmp/tmpu1tx10vr.cpp:8:37:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \    8 |         while (j > 0 && l[j-1] > l[j]) {\n      |                   \
    \                  ^\n/tmp/tmpu1tx10vr.cpp:9:24: error: invalid types \u2018long\
    \ long int[long int]\u2019 for array subscript\n    9 |             ans = l[j-1];\n\
    \      |                        ^\n/tmp/tmpu1tx10vr.cpp:12:27: error: invalid\
    \ types \u2018long long int[long int]\u2019 for array subscript\n   12 |     \
    \    ans = max(ans, l[j]);\n      |                           ^\n/tmp/tmpu1tx10vr.cpp:12:15:\
    \ error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019\
    ?\n   12 |         ans = max(ans, l[j]);\n      |               ^~~\n      | \
    \              std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu1tx10vr.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for (; i < l.size() - 1; i++) {\n \
    \       if (l[i] > l[i + 1]) {\n            ans = l[i];\n            break;\n\
    \        }\n    }\n    if (ans == l[i]) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmrlapdsl: /tmp/tmpmrlapdsl.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return false;\n    long prev = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < prev) return false;\n \
    \       prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpplm5ee_u: /tmp/tmpplm5ee_u.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int m = 0, n = 0, x = 0, y = 0, z = 0;\n    for (long long\
    \ int i : l) {\n        if (i == 0) {\n            continue;\n        }\n    \
    \    if (i > m) {\n            m = i;\n        }\n        if (i < n) {\n     \
    \       n = i;\n        }\n        if (i > x && i < y) {\n            x = i;\n\
    \        }\n        if (i < x && i > y) {\n            y = i;\n        }\n   \
    \     if (i > z && i < y) {\n            z = i;\n        }\n    }\n    if (m ==\
    \ n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpea1c44kc: /tmp/tmpea1c44kc.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0, cur = 0;\n    for (auto i : l) {\n  \
    \      cur = i;\n        while (cur > prev) {\n            ans += 1;\n       \
    \     prev = cur;\n            cur = prev - cur;\n        }\n    }\n    return\
    \ ans == l.size();\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb22jruck: /tmp/tmpb22jruck.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = n - 1;\n    long long int l1 = l[0];\n    long long int l2 = l[1];\n\
    \    long long int l3 = l[2];\n    long long int l4 = l[3];\n    long long int\
    \ l5 = l[4];\n    long long int l6 = l[5];\n    long long int l7 = l[6];\n   \
    \ long long int l8 = l[7];\n    long long int l9 = l[8];\n    long long int l10\
    \ = l[9];\n    long long int l11 = l[10];\n    long long int l12 = l[11];\n  \
    \  long long int l13 = l[12];\n    long long int l14 = l[13];\n    long long int\
    \ l15 = l[14];\n    long long int l16 = l[15];\n    long long int l17 = l[16];\n\
    \    long long int l18 = l[17];\n    long long int l19 = l[18];\n    long long\
    \ int l20 = l[19];\n    long long int l21 = l[20];\n    long long int l22 = l[21];\n\
    \    long long int l23 = l[22];\n    long long int l24 = l[23];\n    long long\
    \ int l25 = l[24];\n    long long int l26 = l[25];\n    long long int l27 = l[26];\n\
    \    long long int l28 = l[27];\n    long long int l29 = l[28];\n    long long\
    \ int l30 = l[29];\n    long long int l31 = l[30];\n    long long int l32 = l[31];\n\
    \    long long int l33 = l[32];\n    long long int l34 = l[33];\n    long long\
    \ int l35 = l[34];\n    long long int l36 = l[35];\n    long long int l37 = l[36];\n\
    \    long long int l38 = l[37];\n    long long int l39 = l[38];\n    long long\
    \ int l40 = l[39];\n    long long int l41 = l[40];\n    long long int l42 = l[41];\n\
    \    long long int l43 = l[42];\n    long long \n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo56neywg.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo56neywg.cpp:52:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmpo56neywg.cpp:52:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = l.size();\n    for (long i = 0; i < l; i++)\
    \ {\n        long j = i + 1;\n        while (j < l && l[j] < l[i]) {\n       \
    \     j++;\n        }\n        long k = j;\n        while (k != i && l[k] > l[j])\
    \ {\n            k--;\n        }\n        if (k == i) {\n            ans = l[i]\
    \ - l[j];\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59i8ocyp.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp59i8ocyp.cpp:5:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    5 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmp59i8ocyp.cpp:5:30: error: request for\
    \ member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n    5 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmp59i8ocyp.cpp:8:28: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n    8 |         while\
    \ (j < l && l[j] < l[i]) {\n      |                            ^\n/tmp/tmp59i8ocyp.cpp:8:35:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \    8 |         while (j < l && l[j] < l[i]) {\n      |                     \
    \              ^\n/tmp/tmp59i8ocyp.cpp:12:29: error: invalid types \u2018long\
    \ long int[long int]\u2019 for array subscript\n   12 |         while (k != i\
    \ && l[k] > l[j]) {\n      |                             ^\n/tmp/tmp59i8ocyp.cpp:12:36:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   12 |         while (k != i && l[k] > l[j]) {\n      |                    \
    \                ^\n/tmp/tmp59i8ocyp.cpp:16:22: error: invalid types \u2018long\
    \ long int[long int]\u2019 for array subscript\n   16 |             ans = l[i]\
    \ - l[j];\n      |                      ^\n/tmp/tmp59i8ocyp.cpp:16:29: error:\
    \ invalid types \u2018long long int[long int]\u2019 for array subscript\n   16\
    \ |             ans = l[i] - l[j];\n      |                             ^\n"
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for(long long i = 0; i < l.size(); i++) {\n\
    \        if(l[i] > l[i+1]) {\n            ans = 1;\n            break;\n     \
    \   }\n        if(l[i] < l[i+1]) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpr1lpqtco: /tmp/tmpr1lpqtco.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqt4qqqdn: /tmp/tmpqt4qqqdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp91lwe6cd: /tmp/tmp91lwe6cd.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = l.size();\n    for (long i = 0; i < l; i++)\
    \ {\n        if (l[i] > ans) {\n            ans = l[i];\n        }\n    }\n  \
    \  for (long i = l - 1; i >= 0; i--) {\n        if (l[i] < ans) {\n          \
    \  ans = l[i];\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjoha9elt.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjoha9elt.cpp:5:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    5 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpjoha9elt.cpp:5:30: error: request for\
    \ member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n    5 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpjoha9elt.cpp:7:16: error: invalid types\
    \ \u2018long long int[long int]\u2019 for array subscript\n    7 |         if\
    \ (l[i] > ans) {\n      |                ^\n/tmp/tmpjoha9elt.cpp:8:22: error:\
    \ invalid types \u2018long long int[long int]\u2019 for array subscript\n    8\
    \ |             ans = l[i];\n      |                      ^\n/tmp/tmpjoha9elt.cpp:12:16:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   12 |         if (l[i] < ans) {\n      |                ^\n/tmp/tmpjoha9elt.cpp:13:22:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   13 |             ans = l[i];\n      |                      ^\n"
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i\
    \ - 1] > l[i]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3gnhtxg7: /tmp/tmp3gnhtxg7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int a = 0, b = 0, c = 0, d = 0;\n    long long int n = l.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i == 0) {\n            a = l[i];\n\
    \        }\n        if (i == n - 1) {\n            b = l[i];\n        }\n    \
    \    if (l[i] > b) {\n            d = b;\n            b = l[i];\n        }\n \
    \       if (l[i] < a) {\n            c = a;\n            a = l[i];\n        }\n\
    \    }\n    if (a > b) {\n        return true;\n    }\n    if (b > c) {\n    \
    \    return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7_eyinzi: /tmp/tmp7_eyinzi.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        for\
    \ (int j = i + 1; j < n; ++j) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp43bghnrn: /tmp/tmp43bghnrn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int max = l[0];\n    long long\
    \ int min = l[0];\n    for (long long int i : l) {\n        sum += i;\n      \
    \  if (i > max) {\n            max = i;\n        }\n        if (i < min) {\n \
    \           min = i;\n        }\n    }\n    if (sum < max - min) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpe1v53oyu: /tmp/tmpe1v53oyu.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = 0, k1 = 0, k2 = 0, k3 = 0, k4 = 0;\n    long long int i = 1;\n\
    \    long long int j = 1;\n    long long int k1 = l[k];\n    long long int k2\
    \ = l[k];\n    long long int k3 = l[k];\n    long long int k4 = l[k];\n    long\
    \ long int k5 = l[k];\n    long long int k6 = l[k];\n    long long int k7 = l[k];\n\
    \    long long int k8 = l[k];\n    long long int k9 = l[k];\n    long long int\
    \ k10 = l[k];\n    long long int k11 = l[k];\n    long long int k12 = l[k];\n\
    \    long long int k13 = l[k];\n    long long int k14 = l[k];\n    long long int\
    \ k15 = l[k];\n    long long int k16 = l[k];\n    long long int k17 = l[k];\n\
    \    long long int k18 = l[k];\n    long long int k19 = l[k];\n    long long int\
    \ k20 = l[k];\n    long long int k21 = l[k];\n    long long int k22 = l[k];\n\
    \    long long int k23 = l[k];\n    long long int k24 = l[k];\n    long long int\
    \ k25 = l[k];\n    long long int k26 = l[k];\n    long long int k27 = l[k];\n\
    \    long long int k28 = l[k];\n    long long int k29 = l[k];\n    long long int\
    \ k30 = l[k];\n    long long int k31 = l[k];\n    long long int k32 = l[k];\n\
    \    long long int k33 = l[k];\n    long long int k34 = l[k];\n    long long int\
    \ k35 = l[k];\n    long long int k36 = l[k];\n    long long int k37 = l[k];\n\
    \    long long int k38 = l[k];\n    long long int k39 = l[k];\n    long long int\
    \ k40 = l[k];\n    long long int k41 = l[k];\n    long long int k42 = l[k];\n\
    \    long long int k43 = l[k];\n    long long \n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5a951e12.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5a951e12.cpp:10:19: error: redeclaration of \u2018long\
    \ long int k1\u2019\n   10 |     long long int k1 = l[k];\n      |           \
    \        ^~\n/tmp/tmp5a951e12.cpp:7:26: note: \u2018long long int k1\u2019 previously\
    \ declared here\n    7 |     long long int k = 0, k1 = 0, k2 = 0, k3 = 0, k4 =\
    \ 0;\n      |                          ^~\n/tmp/tmp5a951e12.cpp:11:19: error:\
    \ redeclaration of \u2018long long int k2\u2019\n   11 |     long long int k2\
    \ = l[k];\n      |                   ^~\n/tmp/tmp5a951e12.cpp:7:34: note: \u2018\
    long long int k2\u2019 previously declared here\n    7 |     long long int k =\
    \ 0, k1 = 0, k2 = 0, k3 = 0, k4 = 0;\n      |                                \
    \  ^~\n/tmp/tmp5a951e12.cpp:12:19: error: redeclaration of \u2018long long int\
    \ k3\u2019\n   12 |     long long int k3 = l[k];\n      |                   ^~\n\
    /tmp/tmp5a951e12.cpp:7:42: note: \u2018long long int k3\u2019 previously declared\
    \ here\n    7 |     long long int k = 0, k1 = 0, k2 = 0, k3 = 0, k4 = 0;\n   \
    \   |                                          ^~\n/tmp/tmp5a951e12.cpp:13:19:\
    \ error: redeclaration of \u2018long long int k4\u2019\n   13 |     long long\
    \ int k4 = l[k];\n      |                   ^~\n/tmp/tmp5a951e12.cpp:7:50: note:\
    \ \u2018long long int k4\u2019 previously declared here\n    7 |     long long\
    \ int k = 0, k1 = 0, k2 = 0, k3 = 0, k4 = 0;\n      |                        \
    \                          ^~\n/tmp/tmp5a951e12.cpp:54:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmp5a951e12.cpp:54:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126975
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int m = 0, n = 0, k = 0, i = 0, j = 0;\n    long long int\
    \ min = std::numeric_limits<long long int>::max();\n    long long int max = std::numeric_limits<long\
    \ long int>::min();\n    for (long long int x : l) {\n        if (x < min) {\n\
    \            min = x;\n        }\n        if (x > max) {\n            max = x;\n\
    \        }\n    }\n    for (long long int x : l) {\n        if (x > max) {\n \
    \           k = i;\n            i = j;\n            j = i;\n            n = j;\n\
    \        }\n        if (x < min) {\n            k = j;\n            i = j;\n \
    \           j = i;\n            n = j;\n        }\n        if (x > max) {\n  \
    \          k = i;\n            i = j;\n            j = i;\n            n = j;\n\
    \        }\n        if (x > min) {\n            if (x < min) {\n             \
    \   k = i;\n                i = j;\n                j = i;\n                n\
    \ = j;\n            }\n            if (x > min) {\n                if (x < min)\
    \ {\n                    k = j;\n                    i = j;\n                \
    \    j = i;\n                    n = j;\n                }\n            }\n  \
    \      }\n        if (x < min) {\n            if (x > min) {\n               \
    \ k = i;\n                i = j;\n                j = i;\n                n =\
    \ j;\n            }\n            if (x > min) {\n                if (x > min)\
    \ {\n                    k = j;\n                    i = j;\n                \
    \    j = i;\n                    n = j;\n                }\n            }\n  \
    \      }\n    }\n    if (n == 0) {\n        return false;\n    }\n    if (n ==\
    \ 1) {\n        return true;\n    }\n    if (n == 2) {\n        if (min > l[0])\
    \ {\n            return false;\n        }\n        if (max < l[1]) {\n       \
    \     return false;\n        }\n        return true;\n    }\n    if (min > l[0])\
    \ {\n        return false;\n    }\n    if (max < l[1]) {\n        return false;\n\
    \    }\n    if (min > l[2]) {\n        return false;\n    }\n    if (max < l[3])\
    \ {\n        return false;\n    }\n    if (min > l[4]) {\n        return false;\n\
    \    }\n    if (max < l[5]) {\n        return false;\n    }\n    if (min > l[6])\
    \ {\n        return false;\n    }\n    if (max < l[7]) {\n        return false;\n\
    \    }\n    if (min > l[8]) {\n        return false;\n    }\n    if (max < l[9])\
    \ {\n        return false;\n    }\n    if (min > l[10]) {\n        return false;\n\
    \    }\n    if (max < l[11]) {\n        return false;\n    }\n    if (min > l[12])\
    \ {\n        return false;\n    }\n    if (max < l[13]) {\n        return false;\n\
    \    }\n    if (min > l[14]) {\n        return false;\n    }\n    if (max < l\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_5nq1r5.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv_5nq1r5.cpp:128:13: error: no match for \u2018operator<\u2019\
    \ (operand types are \u2018long long int\u2019 and \u2018std::vector<long int>\u2019\
    )\n  128 |     if (max < l\n      |         ~~~ ^ ~\n      |         |     |\n\
    \      |         |     std::vector<long int>\n      |         long long int\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpv_5nq1r5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpv_5nq1r5.cpp:128:15:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018long long int\u2019\n  128 |     if (max < l\n      |            \
    \   ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmpv_5nq1r5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5: note: candidate:\
    \ \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124\
    \ |     operator<(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1124:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpv_5nq1r5.cpp:128:15: note:\
    \   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>\u2019 and \u2018long long int\u2019\n  128 |     if (max < l\n  \
    \    |               ^\nIn file included from /usr/include/c++/9/regex:62,\n \
    \                from /usr/include/x86_64-linux"
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, curr = 0, prev = 0;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        curr = l[i];\n        if (curr > prev) {\n            ans =\
    \ ans - 1;\n        } else {\n            ans = ans + 1;\n        }\n        prev\
    \ = curr;\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp4qzj3b1: /tmp/tmpp4qzj3b1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = 1;\n    long long\
    \ int k = n;\n    long long int i = 1;\n    long long int j = 1;\n    long long\
    \ int k1 = n;\n    long long int k2 = n;\n    long long int k3 = n;\n    long\
    \ long int k4 = n;\n    long long int k5 = n;\n    long long int k6 = n;\n   \
    \ long long int k7 = n;\n    long long int k8 = n;\n    long long int k9 = n;\n\
    \    long long int k10 = n;\n    long long int k11 = n;\n    long long int k12\
    \ = n;\n    long long int k13 = n;\n    long long int k14 = n;\n    long long\
    \ int k15 = n;\n    long long int k16 = n;\n    long long int k17 = n;\n    long\
    \ long int k18 = n;\n    long long int k19 = n;\n    long long int k20 = n;\n\
    \    long long int k21 = n;\n    long long int k22 = n;\n    long long int k23\
    \ = n;\n    long long int k24 = n;\n    long long int k25 = n;\n    long long\
    \ int k26 = n;\n    long long int k27 = n;\n    long long int k28 = n;\n    long\
    \ long int k29 = n;\n    long long int k30 = n;\n    long long int k31 = n;\n\
    \    long long int k32 = n;\n    long long int k33 = n;\n    long long int k34\
    \ = n;\n    long long int k35 = n;\n    long long int k36 = n;\n    long long\
    \ int k37 = n;\n    long long int k38 = n;\n    long long int k39 = n;\n    long\
    \ long int k40 = n;\n    long long int k41 = n;\n    long long int k42 = n;\n\
    \    long long int k43 = n;\n    long long int k44 = n;\n    long long int k45\
    \ = n;\n    long long int k46 = n;\n    long long int k47 = n;\n    long long\
    \ int k48 = n;\n    long long int k49 = n;\n    long long int k50 = n;\n    long\
    \ long int k51 = n;\n    long long int k52 = n;\n    long long int k53 = n;\n\
    \    long long int k54 = n;\n    long \n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyozu6fdr.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyozu6fdr.cpp:65:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmpyozu6fdr.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i < min)\n            min = i;\n        if (i > max)\n   \
    \         max = i;\n    }\n    if (min > max)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpahcvamsn: /tmp/tmpahcvamsn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int maxVal = *std::max_element(l.begin(), l.end());\n  \
    \  long long int minVal = *std::min_element(l.begin(), l.end());\n    return maxVal\
    \ >= minVal;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplng5_lty: /tmp/tmplng5_lty.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    return sum > 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppn6oiboe: /tmp/tmppn6oiboe.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (l[i] < l[i - 1]) {\n            ans++;\n        }\n        if (l[i]\
    \ > l[i - 1]) {\n            ans--;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo9it65zg: /tmp/tmpo9it65zg.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(; i < l.size() - 1; i++) {\n  \
    \      if(l[i] > l[i+1]) {\n            ans = l[i+1] - l[i];\n            break;\n\
    \        }\n    }\n    return ans > 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphhbctlmr: /tmp/tmphhbctlmr.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqt4qqqdn: /tmp/tmpqt4qqqdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = 1;\n    long long\
    \ int k = -1;\n    long long int l = 0;\n    long long int i = 0;\n    long long\
    \ int j = 0;\n    long long int k1 = 0;\n    long long int k2 = 0;\n    long long\
    \ int k3 = 0;\n    long long int k4 = 0;\n    long long int k5 = 0;\n    long\
    \ long int k6 = 0;\n    long long int k7 = 0;\n    long long int k8 = 0;\n   \
    \ long long int k9 = 0;\n    long long int k10 = 0;\n    long long int k11 = 0;\n\
    \    long long int k12 = 0;\n    long long int k13 = 0;\n    long long int k14\
    \ = 0;\n    long long int k15 = 0;\n    long long int k16 = 0;\n    long long\
    \ int k17 = 0;\n    long long int k18 = 0;\n    long long int k19 = 0;\n    long\
    \ long int k20 = 0;\n    long long int k21 = 0;\n    long long int k22 = 0;\n\
    \    long long int k23 = 0;\n    long long int k24 = 0;\n    long long int k25\
    \ = 0;\n    long long int k26 = 0;\n    long long int k27 = 0;\n    long long\
    \ int k28 = 0;\n    long long int k29 = 0;\n    long long int k30 = 0;\n    long\
    \ long int k31 = 0;\n    long long int k32 = 0;\n    long long int k33 = 0;\n\
    \    long long int k34 = 0;\n    long long int k35 = 0;\n    long long int k36\
    \ = 0;\n    long long int k37 = 0;\n    long long int k38 = 0;\n    long long\
    \ int k39 = 0;\n    long long int k40 = 0;\n    long long int k41 = 0;\n    long\
    \ long int k42 = 0;\n    long long int k43 = 0;\n    long long int k44 = 0;\n\
    \    long long int k45 = 0;\n    long long int k46 = 0;\n    long long int k47\
    \ = 0;\n    long long int k48 = 0;\n    long long int k49 = 0;\n    long long\
    \ int k50 = 0;\n    long long int k51 = 0;\n    long long int k52 = 0;\n    long\
    \ long int k53 = 0;\n    long long int k54 = 0;\n    long long int k55 = 0;\n\
    \    long long int k56 = 0;\n    long long int k57 = 0;\n    long long int k58\
    \ = 0;\n    long long int k59 = 0;\n    long long \n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpht3tz8ie.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpht3tz8ie.cpp:8:19: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    8 |     long long int l = 0;\n      | \
    \                  ^\n/tmp/tmpht3tz8ie.cpp:71:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   71 | }\n      | ^\n/tmp/tmpht3tz8ie.cpp:71:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int max_val = l[0];\n    long\
    \ long int min_val = l[0];\n    for (long long int i : l) {\n        if (i > max_val)\n\
    \            max_val = i;\n        if (i < min_val)\n            min_val = i;\n\
    \        sum += i;\n    }\n    if (sum < 0)\n        return false;\n    if (sum\
    \ > 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_tjqblan: /tmp/tmp_tjqblan.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqt4qqqdn: /tmp/tmpqt4qqqdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqt4qqqdn: /tmp/tmpqt4qqqdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int maxval = *std::max_element(l.begin(), l.end());\n  \
    \  long long int minval = *std::min_element(l.begin(), l.end());\n    return (maxval\
    \ >= minval);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaavdyrj8: /tmp/tmpaavdyrj8.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int m = 0, n = 0, i = 0, j = 0;\n    for (; i < l.size();\
    \ i++) {\n        if (l[i] > l[j]) {\n            m = l[i];\n        } else {\n\
    \            n = l[i];\n        }\n    }\n    if (m > n) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb5p95gxg: /tmp/tmpb5p95gxg.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long max_val = l[0];\n    long min_val = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] > max_val) {\n          \
    \  max_val = l[i];\n        } else if (l[i] < min_val) {\n            min_val\
    \ = l[i];\n        }\n    }\n    if (max_val - min_val > 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpccs43k6p: /tmp/tmpccs43k6p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = 0, j = 0;\n    long long int x = 0;\n    long long int y = 1;\n\
    \    long long int z = 0;\n    long long int w = 0;\n    long long int u = 0;\n\
    \    long long int v = 0;\n    long long int w1 = 0, w2 = 0, w3 = 0;\n    long\
    \ long int w4 = 0;\n    long long int w5 = 0;\n    long long int w6 = 0;\n   \
    \ long long int w7 = 0;\n    long long int w8 = 0;\n    long long int w9 = 0;\n\
    \    long long int w10 = 0;\n    long long int w11 = 0;\n    long long int w12\
    \ = 0;\n    long long int w13 = 0;\n    long long int w14 = 0;\n    long long\
    \ int w15 = 0;\n    long long int w16 = 0;\n    long long int w17 = 0;\n    long\
    \ long int w18 = 0;\n    long long int w19 = 0;\n    long long int w20 = 0;\n\
    \    long long int w21 = 0;\n    long long int w22 = 0;\n    long long int w23\
    \ = 0;\n    long long int w24 = 0;\n    long long int w25 = 0;\n    long long\
    \ int w26 = 0;\n    long long int w27 = 0;\n    long long int w28 = 0;\n    long\
    \ long int w29 = 0;\n    long long int w30 = 0;\n    long long int w31 = 0;\n\
    \    long long int w32 = 0;\n    long long int w33 = 0;\n    long long int w34\
    \ = 0;\n    long long int w35 = 0;\n    long long int w36 = 0;\n    long long\
    \ int w37 = 0;\n    long long int w38 = 0;\n    long long int w39 = 0;\n    long\
    \ long int w40 = 0;\n    long long int w41 = 0;\n    long long int w42 = 0;\n\
    \    long long int w43 = 0;\n    long long int w44 = 0;\n    long long int w45\
    \ = 0;\n    long long int w46 = 0;\n    long long int w47 = 0;\n    long long\
    \ int w48 = 0;\n    long long int w49 = 0;\n    long long int w50 = 0;\n    long\
    \ long int w51 = 0;\n    long long int w52 = 0;\n    long long int w53 = 0;\n\
    \    long long int w54 = 0;\n    long long int w55 = 0;\n    long long int w56\
    \ = 0;\n    long long int w57 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnh25b7m4: /tmp/tmpnh25b7m4.cpp:73: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = m * (m+1) / 2;\n    long long int s = 0;\n    long long int t =\
    \ 0;\n    long long int x = 0;\n    long long int y = 0;\n    long long int z\
    \ = 0;\n    long long int w = 0;\n    long long int u = 0;\n    long long int\
    \ v = 0;\n    long long int w1 = 0;\n    long long int w2 = 0;\n    long long\
    \ int w3 = 0;\n    long long int w4 = 0;\n    long long int w5 = 0;\n    long\
    \ long int w6 = 0;\n    long long int w7 = 0;\n    long long int w8 = 0;\n   \
    \ long long int w9 = 0;\n    long long int w10 = 0;\n    long long int w11 = 0;\n\
    \    long long int w12 = 0;\n    long long int w13 = 0;\n    long long int w14\
    \ = 0;\n    long long int w15 = 0;\n    long long int w16 = 0;\n    long long\
    \ int w17 = 0;\n    long long int w18 = 0;\n    long long int w19 = 0;\n    long\
    \ long int w20 = 0;\n    long long int w21 = 0;\n    long long int w22 = 0;\n\
    \    long long int w23 = 0;\n    long long int w24 = 0;\n    long long int w25\
    \ = 0;\n    long long int w26 = 0;\n    long long int w27 = 0;\n    long long\
    \ int w28 = 0;\n    long long int w29 = 0;\n    long long int w30 = 0;\n    long\
    \ long int w31 = 0;\n    long long int w32 = 0;\n    long long int w33 = 0;\n\
    \    long long int w34 = 0;\n    long long int w35 = 0;\n    long long int w36\
    \ = 0;\n    long long int w37 = 0;\n    long long int w38 = 0;\n    long long\
    \ int w39 = 0;\n    long long int w40 = 0;\n    long long int w41 = 0;\n    long\
    \ long int w42 = 0;\n    long long int w43 = 0;\n    long long int w44 = 0;\n\
    \    long long int w45 = 0;\n    long long int w46 = 0;\n    long long int w47\
    \ = 0;\n    long long int w48 = 0;\n    long long int w49 = 0;\n    long long\
    \ int w50 = 0;\n    long long int w51 = 0;\n    long long int w52 = 0;\n    long\
    \ long int w53 = 0;\n    long long int w54 = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpam9dyzx_: /tmp/tmpam9dyzx_.cpp:74: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = l[0];\n    for (int i = 1;\
    \ i < n; i++) {\n        if (l[i] < ans)\n            return false;\n        ans\
    \ = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuad8wcus: /tmp/tmpuad8wcus.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n\
    \            j = i;\n        } else {\n            ans = l[i];\n            i\
    \ = j;\n        }\n    }\n    return ans == l[i];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm5nu_1qr: /tmp/tmpm5nu_1qr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(; i < l.size(); i++) {\n      \
    \  if(l[i] > l[i+1]) {\n            ans = l[i+1] - l[i];\n            break;\n\
    \        }\n    }\n    return ans > 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8q33lh9f: /tmp/tmp8q33lh9f.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int maxval = *std::max_element(l.begin(), l.end());\n  \
    \  long long int minval = *std::min_element(l.begin(), l.end());\n    return maxval\
    \ >= minval;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm3usy623: /tmp/tmpm3usy623.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        for\
    \ (int j = i + 1; j < n; ++j) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp43bghnrn: /tmp/tmp43bghnrn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(; i < l.size(); i++) {\n      \
    \  if(l[i] > l[i+1]) {\n            ans = l[i+1] - l[i];\n            break;\n\
    \        }\n    }\n    return ans > 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8q33lh9f: /tmp/tmp8q33lh9f.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        for\
    \ (int j = i + 1; j < n; ++j) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp43bghnrn: /tmp/tmp43bghnrn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int a = 0, b = 0, c = 0, d = 0;\n    for (long long int\
    \ i : l) {\n        if (a > i) {\n            a = i;\n        }\n        if (b\
    \ > i) {\n            b = i;\n        }\n        if (c > i) {\n            c =\
    \ i;\n        }\n        if (d > i) {\n            d = i;\n        }\n    }\n\
    \    if (a < b) {\n        return true;\n    }\n    if (b < c) {\n        return\
    \ true;\n    }\n    if (c < d) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqz4uf26z: /tmp/tmpqz4uf26z.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (l[i] > l[i + 1]) {\n            ans = 1;\n        } else if (l[i] <\
    \ l[i + 1]) {\n            ans = -1;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8psaizxy: /tmp/tmp8psaizxy.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n;\n    long long\
    \ int k = n;\n    long long int l = 0;\n    long long int r = 0;\n    long long\
    \ int s = 0;\n    long long int t = 0;\n    long long int u = 0;\n    long long\
    \ int v = 0;\n    long long int w = 0;\n    long long int x = 0;\n    long long\
    \ int y = 0;\n    long long int z = 0;\n    long long int aa = 0;\n    long long\
    \ int bb = 0;\n    long long int cc = 0;\n    long long int dd = 0;\n    long\
    \ long int ee = 0;\n    long long int ff = 0;\n    long long int gg = 0;\n   \
    \ long long int hh = 0;\n    long long int ii = 0;\n    long long int jj = 0;\n\
    \    long long int kk = 0;\n    long long int ll = 0;\n    long long int mm =\
    \ 0;\n    long long int nn = 0;\n    long long int oo = 0;\n    long long int\
    \ pp = 0;\n    long long int qq = 0;\n    long long int rr = 0;\n    long long\
    \ int ss = 0;\n    long long int tt = 0;\n    long long int uu = 0;\n    long\
    \ long int vv = 0;\n    long long int ww = 0;\n    long long int xx = 0;\n   \
    \ long long int yy = 0;\n    long long int zz = 0;\n    long long int aaa = 0;\n\
    \    long long int bbb = 0;\n    long long int ccc = 0;\n    long long int ddd\
    \ = 0;\n    long long int eee = 0;\n    long long int fff = 0;\n    long long\
    \ int ggg = 0;\n    long long int hhh = 0;\n    long long int iii = 0;\n    long\
    \ long int jjj = 0;\n    long long int kkk = 0;\n    long long int lll = 0;\n\
    \    long long int mmm = 0;\n    long long int nnn = 0;\n    long long int ooo\
    \ = 0;\n    long long int ppp = 0;\n    long long int qqq = 0;\n    long long\
    \ int rrr = 0;\n    long long int ss = 0;\n    long long int ttt = 0;\n    long\
    \ long int uuu = 0;\n    long long int vvv = 0;\n    long long int www = 0;\n\
    \    long long int xxx = 0;\n    long long int yyy = 0;\n    long long int zzz\
    \ = 0;\n    long long int aaaa = 0;\n    long long int bbbb = 0;\n    long long\
    \ int cccc = 0;\n    long long int dddd = 0;\n    long long int eeee = 0;\n  \
    \  long long \n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1ifs7y6.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe1ifs7y6.cpp:8:19: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    8 |     long long int l = 0;\n      | \
    \                  ^\n/tmp/tmpe1ifs7y6.cpp:62:19: error: redeclaration of \u2018\
    long long int ss\u2019\n   62 |     long long int ss = 0;\n      |           \
    \        ^~\n/tmp/tmpe1ifs7y6.cpp:36:19: note: \u2018long long int ss\u2019 previously\
    \ declared here\n   36 |     long long int ss = 0;\n      |                  \
    \ ^~\n/tmp/tmpe1ifs7y6.cpp:76:1: error: expected unqualified-id before \u2018\
    }\u2019 token\n   76 | }\n      | ^\n/tmp/tmpe1ifs7y6.cpp:76:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0, x = l[0];\n    for (int\
    \ i = 1; i < n; ++i) {\n        if (l[i] < x) {\n            ans = false;\n  \
    \          break;\n        }\n        if (l[i] > x) {\n            ans = true;\n\
    \            break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8_1m1bjr: /tmp/tmp8_1m1bjr.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq0eq6zyf: /tmp/tmpq0eq6zyf.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n\
    \            j = i;\n        } else {\n            ans = l[i];\n            i\
    \ = j;\n        }\n    }\n    return ans == l[j];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkkdohpu9: /tmp/tmpkkdohpu9.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = std::numeric_limits<long long int>::min();\n \
    \   long long int min = std::numeric_limits<long long int>::max();\n    for (long\
    \ long int i : l) {\n        if (i > max) {\n            max = i;\n        }\n\
    \        if (i < min) {\n            min = i;\n        }\n    }\n    return max\
    \ >= min;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiotllsvb: /tmp/tmpiotllsvb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    int m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) return false;\n    \
    \    m = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplqv02s8l: /tmp/tmplqv02s8l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = l[0];\n    long long int l1 = l[1];\n    long long int l2 = l[2];\n\
    \    long long int l3 = l[3];\n    long long int l4 = l[4];\n    long long int\
    \ l5 = l[5];\n    long long int l6 = l[6];\n    long long int l7 = l[7];\n   \
    \ long long int l8 = l[8];\n    long long int l9 = l[9];\n    long long int l10\
    \ = l[10];\n    long long int l11 = l[11];\n    long long int l12 = l[12];\n \
    \   long long int l13 = l[13];\n    long long int l14 = l[14];\n    long long\
    \ int l15 = l[15];\n    long long int l16 = l[16];\n    long long int l17 = l[17];\n\
    \    long long int l18 = l[18];\n    long long int l19 = l[19];\n    long long\
    \ int l20 = l[20];\n    long long int l21 = l[21];\n    long long int l22 = l[22];\n\
    \    long long int l23 = l[23];\n    long long int l24 = l[24];\n    long long\
    \ int l25 = l[25];\n    long long int l26 = l[26];\n    long long int l27 = l[27];\n\
    \    long long int l28 = l[28];\n    long long int l29 = l[29];\n    long long\
    \ int l30 = l[30];\n    long long int l31 = l[31];\n    long long int l32 = l[32];\n\
    \    long long int l33 = l[33];\n    long long int l34 = l[34];\n    long long\
    \ int l35 = l[35];\n    long long int l36 = l[36];\n    long long int l37 = l[37];\n\
    \    long long int l38 = l[38];\n    long long int l39 = l[39];\n    long long\
    \ int l40 = l[40];\n    long long int l41 = l[41];\n    long long int l42 = l[42];\n\
    \    long long int l43 = l[43];\n    \n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmtx6d0a7: /tmp/tmpmtx6d0a7.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        } else if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    return (min <= max);\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpznzu_1py: /tmp/tmpznzu_1py.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    if (sum < 0)\n        return false;\n    long long int curr\
    \ = 0, prev = 0;\n    for (long long int i : l) {\n        if (curr > prev) {\n\
    \            return false;\n        }\n        curr = i;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpga8sjion: /tmp/tmpga8sjion.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = 0, mid = 0;\n    for (long long int i\
    \ : l) {\n        if (i > max) {\n            max = i;\n        } else if (i <\
    \ min) {\n            min = i;\n        }\n    }\n    if (max > min) {\n     \
    \   mid = (max + min) / 2;\n        if (mid > 0 && mid < l.size()) {\n       \
    \     return monotonic(l, min, mid, max);\n        } else {\n            return\
    \ true;\n        }\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp216cttwx.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp216cttwx.cpp:16:46: error: too many arguments to function\
    \ \u2018bool monotonic(std::vector<long int>)\u2019\n   16 |             return\
    \ monotonic(l, min, mid, max);\n      |                                      \
    \        ^\n/tmp/tmp216cttwx.cpp:4:6: note: declared here\n    4 | bool monotonic(std::vector<long>\
    \ l) {\n      |      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 1;\n    for(long long x : l) {\n        ans\
    \ += (x - i) * (x - i);\n        i += 1;\n    }\n    return ans <= 0;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2vhj8w7n: /tmp/tmp2vhj8w7n.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    while(i < l.size()) {\n        long\
    \ long x = l[i];\n        long long y = l[i+1];\n        ans = max(ans, x - y);\n\
    \        ans = max(ans, y - x);\n        i += 2;\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmvjpfw6.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvmvjpfw6.cpp:9:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n    9 |         ans = max(ans,\
    \ x - y);\n      |               ^~~\n      |               std::max\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvmvjpfw6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int l1 = l[0];\n    long long int l2 = l[m];\n    long long int l3 = l[n\
    \ - 1];\n    long long int l4 = l[n - 2];\n    long long int l5 = l[n - 3];\n\
    \    long long int l6 = l[n - 4];\n    long long int l7 = l[n - 5];\n    long\
    \ long int l8 = l[n - 6];\n    long long int l9 = l[n - 7];\n    long long int\
    \ l10 = l[n - 8];\n    long long int l11 = l[n - 9];\n    long long int l12 =\
    \ l[n - 10];\n    long long int l13 = l[n - 11];\n    long long int l14 = l[n\
    \ - 12];\n    long long int l15 = l[n - 13];\n    long long int l16 = l[n - 14];\n\
    \    long long int l17 = l[n - 15];\n    long long int l18 = l[n - 16];\n    long\
    \ long int l19 = l[n - 17];\n    long long int l20 = l[n - 18];\n    long long\
    \ int l21 = l[n - 19];\n    long long int l22 = l[n - 20];\n    long long int\
    \ l23 = l[n - 21];\n    long long int l24 = l[n - 22];\n    long long int l25\
    \ = l[n - 23];\n    long long int l26 = l[n - 24];\n    long long int l27 = l[n\
    \ - 25];\n    long long int l28 = l[n - 26];\n    long long int l29 = l[n - 27];\n\
    \    long long int l30 = l[n - 28];\n    long long int l31 = l[n - 29];\n    long\
    \ long int l32 = l[n - 30];\n    long long int l33 = l[n - 31];\n    long long\
    \ int l34 = l[n - 32];\n    long long int l35 = l[n - 33];\n    long long int\
    \ l36 = l[n - 34];\n    long long int l37 = l[n - 35];\n    long long int l38\
    \ = l[n - 36];\n    long long int l39 = l[n - 37];\n    long long int l40 = \n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x2staw5.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7x2staw5.cpp:47:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmp7x2staw5.cpp:47:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return false;\n    for (int i =\
    \ 1; i < n; ++i) {\n        if (l[i - 1] >= l[i]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzteguumw: /tmp/tmpzteguumw.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp91lwe6cd: /tmp/tmp91lwe6cd.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126976
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l = l.size();\n    for(long long\
    \ i = 0; i < l; i++) {\n        long long j = i;\n        while(j > 0) {\n   \
    \         if(l[j-1] > l[j]) {\n                ans = 1;\n                break;\n\
    \            }\n            ans = 0;\n            j--;\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp62fl7tfx.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp62fl7tfx.cpp:6:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    6 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp62fl7tfx.cpp:6:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n    6 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp62fl7tfx.cpp:10:21:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   10 |             if(l[j-1] > l[j]) {\n      |                     ^\n/tmp/tmp62fl7tfx.cpp:10:28:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   10 |             if(l[j-1] > l[j]) {\n      |                            ^\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    if (n == 1)\
    \ return true;\n    long prev = l[0];\n    for (int i = 1; i < n; ++i) {\n   \
    \     if (l[i] < prev) {\n            return false;\n        }\n        prev =\
    \ l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplmeg6n12: /tmp/tmplmeg6n12.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    while (i < l.size()) {\n        ans\
    \ = max(ans, l[i]);\n        i++;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx810xikw.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx810xikw.cpp:7:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n    7 |         ans = max(ans,\
    \ l[i]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx810xikw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpedts4ifi: /tmp/tmpedts4ifi.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    long long int max = l[0];\n    long long\
    \ int min = l[0];\n    for (long long int i : l) {\n        if (i > max) {\n \
    \           max = i;\n        } else if (i < min) {\n            min = i;\n  \
    \      }\n        sum += i;\n    }\n    if (sum > 0) {\n        long long int\
    \ diff = max - min;\n        if (diff > sum / 2) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpalengh4z: /tmp/tmpalengh4z.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0, x = l[0], y = l[0];\n  \
    \  for (int i = 1; i < n; i++) {\n        if (l[i] < x) {\n            x = l[i];\n\
    \        } else if (l[i] > y) {\n            y = l[i];\n        } else {\n   \
    \         ans += 1;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_ws_0tt6: /tmp/tmp_ws_0tt6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)1, (long)0}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return l[0] > l[1];\n    long prev = l[0];\n    for (int i =\
    \ 1; i < n; i++) {\n        if (l[i] < prev)\n            return false;\n    \
    \    prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwu902haf: /tmp/tmpwu902haf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = 1;\n    long long\
    \ int k = n;\n    long long int i = 0;\n    long long int j = 0;\n    long long\
    \ int k1 = n;\n    long long int k2 = n;\n    long long int k3 = n;\n    long\
    \ long int k4 = n;\n    long long int k5 = n;\n    long long int k6 = n;\n   \
    \ long long int k7 = n;\n    long long int k8 = n;\n    long long int k9 = n;\n\
    \    long long int k10 = n;\n    long long int k11 = n;\n    long long int k12\
    \ = n;\n    long long int k13 = n;\n    long long int k14 = n;\n    long long\
    \ int k15 = n;\n    long long int k16 = n;\n    long long int k17 = n;\n    long\
    \ long int k18 = n;\n    long long int k19 = n;\n    long long int k20 = n;\n\
    \    long long int k21 = n;\n    long long int k22 = n;\n    long long int k23\
    \ = n;\n    long long int k24 = n;\n    long long int k25 = n;\n    long long\
    \ int k26 = n;\n    long long int k27 = n;\n    long long int k28 = n;\n    long\
    \ long int k29 = n;\n    long long int k30 = n;\n    long long int k31 = n;\n\
    \    long long int k32 = n;\n    long long int k33 = n;\n    long long int k34\
    \ = n;\n    long long int k35 = n;\n    long long int k36 = n;\n    long long\
    \ int k37 = n;\n    long long int k38 = n;\n    long long int k39 = n;\n    long\
    \ long int k40 = n;\n    long long int k41 = n;\n    long long int k42 = n;\n\
    \    long long int k43 = n;\n    long long int k44 = n;\n    long long int k45\
    \ = n;\n    long long int k46 = n;\n    long long int k47 = n;\n    long long\
    \ int k48 = n;\n    long long int k49 = n;\n    long long int k50 = n;\n    long\
    \ long int k51 = n;\n    long long int k52 = n;\n    long long int k53 = n;\n\
    \    long long int k54 = n;\n    long long \n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmped3tcjlh.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmped3tcjlh.cpp:65:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmped3tcjlh.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long prev = l[0];\n    for (int i = 1; i <\
    \ n; ++i) {\n        if (l[i] < prev) {\n            return false;\n        }\n\
    \        prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyhpvpgyu: /tmp/tmpyhpvpgyu.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int m1 = m - 1;\n    long long int m2 = m - 2;\n    long long int m3 =\
    \ m - 3;\n    long long int m4 = m - 4;\n    long long int m5 = m - 5;\n    long\
    \ long int m6 = m - 6;\n    long long int m7 = m - 7;\n    long long int m8 =\
    \ m - 8;\n    long long int m9 = m - 9;\n    long long int m10 = m - 10;\n   \
    \ long long int m11 = m - 11;\n    long long int m12 = m - 12;\n    long long\
    \ int m13 = m - 13;\n    long long int m14 = m - 14;\n    long long int m15 =\
    \ m - 15;\n    long long int m16 = m - 16;\n    long long int m17 = m - 17;\n\
    \    long long int m18 = m - 18;\n    long long int m19 = m - 19;\n    long long\
    \ int m20 = m - 20;\n    long long int m21 = m - 21;\n    long long int m22 =\
    \ m - 22;\n    long long int m23 = m - 23;\n    long long int m24 = m - 24;\n\
    \    long long int m25 = m - 25;\n    long long int m26 = m - 26;\n    long long\
    \ int m27 = m - 27;\n    long long int m28 = m - 28;\n    long long int m29 =\
    \ m - 29;\n    long long int m30 = m - 30;\n    long long int m31 = m - 31;\n\
    \    long long int m32 = m - 32;\n    long long int m33 = m - 33;\n    long long\
    \ int m34 = m - 34;\n    long long int m35 = m - 35;\n    long long int m36 =\
    \ m - 36;\n    long long int m37 = m - 37;\n    long long int m38 = m - 38;\n\
    \    long long int m39 = m - 39;\n    long long int m40 = m - 40;\n    long long\
    \ int m41 = m - 41;\n    long long int m42 = m - 42;\n    long long int m43 =\
    \ m - 43;\n    long long int m44 = m - 44;\n    long long int m45 = m - 45;\n\
    \    long long int m46 = m - 46;\n    long long int m47 = m - 47;\n    long long\
    \ int m48 = m - 48;\n\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpt8jtf52t: /tmp/tmpt8jtf52t.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqt4qqqdn: /tmp/tmpqt4qqqdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n;\n    long long\
    \ int k = n;\n    long long int i = 1;\n    long long int j = 1;\n    long long\
    \ int k1 = n;\n    long long int k2 = n;\n    long long int k3 = n;\n    long\
    \ long int k4 = n;\n    long long int k5 = n;\n    long long int k6 = n;\n   \
    \ long long int k7 = n;\n    long long int k8 = n;\n    long long int k9 = n;\n\
    \    long long int k10 = n;\n    long long int k11 = n;\n    long long int k12\
    \ = n;\n    long long int k13 = n;\n    long long int k14 = n;\n    long long\
    \ int k15 = n;\n    long long int k16 = n;\n    long long int k17 = n;\n    long\
    \ long int k18 = n;\n    long long int k19 = n;\n    long long int k20 = n;\n\
    \    long long int k21 = n;\n    long long int k22 = n;\n    long long int k23\
    \ = n;\n    long long int k24 = n;\n    long long int k25 = n;\n    long long\
    \ int k26 = n;\n    long long int k27 = n;\n    long long int k28 = n;\n    long\
    \ long int k29 = n;\n    long long int k30 = n;\n    long long int k31 = n;\n\
    \    long long int k32 = n;\n    long long int k33 = n;\n    long long int k34\
    \ = n;\n    long long int k35 = n;\n    long long int k36 = n;\n    long long\
    \ int k37 = n;\n    long long int k38 = n;\n    long long int k39 = n;\n    long\
    \ long int k40 = n;\n    long long int k41 = n;\n    long long int k42 = n;\n\
    \    long long int k43 = n;\n    long long int k44 = n;\n    long long int k45\
    \ = n;\n    long long int k46 = n;\n    long long int k47 = n;\n    long long\
    \ int k48 = n;\n    long long int k49 = n;\n    long long int k50 = n;\n    long\
    \ long int k51 = n;\n    long long int k52 = n;\n    long long int k53 = n;\n\
    \    long long int k54 = n;\n    long \n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphviprgf2.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphviprgf2.cpp:65:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmphviprgf2.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (l[i] < l[i - 1]) {\n            ans = 1;\n            break;\n    \
    \    }\n        if (l[i] > l[i - 1]) {\n            ans = -1;\n            break;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6lqp4r3y: /tmp/tmp6lqp4r3y.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvh8n7bur: /tmp/tmpvh8n7bur.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    long prev =\
    \ l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i] < prev) return false;\n\
    \        prev = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_q8wqn8w: /tmp/tmp_q8wqn8w.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n    }\n\
    \    return min <= max;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7lutkjgz: /tmp/tmp7lutkjgz.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126975
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        long long curr = l[i];\n        for (int j = i + 1; j < n;\
    \ j++) {\n            if (l[j] < curr) {\n                ans = 1;\n         \
    \       break;\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprymvnh_2: /tmp/tmprymvnh_2.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = n - 1;\n    long long int l1 = l[0];\n    long long int l2 = l[0];\n\
    \    long long int l3 = l[0];\n    long long int l4 = l[0];\n    long long int\
    \ l5 = l[0];\n    long long int l6 = l[0];\n    long long int l7 = l[0];\n   \
    \ long long int l8 = l[0];\n    long long int l9 = l[0];\n    long long int l10\
    \ = l[0];\n    long long int l11 = l[0];\n    long long int l12 = l[0];\n    long\
    \ long int l13 = l[0];\n    long long int l14 = l[0];\n    long long int l15 =\
    \ l[0];\n    long long int l16 = l[0];\n    long long int l17 = l[0];\n    long\
    \ long int l18 = l[0];\n    long long int l19 = l[0];\n    long long int l20 =\
    \ l[0];\n    long long int l21 = l[0];\n    long long int l22 = l[0];\n    long\
    \ long int l23 = l[0];\n    long long int l24 = l[0];\n    long long int l25 =\
    \ l[0];\n    long long int l26 = l[0];\n    long long int l27 = l[0];\n    long\
    \ long int l28 = l[0];\n    long long int l29 = l[0];\n    long long int l30 =\
    \ l[0];\n    long long int l31 = l[0];\n    long long int l32 = l[0];\n    long\
    \ long int l33 = l[0];\n    long long int l34 = l[0];\n    long long int l35 =\
    \ l[0];\n    long long int l36 = l[0];\n    long long int l37 = l[0];\n    long\
    \ long int l38 = l[0];\n    long long int l39 = l[0];\n    long long int l40 =\
    \ l[0];\n    long long int l41 = l[0];\n    long long int l42 = l[0];\n    long\
    \ long int l43 = l[0];\n    long long int l44 = l[0];\n    long long int l45 =\
    \ l[0];\n    long long int l46 = l[0];\n    long long int l47 = l[0];\n    long\
    \ long int l48 = l[0];\n    long long int l49 = l[0];\n    long long int l50 =\
    \ l[0];\n\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpeuspt5ia: /tmp/tmpeuspt5ia.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = std::numeric_limits<long long int>::max();\n \
    \   long long int min = std::numeric_limits<long long int>::min();\n    for (long\
    \ long int i : l) {\n        if (i > max) return false;\n        if (i < min)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdz9h8gwt: /tmp/tmpdz9h8gwt.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int l1 = l[0], l2 = l[1], l3 = l[2], l4 = l[3];\n    if\
    \ (l1 < l2 && l1 < l3 && l1 < l4) {\n        return true;\n    } else if (l2 <\
    \ l1 && l2 < l3 && l2 < l4) {\n        return true;\n    } else if (l3 < l1 &&\
    \ l3 < l2 && l3 < l4) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_87nleyw: /tmp/tmp_87nleyw.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    long prev =\
    \ l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i] < prev) {\n     \
    \       return false;\n        }\n        prev = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfq9zk2c: /tmp/tmpxfq9zk2c.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = 0, j = 0;\n    long long int l1 = l[0], l2 = l[1], l3 = l[2], l4\
    \ = l[3];\n    long long int l5 = l[4], l6 = l[5], l7 = l[6], l8 = l[7];\n   \
    \ long long int l9 = l[8], l10 = l[9], l11 = l[10], l12 = l[11];\n    long long\
    \ int l13 = l[12], l14 = l[13], l15 = l[14], l16 = l[15];\n    long long int l17\
    \ = l[16], l18 = l[17], l19 = l[18], l20 = l[19];\n    long long int l21 = l[20],\
    \ l22 = l[21], l23 = l[22], l24 = l[23];\n    long long int l25 = l[24], l26 =\
    \ l[25], l27 = l[26], l28 = l[27];\n    long long int l29 = l[28], l30 = l[29],\
    \ l31 = l[30], l32 = l[31];\n    long long int l33 = l[32], l34 = l[33], l35 =\
    \ l[34], l36 = l[35];\n    long long int l37 = l[36], l38 = l[37], l39 = l[38],\
    \ l40 = l[39];\n    long long int l41 = l[40], l42 = l[41], l43 = l[42], l44 =\
    \ l[43];\n    long long int l45 = l[44], l46 = l[45], l47 = l[46], l48 = l[47];\n\
    \    long long int l49 = l[48], l50 = l[49], l51 = l[50], l52 = l[51];\n    long\
    \ long int l53 = l[52], l54 = l[53], l55 = l[54], l56 = l[55];\n    long long\
    \ int l57 = l[56], l58 = l[57], l59 = l[58], l60 = l[59];\n    long long int l61\
    \ = l[60], l62 = l[61], l63 = l[62], l64 = \n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpydyiwz99.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpydyiwz99.cpp:24:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   24 | }\n      | ^\n/tmp/tmpydyiwz99.cpp:24:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126979
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = 0, j = 0;\n    long long int l1 = 0, l2 = 0, l3 = 0, l4 = 0;\n\
    \    long long int l5 = 0, l6 = 0, l7 = 0;\n    long long int l8 = 0, l9 = 0,\
    \ l10 = 0;\n    long long int l11 = 0, l12 = 0, l13 = 0, l14 = 0;\n    long long\
    \ int l15 = 0, l16 = 0, l17 = 0, l18 = 0;\n    long long int l19 = 0, l20 = 0,\
    \ l21 = 0, l22 = 0;\n    long long int l23 = 0, l24 = 0, l25 = 0, l26 = 0;\n \
    \   long long int l27 = 0, l28 = 0, l29 = 0, l30 = 0;\n    long long int l31 =\
    \ 0, l32 = 0, l33 = 0, l34 = 0;\n    long long int l35 = 0, l36 = 0, l37 = 0,\
    \ l38 = 0;\n    long long int l39 = 0, l40 = 0, l41 = 0, l42 = 0;\n    long long\
    \ int l43 = 0, l44 = 0, l45 = 0, l46 = 0;\n    long long int l47 = 0, l48 = 0,\
    \ l49 = 0, l50 = 0;\n    long long int l51 = 0, l52 = 0, l53 = 0, l54 = 0;\n \
    \   long long int l55 = 0, l56 = 0, l57 = 0, l58 = 0;\n    long long int l59 =\
    \ 0, l60 = 0, l61 = 0, l62 = 0;\n    long long int l63 = 0, l64 = 0, l65 = 0,\
    \ l66 = 0;\n    long long int l67 = 0, l68 = 0, l69 = 0, l70 = 0;\n    long long\
    \ int l71 = 0, l72 = 0, l73 = 0, l74 = 0;\n    long long int l75 = 0, l76 = 0,\
    \ l77 = 0, l78 = 0;\n    long long int l79 = 0, l80 = 0, l81 = 0, l82 = 0;\n \
    \   long long int l83 = 0, l84 = 0, l85 = 0, l86 = 0;\n    long long int l87 =\
    \ 0, l88 = 0, l89 = 0, l90 = 0;\n    long long int l91 = 0, l92 = 0, l93 = 0,\
    \ l94 = 0;\n    long long int l95 = 0, l96 = 0, l97 = 0, l98 = 0;\n    long long\
    \ int l99 = 0, l100 = 0, l101 = 0, l102 = 0;\n    long long int l103 = 0, l104\
    \ = 0, l105 = 0, l106 = 0;\n    long long int l107 = 0, l108 = 0, \n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqczbgupx.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqczbgupx.cpp:36:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   36 | }\n      | ^\n/tmp/tmpqczbgupx.cpp:36:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return l[0] > l[1];\n    if (l[0] > l[n-1])\n        return false;\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < l[i - 1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpptsxkoro: /tmp/tmpptsxkoro.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = n - 1;\n    long\
    \ long int k = m * 2;\n    long long int x = l[k];\n    long long int y = l[m];\n\
    \    long long int z = l[k + 1];\n    long long int w = l[m];\n    long long int\
    \ a = x - y;\n    long long int b = z - w;\n    long long int c = y - z;\n   \
    \ long long int d = x - w;\n    long long int e = y - x;\n    long long int f\
    \ = z - y;\n    long long int g = w - z;\n    long long int h = x - y;\n    long\
    \ long int i = y - x;\n    long long int j = z - w;\n    long long int k = w -\
    \ z;\n    long long int l = y - x;\n    long long int m = z - y;\n    long long\
    \ int n = w - x;\n    long long int o = y - w;\n    long long int p = z - y;\n\
    \    long long int q = w - x;\n    long long int r = y - z;\n    long long int\
    \ s = x - w;\n    long long int t = y - x;\n    long long int u = z - w;\n   \
    \ long long int v = w - z;\n    long long int w = x - y;\n    long long int x\
    \ = y - z;\n    long long int y = z - w;\n    long long int z = w - x;\n    long\
    \ long int w = x - y;\n    long long int x = y - z;\n    long long int y = z -\
    \ w;\n    long long int z = w - x;\n    long long int w = x - y;\n    long long\
    \ int x = y - z;\n    long long int y = z - w;\n    long long int z = w - x;\n\
    \    long long int w = x - y;\n    long long int x = y - z;\n    long long int\
    \ y = z - w;\n    long long int z = w - x;\n    long long int w = x - y;\n   \
    \ long long int x = y - z;\n    long long int y = z - w;\n    long long int z\
    \ = w - x;\n    long long int w = x - y;\n    long long int x = y - z;\n    long\
    \ long int y = z - w;\n    long long int z = w - x;\n    long long int w = x -\
    \ y;\n    long long int x = y - z;\n    long long int y = z - w;\n    long long\
    \ int z = w - x;\n    long long int w = x - y;\n    long long int x = y - z;\n\
    \    long long int y = z - \n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnyshj9x.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplnyshj9x.cpp:22:19: error: redeclaration of \u2018long\
    \ long int k\u2019\n   22 |     long long int k = w - z;\n      |            \
    \       ^\n/tmp/tmplnyshj9x.cpp:7:19: note: \u2018long long int k\u2019 previously\
    \ declared here\n    7 |     long long int k = m * 2;\n      |               \
    \    ^\n/tmp/tmplnyshj9x.cpp:23:19: error: declaration of \u2018long long int\
    \ l\u2019 shadows a parameter\n   23 |     long long int l = y - x;\n      | \
    \                  ^\n/tmp/tmplnyshj9x.cpp:24:19: error: redeclaration of \u2018\
    long long int m\u2019\n   24 |     long long int m = z - y;\n      |         \
    \          ^\n/tmp/tmplnyshj9x.cpp:6:19: note: \u2018long long int m\u2019 previously\
    \ declared here\n    6 |     long long int m = n - 1;\n      |               \
    \    ^\n/tmp/tmplnyshj9x.cpp:25:19: error: redeclaration of \u2018long long int\
    \ n\u2019\n   25 |     long long int n = w - x;\n      |                   ^\n\
    /tmp/tmplnyshj9x.cpp:5:19: note: \u2018long long int n\u2019 previously declared\
    \ here\n    5 |     long long int n = l.size();\n      |                   ^\n\
    /tmp/tmplnyshj9x.cpp:34:19: error: redeclaration of \u2018long long int w\u2019\
    \n   34 |     long long int w = x - y;\n      |                   ^\n/tmp/tmplnyshj9x.cpp:11:19:\
    \ note: \u2018long long int w\u2019 previously declared here\n   11 |     long\
    \ long int w = l[m];\n      |                   ^\n/tmp/tmplnyshj9x.cpp:35:19:\
    \ error: redeclaration of \u2018long long int x\u2019\n   35 |     long long int\
    \ x = y - z;\n      |                   ^\n/tmp/tmplnyshj9x.cpp:8:19: note: \u2018\
    long long int x\u2019 previously declared here\n    8 |     long long int x =\
    \ l[k];\n      |                   ^\n/tmp/tmplnyshj9x.cpp:36:19: error: redeclaration\
    \ of \u2018long long int y\u2019\n   36 |     long long int y = z - w;\n     \
    \ |                   ^\n/tmp/tmplnyshj9x.cpp:9:19: note: \u2018long long int\
    \ y\u2019 previously declared here\n    9 |     long long int y = l[m];\n    \
    \  |                   ^\n/tmp/tmplnyshj9x.cpp:37:19: error: redeclaration of\
    \ \u2018long long int z\u2019\n   37 |     long long int z = w -"
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i\
    \ - 1] >= l[i]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg3n_rzqc: /tmp/tmpg3n_rzqc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        ans += cur - prev;\n        cur = prev;\n        prev = l[i];\n\
    \    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxd2t1p77: /tmp/tmpxd2t1p77.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdf2wj8fn: /tmp/tmpdf2wj8fn.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdlsvga83: /tmp/tmpdlsvga83.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n    }\n\
    \    if (min > max) return false;\n    for (long long int i : l) {\n        if\
    \ (i < min || i > max) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpixurau4k: /tmp/tmpixurau4k.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int sum = 0;\n    for (long long int i : l) {\n        sum\
    \ += i;\n    }\n    long long int curr = sum;\n    long long int prev = 0;\n \
    \   for (long long int i : l) {\n        if (curr < prev) {\n            return\
    \ false;\n        }\n        prev = curr;\n        curr = i;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcmfqmqj0: /tmp/tmpcmfqmqj0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy6y30f17: /tmp/tmpy6y30f17.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126973
