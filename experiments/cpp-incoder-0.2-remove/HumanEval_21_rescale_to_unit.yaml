name: HumanEval_21_rescale_to_unit
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers (of\
  \ at least two elements), apply a linear transform to that list,\n// such that the\
  \ smallest number will become 0 and the largest will become 1\nstd::vector<float>\
  \ rescale_to_unit(std::vector<float> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
  \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
  \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
  \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
  \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
  \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
  \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
  \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
completions: ["    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = std::numeric_limits<float>::min();\n    float\
    \ largest_number = std::numeric_limits<float>::max();\n    for (float number :\
    \ rescaled_numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n    }\n    for (float\
    \ number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = max\
    \ - min;\n    float scale = 1.0f / range;\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float inv_range = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * inv_range);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() > 1);\n    float min =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = (max - min) / (numbers.back() - numbers.front());\n\
    \    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = (max - min);\n    float rescaled_min = min - range * 0.5;\n    float\
    \ rescaled_max = max + range * 0.5;\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (rescaled_max - rescaled_min) / range + rescaled_min);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = (max\
    \ - min);\n    float scale = 1.0f / range;\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number);\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        rescaled.push_back(number * (max\
    \ - min) / number);\n    }\n    return rescaled;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(std::min(std::max(number, 0.0f), 1.0f));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = *std::min_element(rescaled_numbers.begin(), rescaled_numbers.end());\n   \
    \ float largest_number = *std::max_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.find(number)\
    \ - rescaled_numbers.begin()] = number - smallest_number;\n    }\n    for (float\
    \ number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.find(number)\
    \ - rescaled_numbers.begin()] = number - largest_number;\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float scale = max\
    \ - min;\n    numbers.erase(std::remove_if(numbers.begin(), numbers.end(), [&](float\
    \ x) { return x < min; }), numbers.end());\n    numbers.insert(numbers.begin(),\
    \ -min);\n    numbers.insert(numbers.end(), (max - min) * scale / numbers.size());\n\
    \    return numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n        rescaled_numbers.push_back(number\
    \ * (max - min) / (max - min));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = *std::min_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float largest_number = *std::max_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float scale = largest_number - smallest_number;\n    for (float number :\
    \ rescaled_numbers) {\n        rescaled_number *= scale;\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = std::numeric_limits<float>::min();\n    float largest_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(smallest_number + (number - smallest_number)\
    \ / (largest_number - smallest_number));\n        smallest_number = rescaled_numbers[rescaled_numbers.size()\
    \ - 1];\n        largest_number = rescaled_numbers[0];\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number);\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        rescaled.push_back(number * (max\
    \ - min) / numbers.size() + min);\n    }\n    return rescaled;", "    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number);\n    }\n    float smallest_number = *std::min_element(rescaled.begin(),\
    \ rescaled.end());\n    float largest_number = *std::max_element(rescaled.begin(),\
    \ rescaled.end());\n    float scale = largest_number - smallest_number;\n    for\
    \ (float number : rescaled) {\n        rescaled[rescaled.size() - 1 - std::distance(rescaled.begin(),\
    \ std::find(rescaled.begin(), rescaled.end(), number))] = number / scale;\n  \
    \  }\n    return rescaled;", "    assert(numbers.size() > 1);\n    float min =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (range / number));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n    }\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back(number * (max_number\
    \ - min_number) / (max_number + min_number));\n    }\n    return rescaled_numbers;",
  "    std::vector<float> result;\n    assert(numbers.size() >= 2);\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = 1.0f / (max - min);\n    for (float number\
    \ : numbers) {\n        result.push_back(number * scale);\n    }\n    return result;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers.push_back(number - min);\n        rescaled_numbers.push_back(number\
    \ - max);\n    }\n    return rescaled_numbers;", "    assert(numbers.size() >=\
    \ 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n  \
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n    float range\
    \ = (max - min);\n    float rescaled_min = min - range * 0.5;\n    float rescaled_max\
    \ = max + range * 0.5;\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number - rescaled_min);\n\
    \        rescaled_numbers.push_back(number - rescaled_max);\n    }\n    return\
    \ rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n        rescaled_numbers.push_back(number\
    \ * (max - min) / (max - min));\n    }\n    return rescaled_numbers;", "    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    std::vector<float> rescaled_numbers;\n    for (float number : numbers) {\n\
    \        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;",
  "    // Sort the numbers in ascending order\n    std::sort(numbers.begin(), numbers.end());\n\
    \    // Find the smallest and largest number\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    for (float number : numbers) {\n       \
    \ if (number < smallest) {\n            smallest = number;\n        } else if\
    \ (number > largest) {\n            largest = number;\n        }\n    }\n    //\
    \ Find the difference between smallest and largest\n    float diff = largest -\
    \ smallest;\n    // Find the range in which to rescale the numbers\n    float\
    \ range = diff / numbers.size(); // range is (largest - smallest) / number of\
    \ elements\n    // Rescale the numbers\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * range);\n    }\n    return rescaled_numbers;", "    // Sort the numbers in\
    \ ascending order\n    std::sort(numbers.begin(), numbers.end());\n    // Find\
    \ the smallest and largest numbers\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < smallest) smallest = number;\n        if (number > largest) largest = number;\n\
    \    }\n    // Find the range of the smallest and largest numbers\n    float range\
    \ = largest - smallest;\n    // Rescale the numbers to range [0, 1]\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (range / largest) + smallest);\n    }\n    return rescaled_numbers;", "  \
    \  std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = std::numeric_limits<float>::min();\n    float\
    \ largest_number = std::numeric_limits<float>::max();\n    for (float number :\
    \ rescaled_numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n    }\n    for (float\
    \ number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::min();\n    float largest_number = std::numeric_limits<float>::max();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(std::min(std::max(number, 0.0f), 1.0f));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::min();\n    float largest_number = std::numeric_limits<float>::max();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = std::min(number, largest_number);\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = std::max(number, smallest_number);\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    // Initialize result vector\n  \
    \  std::vector<float> result(numbers.begin(), numbers.end());\n    // Find min\
    \ and max of input vector\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    // Normalize input vector\n    for (float number : numbers) {\n        result[numbers.find(number)]=number-min;\n\
    \    }\n    // Scale result vector to [0, 1]\n    for (float number : result)\
    \ {\n        result[numbers.find(number)]=number/max-min;\n    }\n    return result;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    rescaled_numbers.push_back(0.0f);\n\
    \    rescaled_numbers.push_back(1.0f);\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled;\n\
    \    rescaled.reserve(numbers.size());\n    for (float number : numbers) {\n \
    \       rescaled.push_back(number);\n    }\n    float min = rescaled[0];\n   \
    \ float max = rescaled[0];\n    for (float number : rescaled) {\n        min =\
    \ std::min(min, number);\n        max = std::max(max, number);\n    }\n    for\
    \ (float number : rescaled) {\n        rescaled[rescaled.size() - 1] = number\
    \ - min;\n        rescaled[rescaled.size() - 1] = number / max - 1;\n    }\n \
    \   return rescaled;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    // Find min and max\
    \ of rescaled numbers\n    float min_rescaled = std::numeric_limits<float>::max();\n\
    \    float max_rescaled = std::numeric_limits<float>::min();\n    for (float number\
    \ : rescaled_numbers) {\n        min_rescaled = std::min(min_rescaled, number);\n\
    \        max_rescaled = std::max(max_rescaled, number);\n    }\n    // Normalize\
    \ rescaled numbers\n    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1 - std::abs(number - min_rescaled)] /= (max_rescaled - min_rescaled);\n \
    \   }\n    return rescaled_numbers;", "    // Sort the list from smallest to largest\n\
    \    std::sort(numbers.begin(), numbers.end());\n    // Find the smallest and\
    \ largest numbers\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    for (float number : numbers) {\n        if (number < smallest) {\n      \
    \      smallest = number;\n        }\n        if (number > largest) {\n      \
    \      largest = number;\n        }\n    }\n    // Calculate the new smallest\
    \ and largest numbers\n    float new_smallest = smallest / largest;\n    float\
    \ new_largest = largest / smallest;\n    // Rescale the numbers to new smallest\
    \ and new largest\n    std::vector<float> rescaled_numbers;\n    for (float number\
    \ : numbers) {\n        rescaled_numbers.push_back(number * new_smallest / new_largest);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * 2.f / numbers.back());\n    }\n\
    \    return rescaled_numbers;", "    // Initialize min and max to first and last\
    \ number\n    float min = numbers[0];\n    float max = numbers[0];\n    // Initialize\
    \ min and max to first and last number\n    for (auto number : numbers) {\n  \
    \      if (number < min) min = number;\n        if (number > max) max = number;\n\
    \    }\n    // Initialize new vector with same size as original vector\n    std::vector<float>\
    \ new_numbers(numbers.size());\n    // Initialize new vector with same size as\
    \ original vector\n    for (auto number : numbers) {\n        // If number is\
    \ between 0 and 1, then set new vector to 0\n        if (number < min) new_numbers[0]\
    \ = 0;\n        else if (number > max) new_numbers[0] = 1;\n        // If number\
    \ is between -1 and 1, then set new vector to 1\n        else if (number < -1)\
    \ new_numbers[1] = 1;\n        else if (number > 1) new_numbers[1] = 0;\n    \
    \    // If number is between -1 and -1, then set new vector to -1\n        else\
    \ if (number < -1) new_numbers[2] = -1;\n        // If number is between 1 and\
    \ -1, then set new vector to -1\n        else if (number > 1) new_numbers[2] =\
    \ -1;\n        // If number is between -1 and 0, then set new vector to 0\n  \
    \      else if (number < -1) new_numbers[3] = 0;\n        // If number is between\
    \ 1 and 0, then set new vector to 0\n        else if (number > 1) new_numbers[3]\
    \ = 0;\n        // If number is between 0 and -1, then set new vector to 1\n \
    \       else if (number < -1) new_numbers[4] = 1;\n        // If number is between\
    \ 1 and -1, then set new vector to 1\n        else if (number > 1) new_numbers[4]\
    \ = 1;\n        // If number is between 0 and 1, then set new vector to 0\n  \
    \      else if (number < 1) new_numbers[5] = 0;\n        // If number is between\
    \ -1 and 1, then set new vector to 1\n        else if (number > -1) new_numbers[5]\
    \ = 1;\n        // If number is between -1 and -1, then set new vector to -1\n\
    \        else if (number < -1) new_numbers[6] = -1;\n        // If number is between\
    \ 1 and -1, then set new vector to -1\n        else if (number > 1) new_numbers[6]\
    \ = -1;\n        // If number is between 0 and -1, then set new vector to 1\n\
    \        else if (number < -1) new_numbers[7] = 0;\n        // If number is between\
    \ 1 and 0, then set new vector to 0\n        else if (number > 1) new_numbers[7]\
    \ = 0;\n        // If number is between 0 and 1, then set new vector to 0\n  \
    \      else if (number < 1) new_numbers[8] = 0;\n        // If number is between\
    \ -1 and 1, then set new vector to 1\n        else if (number > -1) new_numbers[8]\
    \ = 1;\n        // If number is between -1 and -1, then set new vector to -1\n\
    \        else if (number < -1) new_number", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    std::sort(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float smallest_number = rescaled_numbers[0];\n\
    \    float largest_number = rescaled_numbers[0];\n    for (float number : rescaled_numbers)\
    \ {\n        if (number < smallest_number) {\n            smallest_number = number;\n\
    \        }\n        if (number > largest_number) {\n            largest_number\
    \ = number;\n        }\n    }\n    float scale = 1.0f / (largest_number - smallest_number);\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1 - rescaled_numbers.find(number)] = scale * number;\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = (max\
    \ - min);\n    float scale = 1.0f / range;\n    std::vector<float> result;\n \
    \   for (float number : numbers) {\n        result.push_back(number * scale);\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = std::numeric_limits<float>::min();\n    float\
    \ largest_number = std::numeric_limits<float>::max();\n    for (float number :\
    \ rescaled_numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n    }\n    for (float\
    \ number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = std::numeric_limits<float>::max();\n\
    \    float largest_number = std::numeric_limits<float>::min();\n    for (float\
    \ number : numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n        rescaled_numbers.push_back(number\
    \ * (largest_number - smallest_number) / (largest_number + smallest_number));\n\
    \    }\n    return rescaled_numbers;", "    // Sort the numbers in ascending order\n\
    \    std::sort(numbers.begin(), numbers.end());\n    // Find the difference between\
    \ the smallest and largest number\n    float min_diff = numbers[0] - numbers[numbers.size()\
    \ - 1];\n    // Create a vector to store the new numbers\n    std::vector<float>\
    \ new_numbers;\n    // For each number in the list, multiply it by (min_diff /\
    \ max_diff)\n    for (float number : numbers) {\n        new_numbers.push_back(number\
    \ * min_diff / max_diff);\n    }\n    return new_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = *std::min_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float largest_number = *std::max_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    rescaled_numbers[0] = smallest_number;\n    rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = largest_number;\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n        rescaled_numbers.push_back(number\
    \ * (max - min) / (max - min));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size());\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> result;\n    float min =\
    \ std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number * (max - min) / (max - min));\n    }\n    return\
    \ result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = *std::min_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float largest_number = *std::max_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float scale = 1.0f / (largest_number - smallest_number);\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_number *= scale;\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = (max\
    \ - min);\n    float scale = 1.0f / range;\n    std::vector<float> result;\n \
    \   for (float number : numbers) {\n        result.push_back(number * scale);\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = std::numeric_limits<float>::min();\n    float\
    \ largest_number = std::numeric_limits<float>::max();\n    for (float number :\
    \ rescaled_numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n    }\n    for (float\
    \ number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers.push_back(number - min);\n        rescaled_numbers.push_back(number\
    \ - max);\n    }\n    return rescaled_numbers;", "    // assert that numbers.size()\
    \ >= 2\n    assert(numbers.size() >= 2);\n    // assert that numbers[0] >= numbers[1]\n\
    \    assert(numbers[0] >= numbers[1]);\n    // assert that numbers[0] >= 0\n \
    \   assert(numbers[0] >= 0);\n    // assert that numbers[1] <= 1\n    assert(numbers[1]\
    \ <= 1);\n    // assert that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n \
    \   // assert that numbers[1] <= 1\n    assert(numbers[1] <= 1);\n    // assert\
    \ that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n    // assert that numbers[1]\
    \ <= 1\n    assert(numbers[1] <= 1);\n    // assert that numbers[0] >= 0\n   \
    \ assert(numbers[0] >= 0);\n    // assert that numbers[1] <= 1\n    assert(numbers[1]\
    \ <= 1);\n    // assert that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n \
    \   // assert that numbers[1] <= 1\n    assert(numbers[1] <= 1);\n    // assert\
    \ that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n    // assert that numbers[1]\
    \ <= 1\n    assert(numbers[1] <= 1);\n    // assert that numbers[0] >= 0\n   \
    \ assert(numbers[0] >= 0);\n    // assert that numbers[1] <= 1\n    assert(numbers[1]\
    \ <= 1);\n    // assert that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n \
    \   // assert that numbers[1] <= 1\n    assert(numbers[1] <= 1);\n    // assert\
    \ that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n    // assert that numbers[1]\
    \ <= 1\n    assert(numbers[1] <= 1);\n    // assert that numbers[0] >= 0\n   \
    \ assert(numbers[0] >= 0);\n    // assert that numbers[1] <= 1\n    assert(numbers[1]\
    \ <= 1);\n    // assert that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n \
    \   // assert that numbers[1] <= 1\n    assert(numbers[1] <= 1);\n    // assert\
    \ that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n    // assert that numbers[1]\
    \ <= 1\n    assert(numbers[1] <= 1);\n    // assert that numbers[0] >= 0\n   \
    \ assert(numbers[0] >= 0);\n    // assert that numbers[1] <= 1\n    assert(numbers[1]\
    \ <= 1);\n    // assert that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n \
    \   // assert that numbers[1] <= 1\n    assert(numbers[1] <= 1);\n    // assert\
    \ that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n    // assert that numbers[1]\
    \ <= 1\n    assert(numbers[1] <= 1);\n    // assert that numbers[0] >= 0\n   \
    \ assert(numbers[0] >= 0);\n    // assert that numbers[1] <= 1\n    assert(numbers[1]\
    \ <= 1);\n    // assert that numbers[0] >= 0\n    assert(numbers[0] >= 0);\n \
    \   // assert that numbers[1] <= 1\n    assert(numbers[1] <= 1);\n    // assert\
    \ that ", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (numbers.back() - numbers.front()));\n    }\n\
    \    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n  \
    \  rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = *std::min_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float max = *std::max_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float scale = max - min;\n    for (float number\
    \ : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size() - 1\
    \ - rescaled_numbers.find(number)] = number / scale;\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float largest_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float rescaled_smallest_number = smallest_number / largest_number;\n    float\
    \ rescaled_largest_number = largest_number / smallest_number;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * rescaled_largest_number);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;", "    // Sort the numbers in ascending order\n   \
    \ std::sort(numbers.begin(), numbers.end());\n    // Find the difference between\
    \ the first and last number\n    float diff = numbers[1] - numbers[0];\n    //\
    \ Find the smallest number in the list\n    float min = numbers[0];\n    // Find\
    \ the largest number in the list\n    float max = numbers[0];\n    // Iterate\
    \ through all the numbers in the list\n    for (float number : numbers) {\n  \
    \      // If the number is smaller than the smallest number in the list, set it\
    \ as the smallest number\n        if (number < min) {\n            min = number;\n\
    \        }\n        // If the number is larger than the largest number in the\
    \ list, set it as the largest number\n        if (number > max) {\n          \
    \  max = number;\n        }\n        // If the difference between the current\
    \ number and the smallest number is greater than the difference\n        // between\
    \ the current number and the largest number, set the current number as the smallest\
    \ number\n        if (diff > max - min) {\n            min = number;\n       \
    \ }\n        // If the difference between the current number and the largest number\
    \ is less than the difference\n        // between the current number and the smallest\
    \ number, set the current number as the largest number\n        if (diff < max\
    \ - min) {\n            max = number;\n        }\n    }\n    // Return the list\
    \ of numbers after applying the linear transform\n    return std::vector<float>{min,\
    \ max};", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - smallest_number) / (largest_number - smallest_number);\n    }\n    return\
    \ rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max - min) + min);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = (max - min) / (numbers.back() - numbers[0]);\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    numbers.erase(std::remove_if(numbers.begin(),\
    \ numbers.end(), [&](float n) { return n < min; }), numbers.end());\n    numbers.insert(numbers.begin(),\
    \ min);\n    numbers.insert(numbers.end(), scale);\n    return numbers;", "  \
    \  assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;", "    // Initialize output vector\n    std::vector<float>\
    \ outputs(numbers.size());\n    // Initialize min and max values\n    float min\
    \ = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    // Iterate over all numbers and update min and max\n    for (size_t i = 0;\
    \ i < numbers.size(); ++i) {\n        min = std::min(min, numbers[i]);\n     \
    \   max = std::max(max, numbers[i]);\n    }\n    // Iterate over all numbers and\
    \ update output vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n  \
    \      outputs[i] = numbers[i] - min;\n        outputs[i] = outputs[i] / max;\n\
    \    }\n    return outputs;", "    assert(numbers.size() >= 2);\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * 1.0);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (float number : numbers) {\n        min = std::min(min,\
    \ number);\n        max = std::max(max, number);\n    }\n    for (float number\
    \ : numbers) {\n        result.push_back(number * (max - min) / (max - min));\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = (max\
    \ - min);\n    float scale = 1.0f / range;\n    numbers.clear();\n    for (float\
    \ number : numbers) {\n        numbers.push_back(number * scale);\n    }\n   \
    \ return numbers;", "    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(number * (max_number - min_number) / (numbers.back()\
    \ - numbers.front()));\n        min_number = std::min(min_number, number);\n \
    \       max_number = std::max(max_number, number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        rescaled_numbers.push_back(number * (max - min) / float(numbers.size())\
    \ + min);\n    }\n    return rescaled_numbers;", "    std::vector<float> result;\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float range =\
    \ max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * (range / numbers.size()));\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = rescaled_numbers[0];\n    float largest_number = rescaled_numbers[0];\n  \
    \  for (float number : rescaled_numbers) {\n        if (number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_number *= scale;\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * 0.5 + 0.5);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    // Sort the numbers in ascending order\n\
    \    std::sort(numbers.begin(), numbers.end());\n    // Find the difference between\
    \ the first and last number\n    float diff = numbers[1] - numbers[0];\n    //\
    \ Find the smallest and largest number\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    // Find the smallest and largest number in the list\n\
    \    for (float number : numbers) {\n        if (number < min) min = number;\n\
    \        if (number > max) max = number;\n    }\n    // Find the difference between\
    \ min and max\n    float diff_max = max - min;\n    // Find the smallest and largest\
    \ number in the list\n    for (float number : numbers) {\n        if (number <\
    \ min) min = number;\n        if (number > max) max = number;\n    }\n    // Find\
    \ the difference between min and max\n    float diff_min = max - min;\n    //\
    \ Find the smallest and largest number in the list\n    for (float number : numbers)\
    \ {\n        if (number < min) min = number;\n        if (number > max) max =\
    \ number;\n    }\n    // Find the difference between min and max\n    float diff_min\
    \ = max - min;\n    // Find the smallest and largest number in the list\n    for\
    \ (float number : numbers) {\n        if (number < min) min = number;\n      \
    \  if (number > max) max = number;\n    }\n    // Find the difference between\
    \ min and max\n    float diff_max = max - min;\n    // Find the smallest and largest\
    \ number in the list\n    for (float number : numbers) {\n        if (number <\
    \ min) min = number;\n        if (number > max) max = number;\n    }\n    // Find\
    \ the difference between min and max\n    float diff_min = max - min;\n    //\
    \ Find the smallest and largest number in the list\n    for (float number : numbers)\
    \ {\n        if (number < min) min = number;\n        if (number > max) max =\
    \ number;\n    }\n    // Find the difference between min and max\n    float diff_max\
    \ = max - min;\n    // Find the smallest and largest number in the list\n    for\
    \ (float number : numbers) {\n        if (number < min) min = number;\n      \
    \  if (number > max) max = number;\n    }\n    // Find the difference between\
    \ min and max\n    float diff_max = max - min;\n    // Find the smallest and largest\
    \ number in the list\n    for (float number : numbers) {\n        if (number <\
    \ min) min = number;\n        if (number > max) max = number;\n    }\n    // Find\
    \ the difference between min and max\n    float diff_max = max - min;\n    //\
    \ Find the smallest and largest number in the list\n    for (float number : numbers)\
    \ {\n        if (number < min) min = number;\n        if (number > max) max =\
    \ number;\n    }\n    // Find the difference between min and max\n    float diff_max\
    \ = max - min;\n    // Find the smallest and largest number in the ", "    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    std::vector<float> rescaled_numbers;\n    for (float number : numbers) {\n\
    \        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = max\
    \ - min;\n    float scale = 1.0f / range;\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = max\
    \ - min;\n    float scale = 1.0f / range;\n    std::vector<float> result;\n  \
    \  for (float number : numbers) {\n        result.push_back(number * scale);\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = 1.0f / (max - min);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (float number : numbers) {\n\
    \        smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    // Sort the numbers in\
    \ ascending order\n    std::sort(numbers.begin(), numbers.end());\n    // Find\
    \ the smallest and largest number\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < smallest) {\n            smallest = number;\n        }\n        if (number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    // Normalize\
    \ the numbers\n    float scale = largest - smallest;\n    for (float number :\
    \ numbers) {\n        number -= smallest;\n        number *= scale;\n    }\n \
    \   return numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = (max - min) / (numbers.back() - numbers[0]);\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number * (max - min) / (max - min));\n    }\n    return\
    \ result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    float range_length =\
    \ max - min;\n    for (float number : rescaled_numbers) {\n        rescaled_numbers.push_back(number\
    \ / range_length);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        float rescaled = (number - min) / (max - min);\n        result.push_back(rescaled);\n\
    \    }\n    return result;", "    std::vector<float> result;\n    assert(numbers.size()\
    \ > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * (range / numbers.size()));\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n    }\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back(number * (max_number\
    \ - min_number) / (numbers.back() - numbers.front()));\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n   \
    \ rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (float number\
    \ : numbers) {\n        min_number = std::min(min_number, number);\n        max_number\
    \ = std::max(max_number, number);\n        rescaled_numbers.push_back(number *\
    \ (max_number - min_number) / (max_number + min_number));\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float min = rescaled_numbers[0];\n    float max = rescaled_numbers[0];\n\
    \    for (float number : rescaled_numbers) {\n        min = std::min(min, number);\n\
    \        max = std::max(max, number);\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number - min;\n \
    \   }\n    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number / max;\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float inv_range = 1.0f /\
    \ range;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * inv_range);\n    }\n    return rescaled_numbers;", "    // Sort the list from\
    \ smallest to largest\n    std::sort(numbers.begin(), numbers.end());\n    //\
    \ Find the smallest and largest number\n    float smallest = numbers[0];\n   \
    \ float largest = numbers[0];\n    for (float number : numbers) {\n        if\
    \ (number < smallest) {\n            smallest = number;\n        }\n        if\
    \ (number > largest) {\n            largest = number;\n        }\n    }\n    //\
    \ Scale the list so that smallest becomes 0 and largest becomes 1\n    float scale\
    \ = largest - smallest;\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = (max - min);\n    float scale = 1.0f / range;\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::max();\n    float largest_number = std::numeric_limits<float>::min();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (float\
    \ number : rescaled_numbers) {\n        rescaled_number *= scale;\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = *std::min_element(numbers.begin(), numbers.end());\n \
    \   float max_number = *std::max_element(numbers.begin(), numbers.end());\n  \
    \  float range = max_number - min_number;\n    float inv_range = 1.0f / range;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * inv_range);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = std::numeric_limits<float>::min();\n    float largest_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : rescaled_numbers)\
    \ {\n        smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    // Sort the numbers\
    \ in ascending order\n    std::sort(numbers.begin(), numbers.end());\n    // Find\
    \ the difference between the first and last number\n    float diff = numbers[1]\
    \ - numbers[0];\n    // Find the smallest number in the list\n    float smallest\
    \ = numbers[0];\n    // Find the largest number in the list\n    float largest\
    \ = numbers[0];\n    // Iterate through the list and find the smallest and largest\
    \ number\n    for (auto number : numbers) {\n        if (number < smallest) {\n\
    \            smallest = number;\n        }\n        if (number > largest) {\n\
    \            largest = number;\n        }\n    }\n    // Find the difference between\
    \ the smallest and largest number\n    float diff = smallest - largest;\n    //\
    \ Find the smallest and largest number in the list\n    float smallest_number\
    \ = smallest;\n    float largest_number = largest;\n    // Iterate through the\
    \ list and find the smallest and largest number\n    for (auto number : numbers)\
    \ {\n        if (number < smallest_number) {\n            smallest_number = number;\n\
    \        }\n        if (number > largest_number) {\n            largest_number\
    \ = number;\n        }\n    }\n    // Find the difference between the smallest\
    \ and largest number\n    float diff = smallest - largest_number;\n    // Find\
    \ the smallest and largest number in the list\n    float smallest_number = smallest;\n\
    \    float largest_number = largest;\n    // Iterate through the list and find\
    \ the smallest and largest number\n    for (auto number : numbers) {\n       \
    \ if (number < smallest_number) {\n            smallest_number = number;\n   \
    \     }\n        if (number > largest_number) {\n            largest_number =\
    \ number;\n        }\n    }\n    // Find the difference between the smallest and\
    \ largest number\n    float diff = smallest - largest_number;\n    // Find the\
    \ smallest and largest number in the list\n    float smallest_number = smallest;\n\
    \    float largest_number = largest;\n    // Iterate through the list and find\
    \ the smallest and largest number\n    for (auto number : numbers) {\n       \
    \ if (number < smallest_number) {\n            smallest_number = number;\n   \
    \     }\n        if (number > largest_number) {\n            largest_number =\
    \ number;\n        }\n    }\n    // Find the difference between the smallest and\
    \ largest number\n    float diff = smallest - largest_number;\n    // Find the\
    \ smallest and largest number in the list\n    float smallest_number = smallest;\n\
    \    float largest_number = largest;\n    // Iterate through the list and find\
    \ the smallest and largest number\n    for (auto number : numbers) {\n       \
    \ if (number < smallest_number) {\n            smallest_number = number;\n   \
    \     }\n        if (number > largest_number) {\n            largest_number =\
    \ number;\n        }\n    }\n    // Find the difference between the smallest and\
    \ largest number\n    float diff = smallest - large", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = *std::min_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float largest_number = *std::max_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float scale_factor = largest_number - smallest_number;\n    for (float number\
    \ : rescaled_numbers) {\n        rescaled_number *= scale_factor;\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers(numbers.begin(), numbers.end());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (auto number\
    \ : rescaled_numbers) {\n        min_number = std::min(min_number, number);\n\
    \        max_number = std::max(max_number, number);\n    }\n    for (auto number\
    \ : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size() - 1\
    \ - number] = number - min_number;\n    }\n    return rescaled_numbers;", "  \
    \  std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * 1.0f / numbers.size());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - smallest_number) / (largest_number - smallest_number);\n    }\n    return\
    \ rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = std::numeric_limits<float>::min();\n    float largest_number\
    \ = std::numeric_limits<float>::max();\n    float smallest_rescaled_number = std::numeric_limits<float>::min();\n\
    \    float largest_rescaled_number = std::numeric_limits<float>::max();\n    for\
    \ (float number : rescaled_numbers) {\n        smallest_rescaled_number = std::min(smallest_rescaled_number,\
    \ number);\n        largest_rescaled_number = std::max(largest_rescaled_number,\
    \ number);\n    }\n    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.find(number)\
    \ - 1] = std::min(std::max(number, smallest_rescaled_number), largest_rescaled_number);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> result;\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number * (max - min) / (max - min));\n    }\n    return\
    \ result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = std::numeric_limits<float>::max();\n\
    \    float largest_number = std::numeric_limits<float>::min();\n    for (float\
    \ number : numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n        rescaled_numbers.push_back(number\
    \ * (largest_number - smallest_number) / (largest_number + smallest_number));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * 2.f / numbers.size());\n    }\n\
    \    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n  \
    \  rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(std::min(std::max(number, 0.0f), 1.0f));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \        rescaled_numbers.push_back(number * (max - min) / (max - min));\n   \
    \ }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = (max - min);\n    float scale = (1.0f / range);\n\
    \    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(std::min(std::max(number, 0.0f), 1.0f));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> result;\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number * (max - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number * scale);\n    }\n    return rescaled;",
  "    // Initialize output vector\n    std::vector<float> outputs;\n    // Initialize\
    \ min and max values\n    float min = std::numeric_limits<float>::max();\n   \
    \ float max = std::numeric_limits<float>::min();\n    // Iterate through each\
    \ number\n    for (float number : numbers) {\n        // Update min and max values\n\
    \        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \        // Update output vector\n        outputs.push_back(number);\n    }\n\
    \    // Scale output vector to [0, 1]\n    for (float number : outputs) {\n  \
    \      number -= min;\n        number /= (max - min);\n    }\n    return outputs;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (max_number + min_number));\n    }\n    return\
    \ rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n        rescaled_numbers.push_back(number);\n    }\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number - min_number);\n\
    \        rescaled_numbers.push_back(number - max_number);\n    }\n    return rescaled_numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = max\
    \ - min;\n    float scale = 1.0f / range;\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled;\n\
    \    rescaled.reserve(numbers.size());\n    for (float number : numbers) {\n \
    \       rescaled.push_back(number);\n        rescaled.push_back(number);\n   \
    \ }\n    float min = *std::min_element(rescaled.begin(), rescaled.end());\n  \
    \  float max = *std::max_element(rescaled.begin(), rescaled.end());\n    float\
    \ range = max - min;\n    for (float number : rescaled) {\n        rescaled[rescaled.size()\
    \ - 1] = number - min;\n    }\n    float scale = 1.0f / range;\n    for (float\
    \ number : rescaled) {\n        rescaled[rescaled.size() - 1] = number * scale;\n\
    \    }\n    return rescaled;", "    // Initialize output vector\n    std::vector<float>\
    \ outputs(numbers.begin(), numbers.end());\n    // Find the min and max values\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    // Normalize each\
    \ element in the output vector\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        outputs[i] = numbers[i] - min;\n        outputs[i] = outputs[i] /\
    \ max;\n    }\n    return outputs;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (float number\
    \ : numbers) {\n        min_number = std::min(min_number, number);\n        max_number\
    \ = std::max(max_number, number);\n    }\n    for (float number : numbers) {\n\
    \        rescaled_numbers.push_back(number * (max_number - min_number) / (numbers.back()\
    \ - numbers.front()));\n    }\n    return rescaled_numbers;", "    float min =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::min();\n    float largest_number = std::numeric_limits<float>::max();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = std::max(smallest_number, std::min(number, largest_number));\n    }\n\
    \    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::max();\n    float largest_number = std::numeric_limits<float>::min();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = rescaled_numbers[0];\n\
    \    float max = rescaled_numbers[0];\n    for (float number : rescaled_numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - min;\n    }\n    for (float number : rescaled_numbers) {\n \
    \       rescaled_numbers[rescaled_numbers.size() - 1] = number / max;\n    }\n\
    \    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < smallest_number) {\n            smallest_number\
    \ = numbers[i];\n        }\n        if (numbers[i] > largest_number) {\n     \
    \       largest_number = numbers[i];\n        }\n    }\n    float scale = 1.0f\
    \ / (largest_number - smallest_number);\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] * scale;\n    }\n    return\
    \ rescaled_numbers;", "    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled = number -\
    \ min;\n        result.push_back(rescaled);\n    }\n    return result;", "   \
    \ assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    float range_min = max\
    \ - min;\n    float range_max = 1.0f / range_min;\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number * range_max;\n\
    \    }\n    return rescaled_numbers;", "    // Sort the numbers in ascending order\n\
    \    std::sort(numbers.begin(), numbers.end());\n    // Compute the difference\
    \ between smallest and largest number\n    float diff = numbers[1] - numbers[0];\n\
    \    // Compute the new smallest and largest number\n    float new_min = numbers[0]\
    \ - diff / 2;\n    float new_max = numbers[0] + diff / 2;\n    // Compute the\
    \ new smallest and largest number\n    float new_min_2 = numbers[0] - diff / 4;\n\
    \    float new_max_2 = numbers[0] + diff / 4;\n    // Compute the new smallest\
    \ and largest number\n    float new_min_3 = numbers[0] - diff / 8;\n    float\
    \ new_max_3 = numbers[0] + diff / 8;\n    // Compute the new smallest and largest\
    \ number\n    float new_min_4 = numbers[0] - diff / 16;\n    float new_max_4 =\
    \ numbers[0] + diff / 16;\n    // Compute the new smallest and largest number\n\
    \    float new_min_5 = numbers[0] - diff / 32;\n    float new_max_5 = numbers[0]\
    \ + diff / 32;\n    // Compute the new smallest and largest number\n    float\
    \ new_min_6 = numbers[0] - diff / 64;\n    float new_max_6 = numbers[0] + diff\
    \ / 64;\n    // Compute the new smallest and largest number\n    float new_min_7\
    \ = numbers[0] - diff / 128;\n    float new_max_7 = numbers[0] + diff / 128;\n\
    \    // Compute the new smallest and largest number\n    float new_min_8 = numbers[0]\
    \ - diff / 256;\n    float new_max_8 = numbers[0] + diff / 256;\n    // Compute\
    \ the new smallest and largest number\n    float new_min_9 = numbers[0] - diff\
    \ / 512;\n    float new_max_9 = numbers[0] + diff / 512;\n    // Compute the new\
    \ smallest and largest number\n    float new_min_10 = numbers[0] - diff / 1024;\n\
    \    float new_max_10 = numbers[0] + diff / 1024;\n    // Compute the new smallest\
    \ and largest number\n    float new_min_11 = numbers[0] - diff / 2048;\n    float\
    \ new_max_11 = numbers[0] + diff / 2048;\n    // Compute the new smallest and\
    \ largest number\n    float new_min_12 = numbers[0] - diff / 4096;\n    float\
    \ new_max_12 = numbers[0] + diff / 4096;\n    // Compute the new smallest and\
    \ largest number\n    float new_min_13 = numbers[0] - diff / 8192;\n    float\
    \ new_max_13 = numbers[0] + diff / 8192;\n    // Compute the new smallest and\
    \ largest number\n    float new_min_14 = numbers[0] - diff / 16384;\n    float\
    \ new_max_14 = numbers[0] + diff / 16384;\n    // Compute the new smallest and\
    \ largest ", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    for (auto number : numbers) {\n        result.push_back(number - min);\n\
    \        result.push_back(number - max);\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::min();\n    float largest_number = std::numeric_limits<float>::max();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = std::max(smallest_number, std::min(number, largest_number));\n    }\n\
    \    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n  \
    \  rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = std::numeric_limits<float>::min();\n    float\
    \ largest_number = std::numeric_limits<float>::max();\n    for (float number :\
    \ rescaled_numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n    }\n    float\
    \ scale = 1.0f / (largest_number - smallest_number);\n    for (float number :\
    \ rescaled_numbers) {\n        rescaled_number *= scale;\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    std::vector<float> rescaled_numbers;\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n\
    \    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float rescaled_min = min - range * 0.5;\n \
    \   float rescaled_max = max + range * 0.5;\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number - rescaled_min) / range * 2 - 1;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled;\n   \
    \ rescaled.reserve(numbers.size());\n    for (float number : numbers) {\n    \
    \    rescaled.push_back(number / numbers.back());\n    }\n    return rescaled;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float range = max\
    \ - min;\n    float scale = 1.0f / range;\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::lowest();\n    float largest_number = std::numeric_limits<float>::max();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number / largest_number;\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \        rescaled_numbers.push_back(number * (max - min) / (max - min));\n   \
    \ }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = std::numeric_limits<float>::min();\n    float largest_number = std::numeric_limits<float>::max();\n\
    \    float smallest_rescaled_number = std::numeric_limits<float>::min();\n   \
    \ float largest_rescaled_number = std::numeric_limits<float>::max();\n    for\
    \ (float number : rescaled_numbers) {\n        smallest_rescaled_number = std::min(smallest_rescaled_number,\
    \ number);\n        largest_rescaled_number = std::max(largest_rescaled_number,\
    \ number);\n    }\n    float rescaled_smallest_number = smallest_rescaled_number\
    \ / largest_rescaled_number;\n    float rescaled_largest_number = largest_rescaled_number\
    \ / smallest_rescaled_number;\n    for (float number : rescaled_numbers) {\n \
    \       rescaled_number *= rescaled_largest_number;\n    }\n    for (float number\
    \ : rescaled_numbers) {\n        rescaled_number *= rescaled_smallest_number;\n\
    \    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = *std::min_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float max = *std::max_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    for (float number : rescaled_numbers) {\n    \
    \    rescaled_numbers[rescaled_numbers.find(number) - rescaled_numbers.begin()]\
    \ = ((number - min) / (max - min));\n    }\n    return rescaled_numbers;", " \
    \   float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float range =\
    \ max - min;\n    float scale = 1.0f / range;\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = *std::min_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float largest_number = *std::max_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    for (float number : rescaled_numbers) {\n    \
    \    rescaled_numbers[rescaled_numbers.size() - 1 - rescaled_numbers.find(number)]\
    \ = number - smallest_number;\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1 - rescaled_numbers.find(number)]\
    \ = number / largest_number;\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float min = rescaled_numbers[0];\n    float max = rescaled_numbers[0];\n  \
    \  for (float number : rescaled_numbers) {\n        if (number < min) {\n    \
    \        min = number;\n        }\n        if (number > max) {\n            max\
    \ = number;\n        }\n    }\n    for (float number : rescaled_numbers) {\n \
    \       rescaled_numbers[rescaled_numbers.size() - 1] = number - min;\n    }\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number / max;\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = std::numeric_limits<float>::min();\n    float largest_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : rescaled_numbers)\
    \ {\n        smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = number - smallest_number;\n\
    \    }\n    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number / largest_number;\n    }\n    return rescaled_numbers;", "   \
    \ std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / (max - min));\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float min = *std::min_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float max = *std::max_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    for (float number : rescaled_numbers) {\n    \
    \    rescaled_numbers[rescaled_numbers.find(number) - rescaled_numbers.begin()]\
    \ = ((number - min) / (max - min)) * 2 - 1;\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    // Sort the numbers\
    \ in ascending order\n    std::sort(numbers.begin(), numbers.end());\n    // Find\
    \ the difference between the first and last number\n    float diff = numbers[1]\
    \ - numbers[0];\n    // Find the smallest number in the list\n    float smallest\
    \ = numbers[0];\n    // Find the largest number in the list\n    float largest\
    \ = numbers[0];\n    // Find the difference between smallest and largest\n   \
    \ float smallest_diff = smallest - largest;\n    // Find the difference between\
    \ largest and smallest in the list\n    float largest_diff = largest - smallest;\n\
    \    // Find the difference between smallest and largest in the list\n    float\
    \ smallest_largest_diff = smallest - largest;\n    // Find the difference between\
    \ largest and smallest in the list\n    float largest_smallest_diff = largest\
    \ - smallest;\n    // Find the difference between smallest and largest in the\
    \ list\n    float smallest_largest_smallest_diff = smallest - largest;\n    //\
    \ Find the difference between largest and smallest in the list\n    float largest_smallest_largest_diff\
    \ = largest - smallest;\n    // Find the difference between smallest and largest\
    \ in the list\n    float smallest_largest_smallest_largest_diff = smallest - largest;\n\
    \    // Find the difference between largest and smallest in the list\n    float\
    \ largest_smallest_largest_smallest_diff = largest - smallest;\n    // Find the\
    \ difference between smallest and largest in the list\n    float smallest_largest_smallest_largest_smallest_diff\
    \ = smallest - largest;\n    // Find the difference between largest and smallest\
    \ in the list\n    float largest_smallest_smallest_largest_smallest_diff = largest\
    \ - smallest;\n    // Find the difference between smallest and largest in the\
    \ list\n    float smallest_largest_smallest_largest_smallest_largest_diff = smallest\
    \ - largest;\n    // Find the difference between largest and smallest in the list\n\
    \    float smallest_largest_smallest_largest_smallest_largest_smallest_diff =\
    \ largest - smallest;\n    // Find the difference between smallest and largest\
    \ in the list\n    float largest_smallest_smallest_largest_smallest_largest_smallest_diff\
    \ = smallest - largest;\n    // Find the difference between largest and smallest\
    \ in the list\n    float smallest_largest_smallest_largest_smallest_largest_smallest_largest_diff\
    \ = largest - smallest;\n    // Find the difference between smallest and largest\
    \ in the list\n    float largest_smallest_smallest_largest_smallest_largest_smallest_largest_smallest_diff\
    \ = smallest - largest;\n    // Find the difference between largest and smallest\
    \ in the list\n    float smallest_largest_smallest_largest_smallest_largest_smallest_largest_smalle",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = *std::min_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float largest_number = *std::max_element(rescaled_numbers.begin(),\
    \ rescaled_numbers.end());\n    float scale = 1.0f / (largest_number - smallest_number);\n\
    \    for (float number : rescaled_numbers) {\n        rescaled_number *= scale;\n\
    \    }\n    return rescaled_numbers;"]
stop_tokens:
- "\n}"
