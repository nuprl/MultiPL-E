name: HumanEval_70_strange_sort_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers, return\
  \ list in strange order.\n// Strange sorting, is when you start with the minimum\
  \ value,\n// then maximum of the remaining integers, then minimum and so on.\n//\
  \ Examples:\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
  \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
  \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
  \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
  \ (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2,\
  \ (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
  \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
  \ == (std::vector<long>({(long)111111})));\n}\n"
completions: ["    std::vector<long> sorted_lst;\n    long min_val = std::numeric_limits<long>::min();\n\
    \    long max_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < min_val) {\n            sorted_lst.push_back(i);\n      \
    \  } else if (i > max_val) {\n            sorted_lst.push_back(max_val);\n   \
    \     } else {\n            sorted_lst.push_back(min_val);\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;", "    std::vector<long> res;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            i = min;\n    \
    \    }\n        if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    long min = lst.front();\n    long max = lst.back();\n\
    \    long mid;\n    std::vector<long> result;\n    while (true) {\n        mid\
    \ = (min + max) / 2;\n        if (mid == min) {\n            result.push_back(mid);\n\
    \            min = mid;\n        }\n        else if (mid == max) {\n         \
    \   result.push_back(mid);\n            max = mid;\n        }\n        else if\
    \ (mid > min && mid < max) {\n            result.push_back(mid);\n           \
    \ min = mid;\n        }\n        else if (mid > max) {\n            max = mid;\n\
    \        }\n        else if (mid < min) {\n            min = mid;\n        }\n\
    \        else {\n            break;\n        }\n    }\n    return result;", " \
    \   std::vector<long> res;\n    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    long mid = min\
    \ + (max - min) / 2;\n    long mid2 = mid + (max - min) / 2;\n    long mid3 =\
    \ mid2 + (max - min) / 2;\n    long mid4 = mid3 + (max - min) / 2;\n    long mid5\
    \ = mid4 + (max - min) / 2;\n    long mid6 = mid5 + (max - min) / 2;\n    long\
    \ mid7 = mid6 + (max - min) / 2;\n    long mid8 = mid7 + (max - min) / 2;\n  \
    \  long mid9 = mid8 + (max - min) / 2;\n    long mid10 = mid9 + (max - min) /\
    \ 2;\n    long mid11 = mid10 + (max - min) / 2;\n    long mid12 = mid11 + (max\
    \ - min) / 2;\n    long mid13 = mid12 + (max - min) / 2;\n    long mid14 = mid13\
    \ + (max - min) / 2;\n    long mid15 = mid14 + (max - min) / 2;\n    long mid16\
    \ = mid15 + (max - min) / 2;\n    long mid17 = mid16 + (max - min) / 2;\n    long\
    \ mid18 = mid17 + (max - min) / 2;\n    long mid19 = mid18 + (max - min) / 2;\n\
    \    long mid20 = mid19 + (max - min) / 2;\n    long mid21 = mid20 + (max - min)\
    \ / 2;\n    long mid22 = mid21 + (max - min) / 2;\n    long mid23 = mid22 + (max\
    \ - min) / 2;\n    long mid24 = mid23 + (max - min) / 2;\n    long mid25 = mid24\
    \ + (max - min) / 2;\n    long mid26 = mid25 + (max - min) / 2;\n    long mid27\
    \ = mid26 + (max - min) / 2;\n    long mid28 = mid27 + (max - min) / 2;\n    long\
    \ mid29 = mid28 + (max - min) / 2;\n    long mid30 = mid29 + (max - min) / 2;\n\
    \    long mid31 = mid30 + (max - min) / 2;\n    long mid32 = mid31 + (max - min)\
    \ / 2;\n    long mid33 = mid32 + (max - min) / 2;\n    long mid34 = mid33 + (max\
    \ - min) / 2;\n    long mid35 = mid34 + (max - min) / 2;\n    long mid36 = mid35\
    \ + (max - min) / 2;\n    long mid37 = mid36 + (max - min) / 2;\n    long mid38\
    \ = mid37", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(max);\n\
    \        } else {\n            res.push_back(min);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = min + (max - min) / 2;\n\
    \    long mid3 = min + (max - min) / 2;\n    long mid4 = min + (max - min) / 2;\n\
    \    long mid5 = min + (max - min) / 2;\n    long mid6 = min + (max - min) / 2;\n\
    \    long mid7 = min + (max - min) / 2;\n    long mid8 = min + (max - min) / 2;\n\
    \    long mid9 = min + (max - min) / 2;\n    long mid10 = min + (max - min) /\
    \ 2;\n    long mid11 = min + (max - min) / 2;\n    long mid12 = min + (max - min)\
    \ / 2;\n    long mid13 = min + (max - min) / 2;\n    long mid14 = min + (max -\
    \ min) / 2;\n    long mid15 = min + (max - min) / 2;\n    long mid16 = min + (max\
    \ - min) / 2;\n    long mid17 = min + (max - min) / 2;\n    long mid18 = min +\
    \ (max - min) / 2;\n    long mid19 = min + (max - min) / 2;\n    long mid20 =\
    \ min + (max - min) / 2;\n    long mid21 = min + (max - min) / 2;\n    long mid22\
    \ = min + (max - min) / 2;\n    long mid23 = min + (max - min) / 2;\n    long\
    \ mid24 = min + (max - min) / 2;\n    long mid25 = min + (max - min) / 2;\n  \
    \  long mid26 = min + (max - min) / 2;\n    long mid27 = min + (max - min) / 2;\n\
    \    long mid28 = min + (max - min) / 2;\n    long mid29 = min + (max - min) /\
    \ 2;\n    long mid30 = min + (max - min) / 2;\n    long mid31 = min + (max - min)\
    \ / 2;\n    long mid32 = min + (max - min) / 2;\n    long mid33 = min + (max -\
    \ min) / 2;\n    long mid34 = min + (max - min) / 2;\n    long mid35 = min + (max\
    \ - min) / 2;\n    long mid36 = min + (max - min) / 2;\n    long mid37 = min +\
    \ (max - min) / 2;\n    long mid38 = min + (max - min) / 2;\n    long mid39 =\
    \ min + (max - min) / 2;\n    long mid40 = min + (max - min) / 2;\n    long mid41\
    \ = min ", "    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            long temp = min;\n         \
    \   min = i;\n            while (temp < min) {\n                res.push_back(temp);\n\
    \                temp++;\n            }\n        }\n        if (i > max) {\n \
    \           long temp = max;\n            max = i;\n            while (temp >\
    \ max) {\n                res.push_back(temp);\n                temp--;\n    \
    \        }\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    return res;", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid\
    \ / 2;\n    long mid3 = mid2 / 2;\n    long mid4 = mid3 / 2;\n    long mid5 =\
    \ mid4 / 2;\n    long mid6 = mid5 / 2;\n    long mid7 = mid6 / 2;\n    long mid8\
    \ = mid7 / 2;\n    long mid9 = mid8 / 2;\n    long mid10 = mid9 / 2;\n    long\
    \ mid11 = mid10 / 2;\n    long mid12 = mid11 / 2;\n    long mid13 = mid12 / 2;\n\
    \    long mid14 = mid13 / 2;\n    long mid15 = mid14 / 2;\n    long mid16 = mid15\
    \ / 2;\n    long mid17 = mid16 / 2;\n    long mid18 = mid17 / 2;\n    long mid19\
    \ = mid18 / 2;\n    long mid20 = mid19 / 2;\n    long mid21 = mid20 / 2;\n   \
    \ long mid22 = mid21 / 2;\n    long mid23 = mid22 / 2;\n    long mid24 = mid23\
    \ / 2;\n    long mid25 = mid24 / 2;\n    long mid26 = mid25 / 2;\n    long mid27\
    \ = mid26 / 2;\n    long mid28 = mid27 / 2;\n    long mid29 = mid28 / 2;\n   \
    \ long mid30 = mid29 / 2;\n    long mid31 = mid30 / 2;\n    long mid32 = mid31\
    \ / 2;\n    long mid33 = mid32 / 2;\n    long mid34 = mid33 / 2;\n    long mid35\
    \ = mid34 / 2;\n    long mid36 = mid35 / 2;\n    long mid37 = mid36 / 2;\n   \
    \ long mid38 = mid37 / 2;\n    long mid39 = mid38 / 2;\n    long mid40 = mid39\
    \ / 2;\n    long mid41 = mid40 / 2;\n    long mid42 = mid41 / 2;\n    long mid43\
    \ = mid42 / 2;\n    long mid44 = mid43 / 2;\n    long mid45 = mid44 / 2;\n   \
    \ long mid46 = mid45 / 2;\n    long mid47 = mid46 / 2;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    long mid;\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    mid =\
    \ min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n \
    \           result.push_back(i);\n        } else if (i > mid) {\n            result.push_back(mid);\n\
    \        } else {\n            result.push_back(max);\n            result.push_back(mid);\n\
    \            result.push_back(min);\n        }\n    }\n    return result;", " \
    \   std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\
    \ else if (i > max) {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        } else if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    result.push_back(min);\n    result.push_back(max);\n    return\
    \ result;", "    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ }\n        if (i == max) {\n            res.push_back(i);\n        }\n    }\n\
    \    res.push_back(max);\n    res.push_back(min);\n    return res;", "    std::vector<long>\
    \ result;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long mid4\
    \ = mid3 / 2;\n    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n    long\
    \ mid7 = mid6 / 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n   \
    \ long mid10 = mid9 / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11\
    \ / 2;\n    long mid13 = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15\
    \ = mid14 / 2;\n    long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n   \
    \ long mid18 = mid17 / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19\
    \ / 2;\n    long mid21 = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23\
    \ = mid22 / 2;\n    long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n   \
    \ long mid26 = mid25 / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27\
    \ / 2;\n    long mid29 = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31\
    \ = mid30 / 2;\n    long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n   \
    \ long mid34 = mid33 / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35\
    \ / 2;\n    long mid37 = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39\
    \ = mid38 / 2;\n    long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n   \
    \ long mid42 = mid41 / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43\
    \ / 2;\n    long mid45 = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47\
    \ = mid46 / 2;\n    long mid48 = mid47 / 2;\n    long mid49", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            i = min;\n    \
    \    }\n        if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long temp;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] < mid) {\n            temp = lst[i];\n\
    \            lst[i] = mid;\n            mid = temp;\n        }\n    }\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > mid) {\n         \
    \   temp = lst[i];\n            lst[i] = mid;\n            mid = temp;\n     \
    \   }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ < mid) {\n            temp = lst[i];\n            lst[i] = mid;\n          \
    \  mid = temp;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > mid) {\n            temp = lst[i];\n            lst[i] =\
    \ mid;\n            mid = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < mid) {\n            temp = lst[i];\n          \
    \  lst[i] = mid;\n            mid = temp;\n        }\n    }\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > mid) {\n            temp = lst[i];\n\
    \            lst[i] = mid;\n            mid = temp;\n        }\n    }\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < mid) {\n         \
    \   temp = lst[i];\n            lst[i] = mid;\n            mid = temp;\n     \
    \   }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > mid) {\n            temp = lst[i];\n            lst[i] = mid;\n          \
    \  mid = temp;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] < mid) {\n            temp = lst[i];\n            lst[i] =\
    \ mid;\n            mid = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > mid) {\n            temp = lst[i];\n          \
    \  lst[i] = mid;\n            mid = temp;\n        }\n    }\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] < mid) {\n            temp = lst[i];\n\
    \            lst[i] = mid;\n            mid = temp;\n        }\n    }\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > mid) {\n         \
    \   temp = lst[i];\n            lst[i] = mid;\n            mid = temp;\n     \
    \   }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ < mid) {\n            temp = lst[i];\n            lst[i] = mid;\n", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        } else if (i > max) {\n    \
    \        max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            res.push_back(i);\n\
    \        } else if (i > max) {\n            res.push_back(i);\n        }\n   \
    \ }\n    return res;", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n    long mid3 =\
    \ mid2 / 2;\n    long mid4 = mid3 / 2;\n    long mid5 = mid4 / 2;\n    long mid6\
    \ = mid5 / 2;\n    long mid7 = mid6 / 2;\n    long mid8 = mid7 / 2;\n    long\
    \ mid9 = mid8 / 2;\n    long mid10 = mid9 / 2;\n    long mid11 = mid10 / 2;\n\
    \    long mid12 = mid11 / 2;\n    long mid13 = mid12 / 2;\n    long mid14 = mid13\
    \ / 2;\n    long mid15 = mid14 / 2;\n    long mid16 = mid15 / 2;\n    long mid17\
    \ = mid16 / 2;\n    long mid18 = mid17 / 2;\n    long mid19 = mid18 / 2;\n   \
    \ long mid20 = mid19 / 2;\n    long mid21 = mid20 / 2;\n    long mid22 = mid21\
    \ / 2;\n    long mid23 = mid22 / 2;\n    long mid24 = mid23 / 2;\n    long mid25\
    \ = mid24 / 2;\n    long mid26 = mid25 / 2;\n    long mid27 = mid26 / 2;\n   \
    \ long mid28 = mid27 / 2;\n    long mid29 = mid28 / 2;\n    long mid30 = mid29\
    \ / 2;\n    long mid31 = mid30 / 2;\n    long mid32 = mid31 / 2;\n    long mid33\
    \ = mid32 / 2;\n    long mid34 = mid33 / 2;\n    long mid35 = mid34 / 2;\n   \
    \ long mid36 = mid35 / 2;\n    long mid37 = mid36 / 2;\n    long mid38 = mid37\
    \ / 2;\n    long mid39 = mid38 / 2;\n    long mid40 = mid39 / 2;\n    long mid41\
    \ = mid40 / 2;\n    long mid42 = mid41 / 2;\n    long mid43 = mid42 / 2;\n   \
    \ long mid44 = mid43 / 2;\n    long mid45 = mid44 / 2;\n    long mid46 = mid45\
    \ / 2;\n    long mid47 = mid46 / 2;\n    long mid48 = mid47 / 2;\n    long mid49",
  "    std::vector<long> lst2;\n    long min;\n    long max;\n    long mid;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        min = lst[i];\n        max = lst[i];\n\
    \        mid = lst[i];\n        for (long j = i + 1; j < lst.size(); j++) {\n\
    \            if (lst[j] < mid) {\n                mid = lst[j];\n            \
    \    min = lst[i];\n                max = lst[j];\n            }\n        }\n\
    \        lst2.push_back(min);\n        lst2.push_back(max);\n        lst2.push_back(mid);\n\
    \    }\n    return lst2;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\n\
    \        if (i > max) {\n            res.push_back(i);\n        }\n    }\n   \
    \ return res;", "    std::vector<long> res;\n    long min = lst.front();\n   \
    \ long max = lst.back();\n    for (long i : lst) {\n        if (i < min) min =\
    \ i;\n        if (i > max) max = i;\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) res.push_back(min);\n        if\
    \ (i > max) res.push_back(max);\n    }\n    return res;", "    // Your code here\n\
    \    std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for(long i : lst) {\n        if(i<min) min=i;\n        if(i>max) max=i;\n\
    \    }\n    for(long i=min; i<max; i++) {\n        res.push_back(i);\n    }\n\
    \    for(long i=max; i>min; i--) {\n        res.push_back(i);\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    long mid;\n    for (long i : lst) {\n        mid = (min +\
    \ max) / 2;\n        if (i < mid) {\n            min = mid;\n        } else {\n\
    \            max = mid;\n        }\n        res.push_back(i);\n    }\n    return\
    \ res;", "    std::vector<long> lst2;\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            lst2.push_back(i);\n       \
    \ }\n        if (i > max) {\n            lst2.push_back(i);\n        }\n    }\n\
    \    lst2.push_back(min);\n    lst2.push_back(max);\n    return lst2;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           i = min;\n        }\n        if (i > max) {\n            i = max;\n\
    \        }\n        res.push_back(i);\n    }\n    return res;", "    long min\
    \ = lst.front();\n    long max = lst.back();\n    std::vector<long> result;\n\
    \    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> sorted_lst;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            sorted_lst.push_back(min);\n        } else if\
    \ (i == max) {\n            sorted_lst.push_back(max);\n        } else {\n   \
    \         sorted_lst.push_back(i);\n        }\n    }\n    return sorted_lst;",
  "    std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ }\n        if (i == max) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ }\n        if (i == max) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    long min = lst.front();\n   \
    \ long max = lst.back();\n    long mid;\n    std::vector<long> res;\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i = min; i <= max; i++) {\n        mid\
    \ = (min + max) / 2;\n        if (mid > i) {\n            res.push_back(mid);\n\
    \            min = mid;\n        } else {\n            max = mid;\n        }\n\
    \    }\n    res.push_back(max);\n    return res;", "    std::vector<long> res;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            res.push_back(i);\n\
    \        } else if (i > max) {\n            res.push_back(max);\n            res.push_back(i);\n\
    \        } else {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long i\
    \ : lst) {\n        if (i < min) {\n            i = min;\n        }\n        if\
    \ (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n  \
    \  }\n    return res;", "    std::vector<long> sorted_lst;\n    long min_val =\
    \ std::numeric_limits<long>::min();\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min_val) {\n            sorted_lst.push_back(i);\n\
    \        } else if (i > max_val) {\n            sorted_lst.push_back(max_val);\n\
    \        } else {\n            sorted_lst.push_back(min_val);\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;", "    std::vector<long> res;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            res.push_back(i);\n\
    \        }\n        if (i > max) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;", "    std::vector<long> sorted_lst;\n    long min_val\
    \ = std::numeric_limits<long>::min();\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min_val) {\n            sorted_lst.push_back(i);\n\
    \            min_val = i;\n        } else if (i > max_val) {\n            sorted_lst.push_back(max_val);\n\
    \            max_val = i;\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;", "    std::vector<long> res;\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> sorted_lst;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    sorted_lst.push_back(min);\n\
    \    sorted_lst.push_back(max);\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            sorted_lst.push_back(min);\n        }\n        if (i > max) {\n\
    \            sorted_lst.push_back(max);\n        }\n        sorted_lst.push_back(i);\n\
    \    }\n    return sorted_lst;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            i = min;\n        }\n      \
    \  if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    std::vector<long> result;\n    long minval = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxval = *std::max_element(lst.begin(), lst.end());\n\
    \    long midval = minval + maxval / 2;\n    long midval2 = minval + maxval /\
    \ 2;\n    long midval3 = minval + maxval / 2;\n    long midval4 = minval + maxval\
    \ / 2;\n    long midval5 = minval + maxval / 2;\n    long midval6 = minval + maxval\
    \ / 2;\n    long midval7 = minval + maxval / 2;\n    long midval8 = minval + maxval\
    \ / 2;\n    long midval9 = minval + maxval / 2;\n    long midval10 = minval +\
    \ maxval / 2;\n    long midval11 = minval + maxval / 2;\n    long midval12 = minval\
    \ + maxval / 2;\n    long midval13 = minval + maxval / 2;\n    long midval14 =\
    \ minval + maxval / 2;\n    long midval15 = minval + maxval / 2;\n    long midval16\
    \ = minval + maxval / 2;\n    long midval17 = minval + maxval / 2;\n    long midval18\
    \ = minval + maxval / 2;\n    long midval19 = minval + maxval / 2;\n    long midval20\
    \ = minval + maxval / 2;\n    long midval21 = minval + maxval / 2;\n    long midval22\
    \ = minval + maxval / 2;\n    long midval23 = minval + maxval / 2;\n    long midval24\
    \ = minval + maxval / 2;\n    long midval25 = minval + maxval / 2;\n    long midval26\
    \ = minval + maxval / 2;\n    long midval27 = minval + maxval / 2;\n    long midval28\
    \ = minval + maxval / 2;\n    long midval29 = minval + maxval / 2;\n    long midval30\
    \ = minval + maxval / 2;\n    long midval31 = minval + maxval / 2;\n    long midval32\
    \ = minval + maxval / 2;\n    long midval33 = minval + maxval / 2;\n    long midval34\
    \ = minval + maxval / 2;\n    long midval35 = minval + ", "    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    std::vector<long> res;\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            res.push_back(i);\n\
    \        } else if (i > max) {\n            res.push_back(i);\n        }\n   \
    \ }\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            i = min;\n        } else if\
    \ (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n  \
    \  }\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> lst2;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            lst2.push_back(i);\n\
    \        }\n        if (i > max) {\n            lst2.push_back(i);\n        }\n\
    \    }\n    return lst2;", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid;\n    for (long i : lst) {\n       \
    \ mid = (min + max) / 2;\n        if (i < mid) {\n            min = mid;\n   \
    \     } else {\n            max = mid;\n        }\n        result.push_back(i);\n\
    \    }\n    return result;", "    long min = lst.front();\n    long max = lst.back();\n\
    \    long mid;\n    std::vector<long> result;\n    while (true) {\n        mid\
    \ = (min + max) / 2;\n        if (mid == min) {\n            result.push_back(min);\n\
    \            min = mid;\n        } else if (mid == max) {\n            result.push_back(max);\n\
    \            max = mid;\n        } else {\n            result.push_back(mid);\n\
    \            min = mid;\n            max = mid;\n        }\n    }\n    return\
    \ result;", "    std::vector<long> ret;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        } else if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i == min) {\n            ret.push_back(min);\n\
    \        } else if (i == max) {\n            ret.push_back(max);\n        } else\
    \ {\n            ret.push_back(i);\n        }\n    }\n    return ret;", "    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        } else\
    \ if (i == max) {\n            lst2.push_back(max);\n        } else {\n      \
    \      lst2.push_back(i);\n        }\n    }\n    return lst2;", "    std::vector<long>\
    \ result;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long left = mid;\n    long right = mid;\n    long mid2 = min\
    \ + (max - min) / 2;\n    long mid3 = min + (max - min) / 2;\n    long mid4 =\
    \ min + (max - min) / 2;\n    long mid5 = min + (max - min) / 2;\n    long mid6\
    \ = min + (max - min) / 2;\n    long mid7 = min + (max - min) / 2;\n    long mid8\
    \ = min + (max - min) / 2;\n    long mid9 = min + (max - min) / 2;\n    long mid10\
    \ = min + (max - min) / 2;\n    long mid11 = min + (max - min) / 2;\n    long\
    \ mid12 = min + (max - min) / 2;\n    long mid13 = min + (max - min) / 2;\n  \
    \  long mid14 = min + (max - min) / 2;\n    long mid15 = min + (max - min) / 2;\n\
    \    long mid16 = min + (max - min) / 2;\n    long mid17 = min + (max - min) /\
    \ 2;\n    long mid18 = min + (max - min) / 2;\n    long mid19 = min + (max - min)\
    \ / 2;\n    long mid20 = min + (max - min) / 2;\n    long mid21 = min + (max -\
    \ min) / 2;\n    long mid22 = min + (max - min) / 2;\n    long mid23 = min + (max\
    \ - min) / 2;\n    long mid24 = min + (max - min) / 2;\n    long mid25 = min +\
    \ (max - min) / 2;\n    long mid26 = min + (max - min) / 2;\n    long mid27 =\
    \ min + (max - min) / 2;\n    long mid28 = min + (max - min) / 2;\n    long mid29\
    \ = min + (max - min) / 2;\n    long mid30 = min + (max - min) / 2;\n    long\
    \ mid31 = min + (max - min) / 2;\n    long mid32 = min + (max - min) / 2;\n  \
    \  long mid33 = min + (max - min) / 2;\n    long mid34 = min + (max - min) / 2;\n\
    \    long mid35 = min + (max - min) / 2;\n    long mid36 = min + (max - min) /\
    \ 2;\n    long mid37 = min + (max - min) / 2;\n    long mid38 = min + (max - min)\
    \ / 2;\n    long mid39 = min + (max - min) / 2;\n    long mid40 = min ", "   \
    \ std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    if (min < max) {\n        result.push_back(max);\n      \
    \  result.push_back(min);\n    }\n    return result;", "    std::vector<long>\
    \ sorted_lst;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \    long max_val = *std::max_element(lst.begin(), lst.end());\n    long min_idx\
    \ = lst.begin();\n    long max_idx = lst.end();\n    long mid_idx = lst.begin();\n\
    \    for (long i = min_val; i <= max_val; i++) {\n        mid_idx = std::find(lst.begin(),\
    \ lst.end(), i);\n        if (mid_idx > max_idx) {\n            sorted_lst.push_back(i);\n\
    \            max_idx = mid_idx;\n        } else if (mid_idx < min_idx) {\n   \
    \         sorted_lst.push_back(i);\n            min_idx = mid_idx;\n        }\n\
    \    }\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(max_val);\n\
    \    return sorted_lst;", "    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    std::vector<long>\
    \ res;\n    res.push_back(min);\n    res.push_back(max);\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            res.push_back(min);\n        } else if\
    \ (i > max) {\n            res.push_back(max);\n        } else {\n           \
    \ res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long mid4\
    \ = mid3 / 2;\n    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n    long\
    \ mid7 = mid6 / 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n   \
    \ long mid10 = mid9 / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11\
    \ / 2;\n    long mid13 = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15\
    \ = mid14 / 2;\n    long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n   \
    \ long mid18 = mid17 / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19\
    \ / 2;\n    long mid21 = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23\
    \ = mid22 / 2;\n    long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n   \
    \ long mid26 = mid25 / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27\
    \ / 2;\n    long mid29 = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31\
    \ = mid30 / 2;\n    long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n   \
    \ long mid34 = mid33 / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35\
    \ / 2;\n    long mid37 = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39\
    \ = mid38 / 2;\n    long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n   \
    \ long mid42 = mid41 / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43\
    \ / 2;\n    long mid45 = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47\
    \ = mid46 / 2;\n    long mid48 = mid47 / 2;\n    long mid49", "    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    // Sort by minimum first\n    std::sort(lst.begin(),\
    \ lst.end());\n    // Now sort by maximum\n    std::sort(lst.begin(), lst.end(),\
    \ std::greater<long>());\n    // Now sort by minimum\n    std::sort(lst.begin(),\
    \ lst.end(), std::less<long>());\n    return lst;", "    std::vector<long> sorted_lst;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    sorted_lst.push_back(min);\n\
    \    sorted_lst.push_back(max);\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            sorted_lst.push_back(min);\n            sorted_lst.push_back(i);\n\
    \        } else if (i > max) {\n            sorted_lst.push_back(max);\n     \
    \       sorted_lst.push_back(i);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;", "    long min = lst.front();\n   \
    \ long max = lst.back();\n    for (long i : lst) {\n        if (i < min) min =\
    \ i;\n        if (i > max) max = i;\n    }\n    std::vector<long> res;\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) res.push_back(i);\n\
    \        if (i > max) res.push_back(i);\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    long left = mid;\n    long right = mid;\n    for (long i :\
    \ lst) {\n        if (i < left) {\n            left = i;\n        } else if (i\
    \ > right) {\n            right = i;\n        }\n    }\n    ret.push_back(left);\n\
    \    ret.push_back(right);\n    ret.push_back(min);\n    return ret;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    long mid;\n\
    \    for (long i : lst) {\n        if (i < min) {\n            mid = min;\n  \
    \          min = i;\n        } else if (i > max) {\n            mid = max;\n \
    \           max = i;\n        } else {\n            mid = i;\n        }\n    \
    \    result.push_back(mid);\n    }\n    return result;", "    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid;\n    std::vector<long> res;\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        mid = (min + max)\
    \ / 2;\n        if (i < mid) {\n            min = mid;\n        } else {\n   \
    \         max = mid;\n        }\n        res.push_back(min);\n        res.push_back(max);\n\
    \    }\n    return res;", "    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    long mid = min\
    \ + (max - min) / 2;\n    std::vector<long> result;\n    long midval = mid;\n\
    \    long midval2 = mid;\n    long midval3 = mid;\n    long midval4 = mid;\n \
    \   long midval5 = mid;\n    long midval6 = mid;\n    long midval7 = mid;\n  \
    \  long midval8 = mid;\n    long midval9 = mid;\n    long midval10 = mid;\n  \
    \  long midval11 = mid;\n    long midval12 = mid;\n    long midval13 = mid;\n\
    \    long midval14 = mid;\n    long midval15 = mid;\n    long midval16 = mid;\n\
    \    long midval17 = mid;\n    long midval18 = mid;\n    long midval19 = mid;\n\
    \    long midval20 = mid;\n    long midval21 = mid;\n    long midval22 = mid;\n\
    \    long midval23 = mid;\n    long midval24 = mid;\n    long midval25 = mid;\n\
    \    long midval26 = mid;\n    long midval27 = mid;\n    long midval28 = mid;\n\
    \    long midval29 = mid;\n    long midval30 = mid;\n    long midval31 = mid;\n\
    \    long midval32 = mid;\n    long midval33 = mid;\n    long midval34 = mid;\n\
    \    long midval35 = mid;\n    long midval36 = mid;\n    long midval37 = mid;\n\
    \    long midval38 = mid;\n    long midval39 = mid;\n    long midval40 = mid;\n\
    \    long midval41 = mid;\n    long midval42 = mid;\n    long midval43 = mid;\n\
    \    long midval44 = mid;\n    long midval45 = mid;\n    long midval46 = mid;\n\
    \    long midval47 = mid;\n    long midval48 = mid;\n    long midval49 = mid;\n\
    \    long midval50 = mid;\n    long midval51 = mid;\n    long midval52 = mid;\n\
    \    long midval53 = mid;", "    // Write your code here\n    std::vector<long>\
    \ lst2;\n    for(long i=0;i<lst.size();i++){\n        for(long j=i+1;j<lst.size();j++){\n\
    \            if(lst[i]>lst[j]){\n                long temp=lst[i];\n         \
    \       lst[i]=lst[j];\n                lst[j]=temp;\n            }\n        }\n\
    \    }\n    return lst2;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(min);\n      \
    \  }\n        if (i > max) {\n            res.push_back(max);\n        }\n   \
    \ }\n    return res;", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    long min = lst.front();\n    long max = lst.back();\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i = min; i <= max; i++) {\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;", " \
    \   std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(max);\n\
    \            res.push_back(i);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    res.push_back(lst[0]);\n\
    \    long max = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    res.push_back(max);\n\
    \    long min = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    res.push_back(min);\n\
    \    return res;", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = mid + (max - min) / 2;\n\
    \    long mid3 = mid2 + (max - min) / 2;\n    long mid4 = mid3 + (max - min) /\
    \ 2;\n    long mid5 = mid4 + (max - min) / 2;\n    long mid6 = mid5 + (max - min)\
    \ / 2;\n    long mid7 = mid6 + (max - min) / 2;\n    long mid8 = mid7 + (max -\
    \ min) / 2;\n    long mid9 = mid8 + (max - min) / 2;\n    long mid10 = mid9 +\
    \ (max - min) / 2;\n    long mid11 = mid10 + (max - min) / 2;\n    long mid12\
    \ = mid11 + (max - min) / 2;\n    long mid13 = mid12 + (max - min) / 2;\n    long\
    \ mid14 = mid13 + (max - min) / 2;\n    long mid15 = mid14 + (max - min) / 2;\n\
    \    long mid16 = mid15 + (max - min) / 2;\n    long mid17 = mid16 + (max - min)\
    \ / 2;\n    long mid18 = mid17 + (max - min) / 2;\n    long mid19 = mid18 + (max\
    \ - min) / 2;\n    long mid20 = mid19 + (max - min) / 2;\n    long mid21 = mid20\
    \ + (max - min) / 2;\n    long mid22 = mid21 + (max - min) / 2;\n    long mid23\
    \ = mid22 + (max - min) / 2;\n    long mid24 = mid23 + (max - min) / 2;\n    long\
    \ mid25 = mid24 + (max - min) / 2;\n    long mid26 = mid25 + (max - min) / 2;\n\
    \    long mid27 = mid26 + (max - min) / 2;\n    long mid28 = mid27 + (max - min)\
    \ / 2;\n    long mid29 = mid28 + (max - min) / 2;\n    long mid30 = mid29 + (max\
    \ - min) / 2;\n    long mid31 = mid30 + (max - min) / 2;\n    long mid32 = mid31\
    \ + (max - min) / 2;\n    long mid33 = mid32 + (max - min) / 2;\n    long mid34\
    \ = mid33 + (max - min) / 2;\n    long mid35 = mid34 + (max - min) / 2;\n    long\
    \ mid36 = mid35 + (max - min) / 2;\n    long mid37 = mid36 + (max - min) / 2;\n\
    \    long mid38 = mid37", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = mid + (max - min) / 2;\n\
    \    long mid3 = mid2 + (max - min) / 2;\n    long mid4 = mid3 + (max - min) /\
    \ 2;\n    long mid5 = mid4 + (max - min) / 2;\n    long mid6 = mid5 + (max - min)\
    \ / 2;\n    long mid7 = mid6 + (max - min) / 2;\n    long mid8 = mid7 + (max -\
    \ min) / 2;\n    long mid9 = mid8 + (max - min) / 2;\n    long mid10 = mid9 +\
    \ (max - min) / 2;\n    long mid11 = mid10 + (max - min) / 2;\n    long mid12\
    \ = mid11 + (max - min) / 2;\n    long mid13 = mid12 + (max - min) / 2;\n    long\
    \ mid14 = mid13 + (max - min) / 2;\n    long mid15 = mid14 + (max - min) / 2;\n\
    \    long mid16 = mid15 + (max - min) / 2;\n    long mid17 = mid16 + (max - min)\
    \ / 2;\n    long mid18 = mid17 + (max - min) / 2;\n    long mid19 = mid18 + (max\
    \ - min) / 2;\n    long mid20 = mid19 + (max - min) / 2;\n    long mid21 = mid20\
    \ + (max - min) / 2;\n    long mid22 = mid21 + (max - min) / 2;\n    long mid23\
    \ = mid22 + (max - min) / 2;\n    long mid24 = mid23 + (max - min) / 2;\n    long\
    \ mid25 = mid24 + (max - min) / 2;\n    long mid26 = mid25 + (max - min) / 2;\n\
    \    long mid27 = mid26 + (max - min) / 2;\n    long mid28 = mid27 + (max - min)\
    \ / 2;\n    long mid29 = mid28 + (max - min) / 2;\n    long mid30 = mid29 + (max\
    \ - min) / 2;\n    long mid31 = mid30 + (max - min) / 2;\n    long mid32 = mid31\
    \ + (max - min) / 2;\n    long mid33 = mid32 + (max - min) / 2;\n    long mid34\
    \ = mid33 + (max - min) / 2;\n    long mid35 = mid34 + (max - min) / 2;\n    long\
    \ mid36 = mid35 + (max - min) / 2;\n    long mid37 = mid36 + (max - min) / 2;\n\
    \    long mid38 = mid37", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            i = min;\n        } else if\
    \ (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n  \
    \  }\n    return res;", "    std::vector<long> lst2;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    lst2.push_back(min);\n\
    \    lst2.push_back(mid);\n    lst2.push_back(max);\n    return lst2;", "    std::vector<long>\
    \ sorted_list;\n    long min_val = std::numeric_limits<long>::min();\n    long\
    \ max_val = std::numeric_limits<long>::max();\n    for (long i : lst) {\n    \
    \    if (i < min_val) {\n            sorted_list.push_back(i);\n            min_val\
    \ = i;\n        } else if (i > max_val) {\n            sorted_list.push_back(max_val);\n\
    \            max_val = i;\n        } else {\n            sorted_list.push_back(i);\n\
    \        }\n    }\n    return sorted_list;", "    std::vector<long> res;\n   \
    \ res.push_back(lst[0]);\n    res.push_back(lst[1]);\n    res.push_back(lst[2]);\n\
    \    res.push_back(lst[3]);\n    res.push_back(lst[4]);\n    res.push_back(lst[5]);\n\
    \    res.push_back(lst[6]);\n    res.push_back(lst[7]);\n    res.push_back(lst[8]);\n\
    \    res.push_back(lst[9]);\n    res.push_back(lst[10]);\n    res.push_back(lst[11]);\n\
    \    res.push_back(lst[12]);\n    res.push_back(lst[13]);\n    res.push_back(lst[14]);\n\
    \    res.push_back(lst[15]);\n    res.push_back(lst[16]);\n    res.push_back(lst[17]);\n\
    \    res.push_back(lst[18]);\n    res.push_back(lst[19]);\n    res.push_back(lst[20]);\n\
    \    res.push_back(lst[21]);\n    res.push_back(lst[22]);\n    res.push_back(lst[23]);\n\
    \    res.push_back(lst[24]);\n    res.push_back(lst[25]);\n    res.push_back(lst[26]);\n\
    \    res.push_back(lst[27]);\n    res.push_back(lst[28]);\n    res.push_back(lst[29]);\n\
    \    res.push_back(lst[30]);\n    res.push_back(lst[31]);\n    res.push_back(lst[32]);\n\
    \    res.push_back(lst[33]);\n    res.push_back(lst[34]);\n    res.push_back(lst[35]);\n\
    \    res.push_back(lst[36]);\n    res.push_back(lst[37]);\n    res.push_back(lst[38]);\n\
    \    res.push_back(lst[39]);\n    res.push_back(lst[40]);\n    res.push_back(lst[41]);\n\
    \    res.push_back(lst[42]);\n    res.push_back(lst[43]);\n    res.push_back(lst[44]);\n\
    \    res.push_back(lst[45]);\n    res.push_back(lst[46]);\n    res.push_back(lst[47]);\n\
    \    res.push_back(lst[48]);\n    res.push_back(lst[49]);\n    res.push_back(lst[50]);\n\
    \    res.push_back(lst[51]);\n    res.push_back(lst[52]);\n    res.push_back(lst[53]);\n\
    \    res.push_back(lst[54]);\n    res.push_back(lst[55]);\n    res.push_back(lst[56]);\n\
    \    res.push_back(lst[57]);\n    res.push_back(lst[58]);\n    res.push_back(lst[59]);\n\
    \    res.push_back(lst[60]);\n    res.push_back(lst[61]);\n    res.push_back(lst[62]);\n\
    \    res.push_back(lst[63]);\n    res.push_back(lst[64]);\n", "    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(max);\n\
    \            res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long temp;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] < mid) {\n            temp = lst[i];\n            lst[i] =\
    \ lst[mid];\n            lst[mid] = temp;\n        }\n    }\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > mid) {\n            temp = lst[i];\n\
    \            lst[i] = lst[mid];\n            lst[mid] = temp;\n        }\n   \
    \ }\n    for (long i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n\
    \    }\n    return result;", "    std::vector<long> res;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }", "    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    std::vector<long> result;\n \
    \   long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            result.push_back(min);\n        } else if (i ==\
    \ max) {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            result.push_back(min);\n            min =\
    \ i;\n        } else if (i > max) {\n            result.push_back(max);\n    \
    \        max = i;\n        } else {\n            result.push_back(i);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n    long mid3 =\
    \ mid / 3;\n    long mid4 = mid / 4;\n    long mid5 = mid / 5;\n    long mid6\
    \ = mid / 6;\n    long mid7 = mid / 7;\n    long mid8 = mid / 8;\n    long mid9\
    \ = mid / 9;\n    long mid10 = mid / 10;\n    long mid11 = mid / 11;\n    long\
    \ mid12 = mid / 12;\n    long mid13 = mid / 13;\n    long mid14 = mid / 14;\n\
    \    long mid15 = mid / 15;\n    long mid16 = mid / 16;\n    long mid17 = mid\
    \ / 17;\n    long mid18 = mid / 18;\n    long mid19 = mid / 19;\n    long mid20\
    \ = mid / 20;\n    long mid21 = mid / 21;\n    long mid22 = mid / 22;\n    long\
    \ mid23 = mid / 23;\n    long mid24 = mid / 24;\n    long mid25 = mid / 25;\n\
    \    long mid26 = mid / 26;\n    long mid27 = mid / 27;\n    long mid28 = mid\
    \ / 28;\n    long mid29 = mid / 29;\n    long mid30 = mid / 30;\n    long mid31\
    \ = mid / 31;\n    long mid32 = mid / 32;\n    long mid33 = mid / 33;\n    long\
    \ mid34 = mid / 34;\n    long mid35 = mid / 35;\n    long mid36 = mid / 36;\n\
    \    long mid37 = mid / 37;\n    long mid38 = mid / 38;\n    long mid39 = mid\
    \ / 39;\n    long mid40 = mid / 40;\n    long mid41 = mid / 41;\n    long mid42\
    \ = mid / 42;\n    long mid43 = mid / 43;\n    long mid44 = mid / 44;\n    long\
    \ mid45 = mid / 45;\n    long mid46 = mid / 46;\n    long mid47 = mid / 47;\n\
    \    long mid48 = mid / 48;\n    long mid49 = m", "    std::vector<long> res;\n\
    \    res.push_back(lst[0]);\n    res.push_back(lst[lst.size()-1]);\n    for(size_t\
    \ i = 1; i < lst.size()-1; i++) {\n        res.push_back(lst[i]);\n        res.push_back(lst[i-1]);\n\
    \    }\n    return res;", "    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    std::vector<long>\
    \ res;\n    res.push_back(min);\n    res.push_back(max);\n    for(long i = min\
    \ + 1; i <= max; i++) {\n        res.push_back(i);\n    }\n    return res;", " \
    \   std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    std::vector<long> res;\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long i\
    \ : lst) {\n        if (i < min) {\n            i = min;\n        }\n        if\
    \ (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n  \
    \  }\n    return res;", "    std::vector<long> lst2;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     lst2.push_back(min);\n        } else if (i == max) {\n            lst2.push_back(max);\n\
    \        } else {\n            lst2.push_back(i);\n        }\n    }\n    return\
    \ lst2;", "    // Your code goes here\n    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            i = min;\n    \
    \    }\n        if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\n\
    \        if (i > max) {\n            res.push_back(i);\n        }\n    }\n   \
    \ return res;", "    long min = lst.front();\n    long max = lst.back();\n   \
    \ long mid;\n    std::vector<long> result;\n    while (true) {\n        mid =\
    \ (min + max) / 2;\n        if (mid == min) {\n            result.push_back(min);\n\
    \            min = mid;\n        } else if (mid == max) {\n            result.push_back(max);\n\
    \            max = mid;\n        } else {\n            result.push_back(mid);\n\
    \            min = mid;\n            max = mid;\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> sorted_lst;\n    long min = lst.front();\n    long max =\
    \ lst.back();\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        } else if (i > max) {\n            max = i;\n        }\n    }\n\
    \    for (long i : lst) {\n        if (i < min) {\n            sorted_lst.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            sorted_lst.push_back(max);\n\
    \            max = i;\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    sorted_lst.push_back(min);\n    sorted_lst.push_back(max);\n\
    \    return sorted_lst;", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    for (long i : lst) {\n        if (i < left) {\n  \
    \          left = i;\n        }\n        if (i > right) {\n            right =\
    \ i;\n        }\n    }\n    result.push_back(left);\n    result.push_back(right);\n\
    \    result.push_back(min);\n    return result;", "    std::vector<long> res;\n\
    \    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) min = i;\n   \
    \     if (i > max) max = i;\n    }\n    std::vector<long> res;\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) continue;\n\
    \        if (i > max) break;\n        res.push_back(i);\n    }\n    return res;",
  "    std::vector<long> sorted_lst;\n    long min_val = std::numeric_limits<long>::min();\n\
    \    long max_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < min_val) {\n            sorted_lst.push_back(i);\n      \
    \  } else if (i > max_val) {\n            sorted_lst.push_back(max_val);\n   \
    \     } else {\n            sorted_lst.push_back(min_val);\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;", "    std::vector<long> result;\n \
    \   long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n    long mid3 =\
    \ mid2 / 2;\n    long mid4 = mid3 / 2;\n    long mid5 = mid4 / 2;\n    long mid6\
    \ = mid5 / 2;\n    long mid7 = mid6 / 2;\n    long mid8 = mid7 / 2;\n    long\
    \ mid9 = mid8 / 2;\n    long mid10 = mid9 / 2;\n    long mid11 = mid10 / 2;\n\
    \    long mid12 = mid11 / 2;\n    long mid13 = mid12 / 2;\n    long mid14 = mid13\
    \ / 2;\n    long mid15 = mid14 / 2;\n    long mid16 = mid15 / 2;\n    long mid17\
    \ = mid16 / 2;\n    long mid18 = mid17 / 2;\n    long mid19 = mid18 / 2;\n   \
    \ long mid20 = mid19 / 2;\n    long mid21 = mid20 / 2;\n    long mid22 = mid21\
    \ / 2;\n    long mid23 = mid22 / 2;\n    long mid24 = mid23 / 2;\n    long mid25\
    \ = mid24 / 2;\n    long mid26 = mid25 / 2;\n    long mid27 = mid26 / 2;\n   \
    \ long mid28 = mid27 / 2;\n    long mid29 = mid28 / 2;\n    long mid30 = mid29\
    \ / 2;\n    long mid31 = mid30 / 2;\n    long mid32 = mid31 / 2;\n    long mid33\
    \ = mid32 / 2;\n    long mid34 = mid33 / 2;\n    long mid35 = mid34 / 2;\n   \
    \ long mid36 = mid35 / 2;\n    long mid37 = mid36 / 2;\n    long mid38 = mid37\
    \ / 2;\n    long mid39 = mid38 / 2;\n    long mid40 = mid39 / 2;\n    long mid41\
    \ = mid40 / 2;\n    long mid42 = mid41 / 2;\n    long mid43 = mid42 / 2;\n   \
    \ long mid44 = mid43 / 2;\n    long mid45 = mid44 / 2;\n    long mid46 = mid45\
    \ / 2;\n    long mid47 = mid46 / 2;\n    long mid48 = mid47 / 2;\n    long mid49",
  "    std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           i = min;\n        }\n        if (i > max) {\n            i = max;\n\
    \        }\n        res.push_back(i);\n    }\n    return res;", "    // Sort the\
    \ list from smallest to largest.\n    std::sort(lst.begin(), lst.end());\n   \
    \ // Now reverse the list.\n    std::reverse(std::begin(lst), std::end(lst));\n\
    \    return lst;", "    std::vector<long> sorted_lst;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    sorted_lst.push_back(min);\n    sorted_lst.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            sorted_lst.push_back(min);\n\
    \        }\n        if (i > max) {\n            sorted_lst.push_back(max);\n \
    \       }\n        sorted_lst.push_back(i);\n    }\n    return sorted_lst;", " \
    \   std::vector<long> res;\n    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    long mid = min\
    \ + (max - min) / 2;\n    long mid2 = mid + 1;\n    long mid3 = mid2 + 1;\n  \
    \  long mid4 = mid3 + 1;\n    long mid5 = mid4 + 1;\n    long mid6 = mid5 + 1;\n\
    \    long mid7 = mid6 + 1;\n    long mid8 = mid7 + 1;\n    long mid9 = mid8 +\
    \ 1;\n    long mid10 = mid9 + 1;\n    long mid11 = mid10 + 1;\n    long mid12\
    \ = mid11 + 1;\n    long mid13 = mid12 + 1;\n    long mid14 = mid13 + 1;\n   \
    \ long mid15 = mid14 + 1;\n    long mid16 = mid15 + 1;\n    long mid17 = mid16\
    \ + 1;\n    long mid18 = mid17 + 1;\n    long mid19 = mid18 + 1;\n    long mid20\
    \ = mid19 + 1;\n    long mid21 = mid20 + 1;\n    long mid22 = mid21 + 1;\n   \
    \ long mid23 = mid22 + 1;\n    long mid24 = mid23 + 1;\n    long mid25 = mid24\
    \ + 1;\n    long mid26 = mid25 + 1;\n    long mid27 = mid26 + 1;\n    long mid28\
    \ = mid27 + 1;\n    long mid29 = mid28 + 1;\n    long mid30 = mid29 + 1;\n   \
    \ long mid31 = mid30 + 1;\n    long mid32 = mid31 + 1;\n    long mid33 = mid32\
    \ + 1;\n    long mid34 = mid33 + 1;\n    long mid35 = mid34 + 1;\n    long mid36\
    \ = mid35 + 1;\n    long mid37 = mid36 + 1;\n    long mid38 = mid37 + 1;\n   \
    \ long mid39 = mid38 + 1;\n    long mid40 = mid39 + 1;\n    long mid41 = mid40\
    \ + 1;\n    long mid42 = mid41 + 1;\n    long mid43 = mid42 + 1;\n    long mid44\
    \ = mid43 + 1;\n    long mid45 = mid44 + 1;\n    long mid46 = mid45 + 1;\n   \
    \ long mid47 = mid46 + 1;\n    long mid48 = mid47 + 1;\n    long mid49 = mid48\
    \ + 1;\n    long mid50 = mid49 + 1;\n    long mid51 = mid50 + 1;\n    long mid52\
    \ = mid51 + 1;\n    long mid53 = mid52 + 1;\n    long ", "    std::vector<long>\
    \ ret;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long max\
    \ = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max - min)\
    \ / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid * 3;\n    long mid4 = mid\
    \ * 4;\n    long mid5 = mid * 5;\n    long mid6 = mid * 6;\n    long mid7 = mid\
    \ * 7;\n    long mid8 = mid * 8;\n    long mid9 = mid * 9;\n    long mid10 = mid\
    \ * 10;\n    long mid11 = mid * 11;\n    long mid12 = mid * 12;\n    long mid13\
    \ = mid * 13;\n    long mid14 = mid * 14;\n    long mid15 = mid * 15;\n    long\
    \ mid16 = mid * 16;\n    long mid17 = mid * 17;\n    long mid18 = mid * 18;\n\
    \    long mid19 = mid * 19;\n    long mid20 = mid * 20;\n    long mid21 = mid\
    \ * 21;\n    long mid22 = mid * 22;\n    long mid23 = mid * 23;\n    long mid24\
    \ = mid * 24;\n    long mid25 = mid * 25;\n    long mid26 = mid * 26;\n    long\
    \ mid27 = mid * 27;\n    long mid28 = mid * 28;\n    long mid29 = mid * 29;\n\
    \    long mid30 = mid * 30;\n    long mid31 = mid * 31;\n    long mid32 = mid\
    \ * 32;\n    long mid33 = mid * 33;\n    long mid34 = mid * 34;\n    long mid35\
    \ = mid * 35;\n    long mid36 = mid * 36;\n    long mid37 = mid * 37;\n    long\
    \ mid38 = mid * 38;\n    long mid39 = mid * 39;\n    long mid40 = mid * 40;\n\
    \    long mid41 = mid * 41;\n    long mid42 = mid * 42;\n    long mid43 = mid\
    \ * 43;\n    long mid44 = mid * 44;\n    long mid45 = mid * 45;\n    long mid46\
    \ = mid * 46;\n    long mid47 = mid * 47;\n    long mid48 = mid * 48;\n    long\
    \ mid49 = m", "    long min = lst.front();\n    long max = lst.back();\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        } else\
    \ if (i > max) {\n            max = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i = min; i <= max; i++) {\n        result.push_back(i);\n\
    \    }\n    return result;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\n\
    \        if (i > max) {\n            res.push_back(i);\n        }\n    }\n   \
    \ return res;", "    std::vector<long> res;\n    long min = lst.front();\n   \
    \ long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            i = min;\n        }\n      \
    \  if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    std::vector<long> sorted_list;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    sorted_list.push_back(min);\n    sorted_list.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            sorted_list.push_back(i);\n\
    \        }\n        if (i > max) {\n            sorted_list.push_back(i);\n  \
    \      }\n    }\n    return sorted_list;", "    std::vector<long> result;\n  \
    \  long min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n\
    \    long mid3 = mid / 3;\n    long mid4 = mid / 4;\n    long mid5 = mid / 5;\n\
    \    long mid6 = mid / 6;\n    long mid7 = mid / 7;\n    long mid8 = mid / 8;\n\
    \    long mid9 = mid / 9;\n    long mid10 = mid / 10;\n    long mid11 = mid /\
    \ 11;\n    long mid12 = mid / 12;\n    long mid13 = mid / 13;\n    long mid14\
    \ = mid / 14;\n    long mid15 = mid / 15;\n    long mid16 = mid / 16;\n    long\
    \ mid17 = mid / 17;\n    long mid18 = mid / 18;\n    long mid19 = mid / 19;\n\
    \    long mid20 = mid / 20;\n    long mid21 = mid / 21;\n    long mid22 = mid\
    \ / 22;\n    long mid23 = mid / 23;\n    long mid24 = mid / 24;\n    long mid25\
    \ = mid / 25;\n    long mid26 = mid / 26;\n    long mid27 = mid / 27;\n    long\
    \ mid28 = mid / 28;\n    long mid29 = mid / 29;\n    long mid30 = mid / 30;\n\
    \    long mid31 = mid / 31;\n    long mid32 = mid / 32;\n    long mid33 = mid\
    \ / 33;\n    long mid34 = mid / 34;\n    long mid35 = mid / 35;\n    long mid36\
    \ = mid / 36;\n    long mid37 = mid / 37;\n    long mid38 = mid / 38;\n    long\
    \ mid39 = mid / 39;\n    long mid40 = mid / 40;\n    long mid41 = mid / 41;\n\
    \    long mid42 = mid / 42;\n    long mid43 = mid / 43;\n    long mid44 = mid\
    \ / 44;\n    long mid45 = mid / 45;\n    long mid46 = mid / 46;\n    long mid47\
    \ = mid / 47;\n    long mid48 = mid / 48;\n    long mid49 = m", "    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            lst2.push_back(min);\n     \
    \       min = i;\n        } else if (i > max) {\n            lst2.push_back(max);\n\
    \            max = i;\n        } else {\n            lst2.push_back(i);\n    \
    \    }\n    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n    return\
    \ lst2;", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        } else if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long minIndex = std::distance(std::begin(lst), std::find(std::begin(lst),\
    \ std::end(lst), minValue));\n    long maxIndex = std::distance(std::begin(lst),\
    \ std::find(std::begin(lst), std::end(lst), maxValue));\n    long temp;\n    for\
    \ (long i = minIndex; i <= maxIndex; i++) {\n        temp = lst[i];\n        std::swap(lst[i],\
    \ lst[maxIndex]);\n        std::swap(lst[maxIndex], temp);\n    }\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        result.push_back(lst[i]);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) res.push_back(i);\n\
    \        if (i > max) res.push_back(i);\n    }\n    return res;", "    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid * 2;\n   \
    \ long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n \
    \   long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n\
    \    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long mid12 = mid *\
    \ 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n    long mid15\
    \ = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid * 16;\n    long\
    \ mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20 = mid * 19;\n\
    \    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long mid23 = mid\
    \ * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n    long mid26\
    \ = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid * 27;\n    long\
    \ mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31 = mid * 30;\n\
    \    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long mid34 = mid\
    \ * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n    long mid37\
    \ = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid * 38;\n    long\
    \ mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42 = mid * 41;\n\
    \    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long mid45 = mid\
    \ * 44;\n    long mid46 = mid * 45;\n    long mid47 = mid * 46;\n", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    if (min != max) {\n        result.push_back(max);\n       \
    \ result.push_back(min);\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    long mid;\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        } else\
    \ if (i > max) {\n            max = i;\n        }\n    }\n    mid = min + (max\
    \ - min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n\
    \        } else if (i > mid) {\n            result.push_back(max - i);\n     \
    \   } else {\n            result.push_back(min + i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n    long mid3 =\
    \ mid * 3;\n    long mid4 = mid * 4;\n    long mid5 = mid * 5;\n    long mid6\
    \ = mid * 6;\n    long mid7 = mid * 7;\n    long mid8 = mid * 8;\n    long mid9\
    \ = mid * 9;\n    long mid10 = mid * 10;\n    long mid11 = mid * 11;\n    long\
    \ mid12 = mid * 12;\n    long mid13 = mid * 13;\n    long mid14 = mid * 14;\n\
    \    long mid15 = mid * 15;\n    long mid16 = mid * 16;\n    long mid17 = mid\
    \ * 17;\n    long mid18 = mid * 18;\n    long mid19 = mid * 19;\n    long mid20\
    \ = mid * 20;\n    long mid21 = mid * 21;\n    long mid22 = mid * 22;\n    long\
    \ mid23 = mid * 23;\n    long mid24 = mid * 24;\n    long mid25 = mid * 25;\n\
    \    long mid26 = mid * 26;\n    long mid27 = mid * 27;\n    long mid28 = mid\
    \ * 28;\n    long mid29 = mid * 29;\n    long mid30 = mid * 30;\n    long mid31\
    \ = mid * 31;\n    long mid32 = mid * 32;\n    long mid33 = mid * 33;\n    long\
    \ mid34 = mid * 34;\n    long mid35 = mid * 35;\n    long mid36 = mid * 36;\n\
    \    long mid37 = mid * 37;\n    long mid38 = mid * 38;\n    long mid39 = mid\
    \ * 39;\n    long mid40 = mid * 40;\n    long mid41 = mid * 41;\n    long mid42\
    \ = mid * 42;\n    long mid43 = mid * 43;\n    long mid44 = mid * 44;\n    long\
    \ mid45 = mid * 45;\n    long mid46 = mid * 46;\n    long mid47 = mid * 47;\n\
    \    long mid48 = mid * 48;\n    long mid49 = m", "    std::vector<long> lst2;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    long mid;\n    for\
    \ (long i : lst) {\n        mid = (min + max) / 2;\n        if (i < mid) {\n \
    \           min = mid;\n        } else {\n            max = mid;\n        }\n\
    \    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n    for (long i :\
    \ lst) {\n        mid = (min + max) / 2;\n        if (i < mid) {\n           \
    \ lst2.push_back(mid);\n            lst2.push_back(i);\n        } else {\n   \
    \         lst2.push_back(i);\n            lst2.push_back(mid);\n        }\n  \
    \  }\n    return lst2;", "    std::vector<long> lst2;\n    long minval = lst[0];\n\
    \    long maxval = lst[0];\n    for (long i : lst) {\n        if (i < minval)\
    \ {\n            minval = i;\n        } else if (i > maxval) {\n            maxval\
    \ = i;\n        }\n    }\n    long midval = (minval + maxval) / 2;\n    long midval2\
    \ = maxval;\n    for (long i : lst) {\n        if (i == midval) {\n          \
    \  lst2.push_back(midval2);\n        } else if (i == midval2) {\n            lst2.push_back(midval);\n\
    \        } else {\n            lst2.push_back(i);\n        }\n    }\n    return\
    \ lst2;", "    std::vector<long> lst2;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      lst2.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            lst2.push_back(max);\n            max = i;\n        } else {\n\
    \            lst2.push_back(i);\n        }\n    }\n    lst2.push_back(min);\n\
    \    lst2.push_back(max);\n    return lst2;", "    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) min\
    \ = i;\n        if (i > max) max = i;\n    }\n    std::vector<long> res;\n   \
    \ res.push_back(min);\n    res.push_back(max);\n    for (long i : lst) {\n   \
    \     if (i == min) continue;\n        if (i == max) res.push_back(i);\n    }\n\
    \    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> result;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            result.push_back(min);\n            min = i;\n\
    \        } else if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        } else {\n            result.push_back(i);\n        }\n\
    \    }\n    result.push_back(min);\n    result.push_back(max);\n    return result;",
  "    // Initialize min and max with first element of list.\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) min =\
    \ i;\n        if (i > max) max = i;\n    }\n    // Initialize strange sort list\
    \ with first element of list.\n    std::vector<long> strange_lst;\n    strange_lst.push_back(lst[0]);\n\
    \    // Initialize strange sort list with last element of list.\n    std::vector<long>\
    \ strange_lst2;\n    strange_lst2.push_back(lst[lst.size() - 1]);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst3;\n\
    \    strange_lst3.push_back(min);\n    strange_lst3.push_back(max);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst4;\n\
    \    strange_lst4.push_back(max);\n    strange_lst4.push_back(min);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst5;\n\
    \    strange_lst5.push_back(max);\n    strange_lst5.push_back(min);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst6;\n\
    \    strange_lst6.push_back(min);\n    strange_lst6.push_back(max);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst7;\n\
    \    strange_lst7.push_back(max);\n    strange_lst7.push_back(min);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst8;\n\
    \    strange_lst8.push_back(min);\n    strange_lst8.push_back(max);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst9;\n\
    \    strange_lst9.push_back(min);\n    strange_lst9.push_back(max);\n    // Initialize\
    \ strange sort list with min and max of list.\n    std::vector<long> strange_lst10;\n\
    \    strange_lst10.push_back(min);\n    strange_lst10.push_back(max);\n    //\
    \ Initialize strange sort list with min and max of list.\n    std::vector<long>\
    \ strange_lst11;\n    strange_lst11.push_back(min);\n    strange_lst11.push_back(max);\n\
    \    // Initialize strange sort list with min and max of list.\n    std::vector<long>\
    \ strange_lst12;\n    strange_lst12.push_back(min", "    std::vector<long> res;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            res.push_back(i);\n\
    \        } else if (i > max) {\n            res.push_back(max);\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            result.push_back(min);\n            min =\
    \ i;\n        } else if (i > max) {\n            result.push_back(max);\n    \
    \        max = i;\n        } else {\n            result.push_back(i);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> lst2;\n    long minval\
    \ = *std::min_element(lst.begin(), lst.end());\n    long maxval = *std::max_element(lst.begin(),\
    \ lst.end());\n    long midval = minval + maxval / 2;\n    long midval2 = minval\
    \ + maxval / 2;\n    long midval3 = minval + maxval / 2;\n    long midval4 = minval\
    \ + maxval / 2;\n    long midval5 = minval + maxval / 2;\n    long midval6 = minval\
    \ + maxval / 2;\n    long midval7 = minval + maxval / 2;\n    long midval8 = minval\
    \ + maxval / 2;\n    long midval9 = minval + maxval / 2;\n    long midval10 =\
    \ minval + maxval / 2;\n    long midval11 = minval + maxval / 2;\n    long midval12\
    \ = minval + maxval / 2;\n    long midval13 = minval + maxval / 2;\n    long midval14\
    \ = minval + maxval / 2;\n    long midval15 = minval + maxval / 2;\n    long midval16\
    \ = minval + maxval / 2;\n    long midval17 = minval + maxval / 2;\n    long midval18\
    \ = minval + maxval / 2;\n    long midval19 = minval + maxval / 2;\n    long midval20\
    \ = minval + maxval / 2;\n    long midval21 = minval + maxval / 2;\n    long midval22\
    \ = minval + maxval / 2;\n    long midval23 = minval + maxval / 2;\n    long midval24\
    \ = minval + maxval / 2;\n    long midval25 = minval + maxval / 2;\n    long midval26\
    \ = minval + maxval / 2;\n    long midval27 = minval + maxval / 2;\n    long midval28\
    \ = minval + maxval / 2;\n    long midval29 = minval + maxval / 2;\n    long midval30\
    \ = minval + maxval / 2;\n    long midval31 = minval + maxval / 2;\n    long midval32\
    \ = minval + maxval / 2;\n    long midval33 = minval + maxval / 2;\n    long midval34\
    \ = minval + maxval / 2;\n    long midval35 = minval", "    std::vector<long>\
    \ result;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long mid2 = mid + (max - min) / 2;\n    long mid3 = mid2 +\
    \ (max - min) / 2;\n    long mid4 = mid3 + (max - min) / 2;\n    long mid5 = mid4\
    \ + (max - min) / 2;\n    long mid6 = mid5 + (max - min) / 2;\n    long mid7 =\
    \ mid6 + (max - min) / 2;\n    long mid8 = mid7 + (max - min) / 2;\n    long mid9\
    \ = mid8 + (max - min) / 2;\n    long mid10 = mid9 + (max - min) / 2;\n    long\
    \ mid11 = mid10 + (max - min) / 2;\n    long mid12 = mid11 + (max - min) / 2;\n\
    \    long mid13 = mid12 + (max - min) / 2;\n    long mid14 = mid13 + (max - min)\
    \ / 2;\n    long mid15 = mid14 + (max - min) / 2;\n    long mid16 = mid15 + (max\
    \ - min) / 2;\n    long mid17 = mid16 + (max - min) / 2;\n    long mid18 = mid17\
    \ + (max - min) / 2;\n    long mid19 = mid18 + (max - min) / 2;\n    long mid20\
    \ = mid19 + (max - min) / 2;\n    long mid21 = mid20 + (max - min) / 2;\n    long\
    \ mid22 = mid21 + (max - min) / 2;\n    long mid23 = mid22 + (max - min) / 2;\n\
    \    long mid24 = mid23 + (max - min) / 2;\n    long mid25 = mid24 + (max - min)\
    \ / 2;\n    long mid26 = mid25 + (max - min) / 2;\n    long mid27 = mid26 + (max\
    \ - min) / 2;\n    long mid28 = mid27 + (max - min) / 2;\n    long mid29 = mid28\
    \ + (max - min) / 2;\n    long mid30 = mid29 + (max - min) / 2;\n    long mid31\
    \ = mid30 + (max - min) / 2;\n    long mid32 = mid31 + (max - min) / 2;\n    long\
    \ mid33 = mid32 + (max - min) / 2;\n    long mid34 = mid33 + (max - min) / 2;\n\
    \    long mid35 = mid34 + (max - min) / 2;\n    long mid36 = mid35 + (max - min)\
    \ / 2;\n    long mid37 = mid36 + (max - min) / 2;\n    long mid38 = mid37", " \
    \   std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    long mid\
    \ = min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n\
    \            result.push_back(i);\n        } else if (i > mid) {\n           \
    \ result.push_back(mid);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            i = min;\n    \
    \    }\n        if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    std::vector<long>\
    \ result;\n    long mid = (min + max) / 2;\n    long mid2 = mid / 2;\n    long\
    \ mid3 = mid2 / 2;\n    long mid4 = mid3 / 2;\n    long mid5 = mid4 / 2;\n   \
    \ long mid6 = mid5 / 2;\n    long mid7 = mid6 / 2;\n    long mid8 = mid7 / 2;\n\
    \    long mid9 = mid8 / 2;\n    long mid10 = mid9 / 2;\n    long mid11 = mid10\
    \ / 2;\n    long mid12 = mid11 / 2;\n    long mid13 = mid12 / 2;\n    long mid14\
    \ = mid13 / 2;\n    long mid15 = mid14 / 2;\n    long mid16 = mid15 / 2;\n   \
    \ long mid17 = mid16 / 2;\n    long mid18 = mid17 / 2;\n    long mid19 = mid18\
    \ / 2;\n    long mid20 = mid19 / 2;\n    long mid21 = mid20 / 2;\n    long mid22\
    \ = mid21 / 2;\n    long mid23 = mid22 / 2;\n    long mid24 = mid23 / 2;\n   \
    \ long mid25 = mid24 / 2;\n    long mid26 = mid25 / 2;\n    long mid27 = mid26\
    \ / 2;\n    long mid28 = mid27 / 2;\n    long mid29 = mid28 / 2;\n    long mid30\
    \ = mid29 / 2;\n    long mid31 = mid30 / 2;\n    long mid32 = mid31 / 2;\n   \
    \ long mid33 = mid32 / 2;\n    long mid34 = mid33 / 2;\n    long mid35 = mid34\
    \ / 2;\n    long mid36 = mid35 / 2;\n    long mid37 = mid36 / 2;\n    long mid38\
    \ = mid37 / 2;\n    long mid39 = mid38 / 2;\n    long mid40 = mid39 / 2;\n   \
    \ long mid41 = mid40 / 2;\n    long mid42 = mid41 / 2;\n    long mid43 = mid42\
    \ / 2;\n    long mid44 = mid43 / 2;\n    long mid45 = mid44 / 2;\n    long mid46\
    \ = mid45 / 2;\n    long mid47 = mid46 / 2;\n    long mid48 = mid47 / 2;\n   \
    \ long mid49 = ", "    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\n\
    \        if (i > max) {\n            res.push_back(i);\n        }\n    }\n   \
    \ res.push_back(min);\n    return res;", "    long min = lst.front();\n    long\
    \ max = lst.back();\n    long mid;\n    std::vector<long> res;\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i = min + 1; i <= max; i++) {\n      \
    \  mid = (min + max) / 2;\n        if (mid < i) {\n            res.push_back(mid);\n\
    \            min = mid;\n        } else {\n            max = mid;\n        }\n\
    \    }\n    res.push_back(max);\n    return res;", "    std::vector<long> sorted_lst;\n\
    \    long min_val = std::numeric_limits<long>::min();\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min_val) {\n            sorted_lst.push_back(i);\n\
    \        } else if (i > max_val) {\n            sorted_lst.push_back(max_val);\n\
    \        } else {\n            sorted_lst.push_back(min_val);\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;", "    long min = lst.front();\n   \
    \ long max = lst.back();\n    long mid = min + (max - min) / 2;\n    std::vector<long>\
    \ result;\n    long cur = min;\n    while (cur < max) {\n        result.push_back(cur);\n\
    \        cur += mid;\n    }\n    while (cur > min) {\n        result.push_back(cur);\n\
    \        cur -= mid;\n    }\n    return result;", "    std::vector<long> lst2;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    lst2.push_back(min);\n \
    \   lst2.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           lst2.push_back(i);\n        }\n        if (i > max) {\n          \
    \  lst2.push_back(i);\n        }\n    }\n    return lst2;", "    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    std::vector<long> result;\n    for (long i = min; i <= max;\
    \ i++) {\n        result.push_back(i);\n    }\n    return result;", "    long\
    \ min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    std::vector<long> result;\n    for (long i = min; i <= max;\
    \ i++) {\n        result.push_back(i);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> res;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long mid2 = mid + (max - min) / 2;\n\
    \    long mid3 = mid2 + (max - min) / 2;\n    long mid4 = mid3 + (max - min) /\
    \ 2;\n    long mid5 = mid4 + (max - min) / 2;\n    long mid6 = mid5 + (max - min)\
    \ / 2;\n    long mid7 = mid6 + (max - min) / 2;\n    long mid8 = mid7 + (max -\
    \ min) / 2;\n    long mid9 = mid8 + (max - min) / 2;\n    long mid10 = mid9 +\
    \ (max - min) / 2;\n    long mid11 = mid10 + (max - min) / 2;\n    long mid12\
    \ = mid11 + (max - min) / 2;\n    long mid13 = mid12 + (max - min) / 2;\n    long\
    \ mid14 = mid13 + (max - min) / 2;\n    long mid15 = mid14 + (max - min) / 2;\n\
    \    long mid16 = mid15 + (max - min) / 2;\n    long mid17 = mid16 + (max - min)\
    \ / 2;\n    long mid18 = mid17 + (max - min) / 2;\n    long mid19 = mid18 + (max\
    \ - min) / 2;\n    long mid20 = mid19 + (max - min) / 2;\n    long mid21 = mid20\
    \ + (max - min) / 2;\n    long mid22 = mid21 + (max - min) / 2;\n    long mid23\
    \ = mid22 + (max - min) / 2;\n    long mid24 = mid23 + (max - min) / 2;\n    long\
    \ mid25 = mid24 + (max - min) / 2;\n    long mid26 = mid25 + (max - min) / 2;\n\
    \    long mid27 = mid26 + (max - min) / 2;\n    long mid28 = mid27 + (max - min)\
    \ / 2;\n    long mid29 = mid28 + (max - min) / 2;\n    long mid30 = mid29 + (max\
    \ - min) / 2;\n    long mid31 = mid30 + (max - min) / 2;\n    long mid32 = mid31\
    \ + (max - min) / 2;\n    long mid33 = mid32 + (max - min) / 2;\n    long mid34\
    \ = mid33 + (max - min) / 2;\n    long mid35 = mid34 + (max - min) / 2;\n    long\
    \ mid36 = mid35 + (max - min) / 2;\n    long mid37 = mid36 + (max - min) / 2;\n\
    \    long mid38 = mid37", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> sorted_lst;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i == min) {\n        \
    \    sorted_lst.push_back(min);\n        } else if (i == max) {\n            sorted_lst.push_back(max);\n\
    \        } else {\n            sorted_lst.push_back(i);\n        }\n    }\n  \
    \  return sorted_lst;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    std::vector<long> res;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    long mid;\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            mid = min;\n            min\
    \ = i;\n        } else if (i > max) {\n            mid = max;\n            max\
    \ = i;\n        } else {\n            mid = i;\n        }\n        res.push_back(mid);\n\
    \    }\n    return res;", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid\
    \ / 2;\n    long mid3 = mid2 / 2;\n    long mid4 = mid3 / 2;\n    long mid5 =\
    \ mid4 / 2;\n    long mid6 = mid5 / 2;\n    long mid7 = mid6 / 2;\n    long mid8\
    \ = mid7 / 2;\n    long mid9 = mid8 / 2;\n    long mid10 = mid9 / 2;\n    long\
    \ mid11 = mid10 / 2;\n    long mid12 = mid11 / 2;\n    long mid13 = mid12 / 2;\n\
    \    long mid14 = mid13 / 2;\n    long mid15 = mid14 / 2;\n    long mid16 = mid15\
    \ / 2;\n    long mid17 = mid16 / 2;\n    long mid18 = mid17 / 2;\n    long mid19\
    \ = mid18 / 2;\n    long mid20 = mid19 / 2;\n    long mid21 = mid20 / 2;\n   \
    \ long mid22 = mid21 / 2;\n    long mid23 = mid22 / 2;\n    long mid24 = mid23\
    \ / 2;\n    long mid25 = mid24 / 2;\n    long mid26 = mid25 / 2;\n    long mid27\
    \ = mid26 / 2;\n    long mid28 = mid27 / 2;\n    long mid29 = mid28 / 2;\n   \
    \ long mid30 = mid29 / 2;\n    long mid31 = mid30 / 2;\n    long mid32 = mid31\
    \ / 2;\n    long mid33 = mid32 / 2;\n    long mid34 = mid33 / 2;\n    long mid35\
    \ = mid34 / 2;\n    long mid36 = mid35 / 2;\n    long mid37 = mid36 / 2;\n   \
    \ long mid38 = mid37 / 2;\n    long mid39 = mid38 / 2;\n    long mid40 = mid39\
    \ / 2;\n    long mid41 = mid40 / 2;\n    long mid42 = mid41 / 2;\n    long mid43\
    \ = mid42 / 2;\n    long mid44 = mid43 / 2;\n    long mid45 = mid44 / 2;\n   \
    \ long mid46 = mid45 / 2;\n    long mid47 = mid46 / 2;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n \
    \   }\n    res.push_back(min);\n    res.push_back(max);\n    for (long i : lst)\
    \ {\n        if (i == min) continue;\n        if (i == max) res.push_back(i);\n\
    \        if (i < min) res.push_back(i);\n        if (i > max) res.push_back(i);\n\
    \    }\n    return res;", "    // Write your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    long mid;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n\
    \        if (mid > max) {\n            max = mid;\n        } else if (mid < min)\
    \ {\n            min = mid;\n        } else {\n            result.push_back(mid);\n\
    \        }\n    }\n    return result;", "    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) min = i;\n\
    \        if (i > max) max = i;\n    }\n    std::vector<long> result;\n    long\
    \ mid = (min + max) / 2;\n    for (long i : lst) {\n        if (i < mid) result.push_back(i);\n\
    \        else if (i > mid) result.push_back(mid);\n        else result.push_back(min\
    \ + (i - mid));\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    long mid = min + (max -\
    \ min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n\
    \        } else if (i > mid) {\n            result.push_back(max - i);\n     \
    \   } else {\n            result.push_back(min);\n        }\n    }\n    return\
    \ result;", "    long min = lst.front();\n    long max = lst.back();\n    for\
    \ (long i : lst) {\n        if (i < min) min = i;\n        if (i > max) max =\
    \ i;\n    }\n    std::vector<long> result;\n    for (long i = min; i <= max; i++)\
    \ {\n        result.push_back(i);\n    }\n    for (long i = max; i >= min; i--)\
    \ {\n        result.push_back(i);\n    }\n    return result;", "    std::vector<long>\
    \ sorted_lst;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \    long max_val = *std::max_element(lst.begin(), lst.end());\n    long mid =\
    \ (min_val + max_val) / 2;\n    long mid2 = max_val;\n    long mid3 = min_val;\n\
    \    long mid4 = mid;\n    long mid5 = mid;\n    long mid6 = mid;\n    long mid7\
    \ = mid;\n    long mid8 = mid;\n    long mid9 = mid;\n    long mid10 = mid;\n\
    \    long mid11 = mid;\n    long mid12 = mid;\n    long mid13 = mid;\n    long\
    \ mid14 = mid;\n    long mid15 = mid;\n    long mid16 = mid;\n    long mid17 =\
    \ mid;\n    long mid18 = mid;\n    long mid19 = mid;\n    long mid20 = mid;\n\
    \    long mid21 = mid;\n    long mid22 = mid;\n    long mid23 = mid;\n    long\
    \ mid24 = mid;\n    long mid25 = mid;\n    long mid26 = mid;\n    long mid27 =\
    \ mid;\n    long mid28 = mid;\n    long mid29 = mid;\n    long mid30 = mid;\n\
    \    long mid31 = mid;\n    long mid32 = mid;\n    long mid33 = mid;\n    long\
    \ mid34 = mid;\n    long mid35 = mid;\n    long mid36 = mid;\n    long mid37 =\
    \ mid;\n    long mid38 = mid;\n    long mid39 = mid;\n    long mid40 = mid;\n\
    \    long mid41 = mid;\n    long mid42 = mid;\n    long mid43 = mid;\n    long\
    \ mid44 = mid;\n    long mid45 = mid;\n    long mid46 = mid;\n    long mid47 =\
    \ mid;\n    long mid48 = mid;\n    long mid49 = mid;\n    long mid50 = mid;\n\
    \    long mid51 = mid;\n    long mid52 = mid;\n    long mid53 = mid;\n    long\
    \ mid54 = mid;\n    long mid55 = mid;\n    long mid56 = mid;\n    long mid57 =\
    \ mid;\n    long mid58 = mid;\n    long mid59 = mid;\n    long mid60 = ", "  \
    \  std::vector<long> res;\n    long min = *std::min_element(lst.begin(), lst.end());\n\
    \    long max = *std::max_element(lst.begin(), lst.end());\n    long mid = min\
    \ + (max - min) / 2;\n    long left = mid;\n    long right = mid;\n    long mid2\
    \ = mid + 1;\n    long mid3 = mid + 2;\n    long mid4 = mid + 3;\n    long mid5\
    \ = mid + 4;\n    long mid6 = mid + 5;\n    long mid7 = mid + 6;\n    long mid8\
    \ = mid + 7;\n    long mid9 = mid + 8;\n    long mid10 = mid + 9;\n    long mid11\
    \ = mid + 10;\n    long mid12 = mid + 11;\n    long mid13 = mid + 12;\n    long\
    \ mid14 = mid + 13;\n    long mid15 = mid + 14;\n    long mid16 = mid + 15;\n\
    \    long mid17 = mid + 16;\n    long mid18 = mid + 17;\n    long mid19 = mid\
    \ + 18;\n    long mid20 = mid + 19;\n    long mid21 = mid + 20;\n    long mid22\
    \ = mid + 21;\n    long mid23 = mid + 22;\n    long mid24 = mid + 23;\n    long\
    \ mid25 = mid + 24;\n    long mid26 = mid + 25;\n    long mid27 = mid + 26;\n\
    \    long mid28 = mid + 27;\n    long mid29 = mid + 28;\n    long mid30 = mid\
    \ + 29;\n    long mid31 = mid + 30;\n    long mid32 = mid + 31;\n    long mid33\
    \ = mid + 32;\n    long mid34 = mid + 33;\n    long mid35 = mid + 34;\n    long\
    \ mid36 = mid + 35;\n    long mid37 = mid + 36;\n    long mid38 = mid + 37;\n\
    \    long mid39 = mid + 38;\n    long mid40 = mid + 39;\n    long mid41 = mid\
    \ + 40;\n    long mid42 = mid + 41;\n    long mid43 = mid + 42;\n    long mid44\
    \ = mid + 43;\n    long mid45 = mid + 44;\n    long mid46 = mid + 45;\n    long\
    \ mid47 = mid + 46;\n    long mid48 = mid + 47;\n    long mid49 = mid + 48;\n\
    \    long mid50 = mid + 49;\n    long mid51 = mid + 50;\n    long mid52 = mid\
    \ + 51;\n    long mid", "    std::vector<long> ret;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    for (long i : lst) {\n\
    \        if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            ret.push_back(min);\n            min = i;\n   \
    \     }\n        if (i > max) {\n            ret.push_back(max);\n           \
    \ max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n\
    \            ret.push_back(min);\n            min = i;\n        }\n        if\
    \ (i > max) {\n            ret.push_back(max);\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            ret.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            ret.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            ret.push_back(min);\n            min = i;\n       \
    \ }\n        if (i > max) {\n            ret.push_back(max);\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           ret.push_back(min);\n            min = i;\n        }\n        if (i\
    \ > max) {\n            ret.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            ret.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            ret.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            ret.push_back(min);\n            min = i;\n       \
    \ }\n        if (i > max) {\n            ret.push_back(max);\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           ret.push_back(min);\n            min = i;\n        }\n        if (i\
    \ > max) {\n            ret.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            ret.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            ret.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            ret.push_back(min);\n            min = i;\n       \
    \ }\n        if (i > max) {\n            ret.push_back(max);\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           ret.push_back(min);\n            min = i;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> res;\n    long min\
    \ = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n\
    \    long mid3 = mid / 3;\n    long mid4 = mid / 4;\n    long mid5 = mid / 5;\n\
    \    long mid6 = mid / 6;\n    long mid7 = mid / 7;\n    long mid8 = mid / 8;\n\
    \    long mid9 = mid / 9;\n    long mid10 = mid / 10;\n    long mid11 = mid /\
    \ 11;\n    long mid12 = mid / 12;\n    long mid13 = mid / 13;\n    long mid14\
    \ = mid / 14;\n    long mid15 = mid / 15;\n    long mid16 = mid / 16;\n    long\
    \ mid17 = mid / 17;\n    long mid18 = mid / 18;\n    long mid19 = mid / 19;\n\
    \    long mid20 = mid / 20;\n    long mid21 = mid / 21;\n    long mid22 = mid\
    \ / 22;\n    long mid23 = mid / 23;\n    long mid24 = mid / 24;\n    long mid25\
    \ = mid / 25;\n    long mid26 = mid / 26;\n    long mid27 = mid / 27;\n    long\
    \ mid28 = mid / 28;\n    long mid29 = mid / 29;\n    long mid30 = mid / 30;\n\
    \    long mid31 = mid / 31;\n    long mid32 = mid / 32;\n    long mid33 = mid\
    \ / 33;\n    long mid34 = mid / 34;\n    long mid35 = mid / 35;\n    long mid36\
    \ = mid / 36;\n    long mid37 = mid / 37;\n    long mid38 = mid / 38;\n    long\
    \ mid39 = mid / 39;\n    long mid40 = mid / 40;\n    long mid41 = mid / 41;\n\
    \    long mid42 = mid / 42;\n    long mid43 = mid / 43;\n    long mid44 = mid\
    \ / 44;\n    long mid45 = mid / 45;\n    long mid46 = mid / 46;\n    long mid47\
    \ = mid / 47;\n    long mid48 = mid / 48;\n    long mid49 = m", "    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        } else\
    \ if (i == max) {\n            lst2.push_back(max);\n        } else {\n      \
    \      lst2.push_back(i);\n        }\n    }\n    return lst2;", "    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid)\
    \ {\n            result.push_back(i);\n        }\n        if (i > mid) {\n   \
    \         result.push_back(max - i);\n        }\n    }\n    result.push_back(max);\n\
    \    result.push_back(mid);\n    result.push_back(min);\n    return result;",
  "    std::vector<long> ret;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    long mid\
    \ = min + (max - min) / 2;\n    ret.push_back(min);\n    ret.push_back(mid);\n\
    \    ret.push_back(max);\n    return ret;", "    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ std::vector<long> result;\n    for (long i : lst) {\n        if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else if (i\
    \ < min) {\n            result.push_back(min);\n            min = i;\n       \
    \ } else {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    long min = lst.front();\n    long max = lst.back();\n    long mid;\n    std::vector<long>\
    \ res;\n    res.push_back(min);\n    res.push_back(max);\n    for(long i = 2;\
    \ i < lst.size(); i++) {\n        mid = (min + max) / 2;\n        if(lst[i] >\
    \ mid) {\n            max = mid;\n        } else {\n            min = mid;\n \
    \       }\n        res.push_back(min);\n        res.push_back(max);\n    }\n \
    \   return res;", "    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            long temp = min;\n         \
    \   min = i;\n            while (min != temp) {\n                res.push_back(temp);\n\
    \                temp = temp * 2;\n            }\n        }\n        if (i > max)\
    \ {\n            long temp = max;\n            max = i;\n            while (max\
    \ != temp) {\n                res.push_back(temp);\n                temp = temp\
    \ / 2;\n            }\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    return res;", "    std::vector<long> sorted_lst;\n    sorted_lst.push_back(lst[0]);\n\
    \    sorted_lst.push_back(lst[lst.size()-1]);\n    for(long i=1;i<lst.size();i++){\n\
    \        if(sorted_lst[0]>sorted_lst[i]){\n            sorted_lst.push_back(sorted_lst[0]);\n\
    \            sorted_lst.push_back(sorted_lst[i]);\n        }\n        else{\n\
    \            sorted_lst.push_back(sorted_lst[i]);\n            sorted_lst.push_back(sorted_lst[0]);\n\
    \        }\n    }\n    return sorted_lst;", "    std::vector<long> sorted_lst;\n\
    \    long min_val = *std::min_element(lst.begin(), lst.end());\n    long max_val\
    \ = *std::max_element(lst.begin(), lst.end());\n    long min_val_2 = *std::min_element(lst.begin()\
    \ + 1, lst.end());\n    long max_val_2 = *std::max_element(lst.begin() + 1, lst.end());\n\
    \    long min_val_3 = *std::min_element(lst.begin() + 2, lst.end());\n    long\
    \ max_val_3 = *std::max_element(lst.begin() + 2, lst.end());\n    long min_val_4\
    \ = *std::min_element(lst.begin() + 3, lst.end());\n    long max_val_4 = *std::max_element(lst.begin()\
    \ + 3, lst.end());\n    long min_val_5 = *std::min_element(lst.begin() + 4, lst.end());\n\
    \    long max_val_5 = *std::max_element(lst.begin() + 4, lst.end());\n    long\
    \ min_val_6 = *std::min_element(lst.begin() + 5, lst.end());\n    long max_val_6\
    \ = *std::max_element(lst.begin() + 5, lst.end());\n    long min_val_7 = *std::min_element(lst.begin()\
    \ + 6, lst.end());\n    long max_val_7 = *std::max_element(lst.begin() + 6, lst.end());\n\
    \    long min_val_8 = *std::min_element(lst.begin() + 7, lst.end());\n    long\
    \ max_val_8 = *std::max_element(lst.begin() + 7, lst.end());\n    long min_val_9\
    \ = *std::min_element(lst.begin() + 8, lst.end());\n    long max_val_9 = *std::max_element(lst.begin()\
    \ + 8, lst.end());\n    long min_val_10 = *std::min_element(lst.begin() + 9, lst.end());\n\
    \    long max_val_10 = *std::max_element(lst.begin() + 9, lst.end());\n    long\
    \ min_val_11 = *std::min_element(lst.begin() + 10, lst.end());\n    long max_val_11\
    \ = *std::max_element(lst.begin() + 10, lst.end());\n    long min_val_12 = *std::min_element(lst.begin()\
    \ + 11, lst.end());\n    long max_val_12 = *std::max_element(lst.begin() + 11,\
    \ lst.end());\n    long min_val_13 = *std::min_element(lst.begin() + 12, lst.end());\n\
    \    long max_val_13 = *std::max_element(lst.begin() + 12, lst.end());\n    long\
    \ min_val_14 = *std::min_element(lst.", "    std::vector<long> res;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            res.push_back(i);\n\
    \        } else if (i > max) {\n            res.push_back(i);\n        }\n   \
    \ }\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid;\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            mid = min;\n            min = i;\n        } else\
    \ if (i > max) {\n            mid = max;\n            max = i;\n        } else\
    \ {\n            mid = i;\n        }\n        res.push_back(mid);\n    }\n   \
    \ return res;", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    for (long i : lst) {\n        if (i < left) {\n  \
    \          left = i;\n        }\n        if (i > right) {\n            right =\
    \ i;\n        }\n    }\n    result.push_back(left);\n    result.push_back(mid);\n\
    \    result.push_back(right);\n    return result;", "    std::vector<long> res;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n  \
    \  res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n   \
    \         i = min;\n        }\n        if (i > max) {\n            i = max;\n\
    \        }\n        res.push_back(i);\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ res;\n    res.push_back(lst[0]);\n    res.push_back(lst[lst.size()-1]);\n  \
    \  for(long i=1;i<lst.size();i++) {\n        res.push_back(lst[i]);\n        res.push_back(lst[i-1]);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\
    \ else if (i > max) {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n    for (long\
    \ i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    std::vector<long> lst2;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            lst2.push_back(min);\n        } else if (i ==\
    \ max) {\n            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;", "    std::vector<long> result;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    long mid;\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    mid = (min + max) /\
    \ 2;\n    result.push_back(min);\n    result.push_back(mid);\n    result.push_back(max);\n\
    \    return result;", "    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) min = i;\n        if (i > max)\
    \ max = i;\n    }\n    std::vector<long> res;\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) continue;\n        if (i > max)\
    \ break;\n        res.push_back(i);\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> lst2;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n\
    \    lst2.push_back(min);\n    lst2.push_back(mid);\n    lst2.push_back(max);\n\
    \    return lst2;", "    std::vector<long> result;\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ long mid = min + (max - min) / 2;\n    long left = mid;\n    long right = mid;\n\
    \    long mid2 = mid + 1;\n    long mid3 = mid + 2;\n    long mid4 = mid + 3;\n\
    \    long mid5 = mid + 4;\n    long mid6 = mid + 5;\n    long mid7 = mid + 6;\n\
    \    long mid8 = mid + 7;\n    long mid9 = mid + 8;\n    long mid10 = mid + 9;\n\
    \    long mid11 = mid + 10;\n    long mid12 = mid + 11;\n    long mid13 = mid\
    \ + 12;\n    long mid14 = mid + 13;\n    long mid15 = mid + 14;\n    long mid16\
    \ = mid + 15;\n    long mid17 = mid + 16;\n    long mid18 = mid + 17;\n    long\
    \ mid19 = mid + 18;\n    long mid20 = mid + 19;\n    long mid21 = mid + 20;\n\
    \    long mid22 = mid + 21;\n    long mid23 = mid + 22;\n    long mid24 = mid\
    \ + 23;\n    long mid25 = mid + 24;\n    long mid26 = mid + 25;\n    long mid27\
    \ = mid + 26;\n    long mid28 = mid + 27;\n    long mid29 = mid + 28;\n    long\
    \ mid30 = mid + 29;\n    long mid31 = mid + 30;\n    long mid32 = mid + 31;\n\
    \    long mid33 = mid + 32;\n    long mid34 = mid + 33;\n    long mid35 = mid\
    \ + 34;\n    long mid36 = mid + 35;\n    long mid37 = mid + 36;\n    long mid38\
    \ = mid + 37;\n    long mid39 = mid + 38;\n    long mid40 = mid + 39;\n    long\
    \ mid41 = mid + 40;\n    long mid42 = mid + 41;\n    long mid43 = mid + 42;\n\
    \    long mid44 = mid + 43;\n    long mid45 = mid + 44;\n    long mid46 = mid\
    \ + 45;\n    long mid47 = mid + 46;\n    long mid48 = mid + 47;\n    long mid49\
    \ = mid + 48;\n    long mid50 = mid + 49;\n    long mid51 = mid + 50;\n    long\
    \ mid52 = mid + 51;\n    long mid", "    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    long mid = min + (max - min)\
    \ / 2;\n    long temp;\n    for (long i : lst) {\n        if (i < mid) {\n   \
    \         temp = i;\n        } else if (i > mid) {\n            temp = mid;\n\
    \        } else {\n            temp = min;\n        }\n        res.push_back(temp);\n\
    \        mid = temp + (max - min) / 2;\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    // Your code here\n    std::vector<long> result;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ == min) {\n            result.push_back(min);\n        } else if (i == max)\
    \ {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> lst2;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n\
    \    for (long i : lst) {\n        if (i < mid) {\n            lst2.push_back(i);\n\
    \        } else if (i > mid) {\n            lst2.push_back(max - i);\n       \
    \ } else {\n            lst2.push_back(min);\n        }\n    }\n    return lst2;",
  "    std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            result.push_back(min);\n  \
    \      } else if (i == max) {\n            result.push_back(max);\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;"]
stop_tokens:
- "\n}"
