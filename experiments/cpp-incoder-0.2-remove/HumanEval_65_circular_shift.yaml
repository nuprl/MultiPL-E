name: HumanEval_65_circular_shift
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
  \ of the integer x, shift the digits right by shift\n// and return the result as\
  \ a string.\n// If shift > number of digits, return digits reversed.\nstd::string\
  \ circular_shift(long x, long shift) {\n"
tests: "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
  \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
  \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
  \ (101)) == (\"11\"));\n}\n"
completions: ["    std::string ans = \"\";\n    long temp = x;\n    long count = 0;\n\
    \    while (temp != 0) {\n        temp = temp / 10;\n        count++;\n    }\n\
    \    long rem = count % shift;\n    long rem1 = shift - rem;\n    long rem2 =\
    \ shift - rem - 1;\n    while (count > 0) {\n        ans += temp % 10;\n     \
    \   temp = temp / 10;\n        count--;\n    }\n    if (rem > 0) {\n        ans\
    \ += temp % 10;\n    }\n    if (rem > 1) {\n        ans += temp % 10;\n    }\n\
    \    if (rem > 2) {\n        ans += temp % 10;\n    }\n    if (rem > 3) {\n  \
    \      ans += temp % 10;\n    }\n    if (rem > 4) {\n        ans += temp % 10;\n\
    \    }\n    if (rem > 5) {\n        ans += temp % 10;\n    }\n    if (rem > 6)\
    \ {\n        ans += temp % 10;\n    }\n    if (rem > 7) {\n        ans += temp\
    \ % 10;\n    }\n    if (rem > 8) {\n        ans += temp % 10;\n    }\n    if (rem\
    \ > 9) {\n        ans += temp % 10;\n    }\n    if (rem > 10) {\n        ans +=\
    \ temp % 10;\n    }\n    if (rem > 11) {\n        ans += temp % 10;\n    }\n \
    \   if (rem > 12) {\n        ans += temp % 10;\n    }\n    if (rem > 13) {\n \
    \       ans += temp % 10;\n    }\n    if (rem > 14) {\n        ans += temp % 10;\n\
    \    }\n    if (rem > 15) {\n        ans += temp % 10;\n    }\n    if (rem > 16)\
    \ {\n        ans += temp % 10;\n    }\n    if (rem > 17) {\n        ans += temp\
    \ % 10;\n    }\n    if (rem > 18) {\n        ans += temp % 10;\n    }\n    if\
    \ (rem > 19) {\n        ans += temp % 10;\n    }\n    if (rem > 20) {\n      \
    \  ans += temp % 10;\n    }\n    if (rem > 21) {\n        ans += temp % 10;\n\
    \    }\n    if (rem > 22) {\n        ans += temp % 10;\n    }\n    if (rem > 23)\
    \ {\n        ans += temp % 10;\n    }\n    if (rem > 24) {\n        ans += temp\
    \ % 10;\n    }\n    if (rem > 25) {\n        ans += temp % 10;\n    }\n    if\
    \ (rem > 26) {\n        ans += temp % 10;\n    }\n    if (rem > 27) {\n      \
    \  ans += temp % 10;\n    }\n    if (rem > 28) {\n        ans += temp % 10;\n\
    \    }\n    if (rem > ", "    std::string ans;\n    long temp = x;\n    long temp2\
    \ = x;\n    long temp3 = x;\n    long temp4 = x;\n    long temp5 = x;\n    long\
    \ temp6 = x;\n    long temp7 = x;\n    long temp8 = x;\n    long temp9 = x;\n\
    \    long temp10 = x;\n    long temp11 = x;\n    long temp12 = x;\n    long temp13\
    \ = x;\n    long temp14 = x;\n    long temp15 = x;\n    long temp16 = x;\n   \
    \ long temp17 = x;\n    long temp18 = x;\n    long temp19 = x;\n    long temp20\
    \ = x;\n    long temp21 = x;\n    long temp22 = x;\n    long temp23 = x;\n   \
    \ long temp24 = x;\n    long temp25 = x;\n    long temp26 = x;\n    long temp27\
    \ = x;\n    long temp28 = x;\n    long temp29 = x;\n    long temp30 = x;\n   \
    \ long temp31 = x;\n    long temp32 = x;\n    long temp33 = x;\n    long temp34\
    \ = x;\n    long temp35 = x;\n    long temp36 = x;\n    long temp37 = x;\n   \
    \ long temp38 = x;\n    long temp39 = x;\n    long temp40 = x;\n    long temp41\
    \ = x;\n    long temp42 = x;\n    long temp43 = x;\n    long temp44 = x;\n   \
    \ long temp45 = x;\n    long temp46 = x;\n    long temp47 = x;\n    long temp48\
    \ = x;\n    long temp49 = x;\n    long temp50 = x;\n    long temp51 = x;\n   \
    \ long temp52 = x;\n    long temp53 = x;\n    long temp54 = x;\n    long temp55\
    \ = x;\n    long temp56 = x;\n    long temp57 = x;\n    long temp58 = x;\n   \
    \ long temp59 = x;\n    long temp60 = x;\n    long temp61 = x;\n    long temp62\
    \ = x;\n    long temp63 = x;\n    long temp64 = x;\n    long temp65 = x;\n   \
    \ long temp66 = x;\n    long temp67 = x;\n    long temp68 = x;\n    long temp69\
    \ = x;\n    long temp70 = x;\n    long temp71 = x;\n    long temp72 = x;\n   \
    \ long temp73 = x;\n    long temp74 = x;\n    long ", "    std::string s = std::to_string(x);\n\
    \    std::string result = \"\";\n    long n = s.size();\n    long i = 0;\n   \
    \ while (i < n) {\n        result += s.at(i);\n        i += shift;\n    }\n  \
    \  if (shift > n) {\n        result += s.rbegin();\n    }\n    return result;",
  "    std::string ans = \"\";\n    long temp = x;\n    long temp2 = x;\n    long\
    \ temp3 = x;\n    long temp4 = x;\n    long temp5 = x;\n    long temp6 = x;\n\
    \    long temp7 = x;\n    long temp8 = x;\n    long temp9 = x;\n    long temp10\
    \ = x;\n    long temp11 = x;\n    long temp12 = x;\n    long temp13 = x;\n   \
    \ long temp14 = x;\n    long temp15 = x;\n    long temp16 = x;\n    long temp17\
    \ = x;\n    long temp18 = x;\n    long temp19 = x;\n    long temp20 = x;\n   \
    \ long temp21 = x;\n    long temp22 = x;\n    long temp23 = x;\n    long temp24\
    \ = x;\n    long temp25 = x;\n    long temp26 = x;\n    long temp27 = x;\n   \
    \ long temp28 = x;\n    long temp29 = x;\n    long temp30 = x;\n    long temp31\
    \ = x;\n    long temp32 = x;\n    long temp33 = x;\n    long temp34 = x;\n   \
    \ long temp35 = x;\n    long temp36 = x;\n    long temp37 = x;\n    long temp38\
    \ = x;\n    long temp39 = x;\n    long temp40 = x;\n    long temp41 = x;\n   \
    \ long temp42 = x;\n    long temp43 = x;\n    long temp44 = x;\n    long temp45\
    \ = x;\n    long temp46 = x;\n    long temp47 = x;\n    long temp48 = x;\n   \
    \ long temp49 = x;\n    long temp50 = x;\n    long temp51 = x;\n    long temp52\
    \ = x;\n    long temp53 = x;\n    long temp54 = x;\n    long temp55 = x;\n   \
    \ long temp56 = x;\n    long temp57 = x;\n    long temp58 = x;\n    long temp59\
    \ = x;\n    long temp60 = x;\n    long temp61 = x;\n    long temp62 = x;\n   \
    \ long temp63 = x;\n    long temp64 = x;\n    long temp65 = x;\n    long temp66\
    \ = x;\n    long temp67 = x;\n    long temp68 = x;\n    long temp69 = x;\n   \
    \ long temp70 = x;\n    long temp71 = x;\n    long temp72 = x;\n    long temp73\
    \ = x;\n    long temp74 = x;\n    ", "    std::string ans = \"\";\n    long temp\
    \ = x;\n    long carry = 0;\n    while (shift > 0) {\n        temp = temp / 10;\n\
    \        carry = temp % 10;\n        ans = std::to_string(temp) + std::to_string(carry)\
    \ + ans;\n        shift -= 1;\n    }\n    if (shift > 0) {\n        temp = temp\
    \ / 10;\n        ans = std::to_string(temp) + ans;\n    }\n    return ans;", " \
    \   std::string s = std::to_string(x);\n    std::string result = \"\";\n    long\
    \ carry = 0;\n    long digit = 0;\n    long digits = 0;\n    long i = 0;\n   \
    \ while (i < s.size()) {\n        digit = std::stoi(s.substr(i, 1));\n       \
    \ digits += digit;\n        result += std::to_string(digit);\n        carry =\
    \ digit;\n        i += 1;\n    }\n    if (shift > digits) {\n        shift = digits;\n\
    \    }\n    std::string temp = result;\n    while (shift > 0) {\n        digit\
    \ = std::stoi(temp.substr(0, 1));\n        shift -= digit;\n        temp = temp.substr(1);\n\
    \        result += std::to_string(digit);\n    }\n    if (carry > 0) {\n     \
    \   result += std::to_string(carry);\n    }\n    return result;", "    std::string\
    \ ans = \"\";\n    long digits = 1;\n    long remainder = 0;\n    long carry =\
    \ 0;\n    long i = 1;\n    long j = 0;\n    while (shift > digits) {\n       \
    \ digits = digits;\n        shift -= digits;\n    }\n    while (shift > 0) {\n\
    \        remainder = x % 10;\n        carry = 1;\n        x = x / 10;\n      \
    \  while (i < digits) {\n            ans += (char) (remainder + carry);\n    \
    \        i++;\n            carry = 0;\n        }\n        ans += (char) (remainder\
    \ + carry);\n        shift -= digits;\n    }\n    return ans;", "    std::string\
    \ ans;\n    long remain = x;\n    long digit = 0;\n    while (shift > 0) {\n \
    \       remain = remain / 10;\n        digit = digit * 10 + remain % 10;\n   \
    \     shift -= 1;\n    }\n    ans = std::to_string(digit);\n    while (shift >\
    \ 0) {\n        remain = remain / 10;\n        ans = std::to_string(digit * 10\
    \ + remain % 10) + ans;\n        shift -= 1;\n    }\n    return ans;", "    std::string\
    \ ans;\n    long remain = x;\n    long carry = 0;\n    long digit = 0;\n    long\
    \ digits = 0;\n    long i = 0;\n    long j = shift - 1;\n    long k = 0;\n   \
    \ while (shift > 0) {\n        digit = remain % 10;\n        remain = remain /\
    \ 10;\n        digits = digits;\n        ans.push_back(digit);\n        carry\
    \ = (carry + digit) * 10 + carry;\n        shift -= 1;\n    }\n    if (shift >\
    \ 0) {\n        digits = digits;\n        ans.push_back(carry % 10);\n       \
    \ carry = (carry + carry) / 10;\n        shift -= 1;\n    }\n    while (i < j)\
    \ {\n        ans.push_back(carry % 10);\n        carry = (carry + carry) / 10;\n\
    \        i += 1;\n    }\n    while (i < j) {\n        ans.push_back(remain % 10);\n\
    \        remain = remain / 10;\n        i += 1;\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    long digit = x;\n    long remainder = x;\n   \
    \ long i = 0;\n    while (shift > 0) {\n        digit = remainder % 10;\n    \
    \    remainder = remainder / 10;\n        ans = std::to_string(digit) + ans;\n\
    \        i++;\n        shift -= 1;\n    }\n    while (i < shift) {\n        ans\
    \ = std::to_string(remainder) + ans;\n        i++;\n    }\n    return ans;", " \
    \   std::string ans;\n    long digit = x;\n    long carry = 0;\n    while (shift\
    \ > 0)\n    {\n        digit = digit * 10 + carry;\n        carry = 0;\n     \
    \   if (digit >= 10)\n        {\n            digit = digit % 10;\n           \
    \ carry = 1;\n        }\n        ans.push_back(digit);\n        shift -= 1;\n\
    \    }\n    if (carry)\n        ans.push_back(carry);\n    return ans;", "   \
    \ std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (shift\
    \ > 0) {\n        ans += std::to_string(m % 10);\n        m /= 10;\n        shift\
    \ -= 1;\n    }\n    while (n > 1) {\n        ans += std::to_string(n % 10);\n\
    \        n /= 10;\n    }\n    return ans;", "    std::string ans = \"\";\n   \
    \ long n = x;\n    long carry = 0;\n    long i = 0;\n    while (n != 0) {\n  \
    \      long digit = n % 10;\n        ans += std::to_string(digit);\n        carry\
    \ = digit * 10 + carry;\n        n /= 10;\n        i++;\n    }\n    if (shift\
    \ > i) {\n        ans = ans.substr(0, i - shift);\n    }\n    if (shift < i) {\n\
    \        ans = ans.substr(0, shift);\n    }\n    ans += std::to_string(carry);\n\
    \    return ans;", "    std::string ans;\n    long remainder;\n    long digit\
    \ = x;\n    long digits = 1;\n    while (shift > digits) {\n        shift -= digits;\n\
    \        digits++;\n    }\n    while (shift > 0) {\n        remainder = digit\
    \ % 10;\n        digit /= 10;\n        ans.push_back(remainder);\n        shift--;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long remain = x;\n\
    \    long carry = 0;\n    while (shift > 0) {\n        remain = remain >> 1;\n\
    \        carry = remain & 1;\n        ans = to_string(carry) + ans;\n        remain\
    \ = x;\n    }\n    while (shift < 0) {\n        remain = remain << 1;\n      \
    \  carry = remain & 1;\n        ans = to_string(carry) + ans;\n        remain\
    \ = x;\n    }\n    return ans;", "    std::string ans;\n    long digit = x;\n\
    \    long carry = 0;\n    while (shift > 0) {\n        digit = digit * 10 + carry;\n\
    \        carry = digit / 10;\n        digit = digit % 10;\n        ans.push_back((char)('0'\
    \ + digit));\n        shift -= 1;\n    }\n    if (shift > 0)\n        ans.insert(ans.size()\
    \ - 1, (char) ('0' + carry));\n    return ans;", "    std::string ans = \"\";\n\
    \    long temp = x;\n    long carry = 0;\n    while (shift > 0) {\n        temp\
    \ = temp / 10;\n        ans = std::to_string(temp) + ans;\n        shift -= 1;\n\
    \    }\n    while (shift < 0) {\n        temp = temp * 10;\n        ans = std::to_string(temp)\
    \ + ans;\n        shift += 1;\n    }\n    if (shift > 0)\n        ans = std::to_string(temp)\
    \ + ans;\n    return ans;", "    std::string ans;\n    long n = x;\n    long m\
    \ = 1;\n    while (shift > 0) {\n        ans += std::to_string(m % 10);\n    \
    \    m /= 10;\n        shift -= 1;\n    }\n    while (shift < 0) {\n        ans\
    \ += std::to_string((n % 10) + (m % 10));\n        n /= 10;\n        shift +=\
    \ 1;\n    }\n    ans += std::to_string(n);\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <= shift) {\n  \
    \      long r = n >> m;\n        ans += std::to_string(r);\n        n -= r;\n\
    \        m += 1;\n    }\n    ans += std::to_string(n);\n    return ans;", "  \
    \  std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n !=\
    \ 0) {\n        long r = n / 10;\n        long t = n % 10;\n        ans = std::to_string(t)\
    \ + ans;\n        n = r;\n        m *= 10;\n    }\n    long r = shift;\n    while\
    \ (m != 0) {\n        long t = m % 10;\n        ans = std::to_string(t) + ans;\n\
    \        m /= 10;\n        r *= 10;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long temp = 0;\n    long remainder = 0;\n    long digit = x;\n\
    \    long i = 0;\n    while (digit > 0) {\n        remainder = digit % 10;\n \
    \       digit = digit / 10;\n        temp = temp * 10 + remainder;\n        ans\
    \ = std::to_string(temp) + ans;\n    }\n    temp = x;\n    ans = std::to_string(temp)\
    \ + ans;\n    while (shift > 0) {\n        remainder = shift % 10;\n        shift\
    \ = shift / 10;\n        temp = temp * 10 + remainder;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long n =\
    \ x;\n    while (shift > 0) {\n        long r = n / 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n %= 10;\n        shift -= 1;\n    }\n    if (shift > 0)\n \
    \       ans = std::to_string(n) + ans;\n    return ans;", "    std::string ans\
    \ = \"\";\n    long remain = x;\n    long digit = 0;\n    long i = 0;\n    long\
    \ j = shift - 1;\n    while (j >= 0) {\n        digit = remain % 10;\n       \
    \ remain = remain / 10;\n        ans = std::to_string(digit) + ans;\n        i++;\n\
    \        j--;\n    }\n    while (i >= 0) {\n        digit = remain % 10;\n   \
    \     remain = remain / 10;\n        ans = std::to_string(digit) + ans;\n    \
    \    i--;\n    }\n    return ans;", "    std::string ans = \"\";\n    long digit\
    \ = x;\n    while (shift > 0)\n    {\n        digit = digit / 10;\n        ans\
    \ = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    while (shift\
    \ < 0)\n    {\n        digit = digit * 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift += 1;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    long n = x;\n    while (shift > 0) {\n        long tmp = n >> shift;\n\
    \        ans = std::to_string(tmp) + ans;\n        shift -= tmp;\n        n =\
    \ tmp;\n    }\n    return ans;", "    std::string ans = \"\";\n    long remainder\
    \ = x % 10;\n    long digit = x / 10;\n    long digits = shift % 10;\n    long\
    \ digits_remainder = shift / 10;\n    long digits_remainder_digit = digits_remainder\
    \ % 10;\n    long digits_remainder_digits = digits_remainder / 10;\n    long digits_remainder_digits_digit\
    \ = digits_remainder_digits % 10;\n    long digits_remainder_digits_digits = digits_remainder_digits\
    \ / 10;\n    long digits_remainder_digits_digits_digit = digits_remainder_digits_digits\
    \ % 10;\n    long digits_remainder_digits_digits_digits = digits_remainder_digits_digits\
    \ / 10;\n    long digits_remainder_digits_digits_digits_digit = digits_remainder_digits_digits_digits\
    \ % 10;\n    long digits_remainder_digits_digits_digits_digits = digits_remainder_digits_digits_digits\
    \ / 10;\n    long digits_remainder_digits_digits_digits_digits_digit = digits_remainder_digits_digits_digits_digits\
    \ % 10;\n    long digits_remainder_digits_digits_digits_digits_digits = digits_remainder_digits_digits_digits_digits\
    \ / 10;\n    long digits_remainder_digits_digits_digits_digits_digits_digit =\
    \ digits_remainder_digits_digits_digits_digits_digits % 10;\n    long digits_remainder_digits_digits_digits_digits_digits_digits\
    \ = digits_remainder_digits_digits_digits_digits_digits / 10;\n    long digits_remainder_digits_digits_digits_digits_digits_digits_digit\
    \ = digits_remainder_digits_digits_digits_digits_digits_digits % 10;\n    long\
    \ digits_remainder_digits_digits_digits_digits_digits_digits_digits = digits_remainder_digits_digits_digits_digits_digits_digits\
    \ / 10;\n    long digits_remainder_digits_digits_digits_digits_digits_digits_digits_digit\
    \ = digits_remainder_digits_digits_digits_digits_digits_digits_digits % 10;\n\
    \    long digits_remainder_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = digits_remainder_digits_digits_digits_digits_digits_digits_digits / 10;\n\
    \    long digits_remainder_digits_digits_digits_digits_digits_digits_digits_digits_digit",
  "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0) {\n       \
    \ long r = n / 10;\n        ans += (r % 10) + \"\";\n        n /= 10;\n      \
    \  shift -= 1;\n    }\n    while (shift < 0) {\n        long r = n / 10;\n   \
    \     ans += (r % 10) + \"\";\n        n /= 10;\n        shift += 1;\n    }\n\
    \    return ans;", "    std::string s = std::to_string(x);\n    std::string result\
    \ = s;\n    while (shift > s.size()) {\n        result += \"0\";\n        shift\
    \ -= s.size();\n    }\n    while (shift > 0) {\n        result += s[s.size() -\
    \ shift];\n        shift -= s.size();\n    }\n    return result;", "    std::string\
    \ ans = \"\";\n    long digits = 1;\n    while (shift > digits) {\n        ans\
    \ += (x % 10) + '0';\n        x /= 10;\n        digits++;\n    }\n    while (shift\
    \ > digits) {\n        ans += (x % 10) + '0';\n        x /= 10;\n        digits--;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long tmp = x;\n  \
    \  long digit;\n    long count = 0;\n    while (shift > 0) {\n        digit =\
    \ tmp % 10;\n        tmp = tmp / 10;\n        if (count < shift) {\n         \
    \   ans += digit;\n            count++;\n        } else {\n            ans +=\
    \ digit * 10;\n            count -= shift;\n        }\n    }\n    if (tmp != 0)\
    \ {\n        ans += tmp;\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    long temp = x;\n    long carry = 0;\n    while (shift > 0) {\n        temp\
    \ = temp / 10;\n        carry = (temp * 10) + carry;\n        shift--;\n    }\n\
    \    while (shift < 0) {\n        temp = temp / 10;\n        carry = (temp * 10)\
    \ + carry;\n        shift++;\n    }\n    temp = temp / 10;\n    carry = (temp\
    \ * 10) + carry;\n    ans = std::to_string(carry) + ans;\n    return ans;", " \
    \   std::string ans = \"\";\n    long digit = x;\n    long carry = 0;\n    while\
    \ (shift > 0){\n        digit = digit/10;\n        carry = digit*digit;\n    \
    \    digit = digit%10;\n        ans = std::to_string(digit) + ans + std::to_string(carry);\n\
    \        shift--;\n    }\n    ans = std::to_string(digit) + ans + std::to_string(carry);\n\
    \    return ans;", "    std::string ans = \"\";\n    long remain = x;\n    long\
    \ carry = 0;\n    long digit = 0;\n    long i = 0;\n    while (i < shift) {\n\
    \        digit = remain % 10;\n        remain = remain / 10;\n        ans += digit;\n\
    \        carry = 1;\n        if (carry > 0) {\n            ans += '0';\n     \
    \   }\n        i++;\n    }\n    if (shift > i) {\n        ans += '1';\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long temp = 0;\n    long\
    \ carry = 0;\n    while (shift > 0) {\n        temp = x % 10;\n        ans = std::to_string(temp)\
    \ + ans;\n        x = x / 10;\n        shift = shift - 1;\n    }\n    while (shift\
    \ < 0) {\n        temp = x % 10;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / 10;\n        shift = shift + 1;\n    }\n    if (shift > 0) {\n\
    \        temp = x % 10;\n        ans = std::to_string(temp) + ans;\n    }\n  \
    \  if (shift < 0) {\n        temp = x % 10;\n        ans = std::to_string(temp)\
    \ + ans;\n        carry = 1;\n    }\n    return ans + std::to_string(carry);",
  "    std::string ans = \"\";\n    long remain = x;\n    long digit = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    while (shift > i) {\n        digit = remain % 10;\n\
    \        remain = remain / 10;\n        ans = std::to_string(digit) + ans;\n \
    \       i = i + 1;\n    }\n    while (shift > j) {\n        digit = remain % 10;\n\
    \        remain = remain / 10;\n        ans = std::to_string(digit) + ans;\n \
    \       j = j + 1;\n    }\n    if (shift > i) {\n        ans = std::to_string(remain)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long digit\
    \ = x;\n    long remainder = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    while (shift > i) {\n        remainder = digit % 10;\n        ans\
    \ += remainder;\n        digit = digit / 10;\n        i++;\n    }\n    while (i\
    \ < shift) {\n        remainder = digit % 10;\n        ans += remainder;\n   \
    \     digit = digit / 10;\n        i++;\n    }\n    while (j < shift) {\n    \
    \    remainder = digit % 10;\n        ans += remainder;\n        digit = digit\
    \ / 10;\n        j++;\n    }\n    while (k < (shift - 1)) {\n        remainder\
    \ = digit % 10;\n        ans += remainder;\n        digit = digit / 10;\n    \
    \    k++;\n    }\n    return ans;", "    std::string result;\n    long remain\
    \ = x;\n    long carry = 0;\n    long digit = 0;\n    long digits = 0;\n    long\
    \ i = 0;\n    while (i < shift) {\n        digit = remain % 10;\n        remain\
    \ = remain / 10;\n        digits = digits * 10 + digit;\n        carry = (digits\
    \ > 9) ? 1 : 0;\n        result += static_cast<char>('0' + digits);\n        i++;\n\
    \    }\n    if (carry == 1) {\n        result += static_cast<char>('0' + carry);\n\
    \    }\n    return result;", "    std::string ans = \"\";\n    long carry = 0;\n\
    \    while (shift > 0) {\n        long digit = x % 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        x /= 10;\n        shift -= 1;\n        carry = digit * 10 +\
    \ carry;\n    }\n    if (shift > 0)\n        ans = std::to_string(carry) + ans;\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    while (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n    }\n    long k = shift;\n    while (k != 0)\
    \ {\n        long r = ans.size() - k;\n        ans = ans.substr(0, r) + ans.substr(r\
    \ + 1);\n        k--;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long temp = x;\n    long carry = 0;\n    while (shift > 0) {\n        long\
    \ digit = temp % 10;\n        temp = temp / 10;\n        carry = digit + carry;\n\
    \        ans = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    if\
    \ (carry > 0) {\n        ans = std::to_string(carry) + ans;\n    }\n    return\
    \ ans;", "    std::string ans;\n    long digit = x;\n    while (shift > 0)\n \
    \   {\n        digit = digit / 10;\n        ans.push_back(std::to_string(digit));\n\
    \        shift -= 1;\n    }\n    while (shift < 0)\n    {\n        digit = digit\
    \ * 10;\n        ans.push_back(std::to_string(digit));\n        shift += 1;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long temp = x;\n \
    \   while (shift > 0) {\n        temp = temp * 10 + x % 10;\n        ans = std::to_string(temp\
    \ % 10) + ans;\n        x = x / 10;\n        shift -= 1;\n    }\n    while (shift\
    \ < 0) {\n        temp = temp * 10 + x % 10;\n        ans = std::to_string(temp\
    \ % 10) + ans;\n        x = x / 10;\n        shift += 1;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long digit = x;\n    long remainder = 0;\n   \
    \ long i = 1;\n    long j = 0;\n    while (digit != 0) {\n        remainder =\
    \ digit % 10;\n        ans = remainder + ans;\n        digit = digit / 10;\n \
    \       i++;\n    }\n    j = i;\n    while (shift > j) {\n        ans = ans +\
    \ ans[i - 1];\n        j--;\n    }\n    return ans;", "    std::string ans;\n\
    \    long n = x;\n    long m = 1;\n    long r = 1;\n    while (n != 0) {\n   \
    \     long d = n % 10;\n        ans.push_back(d % 10);\n        n /= 10;\n   \
    \     m += d;\n        r *= m;\n    }\n    long t = r;\n    while (shift > ans.size())\
    \ {\n        ans.push_back(t);\n        shift -= ans.size();\n    }\n    while\
    \ (shift < ans.size()) {\n        ans.insert(ans.begin() + shift, t);\n      \
    \  shift += ans.size();\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    long carry = 0;\n    while (shift > 0) {\n        long digit = x % 10;\n\
    \        ans += std::to_string(digit);\n        x /= 10;\n        shift -= 1;\n\
    \        carry = digit * 10 + carry;\n    }\n    if (shift > 0)\n        ans +=\
    \ std::to_string(carry);\n    return ans;", "    std::string ans = \"\";\n   \
    \ long n = x;\n    while (shift > 0) {\n        long r = n >> shift;\n       \
    \ ans += std::to_string(r);\n        shift -= r;\n        n = r;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while\
    \ (n != 0) {\n        long r = n / 10;\n        long t = n % 10;\n        ans\
    \ = std::to_string(t) + ans;\n        n = r;\n        m <<= shift;\n        shift\
    \ -= 1;\n    }\n    while (shift > 0) {\n        ans = std::to_string(m % 10)\
    \ + ans;\n        m >>= shift;\n        shift -= 1;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long digit = x;\n    long carry = 0;\n    while\
    \ (shift > 0)\n    {\n        digit = digit * 10 + carry;\n        carry = 0;\n\
    \        if (digit > 9)\n        {\n            carry = 1;\n            digit\
    \ = digit - 9;\n        }\n        shift = shift - 1;\n        ans = std::to_string(digit)\
    \ + ans;\n    }\n    if (carry)\n    {\n        ans = std::to_string(digit) +\
    \ ans;\n    }\n    return ans;", "    std::string ans;\n    long digit = x;\n\
    \    long carry = 0;\n    while (shift > 0) {\n        digit = digit * 10 + carry;\n\
    \        carry = digit / 10;\n        digit = digit % 10;\n        ans.push_back((char)('0'\
    \ + digit));\n        shift -= 1;\n    }\n    if (carry > 0) {\n        ans.push_back((char)('0'\
    \ + carry));\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ digit = x;\n    while (shift > 0)\n    {\n        ans = std::to_string(digit)\
    \ + ans;\n        shift -= std::to_string(digit).size();\n        digit /= 10;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long remain = x;\n\
    \    long carry = 0;\n    while (shift > 0) {\n        remain = remain >> 1;\n\
    \        carry = remain & 1;\n        ans = to_string(carry) + ans;\n        shift\
    \ = shift - 1;\n    }\n    ans = to_string(carry) + ans;\n    return ans;", " \
    \   std::string ans = \"\";\n    long remain = x;\n    long cur = 0;\n    long\
    \ i = 1;\n    while (i <= shift) {\n        cur = cur * 10 + remain % 10;\n  \
    \      remain = remain / 10;\n        ans += std::to_string(cur);\n        i++;\n\
    \    }\n    if (shift > i) {\n        ans += std::to_string(remain);\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    while (m <= shift) {\n        long r = n % m;\n        ans = std::to_string(r)\
    \ + ans;\n        n = m;\n        m <<= 1;\n    }\n    ans = std::to_string(n)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n  \
    \  long carry = 0;\n    long digit = 0;\n    while (shift > 0)\n    {\n      \
    \  digit = n / 10;\n        carry = n % 10;\n        n /= 10;\n        ans +=\
    \ std::to_string(digit) + std::to_string(carry);\n        shift -= 1;\n    }\n\
    \    if (shift > 0)\n    {\n        digit = n / 10;\n        carry = n % 10;\n\
    \        ans += std::to_string(digit) + std::to_string(carry);\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long temp = x;\n    long carry = 0;\n\
    \    long digit = 0;\n    while (shift > 0) {\n        digit = temp % 10;\n  \
    \      temp = temp / 10;\n        carry = digit + carry;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift -= 1;\n    }\n    if (carry > 0) {\n        ans = std::to_string(carry)\
    \ + ans;\n    }\n    return ans;", "    std::string result;\n    if (shift > LONG_MAX\
    \ / 10) {\n        shift = LONG_MAX / 10;\n    }\n    while (shift > 0) {\n  \
    \      if (shift % 10 == 0) {\n            result += static_cast<char>('0' + x\
    \ % 10);\n            x /= 10;\n        } else {\n            result += static_cast<char>('0'\
    \ + x % 10);\n            x /= 10;\n            result += static_cast<char>('0'\
    \ + x % 10);\n            x /= 10;\n        }\n        shift /= 10;\n    }\n \
    \   if (shift > 0) {\n        result += static_cast<char>('0' + x % 10);\n   \
    \ }\n    return result;", "    std::string ans = \"\";\n    long digit = x;\n\
    \    long remainder = x;\n    long i = 0;\n    while (shift > 0) {\n        digit\
    \ = remainder % 10;\n        remainder = remainder / 10;\n        ans += digit;\n\
    \        shift -= 1;\n        i++;\n    }\n    while (i < shift) {\n        ans\
    \ += \"0\";\n        i++;\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    long remain = x;\n    long curr = x;\n    long digit = 0;\n    while (shift\
    \ > 0) {\n        digit = curr % 10;\n        remain = remain / 10;\n        ans\
    \ = std::to_string(digit) + ans;\n        curr = remain;\n        shift -= 1;\n\
    \    }\n    while (shift < 0) {\n        digit = curr % 10;\n        remain =\
    \ remain / 10;\n        ans = std::to_string(digit) + ans;\n        curr = remain;\n\
    \        shift += 1;\n    }\n    return ans;", "    std::string ans;\n    long\
    \ n = x;\n    long m = 1;\n    while (n != 0) {\n        long r = n % 10;\n  \
    \      ans = std::to_string(r) + ans;\n        n /= 10;\n        m <<= 1;\n  \
    \  }\n    long r = m;\n    long s = shift;\n    while (s > 0) {\n        long\
    \ t = r / 10;\n        ans = std::to_string(t) + ans;\n        r %= 10;\n    \
    \    s >>= 1;\n    }\n    return ans;", "    std::string ans;\n    long digit\
    \ = x;\n    long remainder = x;\n    long i = 0;\n    while (shift > 0) {\n  \
    \      digit = remainder % 10;\n        remainder = remainder / 10;\n        ans.push_back(digit);\n\
    \        shift -= 1;\n        i += 1;\n    }\n    if (shift > 0) {\n        ans.insert(ans.begin(),\
    \ ans.end(), ans.begin() + i);\n    }\n    return ans;", "    std::string ans;\n\
    \    long n = x;\n    long carry = 0;\n    while (shift > 0) {\n        long digit\
    \ = n % 10;\n        ans.push_back(digit);\n        n /= 10;\n        shift -=\
    \ 1;\n    }\n    if (shift > 0)\n        ans.push_back(carry);\n    return ans;",
  "    std::string ans = \"\";\n    long carry = 0;\n    while (shift > 0) {\n   \
    \     long digit = x % 10;\n        ans = std::to_string(digit) + ans;\n     \
    \   x /= 10;\n        shift -= 1;\n        carry = digit;\n    }\n    if (shift\
    \ > 0) {\n        ans = std::to_string(carry) + ans;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long remain = x;\n    long digit = 0;\n    long\
    \ i = 0;\n    long j = shift - 1;\n    while (shift > i) {\n        digit = remain\
    \ % 10;\n        remain = remain / 10;\n        ans += digit;\n        i++;\n\
    \    }\n    while (j > i) {\n        digit = remain % 10;\n        remain = remain\
    \ / 10;\n        ans += digit;\n        j--;\n    }\n    return ans;", "    std::string\
    \ result;\n    long digit = x;\n    long carry = 0;\n    while (shift > 0) {\n\
    \        digit = digit * 10 + carry;\n        carry = digit / 10;\n        digit\
    \ = digit % 10;\n        shift -= 1;\n    }\n    if (carry > 0) {\n        result\
    \ += std::to_string(digit);\n    }\n    while (shift > 0) {\n        digit = digit\
    \ / 10;\n        shift -= 1;\n        result += std::to_string(digit);\n    }\n\
    \    return result;", "    std::string result;\n    long remainder;\n    long\
    \ digit;\n    long digits = shift % 10;\n    shift = shift / 10;\n    digit =\
    \ x;\n    remainder = x;\n    do {\n        remainder = (remainder * 10) + (digit\
    \ % 10);\n        digit = digit / 10;\n    } while (digit != 0);\n    do {\n \
    \       result = (remainder * 10) + result;\n        remainder = remainder / 10;\n\
    \    } while (remainder != 0);\n    if (shift > digits) {\n        std::reverse(&result[0],\
    \ &result[result.length() - 1]);\n    }\n    return result;", "    std::string\
    \ ans = \"\";\n    long remainder = x % 10;\n    long digit = x / 10;\n    long\
    \ digits = shift % 10;\n    long digits_shift = shift / 10;\n    long digits_remainder\
    \ = digits % 10;\n    long digits_remainder_shift = digits / 10;\n    long digits_remainder_shift2\
    \ = digits_remainder_shift % 10;\n    long digits_remainder_shift3 = digits_remainder_shift2\
    \ / 10;\n    long digits_remainder_shift4 = digits_remainder_shift3 / 10;\n  \
    \  long digits_remainder_shift5 = digits_remainder_shift4 / 10;\n    long digits_remainder_shift6\
    \ = digits_remainder_shift5 / 10;\n    long digits_remainder_shift7 = digits_remainder_shift6\
    \ / 10;\n    long digits_remainder_shift8 = digits_remainder_shift7 / 10;\n  \
    \  long digits_remainder_shift9 = digits_remainder_shift8 / 10;\n    long digits_remainder_shift10\
    \ = digits_remainder_shift9 / 10;\n    long digits_remainder_shift11 = digits_remainder_shift10\
    \ / 10;\n    long digits_remainder_shift12 = digits_remainder_shift11 / 10;\n\
    \    long digits_remainder_shift13 = digits_remainder_shift12 / 10;\n    long\
    \ digits_remainder_shift14 = digits_remainder_shift13 / 10;\n    long digits_remainder_shift15\
    \ = digits_remainder_shift14 / 10;\n    long digits_remainder_shift16 = digits_remainder_shift15\
    \ / 10;\n    long digits_remainder_shift17 = digits_remainder_shift16 / 10;\n\
    \    long digits_remainder_shift18 = digits_remainder_shift17 / 10;\n    long\
    \ digits_remainder_shift19 = digits_remainder_shift18 / 10;\n    long digits_remainder_shift20\
    \ = digits_remainder_shift19 / 10;\n    long digits_remainder_shift21 = digits_remainder_shift20\
    \ / 10;\n    long digits_remainder_shift22 = digits_remainder_shift21 / 10;\n\
    \    long digits_remainder_shift23 = digits_remainder_shift22 / 10;\n    long\
    \ digits_remainder_shift24 = digits_remainder_shift23 / 10;\n    long digits_remainder_shift25\
    \ = digits_remainder_shift24 / 10;\n    long digits_remainder_shift26 = digits_remainder_shift25\
    \ / 10;\n    long digits_remainder_shift27 = digits_remainder_shift26 / ", " \
    \   std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n \
    \       ans += n % 10;\n        n /= 10;\n        shift--;\n    }\n    while (n\
    \ > 0)\n    {\n        ans += n % 10;\n        n /= 10;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long digit = x;\n    long carry = 0;\n    long\
    \ i = 0;\n    while (shift > 0) {\n        digit = digit * 10 + carry;\n     \
    \   carry = 0;\n        if (digit > 9) {\n            digit = digit - 10;\n  \
    \          carry = 1;\n        }\n        ans += std::to_string(digit);\n    \
    \    shift -= 1;\n        i++;\n    }\n    if (carry == 1) {\n        ans += \"\
    1\";\n    }\n    return ans;", "    std::string ans = \"\";\n    long temp = x;\n\
    \    while (shift > 0) {\n        temp = temp * 10 + x % 10;\n        ans += std::to_string(temp\
    \ % 10);\n        x /= 10;\n        shift -= 1;\n    }\n    while (shift < 0)\
    \ {\n        temp = temp * 10 + x % 10;\n        ans += std::to_string(temp %\
    \ 10);\n        x /= 10;\n        shift += 1;\n    }\n    return ans;", "    std::string\
    \ ans;\n    long n = x;\n    long carry = 0;\n    while (shift > 0) {\n      \
    \  long digit = n % 10;\n        ans.push_back(digit);\n        n /= 10;\n   \
    \     carry = digit * 10 + carry;\n        shift -= 1;\n    }\n    if (shift >\
    \ 0)\n        ans.push_back(carry % 10);\n    return ans;", "    std::string result;\n\
    \    long remainder = 0;\n    while (shift > 0) {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += remainder;\n        shift--;\n    }\n   \
    \ if (shift > 0) {\n        result += remainder;\n    }\n    return result;",
  "    std::string ans = \"\";\n    long digit = x;\n    while (shift > 0)\n    {\n\
    \        digit = digit / 10;\n        ans = std::to_string(digit) + ans;\n   \
    \     shift -= 1;\n    }\n    digit = x;\n    while (shift > 0)\n    {\n     \
    \   digit = digit * 10;\n        ans = std::to_string(digit) + ans;\n        shift\
    \ -= 1;\n    }\n    return ans;", "    std::string ans = \"\";\n    long tmp =\
    \ x;\n    long rem = tmp % 10;\n    long digit = tmp / 10;\n    long i = 0;\n\
    \    while (shift > i) {\n        ans += digit;\n        shift -= i;\n       \
    \ digit = rem % 10;\n        rem = rem / 10;\n        i++;\n    }\n    ans +=\
    \ digit;\n    while (shift > i) {\n        ans -= digit;\n        shift -= i;\n\
    \        digit = rem % 10;\n        rem = rem / 10;\n        i++;\n    }\n   \
    \ return ans;", "    std::string ans;\n    long digit = x;\n    long carry = 0;\n\
    \    while (shift > 0) {\n        digit = digit * 10 + carry;\n        carry =\
    \ digit / 10;\n        digit = digit % 10;\n        ans.push_back(digit);\n  \
    \      shift--;\n    }\n    if (carry > 0) {\n        ans.push_back(carry);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long tmp = x;\n  \
    \  long carry = 0;\n    long digit = 0;\n    long digits = 0;\n    while (shift\
    \ > 0) {\n        digit = tmp % 10;\n        tmp = tmp / 10;\n        digits =\
    \ digits + 1;\n        carry = digit + carry;\n        ans = std::to_string(digits)\
    \ + ans;\n        shift = shift - 1;\n    }\n    if (carry > 0) {\n        ans\
    \ = std::to_string(carry) + ans;\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    long digit = x;\n    while (shift > 0) {\n        digit = digit\
    \ / 10;\n        ans = std::to_string(digit) + ans;\n        shift--;\n    }\n\
    \    while (shift < 0) {\n        digit = digit * 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift++;\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    long tmp = x;\n    long rem = tmp % 10;\n    long digit = tmp / 10;\n\
    \    long digits = shift % 10;\n    long digits_rem = shift / 10;\n    long digits_tmp\
    \ = 0;\n    long digits_rem = 0;\n    long digits_tmp_rem = 0;\n    long digits_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem = 0;\n    long digits_tmp_rem_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem = 0;\n    long\
    \ digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp =\
    \ 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp\
    \ = 0;\n    long digits_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp_rem_tmp",
  "    std::string ans = \"\";\n    long n = x;\n    long carry = 0;\n    while (shift\
    \ > 0) {\n        long digit = n % 10;\n        ans = std::to_string(digit) +\
    \ ans;\n        carry = digit * pow(10, shift);\n        n /= 10;\n        shift\
    \ -= 1;\n    }\n    if (shift > 0)\n        ans = std::to_string(n) + ans;\n \
    \   if (carry > 0)\n        ans = std::to_string(carry) + ans;\n    return ans;",
  "    std::string ans = \"\";\n    long temp = x;\n    long carry = 0;\n    long\
    \ digit;\n    long digits = shift % 10;\n    shift /= 10;\n    while (shift >\
    \ 0) {\n        digit = temp % 10;\n        temp = temp / 10;\n        carry =\
    \ digit + carry;\n        ans = std::to_string(digit) + ans;\n        shift -=\
    \ 1;\n    }\n    if (carry > 0) {\n        ans = std::to_string(carry) + ans;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n / 10;\n        long t = n %\
    \ 10;\n        ans = std::to_string(t) + ans;\n        n = r;\n        m <<= shift;\n\
    \    }\n    ans = std::to_string(m) + ans;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    while (shift > 0) {\n        long r = n %\
    \ 10;\n        ans = std::to_string(r) + ans;\n        n /= 10;\n        shift\
    \ -= 1;\n    }\n    while (n > 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n /= 10;\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    long carry = 1;\n    long digit;\n    long digits = 1;\n    long i =\
    \ 0;\n    while (shift > digits) {\n        digit = x % 10;\n        ans += digit;\n\
    \        x /= 10;\n        shift -= digits;\n        digits *= 10;\n    }\n  \
    \  while (shift > 0) {\n        digit = x % 10;\n        ans += digit;\n     \
    \   x /= 10;\n        shift -= digits;\n        digits *= 10;\n    }\n    if (shift\
    \ > digits) {\n        digit = x % 10;\n        ans += digit;\n        x /= 10;\n\
    \        shift -= digits;\n        digits *= 10;\n    }\n    while (shift > 0)\
    \ {\n        digit = x % 10;\n        ans += digit;\n        x /= 10;\n      \
    \  shift -= digits;\n        digits *= 10;\n    }\n    while (shift > digits)\
    \ {\n        digit = x % 10;\n        ans += digit;\n        x /= 10;\n      \
    \  shift -= digits;\n        digits *= 10;\n    }\n    while (shift > 0) {\n \
    \       digit = x % 10;\n        ans += digit;\n        x /= 10;\n        shift\
    \ -= digits;\n        digits *= 10;\n    }\n    while (shift > digits) {\n   \
    \     digit = x % 10;\n        ans += digit;\n        x /= 10;\n        shift\
    \ -= digits;\n        digits *= 10;\n    }\n    while (shift > 0) {\n        digit\
    \ = x % 10;\n        ans += digit;\n        x /= 10;\n        shift -= digits;\n\
    \        digits *= 10;\n    }\n    while (shift > digits) {\n        digit = x\
    \ % 10;\n        ans += digit;\n        x /= 10;\n        shift -= digits;\n \
    \       digits *= 10;\n    }\n    while (shift > digits) {\n        digit = x\
    \ % 10;\n        ans += digit;\n        x /= 10;\n        shift -= digits;\n \
    \       digits *= 10;\n    }\n    while (shift > digits) {\n        digit = x\
    \ % 10;\n        ans += digit;\n        x /= 10;\n        shift -= digits;\n \
    \       digits *= 10;\n    }\n    while (shift > digits) {\n        digit = x\
    \ % 10;\n        ans += digit;\n        x /= 10;\n        shift -= digits;\n \
    \       digits *= 10;\n    }\n    while (shift > digits) {\n        digit = x\
    \ % 10;\n        ans += digit;\n        x /= 10;\n        shift -= digits;\n \
    \       digits *= 10;\n    }\n    while (shift > digits) {\n        digit = x\
    \ % ", "    std::string ans = \"\";\n    long remain = x;\n    long carry = 0;\n\
    \    while (shift > 0) {\n        remain = remain * 10 + carry;\n        carry\
    \ = remain / 10;\n        remain = remain % 10;\n        ans = std::to_string(remain)\
    \ + ans;\n        shift--;\n    }\n    if (carry > 0) {\n        ans = std::to_string(carry)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long n =\
    \ x;\n    while (shift > 0) {\n        long d = n % 10;\n        ans = std::to_string(d)\
    \ + ans;\n        n = n / 10;\n        shift -= 1;\n    }\n    if (shift > 0)\
    \ {\n        long d = n % 10;\n        ans = std::to_string(d) + ans;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long remain = x;\n    long\
    \ digit = 0;\n    long temp = 0;\n    long count = 0;\n    long i = 0;\n    while\
    \ (count < shift) {\n        digit = remain;\n        remain = remain % 10;\n\
    \        temp = temp * 10 + digit;\n        count++;\n    }\n    temp = temp %\
    \ 10;\n    ans = temp + ans;\n    while (i < count) {\n        temp = temp * 10\
    \ + ans[i++];\n    }\n    ans = temp + ans;\n    while (i < count) {\n       \
    \ temp = temp * 10 + ans[i++];\n    }\n    return ans;", "    std::string ans;\n\
    \    long remain = x;\n    long curr = x;\n    long i = 0;\n    while (curr !=\
    \ 0) {\n        remain = curr % 10;\n        ans.push_back(remain);\n        curr\
    \ = curr >> 1;\n        ++i;\n    }\n    if (shift > i) {\n        std::reverse(ans.begin(),\
    \ ans.end());\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ remain = x;\n    long digit = 0;\n    long i = 0;\n    while (i < shift) {\n\
    \        remain = remain / 10;\n        digit = remain % 10;\n        ans += digit;\n\
    \        i++;\n    }\n    if (shift > i) {\n        ans += (shift - i - 1);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long temp = x;\n \
    \   long digit;\n    long carry = 0;\n    while (shift > 0) {\n        digit =\
    \ temp % 10;\n        temp = temp / 10;\n        carry = digit + carry;\n    \
    \    ans = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    if (carry\
    \ > 0) {\n        ans = std::to_string(carry) + ans;\n    }\n    return ans;",
  "    std::string s = std::to_string(x);\n    std::string result = \"\";\n    long\
    \ carry = 0;\n    long digit;\n    for (long i = 0; i < s.size(); i++) {\n   \
    \     digit = std::stoi(s.substr(i, 1));\n        carry = digit >> shift;\n  \
    \      result += std::to_string(carry & 1) + std::to_string(carry >> 1);\n   \
    \ }\n    if (carry != 0) {\n        result += std::to_string(carry & 1);\n   \
    \ }\n    return result;", "    std::string ans;\n    long digit = x;\n    long\
    \ carry = 0;\n    while (shift > 0)\n    {\n        digit = digit * 10 + carry;\n\
    \        carry = digit / 10;\n        digit = digit % 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift -= 1;\n    }\n    if (carry > 0)\n    {\n        ans =\
    \ std::to_string(carry) + ans;\n    }\n    return ans;", "    std::string result;\n\
    \    long remainder;\n    long digit;\n    long digits;\n    long i;\n    long\
    \ j;\n    long k;\n    long temp;\n    digits = x;\n    digit = x % 10;\n    i\
    \ = 1;\n    while (digits > 0) {\n        remainder = digits % 10;\n        digits\
    \ = digits / 10;\n        j = i;\n        k = i;\n        while (j > 0 && remainder\
    \ >= digit) {\n            temp = digit;\n            digit = remainder;\n   \
    \         remainder = temp;\n            j = j - 1;\n            k = k + 1;\n\
    \        }\n        if (k > i) {\n            temp = digit;\n            digit\
    \ = remainder;\n            remainder = temp;\n            i = i + 1;\n      \
    \  }\n        result += std::to_string(digit);\n    }\n    if (shift > i) {\n\
    \        temp = digit;\n        digit = remainder;\n        remainder = temp;\n\
    \        i = i + 1;\n    }\n    result += std::to_string(digit);\n    while (i\
    \ < shift) {\n        result += std::to_string(digit);\n        i = i + 1;\n \
    \   }\n    if (shift > i) {\n        result += std::to_string(digit);\n    }\n\
    \    return result;", "    std::string ans = \"\";\n    long remainder;\n    long\
    \ digit;\n    long carry = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ shift;\n    long n = x;\n    while (k >= 0) {\n        remainder = n % 10;\n\
    \        digit = remainder % 10;\n        carry = remainder / 10;\n        ans\
    \ = std::to_string(digit) + ans;\n        carry += 1;\n        n /= 10;\n    \
    \    i += 1;\n        k /= 10;\n        j += 1;\n    }\n    if (carry > 0) {\n\
    \        ans = std::to_string(carry) + ans;\n    }\n    return ans;", "    std::string\
    \ ans;\n    long digit = x;\n    long carry = 0;\n    while (shift > 0)\n    {\n\
    \        digit = digit * 10 + carry;\n        carry = 0;\n        shift -= digit;\n\
    \    }\n    while (shift > 0)\n    {\n        carry = digit % 10;\n        digit\
    \ /= 10;\n        ans = std::to_string(digit) + ans;\n    }\n    ans = std::to_string(carry)\
    \ + ans;\n    return ans;", "    std::string ans;\n    long digit = x;\n    while\
    \ (shift > 0)\n    {\n        digit = digit / 10;\n        shift -= 1;\n    }\n\
    \    while (shift < 0)\n    {\n        digit = digit * 10;\n        shift += 1;\n\
    \    }\n    ans = std::to_string(digit);\n    while (ans.size() > 0)\n    {\n\
    \        ans = std::string(ans.rbegin(), ans.rend());\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long temp = 0;\n    long carry = 0;\n    long\
    \ digit = 0;\n    long i = 0;\n    long n = x;\n    while (n > 0) {\n        digit\
    \ = n % 10;\n        temp = temp * 10 + digit;\n        carry = temp / 10;\n \
    \       temp = temp % 10;\n        ans = ans + std::to_string(temp);\n       \
    \ n = n / 10;\n    }\n    if (shift > ans.size()) {\n        shift = ans.size();\n\
    \    }\n    long k = shift - ans.size();\n    temp = temp * 10 + carry;\n    ans\
    \ = ans + std::to_string(temp);\n    while (k >= 0) {\n        temp = temp * 10\
    \ + ans[ans.size() - k];\n        ans = ans + std::to_string(temp);\n        k--;\n\
    \    }\n    return ans;", "    std::string result;\n    long remainder = x % 10;\n\
    \    long digit = x / 10;\n    while (shift > 0) {\n        result += digit;\n\
    \        shift -= 1;\n        digit = remainder / 10;\n        remainder = remainder\
    \ % 10;\n    }\n    if (shift > 0) {\n        result += digit;\n    }\n    return\
    \ result;", "    std::string ans = \"\";\n    long temp = x;\n    long temp2 =\
    \ x;\n    long temp3 = x;\n    long temp4 = x;\n    long temp5 = x;\n    long\
    \ temp6 = x;\n    long temp7 = x;\n    long temp8 = x;\n    long temp9 = x;\n\
    \    long temp10 = x;\n    long temp11 = x;\n    long temp12 = x;\n    long temp13\
    \ = x;\n    long temp14 = x;\n    long temp15 = x;\n    long temp16 = x;\n   \
    \ long temp17 = x;\n    long temp18 = x;\n    long temp19 = x;\n    long temp20\
    \ = x;\n    long temp21 = x;\n    long temp22 = x;\n    long temp23 = x;\n   \
    \ long temp24 = x;\n    long temp25 = x;\n    long temp26 = x;\n    long temp27\
    \ = x;\n    long temp28 = x;\n    long temp29 = x;\n    long temp30 = x;\n   \
    \ long temp31 = x;\n    long temp32 = x;\n    long temp33 = x;\n    long temp34\
    \ = x;\n    long temp35 = x;\n    long temp36 = x;\n    long temp37 = x;\n   \
    \ long temp38 = x;\n    long temp39 = x;\n    long temp40 = x;\n    long temp41\
    \ = x;\n    long temp42 = x;\n    long temp43 = x;\n    long temp44 = x;\n   \
    \ long temp45 = x;\n    long temp46 = x;\n    long temp47 = x;\n    long temp48\
    \ = x;\n    long temp49 = x;\n    long temp50 = x;\n    long temp51 = x;\n   \
    \ long temp52 = x;\n    long temp53 = x;\n    long temp54 = x;\n    long temp55\
    \ = x;\n    long temp56 = x;\n    long temp57 = x;\n    long temp58 = x;\n   \
    \ long temp59 = x;\n    long temp60 = x;\n    long temp61 = x;\n    long temp62\
    \ = x;\n    long temp63 = x;\n    long temp64 = x;\n    long temp65 = x;\n   \
    \ long temp66 = x;\n    long temp67 = x;\n    long temp68 = x;\n    long temp69\
    \ = x;\n    long temp70 = x;\n    long temp71 = x;\n    long temp72 = x;\n   \
    \ long temp73 = x;\n    long temp74 = x;\n    ", "    std::string ans = \"\";\n\
    \    long tmp = x;\n    long rem = tmp % 10;\n    long tmp2 = tmp / 10;\n    long\
    \ rem = rem % 10;\n    long tmp3 = tmp2 / 10;\n    long rem = rem % 10;\n    long\
    \ tmp4 = tmp3 / 10;\n    long rem = rem % 10;\n    long tmp5 = tmp4 / 10;\n  \
    \  long rem = rem % 10;\n    long tmp6 = tmp5 / 10;\n    long rem = rem % 10;\n\
    \    long tmp7 = tmp6 / 10;\n    long rem = rem % 10;\n    long tmp8 = tmp7 /\
    \ 10;\n    long rem = rem % 10;\n    long tmp9 = tmp8 / 10;\n    long rem = rem\
    \ % 10;\n    long tmp10 = tmp9 / 10;\n    long rem = rem % 10;\n    long tmp11\
    \ = tmp10 / 10;\n    long rem = rem % 10;\n    long tmp12 = tmp11 / 10;\n    long\
    \ rem = rem % 10;\n    long tmp13 = tmp12 / 10;\n    long rem = rem % 10;\n  \
    \  long tmp14 = tmp13 / 10;\n    long rem = rem % 10;\n    long tmp15 = tmp14\
    \ / 10;\n    long rem = rem % 10;\n    long tmp16 = tmp15 / 10;\n    long rem\
    \ = rem % 10;\n    long tmp17 = tmp16 / 10;\n    long rem = rem % 10;\n    long\
    \ tmp18 = tmp17 / 10;\n    long rem = rem % 10;\n    long tmp19 = tmp18 / 10;\n\
    \    long rem = rem % 10;\n    long tmp20 = tmp19 / 10;\n    long rem = rem %\
    \ 10;\n    long tmp21 = tmp20 / 10;\n    long rem = rem % 10;\n    long tmp22\
    \ = tmp21 / 10;\n    long rem = rem % 10;\n    long tmp23 = tmp22 / 10;\n    long\
    \ rem = rem % 10;\n    long tmp24 = tmp23 / 10;\n    long rem = rem % 10;\n  \
    \  long tmp25 = tmp24 / 10;\n    long rem = rem % 10;\n    long tmp26 = tmp25\
    \ / 10;\n    long rem = rem % 10;\n    long tmp27 = tmp26 / 10;\n    long rem\
    \ = rem % 10;\n    long tmp28 = tmp27 / 10;\n    long rem = rem % 10;\n    long\
    \ tmp29 = tmp28 / 10;\n    long rem = rem % 10;\n    long ", "    std::string\
    \ ans = \"\";\n    long digit = x;\n    long remainder = 0;\n    long i = 0;\n\
    \    while (shift > 0) {\n        remainder = digit % 10;\n        digit = digit\
    \ / 10;\n        ans = std::to_string(remainder) + ans;\n        shift--;\n  \
    \  }\n    while (shift < 0) {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        ans = std::to_string(remainder) + ans;\n        shift++;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long remain = x;\n\
    \    long digit = 0;\n    long i = 0;\n    long j = 0;\n    while (shift > 0)\
    \ {\n        digit = remain % 10;\n        remain = remain / 10;\n        ans.push_back(digit);\n\
    \        shift -= 1;\n    }\n    while (shift < 0) {\n        digit = remain %\
    \ 10;\n        remain = remain / 10;\n        ans.insert(ans.begin() + j, digit);\n\
    \        j += 1;\n        shift += 1;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n != 0) {\n      \
    \  long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n = n / 10;\n\
    \    }\n    long k = shift;\n    while (k >= 0) {\n        ans = ans.substr(0,\
    \ ans.size() - k) + ans.substr(ans.size() - k);\n        k--;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long cur = x;\n    while (shift > 0)\
    \ {\n        ans += std::to_string(cur % 10);\n        cur /= 10;\n        shift--;\n\
    \    }\n    while (shift < 0) {\n        ans += std::to_string(cur % 10);\n  \
    \      cur /= 10;\n        shift++;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long digit = x;\n    long carry = 0;\n    while (shift > 0)\n\
    \    {\n        digit = digit * 10 + carry;\n        carry = digit / 10;\n   \
    \     digit = digit % 10;\n        ans = std::to_string(digit) + ans;\n      \
    \  shift -= 1;\n    }\n    if (carry)\n    {\n        ans = std::to_string(carry)\
    \ + ans;\n    }\n    return ans;", "    std::string ans;\n    long temp;\n   \
    \ long digit;\n    long count = 0;\n    long pos = 0;\n    long i = 0;\n    long\
    \ len = x;\n    while (len > 0) {\n        digit = len % 10;\n        temp = len\
    \ / 10;\n        len -= temp * 10;\n        ans.insert(ans.begin() + pos, std::to_string(digit));\n\
    \        pos = pos + 1;\n        count = count + 1;\n        if (count == shift)\
    \ {\n            ans.insert(ans.begin() + pos, \"0\");\n            pos = pos\
    \ + 1;\n            count = 0;\n        }\n        i++;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    while (n !=\
    \ 0) {\n        long r = n / 10;\n        long t = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = t;\n        m *= 10;\n    }\n    long r = 1;\n    while\
    \ (shift > 0) {\n        long t = r * m;\n        ans = std::to_string(t) + ans;\n\
    \        shift -= 1;\n        r *= 10;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long carry = 1;\n    long digit;\n    while (shift > 0) {\n\
    \        digit = x % 10;\n        x /= 10;\n        carry = digit + carry;\n \
    \       ans = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    if\
    \ (shift > 0) {\n        digit = x % 10;\n        x /= 10;\n        ans = std::to_string(digit)\
    \ + ans;\n    }\n    if (carry > 0) {\n        ans = std::to_string(carry) + ans;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (n != 0) {\n        long r = n / 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = r;\n        m += 1;\n    }\n    long r = n;\n    ans = std::to_string(r)\
    \ + ans;\n    while (shift > m) {\n        ans = std::to_string(r) + ans;\n  \
    \      shift -= m;\n        m += 1;\n    }\n    return ans;", "    std::string\
    \ ans;\n    long carry = 1;\n    long digit;\n    long digits = 1;\n    long pos\
    \ = 0;\n    long i = 0;\n    while (shift > 0) {\n        digit = x % 10;\n  \
    \      digits = digits;\n        x /= 10;\n        pos = i;\n        carry = 1;\n\
    \        while (digits > shift) {\n            ans.insert(ans.begin(), digit);\n\
    \            shift -= digits;\n            digits /= 10;\n            carry *=\
    \ 10;\n        }\n        ans.insert(ans.begin(), digit);\n        shift -= digits;\n\
    \        digits /= 10;\n        carry *= 10;\n        i++;\n    }\n    if (carry\
    \ > 0) {\n        ans.insert(ans.begin(), carry);\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    long temp = 0;\n    while (shift > 0) {\n   \
    \     temp = x % 10;\n        ans = std::to_string(temp) + ans;\n        x /=\
    \ 10;\n        shift -= 1;\n    }\n    if (shift > 0) {\n        temp = x % 10;\n\
    \        ans = std::to_string(temp) + ans;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    while (shift > 0) {\n        long r = n /\
    \ 10;\n        ans = std::to_string(r) + ans;\n        n = r;\n        shift -=\
    \ 1;\n    }\n    if (shift > 0)\n        ans = std::to_string(n) + ans;\n    return\
    \ ans;", "    std::string ans = \"\";\n    long remainder = x % 10;\n    x /=\
    \ 10;\n    long i = 1;\n    while (x != 0) {\n        if (shift > i) {\n     \
    \       ans += remainder;\n            shift -= i;\n        }\n        ans +=\
    \ '0' + x % 10;\n        x /= 10;\n        i++;\n    }\n    return ans;", "  \
    \  std::string ans;\n    long n = x;\n    long carry = 0;\n    while (shift >\
    \ 0) {\n        long digit = n / 10;\n        n -= digit * 10;\n        carry\
    \ = digit * 10 + carry;\n        ans.push_back(carry % 10);\n        shift -=\
    \ 1;\n    }\n    if (shift > 0)\n        ans.insert(ans.size() - shift, static_cast<char>(carry\
    \ % 10));\n    return ans;", "    std::string ans = \"\";\n    long digit = x;\n\
    \    long remainder = 0;\n    while (shift > 0) {\n        remainder = digit %\
    \ 10;\n        digit = digit / 10;\n        ans = std::to_string(remainder) +\
    \ ans;\n        shift -= 1;\n    }\n    while (shift < 0) {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        ans = std::to_string(remainder)\
    \ + ans;\n        shift += 1;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    long remain = x;\n    long digit = x;\n    long count = 0;\n    while\
    \ (count < shift) {\n        remain = remain / 10;\n        digit = digit * 10;\n\
    \        ans = std::to_string(remain) + ans;\n        count++;\n    }\n    while\
    \ (count > 0) {\n        remain = remain / 10;\n        digit = digit * 10;\n\
    \        ans = std::to_string(remain) + ans;\n        count--;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long remainder = 0;\n    long digit\
    \ = x;\n    long digits = 0;\n    while (shift > 0) {\n        remainder = digit\
    \ % 10;\n        digit = digit / 10;\n        digits = digits + 1;\n        ans\
    \ = remainder + ans;\n        shift = shift - 1;\n    }\n    if (shift < 0) {\n\
    \        digits = -digits;\n        ans = ans + digit;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long temp = x;\n    while (shift > 0)\n    {\n\
    \        temp = temp / 10;\n        ans = std::to_string(temp % 10) + ans;\n \
    \       shift -= 1;\n    }\n    while (shift < 0)\n    {\n        temp = temp\
    \ * 10;\n        ans = std::to_string(temp % 10) + ans;\n        shift += 1;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long remainder = 0;\n\
    \    long digit = x;\n    while (shift > 0)\n    {\n        remainder = digit\
    \ % 10;\n        ans = std::to_string(remainder) + ans;\n        digit /= 10;\n\
    \        shift -= 1;\n    }\n    if (shift > 0)\n    {\n        ans = std::to_string(remainder)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long n =\
    \ x;\n    while (shift > 0)\n    {\n        long r = n >> shift;\n        ans\
    \ += std::to_string(r);\n        shift -= r;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long carry = 0;\n    while (shift > 0) {\n\
    \        long digit = n % 10;\n        ans += (digit < 10 ? digit + '0' : digit\
    \ - 10 + 'a');\n        n /= 10;\n        shift -= 1;\n        carry = n / 10;\n\
    \        n %= 10;\n    }\n    if (shift > 0 && carry > 0) {\n        ans += 'a'\
    \ + carry;\n    }\n    return ans;", "    std::string ans = \"\";\n    long temp\
    \ = x;\n    while (shift > 0) {\n        ans += std::to_string(temp % 10);\n \
    \       temp /= 10;\n        shift -= 1;\n    }\n    if (shift > 0) {\n      \
    \  ans += std::to_string(temp % 10);\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long carry = 0;\n    while (shift > 0) {\n        long digit\
    \ = x % 10;\n        ans += std::to_string(digit);\n        x /= 10;\n       \
    \ shift -= 1;\n        carry = digit * 10 + carry;\n    }\n    if (shift > 0)\
    \ {\n        ans += std::to_string(carry);\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long temp = x;\n    long carry = 0;\n    long i = 0;\n    while\
    \ (temp != 0) {\n        long digit = temp % 10;\n        temp = temp / 10;\n\
    \        carry = digit + carry;\n        ans = std::to_string(digit) + ans;\n\
    \        i++;\n    }\n    if (shift > i) {\n        ans = ans.substr(0, i);\n\
    \        carry = carry + 1;\n    }\n    if (shift < i) {\n        ans = ans.substr(0,\
    \ shift) + std::to_string(carry);\n    }\n    return ans;", "    std::string ans;\n\
    \    long digit = x;\n    long carry = 0;\n    long i = 0;\n    while (shift >\
    \ i) {\n        digit = digit * 10 + carry;\n        carry = 0;\n        i++;\n\
    \    }\n    digit = digit * 10 + carry;\n    while (i < shift) {\n        ans\
    \ += digit;\n        digit = digit / 10;\n        i++;\n    }\n    if (shift <\
    \ i) {\n        ans += digit;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    long digit = x;\n    long remainder = x;\n    long i = 0;\n    while\
    \ (shift > i) {\n        ans += std::to_string(digit);\n        digit = remainder;\n\
    \        remainder = digit % 10;\n        i++;\n    }\n    ans += std::to_string(digit);\n\
    \    return ans;", "    std::string ans = \"\";\n    long remain = x;\n    long\
    \ carry = 0;\n    while (shift > 0) {\n        remain = remain * 10 + carry;\n\
    \        carry = remain / 10;\n        remain = remain % 10;\n        ans = std::to_string(remain)\
    \ + ans;\n        shift--;\n    }\n    if (carry > 0) {\n        ans = std::to_string(carry)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long remainder\
    \ = x % 10;\n    long digit = x / 10;\n    long count = 0;\n    while (shift >\
    \ count) {\n        ans += digit;\n        shift -= count;\n        digit = x\
    \ / 10;\n        count += 1;\n    }\n    ans += digit;\n    ans += remainder;\n\
    \    return ans;", "    std::string ans = \"\";\n    long remain = x;\n    long\
    \ carry = 0;\n    while (shift > 0) {\n        remain = remain * 10 + carry;\n\
    \        carry = remain / 10;\n        remain = remain % 10;\n        ans = std::to_string(remain)\
    \ + ans;\n        shift--;\n    }\n    if (carry > 0) {\n        ans = std::to_string(carry)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long digits\
    \ = 1;\n    while (shift > digits) {\n        shift -= digits;\n        ans +=\
    \ '0';\n    }\n    digits = 1;\n    while (shift >= digits) {\n        ans +=\
    \ '0';\n        shift -= digits;\n        digits++;\n    }\n    ans += x;\n  \
    \  return ans;", "    std::string ans = \"\";\n    long temp = x;\n    long temp2\
    \ = x;\n    long temp3 = x;\n    long temp4 = x;\n    long temp5 = x;\n    long\
    \ temp6 = x;\n    long temp7 = x;\n    long temp8 = x;\n    long temp9 = x;\n\
    \    long temp10 = x;\n    long temp11 = x;\n    long temp12 = x;\n    long temp13\
    \ = x;\n    long temp14 = x;\n    long temp15 = x;\n    long temp16 = x;\n   \
    \ long temp17 = x;\n    long temp18 = x;\n    long temp19 = x;\n    long temp20\
    \ = x;\n    long temp21 = x;\n    long temp22 = x;\n    long temp23 = x;\n   \
    \ long temp24 = x;\n    long temp25 = x;\n    long temp26 = x;\n    long temp27\
    \ = x;\n    long temp28 = x;\n    long temp29 = x;\n    long temp30 = x;\n   \
    \ long temp31 = x;\n    long temp32 = x;\n    long temp33 = x;\n    long temp34\
    \ = x;\n    long temp35 = x;\n    long temp36 = x;\n    long temp37 = x;\n   \
    \ long temp38 = x;\n    long temp39 = x;\n    long temp40 = x;\n    long temp41\
    \ = x;\n    long temp42 = x;\n    long temp43 = x;\n    long temp44 = x;\n   \
    \ long temp45 = x;\n    long temp46 = x;\n    long temp47 = x;\n    long temp48\
    \ = x;\n    long temp49 = x;\n    long temp50 = x;\n    long temp51 = x;\n   \
    \ long temp52 = x;\n    long temp53 = x;\n    long temp54 = x;\n    long temp55\
    \ = x;\n    long temp56 = x;\n    long temp57 = x;\n    long temp58 = x;\n   \
    \ long temp59 = x;\n    long temp60 = x;\n    long temp61 = x;\n    long temp62\
    \ = x;\n    long temp63 = x;\n    long temp64 = x;\n    long temp65 = x;\n   \
    \ long temp66 = x;\n    long temp67 = x;\n    long temp68 = x;\n    long temp69\
    \ = x;\n    long temp70 = x;\n    long temp71 = x;\n    long temp72 = x;\n   \
    \ long temp73 = x;\n    long temp74 = x;\n    ", "    std::string ans;\n    long\
    \ digit = x;\n    long temp = x;\n    while (shift > 0) {\n        digit = temp\
    \ % 10;\n        temp = temp / 10;\n        ans.push_back(digit);\n        shift--;\n\
    \    }\n    while (shift < 0) {\n        digit = temp % 10;\n        temp = temp\
    \ / 10;\n        ans.insert(ans.begin(), digit);\n        shift++;\n    }\n  \
    \  return ans;", "    std::string ans = \"\";\n    long carry = 0;\n    long digit\
    \ = 0;\n    while (shift > 0) {\n        digit = x % 10;\n        carry = digit\
    \ + carry;\n        ans = std::to_string(digit) + ans;\n        x /= 10;\n   \
    \     shift -= 1;\n    }\n    if (carry > 0) {\n        ans = std::to_string(carry)\
    \ + ans;\n    }\n    return ans;", "    std::string ans = \"\";\n    long remain\
    \ = x;\n    long cur = 0;\n    long i = 0;\n    while (i < shift) {\n        cur\
    \ = cur * 10 + remain % 10;\n        remain = remain / 10;\n        ans += std::to_string(cur);\n\
    \        i++;\n    }\n    if (remain != 0) {\n        cur = cur * 10 + remain;\n\
    \        ans += std::to_string(cur);\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long tmp = x;\n    while (shift > 0) {\n        tmp = tmp *\
    \ 10 + x % 10;\n        ans = std::to_string(tmp % 10) + ans;\n        x /= 10;\n\
    \        shift -= 1;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long remainder = 0;\n    long digit = x;\n    long i = 0;\n    while (shift\
    \ > 0) {\n        remainder = digit % 10;\n        digit = digit / 10;\n     \
    \   ans = std::to_string(remainder) + ans;\n        shift -= 1;\n    }\n    if\
    \ (shift < 0) {\n        ans = ans.substr(0, ans.size() - shift);\n    }\n   \
    \ return ans;", "    std::string ans = \"\";\n    long temp = 0;\n    long carry\
    \ = 0;\n    long digit = 0;\n    long i = 0;\n    long n = x;\n    while (n >\
    \ 0) {\n        digit = n % 10;\n        temp = temp * 10 + digit;\n        carry\
    \ = temp / 10;\n        temp = temp % 10;\n        ans = ans + std::to_string(temp);\n\
    \        n = n / 10;\n    }\n    if (shift > ans.size()) {\n        shift = ans.size();\n\
    \    }\n    ans = ans.substr(0, shift);\n    while (shift > 0) {\n        digit\
    \ = ans[ans.size() - shift - 1] - 48;\n        temp = temp * 10 + digit;\n   \
    \     carry = temp / 10;\n        temp = temp % 10;\n        ans = ans + std::to_string(temp);\n\
    \        shift--;\n    }\n    if (carry > 0) {\n        ans = ans + std::to_string(carry);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    while (m <= shift) {\n        long r = n / m;\n        ans += std::to_string(r);\n\
    \        n %= m;\n        m *= 10;\n    }\n    if (shift > n) {\n        ans +=\
    \ std::to_string(n);\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long digit = x;\n    long remainder = x;\n    long i = 0;\n    long j = 0;\n\
    \    while (shift > 0) {\n        digit = remainder % 10;\n        remainder =\
    \ remainder / 10;\n        ans += digit;\n        shift -= 1;\n    }\n    while\
    \ (i < shift) {\n        ans += '0';\n        i++;\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    long temp = x;\n    long remainder = x;\n   \
    \ long i = 0;\n    while (shift > i) {\n        ans += std::to_string(temp % 10);\n\
    \        temp /= 10;\n        shift -= i;\n        i++;\n    }\n    if (shift\
    \ > i) {\n        ans += std::to_string(temp % 10);\n    }\n    while (shift >\
    \ i) {\n        remainder *= 10;\n        shift -= i;\n        i++;\n    }\n \
    \   ans += std::to_string(remainder);\n    return ans;", "    std::string ans\
    \ = \"\";\n    long digit = x;\n    long remainder = 0;\n    long i = 0;\n   \
    \ while (shift > 0) {\n        remainder = digit % 10;\n        digit = digit\
    \ / 10;\n        ans = std::to_string(remainder) + ans;\n        shift = shift\
    \ - 1;\n        i++;\n    }\n    if (shift < 0) {\n        ans = std::to_string(remainder)\
    \ + ans;\n    }\n    return ans;", "    std::string ans;\n    long digit = x;\n\
    \    long carry = 0;\n    while (shift > 0)\n    {\n        digit = digit * 10\
    \ + carry;\n        carry = digit / 10;\n        digit = digit % 10;\n       \
    \ ans.push_back((char)('0' + digit));\n        shift -= 1;\n    }\n    if (carry)\n\
    \    {\n        ans.push_back((char)('0' + carry));\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0)\n    {\n  \
    \      ans += n % 10;\n        n /= 10;\n        shift--;\n    }\n    ans += n;\n\
    \    return ans;", "    std::string ans = \"\";\n    long remainder = x % 10;\n\
    \    long digit = x / 10;\n    long digits = shift % 10;\n    long digits_left\
    \ = shift / 10;\n    long digits_right = digits_left % 10;\n    long digits_right_shift\
    \ = digits_left / 10;\n    long digits_left_shift = digits_right % 10;\n    long\
    \ digits_right_shift_left = digits_right / 10;\n    long digits_left_shift_left\
    \ = digits_right_shift % 10;\n    long digits_right_shift_right = digits_right_shift\
    \ / 10;\n    long digits_left_shift_right = digits_right_shift_left % 10;\n  \
    \  long digits_right_shift_right_left = digits_right_shift_left / 10;\n    long\
    \ digits_left_shift_right_left = digits_right_shift_right_left % 10;\n    long\
    \ digits_right_shift_right_right = digits_right_shift_right_left / 10;\n    long\
    \ digits_left_shift_right_right = digits_right_shift_right_right % 10;\n    long\
    \ digits_right_shift_right_right_left = digits_right_shift_right_right / 10;\n\
    \    long digits_left_shift_right_right_left = digits_right_shift_right_right_left\
    \ % 10;\n    long digits_right_shift_right_right_right = digits_right_shift_right_right_left\
    \ / 10;\n    long digits_left_shift_right_right_right = digits_right_shift_right_right_right\
    \ % 10;\n    long digits_right_shift_right_right_right_left = digits_right_shift_right_right_right\
    \ / 10;\n    long digits_left_shift_right_right_right_left = digits_right_shift_right_right_right_left\
    \ % 10;\n    long digits_right_shift_right_right_right_right = digits_right_shift_right_right_right_left\
    \ / 10;\n    long digits_left_shift_right_right_right_right = digits_right_shift_right_right_right_right\
    \ % 10;\n    long digits_right_shift_right_right_right_right_left = digits_right_shift_right_right_right_right\
    \ / 10;\n    long digits_left_shift_right_right_right_right_left = digits_right_shift_right_right_right_right_left\
    \ % 10;\n    long digits_right_shift_right_right_right_right_right = digits_right_shift_right_right_right_right_left\
    \ / 10;\n    long digits_left_shift_right_right_right_right_right = digits_right_shift_right_right_right_right_right\
    \ % 10;\n    long digits_right_shift_right_right_right_right_right_left = digits_right_shift_right_right_right_right_right_left\
    \ / 10;\n    long digits_left_shift_right_right_right_right_right_left = digits_right_shift_right_right_right_right_right_right\
    \ % 10;\n    long digits_right_shift_right_right_right_right_right_right = digits_right_shift_right_",
  "    std::string ans;\n    long digits = 1;\n    while (shift > digits) {\n    \
    \    digits *= 10;\n    }\n    while (shift > digits) {\n        shift -= digits;\n\
    \        ans += (char)(x % 10);\n        x /= 10;\n    }\n    ans += (char)(x\
    \ % 10);\n    return ans;", "    std::string ans = \"\";\n    long digits = x;\n\
    \    long carry = 0;\n    while (digits > 0) {\n        long next_digits = digits\
    \ % 10;\n        digits = digits / 10;\n        carry = next_digits + carry;\n\
    \        ans = std::to_string(next_digits) + ans;\n    }\n    if (shift > ans.size())\
    \ {\n        shift = ans.size();\n    }\n    ans = std::to_string(carry) + ans;\n\
    \    while (shift > ans.size()) {\n        ans = ans.substr(0, ans.size() - 1)\
    \ + ans.substr(ans.size() - 1);\n        shift--;\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    long n = x;\n    long d = 1;\n    while (shift\
    \ > 0) {\n        long r = n / d;\n        ans += std::to_string(r);\n       \
    \ shift -= d;\n        d *= 10;\n    }\n    if (shift < 0)\n        ans = ans.substr(0,\
    \ ans.size() - shift);\n    return ans;", "    std::string ans = \"\";\n    long\
    \ temp = x;\n    long remainder = 0;\n    long i = 0;\n    while (temp != 0) {\n\
    \        remainder = temp % 10;\n        ans = remainder + ans;\n        temp\
    \ = temp / 10;\n        i++;\n    }\n    long j = i;\n    while (j > 0) {\n  \
    \      ans = ans + j % 10 + ans;\n        j = j / 10;\n    }\n    if (shift >\
    \ ans.size()) {\n        shift = ans.size();\n    }\n    ans = ans.substr(0, shift);\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift\
    \ > 0) {\n        ans += n % 10;\n        n /= 10;\n        shift--;\n    }\n\
    \    while (n != 0) {\n        ans += n % 10;\n        n /= 10;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long remain = x;\n    long digit;\n\
    \    long count = 0;\n    while (count < shift) {\n        digit = remain;\n \
    \       remain = remain / 10;\n        ans = std::to_string(digit) + ans;\n  \
    \      count++;\n    }\n    if (shift > count) {\n        digit = remain;\n  \
    \      remain = remain / 10;\n        ans = std::to_string(digit) + ans;\n   \
    \ }\n    return ans;", "    std::string ans;\n    long digit = x;\n    long carry\
    \ = 0;\n    while (shift > 0) {\n        digit = digit * 10 + carry;\n       \
    \ carry = 0;\n        if (digit > 9) {\n            digit = digit % 10;\n    \
    \        carry = 1;\n        }\n        ans.push_back(digit % 10);\n        shift\
    \ -= 1;\n    }\n    if (carry == 1) {\n        ans.push_back('1');\n    }\n  \
    \  return ans;", "    std::string ans = \"\";\n    long n = x;\n    while (shift\
    \ > 0) {\n        long r = n / 10;\n        ans = std::to_string(r) + ans;\n \
    \       n %= 10;\n        shift -= 1;\n    }\n    if (shift > 0)\n        ans\
    \ = std::to_string(n) + ans;\n    return ans;", "    std::string ans = \"\";\n\
    \    long digit = x;\n    while (shift > 0)\n    {\n        digit = digit / 10;\n\
    \        ans = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    while\
    \ (shift < 0)\n    {\n        digit = digit * 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift += 1;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    long digit = x;\n    long remainder = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    while (digit > 0) {\n        remainder = digit\
    \ % 10;\n        digit = digit / 10;\n        ans = remainder + ans + digit;\n\
    \        i++;\n    }\n    if (shift > i) {\n        j = i;\n        k = shift;\n\
    \        while (j > 0) {\n            ans = ans + digit;\n            j--;\n \
    \       }\n        while (k >= 0) {\n            ans = ans + digit;\n        \
    \    k--;\n        }\n    }\n    return ans;", "    std::string result;\n    long\
    \ remain = x;\n    long carry = 0;\n    while (shift > 0)\n    {\n        remain\
    \ = remain << 1;\n        carry = remain >> 31;\n        remain = remain & 1;\n\
    \        shift -= 1;\n    }\n    if (carry)\n    {\n        result += \"1\";\n\
    \    }\n    while (shift > 0)\n    {\n        remain = remain >> 1;\n        shift\
    \ -= 1;\n    }\n    result += to_string(remain);\n    return result;", "    std::string\
    \ ans = \"\";\n    long remainder = x % 10;\n    long digit = x / 10;\n    long\
    \ i = 0;\n    while (shift > 0) {\n        ans += digit;\n        shift -= 1;\n\
    \        digit *= 10;\n        i += 1;\n    }\n    if (shift > 0) {\n        ans\
    \ += digit;\n        shift -= 1;\n        digit *= 10;\n        i += 1;\n    }\n\
    \    ans += remainder;\n    while (i >= 0) {\n        ans *= 10;\n        ans\
    \ += digit;\n        shift -= 1;\n        digit *= 10;\n        i += 1;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long remain = x;\n    long\
    \ digit = 0;\n    long carry = 0;\n    while (shift > 0) {\n        digit = remain\
    \ % 10;\n        remain = remain / 10;\n        carry = digit + carry;\n     \
    \   ans = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    if (carry\
    \ > 0) {\n        ans = std::to_string(carry) + ans;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long n = x;\n    while (shift > 0) {\n       \
    \ long r = n / 10;\n        ans = std::to_string(r) + ans;\n        n = r;\n \
    \       shift -= 1;\n    }\n    if (shift > 0) {\n        long r = n % 10;\n \
    \       ans = std::to_string(r) + ans;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long m = 1;\n    while (m <= shift) {\n  \
    \      long r = n >> m;\n        ans += std::to_string(r);\n        n -= r;\n\
    \        m *= 10;\n    }\n    if (shift > n) {\n        ans += std::to_string(n);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long remainder = 0;\n\
    \    long digit = x;\n    long digits = 1;\n    while (shift > digits) {\n   \
    \     remainder = digit % 10;\n        digit = digit / 10;\n        digits = digits;\n\
    \        ans = remainder + ans;\n    }\n    ans = ans + digit;\n    return ans;",
  "    std::string ans = \"\";\n    long digit = x;\n    while (shift > 0)\n    {\n\
    \        digit = digit / 10;\n        ans = std::to_string(digit) + ans;\n   \
    \     shift -= 1;\n    }\n    while (shift < 0)\n    {\n        digit = digit\
    \ * 10;\n        ans = std::to_string(digit) + ans;\n        shift += 1;\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long\
    \ m = shift % 10;\n    long r = shift / 10;\n    while (n > 0) {\n        long\
    \ tmp = n % 10;\n        ans = tmp + ans;\n        n = n / 10;\n    }\n    if\
    \ (m != 0) {\n        ans = m + ans;\n    }\n    while (ans.size() > r) {\n  \
    \      ans = ans.substr(0, ans.size() - 1);\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long remain = x;\n    long carry = 0;\n    long digit;\n  \
    \  while (shift > 0) {\n        digit = remain;\n        remain = remain >> 1;\n\
    \        if (remain == 0) {\n            digit = carry;\n            carry = 0;\n\
    \        }\n        ans = std::to_string(digit) + ans;\n        shift -= 1;\n\
    \    }\n    if (carry > 0) {\n        ans = std::to_string(carry) + ans;\n   \
    \ }\n    return ans;", "    std::string ans;\n    long carry = 0;\n    long digit\
    \ = x;\n    while (shift > 0) {\n        carry = digit % 10;\n        digit /=\
    \ 10;\n        ans.push_back(carry);\n        shift -= 1;\n    }\n    if (shift\
    \ > 0) {\n        ans.insert(ans.size() - 1, digit);\n    }\n    return ans;",
  "    std::string ans = \"\";\n    long tmp = x;\n    long digit = 0;\n    long carry\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long digits = 0;\n\
    \    long digits_tmp = 0;\n    long digits_tmp2 = 0;\n    long digits_tmp3 = 0;\n\
    \    long digits_tmp4 = 0;\n    long digits_tmp5 = 0;\n    long digits_tmp6 =\
    \ 0;\n    long digits_tmp7 = 0;\n    long digits_tmp8 = 0;\n    long digits_tmp9\
    \ = 0;\n    long digits_tmp10 = 0;\n    long digits_tmp11 = 0;\n    long digits_tmp12\
    \ = 0;\n    long digits_tmp13 = 0;\n    long digits_tmp14 = 0;\n    long digits_tmp15\
    \ = 0;\n    long digits_tmp16 = 0;\n    long digits_tmp17 = 0;\n    long digits_tmp18\
    \ = 0;\n    long digits_tmp19 = 0;\n    long digits_tmp20 = 0;\n    long digits_tmp21\
    \ = 0;\n    long digits_tmp22 = 0;\n    long digits_tmp23 = 0;\n    long digits_tmp24\
    \ = 0;\n    long digits_tmp25 = 0;\n    long digits_tmp26 = 0;\n    long digits_tmp27\
    \ = 0;\n    long digits_tmp28 = 0;\n    long digits_tmp29 = 0;\n    long digits_tmp30\
    \ = 0;\n    long digits_tmp31 = 0;\n    long digits_tmp32 = 0;\n    long digits_tmp33\
    \ = 0;\n    long digits_tmp34 = 0;\n    long digits_tmp35 = 0;\n    long digits_tmp36\
    \ = 0;\n    long digits_tmp37 = 0;\n    long digits_tmp38 = 0;\n    long digits_tmp39\
    \ = 0;\n    long digits_tmp40 = 0;\n    long digits_tmp41 = 0;\n    long digits_tmp42\
    \ = 0;\n    long digits_tmp43 = 0;\n    long digits_tmp44 = 0;\n    long digits_tmp45\
    \ = 0;\n    long digits_tmp46 = 0;\n    long digits_tmp47 = 0;\n    long digits_tmp48\
    \ = 0;\n    long digits_tmp49 = 0;\n    long digits_tmp50 = 0;\n    long digits_tmp51\
    \ = 0;\n    long digits_tmp52 = 0;\n    long digits_tmp53 = 0;\n    long digits_tmp54\
    \ = 0;\n    long digits_tmp55 = 0;\n    long digits_tmp56 = 0;\n    long digits_tmp57\
    \ = 0;\n    long digits_tmp58 = 0;\n    long digits_tmp59 = 0;\n    long digits_tmp",
  "    std::string ans = \"\";\n    long remain = x;\n    long digit = 0;\n    long\
    \ digits = 0;\n    long i = 0;\n    while (shift > digits) {\n        remain =\
    \ remain / 10;\n        digit = remain % 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift -= digits;\n        digits++;\n    }\n    while (shift\
    \ > i) {\n        remain = remain / 10;\n        digit = remain % 10;\n      \
    \  ans = std::to_string(digit) + ans;\n        shift -= i;\n        i++;\n   \
    \ }\n    while (shift > i) {\n        remain = remain / 10;\n        digit = remain\
    \ % 10;\n        ans = std::to_string(digit) + ans;\n        shift -= i;\n   \
    \     i++;\n    }\n    while (shift > digits) {\n        remain = remain / 10;\n\
    \        digit = remain % 10;\n        ans = std::to_string(digit) + ans;\n  \
    \      shift -= digits;\n        digits++;\n    }\n    return ans;", "    std::string\
    \ ans;\n    long digit = x;\n    long carry = 0;\n    long digits = 0;\n    while\
    \ (shift > digits) {\n        digit = digit / 10;\n        digits = digits + 1;\n\
    \    }\n    while (shift > digits) {\n        digit = digit * 10;\n        digits\
    \ = digits + 1;\n    }\n    while (shift > digits) {\n        digit = digit /\
    \ 10;\n        digits = digits + 1;\n    }\n    while (shift > digits) {\n   \
    \     digit = digit * 10;\n        digits = digits + 1;\n    }\n    while (shift\
    \ > digits) {\n        digit = digit / 10;\n        digits = digits + 1;\n   \
    \ }\n    while (shift > digits) {\n        digit = digit * 10;\n        digits\
    \ = digits + 1;\n    }\n    while (shift > digits) {\n        digit = digit /\
    \ 10;\n        digits = digits + 1;\n    }\n    while (shift > digits) {\n   \
    \     digit = digit * 10;\n        digits = digits + 1;\n    }\n    while (shift\
    \ > digits) {\n        digit = digit / 10;\n        digits = digits + 1;\n   \
    \ }\n    while (shift > digits) {\n        digit = digit * 10;\n        digits\
    \ = digits + 1;\n    }\n    while (shift > digits) {\n        digit = digit /\
    \ 10;\n        digits = digits + 1;\n    }\n    while (shift > digits) {\n   \
    \     digit = digit * 10;\n        digits = digits + 1;\n    }\n    while (shift\
    \ > digits) {\n        digit = digit / 10;\n        digits = digits + 1;\n   \
    \ }\n    while (shift > digits) {\n        digit = digit * 10;\n        digits\
    \ = digits + 1;\n    }\n    while (shift > digits) {\n        digit = digit /\
    \ 10;\n        digits = digits + 1;\n    }\n    while (shift > digits) {\n   \
    \     digit = digit * 10;\n        digits = digits + 1;\n    }\n    while (shift\
    \ > digits) {\n        digit = digit / 10;\n        digits = digits + 1;\n   \
    \ }\n    while (shift > digits) {\n        digit = digit * 10;\n        digits\
    \ = digits + 1;\n    }\n    while (shift > digits) {\n        digit = digit /\
    \ 10;\n        digits = digits + 1;\n    }\n    while (shift > digits) {\n   \
    \     digit = digit * 10;\n        digits = digits + 1;\n    }\n    while (shift\
    \ > digits) {\n        digit = digit / 10;\n        digits = digits + 1;\n   \
    \ }\n    while (shift > digits) {\n        digit = digit * 10;\n        digits\
    \ = digits + 1;\n    }\n    while (shift > digits) {\n        ", "    std::string\
    \ ans;\n    long n = x;\n    while (shift > 0)\n    {\n        long r = n >> shift;\n\
    \        ans += std::to_string(r);\n        shift -= r;\n        n = r;\n    }\n\
    \    ans += std::to_string(n);\n    return ans;", "    std::string ans = \"\"\
    ;\n    long tmp = x;\n    while (shift > 0) {\n        tmp = tmp * 10 + tmp %\
    \ 10;\n        shift -= 1;\n    }\n    tmp = tmp % 10;\n    ans = std::to_string(tmp);\n\
    \    while (shift > 0) {\n        tmp = tmp * 10 + tmp % 10;\n        shift -=\
    \ 1;\n    }\n    ans += std::to_string(tmp);\n    return ans;", "    std::string\
    \ ans = \"\";\n    long digit = x;\n    long carry = 0;\n    while (shift > 0)\
    \ {\n        digit = digit * 10 + carry;\n        carry = digit / 10;\n      \
    \  digit = digit % 10;\n        ans = std::to_string(digit) + ans;\n        shift--;\n\
    \    }\n    if (carry > 0) {\n        ans = std::to_string(carry) + ans;\n   \
    \ }\n    return ans;", "    std::string ans;\n    long digit = x;\n    long carry\
    \ = 0;\n    while (shift > 0) {\n        digit = digit * 10 + carry;\n       \
    \ carry = digit / 10;\n        digit = digit % 10;\n        ans.push_back((char)('0'\
    \ + digit));\n        shift -= 1;\n    }\n    if (carry > 0) {\n        ans.push_back((char)('0'\
    \ + carry));\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ temp = x;\n    long carry = 0;\n    long digit = 0;\n    while (shift > 0) {\n\
    \        digit = temp % 10;\n        temp = temp / 10;\n        carry = digit\
    \ + carry;\n        ans = std::to_string(digit) + ans;\n        shift -= 1;\n\
    \    }\n    if (carry > 0) {\n        ans = std::to_string(carry) + ans;\n   \
    \ }\n    return ans;", "    std::string ans;\n    long digit = x;\n    long carry\
    \ = 0;\n    while (shift > 0) {\n        digit = digit * 10 + carry;\n       \
    \ carry = digit / 10;\n        digit = digit % 10;\n        ans.push_back((char)('0'\
    \ + digit));\n        shift -= 1;\n    }\n    if (carry > 0) {\n        ans.push_back((char)('0'\
    \ + carry));\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ remain = x;\n    long digit = 0;\n    while (shift > 0) {\n        digit = remain;\n\
    \        remain = remain >> 1;\n        ans = std::to_string(digit) + ans;\n \
    \       shift -= 1;\n    }\n    if (shift < 0)\n        ans = std::to_string(remain)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long tmp = x;\n\
    \    long remainder = 0;\n    while (shift > 0) {\n        remainder = tmp % 10;\n\
    \        ans = std::to_string(remainder) + ans;\n        tmp /= 10;\n        shift\
    \ -= 1;\n    }\n    while (shift < 0) {\n        remainder = tmp % 10;\n     \
    \   ans = std::to_string(remainder) + ans;\n        tmp /= 10;\n        shift\
    \ += 1;\n    }\n    return ans;", "    std::string result;\n    if (shift > LONG_MAX\
    \ / 10) {\n        shift = LONG_MAX / 10;\n    }\n    long carry = 1;\n    for\
    \ (long i = LONG_MAX; i >= 0; i /= 10) {\n        long digit = x % 10;\n     \
    \   x /= 10;\n        long digitShifted = digit << shift;\n        long digitShifted2\
    \ = digitShifted + carry;\n        carry = digitShifted >> 1;\n        digitShifted\
    \ &= 1;\n        result += std::to_string(digitShifted2);\n    }\n    if (shift\
    \ > LONG_MAX / 10) {\n        shift = LONG_MAX / 10;\n    }\n    long digitShifted\
    \ = x << shift;\n    long digitShifted2 = digitShifted + carry;\n    carry = digitShifted\
    \ >> 1;\n    digitShifted &= 1;\n    result += std::to_string(digitShifted2);\n\
    \    if (carry != 0) {\n        result += std::to_string(carry);\n    }\n    return\
    \ result;", "    std::string ans = \"\";\n    long digit = x;\n    long remainder\
    \ = x;\n    long carry = 0;\n    long i = 0;\n    while (shift > 0) {\n      \
    \  digit = remainder % 10;\n        remainder = remainder / 10;\n        carry\
    \ = 1;\n        if (i == 0) {\n            ans += digit;\n        }\n        else\
    \ {\n            ans += carry;\n            ans += digit;\n        }\n       \
    \ i++;\n        shift -= 1;\n    }\n    if (carry > 0) {\n        ans += carry;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    long carry = 1;\n\
    \    long digit;\n    while (shift > 0) {\n        digit = x % 10;\n        x\
    \ /= 10;\n        carry = digit + carry;\n        ans = std::to_string(carry)\
    \ + ans;\n        shift -= 1;\n    }\n    if (shift > 0)\n        ans = std::to_string(carry)\
    \ + ans;\n    return ans;", "    std::string ans;\n    long digit = x;\n    long\
    \ carry = 0;\n    while (shift > 0) {\n        digit = digit * 10 + carry;\n \
    \       carry = digit / 10;\n        digit = digit % 10;\n        ans.push_back((char)('0'\
    \ + digit));\n        shift -= 1;\n    }\n    if (shift > 0)\n        ans.push_back((char)('0'\
    \ + carry));\n    return ans;", "    std::string ans = \"\";\n    long temp =\
    \ x;\n    long carry = 0;\n    while (shift > 0) {\n        long digit = temp\
    \ % 10;\n        temp = temp / 10;\n        carry = digit + carry;\n        ans\
    \ = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    if (carry >\
    \ 0) {\n        ans = std::to_string(carry) + ans;\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    long digit = x;\n    long remainder = 0;\n  \
    \  long i = 0;\n    while (shift > 0) {\n        remainder = digit % 10;\n   \
    \     digit = digit / 10;\n        ans = to_string(remainder) + ans;\n       \
    \ shift -= 1;\n    }\n    while (shift < 0) {\n        remainder = digit % 10;\n\
    \        digit = digit / 10;\n        ans = to_string(remainder) + ans;\n    \
    \    shift += 1;\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ temp = x;\n    long carry = 0;\n    while (shift > 0) {\n        long digit\
    \ = temp % 10;\n        temp = temp / 10;\n        carry = digit + carry;\n  \
    \      ans = std::to_string(digit) + ans;\n        shift -= 1;\n    }\n    if\
    \ (carry > 0) {\n        ans = std::to_string(carry) + ans;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    long carry = 0;\n\
    \    long digit = 0;\n    while (shift > 0) {\n        digit = n / 10;\n     \
    \   carry = n % 10;\n        ans = std::to_string(digit) + ans + std::to_string(carry);\n\
    \        n = carry;\n        shift -= 1;\n    }\n    if (shift < 0) {\n      \
    \  shift = -shift;\n        ans = std::to_string(n - shift) + ans;\n    }\n  \
    \  return ans;", "    std::string ans = \"\";\n    long digit = x;\n    long remainder\
    \ = x;\n    long i = 0;\n    while (shift > i) {\n        ans += std::to_string(digit);\n\
    \        digit = remainder;\n        remainder = digit % 10;\n        i++;\n \
    \   }\n    if (shift > i) {\n        ans += std::to_string(digit);\n    }\n  \
    \  return ans;", "    std::string ans = \"\";\n    long curr = x;\n    while (shift\
    \ > 0) {\n        ans = std::to_string(curr % 10) + ans;\n        curr = curr\
    \ >> 1;\n        shift--;\n    }\n    ans = std::to_string(curr) + ans;\n    return\
    \ ans;", "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n    long\
    \ r = 1;\n    long t = 0;\n    long i = 0;\n    while (n != 0) {\n        t =\
    \ n & m;\n        ans += (char)(t + '0');\n        n >>= shift;\n        m <<=\
    \ 1;\n        r <<= 1;\n        i++;\n    }\n    return ans;", "    std::string\
    \ ans;\n    long temp = 0;\n    long remainder = 0;\n    long digit;\n    long\
    \ count = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ x;\n    long m = 1;\n    while (l > 0) {\n        digit = l % 10;\n        temp\
    \ = temp * 10 + digit;\n        l = l / 10;\n    }\n    temp = temp * m;\n   \
    \ while (shift > 0) {\n        remainder = temp % 10;\n        temp = temp / 10;\n\
    \        ans = ans + remainder;\n        shift = shift - 1;\n    }\n    if (shift\
    \ < 0) {\n        ans = ans + temp;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long temp = x;\n    long digit;\n    long count = 0;\n    while\
    \ (shift > count) {\n        digit = temp % 10;\n        temp = temp / 10;\n \
    \       ans = std::to_string(digit) + ans;\n        count += 1;\n    }\n    while\
    \ (shift < count) {\n        digit = temp % 10;\n        temp = temp / 10;\n \
    \       ans = std::to_string(digit * -1) + ans;\n        count += 1;\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long digit = x;\n    while\
    \ (shift > 0)\n    {\n        digit = digit / 10;\n        ans = std::to_string(digit)\
    \ + ans;\n        shift -= 1;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    long digits = 1;\n    while (shift > digits) {\n        digits *=\
    \ 10;\n        shift /= 10;\n    }\n    while (shift > 0) {\n        long rem\
    \ = shift % 10;\n        ans += (x % 10 + rem) / digits;\n        x /= 10;\n \
    \       shift /= 10;\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    long remainder = x % 10;\n    long digit = x / 10;\n    long i = 0;\n   \
    \ while (shift > i) {\n        ans += digit;\n        shift -= i;\n        digit\
    \ = remainder / 10;\n        remainder = remainder % 10;\n        i++;\n    }\n\
    \    ans += digit;\n    ans += remainder;\n    return ans;", "    std::string\
    \ ans = \"\";\n    long remainder = x % 10;\n    long digit = x / 10;\n    long\
    \ i = 0;\n    while (shift > i) {\n        ans += digit;\n        shift -= i;\n\
    \        digit = remainder / 10;\n        remainder = remainder % 10;\n      \
    \  i++;\n    }\n    if (shift > i) {\n        ans += digit;\n        shift -=\
    \ i;\n    }\n    while (shift > 0) {\n        ans += digit;\n        shift -=\
    \ i;\n        digit = remainder / 10;\n        remainder = remainder % 10;\n \
    \       i++;\n    }\n    return ans;", "    std::string ans = \"\";\n    long\
    \ temp = x;\n    long remainder = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    while (temp != 0) {\n        remainder = temp % 10;\n        ans\
    \ = remainder + ans;\n        temp = temp / 10;\n        i++;\n    }\n    temp\
    \ = x;\n    while (temp != 0) {\n        remainder = temp % 10;\n        ans =\
    \ remainder + ans;\n        temp = temp / 10;\n        j++;\n    }\n    temp =\
    \ x;\n    while (temp != 0) {\n        remainder = temp % 10;\n        ans = remainder\
    \ + ans;\n        temp = temp / 10;\n        k++;\n    }\n    if (shift > i) {\n\
    \        ans = ans + ans;\n        shift -= i;\n    }\n    if (shift > j) {\n\
    \        ans = ans + ans;\n        shift -= j;\n    }\n    if (shift > k) {\n\
    \        ans = ans + ans;\n        shift -= k;\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    long temp = x;\n    while (shift > 0) {\n     \
    \   ans += std::to_string(temp % 10);\n        temp /= 10;\n        shift--;\n\
    \    }\n    if (shift > 0) {\n        ans += std::to_string(temp % 10);\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    long n = x;\n    long m =\
    \ 1;\n    while (n != 0) {\n        long r = n % 10;\n        ans = std::to_string(r)\
    \ + ans;\n        n = n / 10;\n    }\n    if (shift > ans.size()) {\n        shift\
    \ = ans.size();\n    }\n    long k = shift % ans.size();\n    ans = ans.substr(0,\
    \ k) + ans.substr(k + 1, ans.size() - k);\n    return ans;", "    std::string\
    \ ans = \"\";\n    long n = x;\n    long carry = 0;\n    long digit;\n    long\
    \ digits = 0;\n    long i = 0;\n    long j = 0;\n    while (n != 0) {\n      \
    \  digit = n % 10;\n        digits = digits + 1;\n        carry = (digit + carry)\
    \ % 10;\n        ans = ans + std::to_string(digit) + std::to_string(carry);\n\
    \        n = n / 10;\n    }\n    digits = digits + shift;\n    i = digits - 1;\n\
    \    while (i >= 0) {\n        digit = ans[i] - '0';\n        carry = (digit +\
    \ carry) % 10;\n        ans[i] = '0' + carry;\n        i = i - 1;\n    }\n   \
    \ return ans;", "    std::string ans = \"\";\n    long temp = x;\n    long carry\
    \ = 0;\n    while (shift > 0) {\n        temp = temp / 10;\n        carry = temp\
    \ % 10;\n        ans = std::to_string(temp) + std::to_string(carry) + ans;\n \
    \       shift -= 1;\n    }\n    if (shift > 0) {\n        temp = temp / 10;\n\
    \        ans = std::to_string(temp) + ans;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    long remainder = x % 10;\n    long digit = x / 10;\n    long\
    \ digits = shift / 10;\n    long shifts = shift % 10;\n    long i = 0;\n    while\
    \ (i < digits) {\n        ans += digit;\n        digit = remainder;\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        i++;\n    }\n    while (shifts\
    \ > 0) {\n        ans += digit;\n        digit = remainder;\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        shifts--;\n    }\n    return\
    \ ans;", "    std::string result;\n    long remainder;\n    long digit;\n    long\
    \ carry = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long n =\
    \ x;\n    long m = 1;\n    while (n != 0) {\n        remainder = n % 10;\n   \
    \     digit = remainder / m;\n        carry = remainder % m;\n        result +=\
    \ to_string(digit);\n        n /= 10;\n        m /= 10;\n        ++i;\n      \
    \  ++j;\n        ++k;\n    }\n    if (shift > i) {\n        result += '0';\n \
    \       shift -= i;\n    }\n    if (shift > j) {\n        result += '0';\n   \
    \     shift -= j;\n    }\n    if (shift > k) {\n        result += '0';\n     \
    \   shift -= k;\n    }\n    if (shift > 0) {\n        result += '0';\n    }\n\
    \    if (carry > 0) {\n        result += to_string(carry);\n    }\n    return\
    \ result;", "    std::string ans = \"\";\n    long n = x;\n    long m = 1;\n \
    \   while (m <= shift) {\n        long r = n / m;\n        ans = std::to_string(r)\
    \ + ans;\n        n = m;\n        m *= 10;\n    }\n    ans = std::to_string(n)\
    \ + ans;\n    return ans;", "    std::string ans = \"\";\n    long carry = 1;\n\
    \    long digit;\n    long i = 0;\n    while (shift > 0) {\n        digit = x\
    \ % 10;\n        x /= 10;\n        ans += digit;\n        carry = carry + digit\
    \ * pow(10, shift--);\n        i++;\n    }\n    if (shift > 0) {\n        ans\
    \ += \"1\";\n        carry = carry + 1;\n    }\n    while (ans.size() < i) {\n\
    \        ans = \"0\" + ans;\n    }\n    ans = ans.substr(0, i);\n    if (carry\
    \ > 0) {\n        ans += \"1\";\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    long n = x;\n    long m = 1;\n    while (shift > 0) {\n       \
    \ long r = n % 10;\n        ans = std::to_string(r) + ans;\n        n /= 10;\n\
    \        m <<= 1;\n        shift -= 1;\n    }\n    while (n != 0) {\n        long\
    \ r = n % 10;\n        ans = std::to_string(r) + ans;\n        n /= 10;\n    }\n\
    \    return ans;"]
stop_tokens:
- "\n}"
