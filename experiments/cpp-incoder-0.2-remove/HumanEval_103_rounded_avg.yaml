name: HumanEval_103_rounded_avg
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
  \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0)\
  \ {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
  \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
  \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m, and\
  \ your task is to compute the\n// average of the integers from n through m (including\
  \ n and m). \n// Round the answer to the nearest integer and convert that to binary.\n\
  // If n is greater than m, return -1.\n// Example:\nUnion_std_string_long rounded_avg(long\
  \ n, long m) {\n"
tests: "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
  \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13)) ==\
  \ (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"\
  0b1111001010\")));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"\
  0b1111100100\")));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"\
  0b1011000010\")));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"\
  0b101101110\")));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"\
  0b110101101\")));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"\
  0b1001110010\")));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"\
  0b11010111\")));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n\
  \    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
  \ (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
completions: []
stop_tokens:
- "\n}"
