language: cpp
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max)\n            max = i;\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\n    \
    \        max_val = l[i];\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max)\n            max = i;\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = 0;\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max)\n            max = i;\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max)\n            max = i;\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\n    \
    \        max_val = l[i];\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_element\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = 0;\n\
    \    long max_pos = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if\
    \ (l[i] > max_ele) {\n            max_ele = l[i];\n            max_pos = i;\n\
    \        }\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max)\n            max = i;\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_val = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n  \
    \          max_val = l[i];\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_ele) {\n  \
    \          max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080599
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\nlong max_element(std::vector<long> l) {\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080695
