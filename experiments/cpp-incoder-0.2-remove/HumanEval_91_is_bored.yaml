name: HumanEval_91_is_bored
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
  \ of words, and your task is to count the number\n// of boredoms. A boredom is a\
  \ sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
  \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n"
tests: "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
  Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
  \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
  )) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\"\
  )) == (0));\n}\n"
completions: ["    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n \
    \       if(S[i] == 'I' && S[i+1] == '.') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;", "    // Write\
    \ your code here\n    long boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredom++;\n        }\n    }\n    return\
    \ boredom;", "    long boredoms = 0;\n    std::string word;\n    for (auto &c\
    \ : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    long boredoms = 0;\n  \
    \  std::string word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?'\
    \ || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            word = c;\n        }\n\
    \        else if (word == \"I\") {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    std::string delimiters = \"\
    .?!\";\n    size_t pos = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        pos = 0;\n        for(size_t i = 0; i < delimiters.size(); i++)\
    \ {\n            if(word.find(delimiters[i]) != std::string::npos) {\n       \
    \         pos = word.find(delimiters[i]);\n                break;\n          \
    \  }\n        }\n        if(pos == 0) {\n            boredoms++;\n        }\n\
    \    }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t i = 0;\n\
    \    while (pos < S.size()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        if (word == \"I\") {\n            boredoms += 1;\n        }\n       \
    \ pos = delimiters.find(S.substr(pos));\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if(word == \".\" || word == \"?\" || word ==\
    \ \"!\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n      \
    \  }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if (word == \"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    long boredoms = 0;\n  \
    \  for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(auto &c:\
    \ S) {\n        if(c == '.' || c == '?' || c == '!') {\n            boredoms +=\
    \ 1;\n        }\n        else {\n            word = c;\n        }\n    }\n   \
    \ return boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == 'I' && S[i+1] == '.' && S[i+2] == '.' && S[i+3] ==\
    \ '.') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    std::string delimiters = \"\
    .?!\";\n    size_t pos = 0;\n    while ((pos = S.find(delimiters, pos)) != std::string::npos)\
    \ {\n        word = S.substr(0, pos);\n        if (word == \"I\") {\n        \
    \    boredoms++;\n        }\n        pos = pos + 1;\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos, 1);\n   \
    \     if (delimiters.find(word) != std::string::npos) {\n            boredoms\
    \ += 1;\n        }\n        pos = pos + 1;\n    }\n    return boredoms;", "  \
    \  // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n   \
    \ }\n    return boredoms;", "    long boredoms = 0;\n    // Write your code here\n\
    \    return boredoms;", "    // Write your code here\n    long boredoms = 0;\n\
    \    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n          \
    \  boredoms += 1;\n        }\n    }\n    return boredoms;", "    int boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        i += 1;\n    }\n    return boredoms;",
  "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            count++;\n        }\n    }\n  \
    \  return count;", "    long boredoms = 0;\n    int i = 0;\n    while (i < S.size())\
    \ {\n        if (S[i] == '.') {\n            if (S[i + 1] == '.') {\n        \
    \        if (S[i + 2] == '.') {\n                    if (S[i + 3] == '.') {\n\
    \                        if (S[i + 4] == '.') {\n                            if\
    \ (S[i + 5] == '.') {\n                                if (S[i + 6] == '.') {\n\
    \                                    if (S[i + 7] == '.') {\n                \
    \                        if (S[i + 8] == '.') {\n                            \
    \                if (S[i + 9] == '.') {\n                                    \
    \            if (S[i + 10] == '.') {\n                                       \
    \             if (S[i + 11] == '.') {\n                                      \
    \                  if (S[i + 12] == '.') {\n                                 \
    \                           if (S[i + 13] == '.') {\n                        \
    \                                        if (S[i + 14] == '.') {\n           \
    \                                                         if (S[i + 15] == '.')\
    \ {\n                                                                        boredoms\
    \ += 1;\n                                                                    }\n\
    \                                                                }\n         \
    \                                                   }\n                      \
    \                                  }\n                                       \
    \             }\n                                                }\n         \
    \                                   }\n                                      \
    \  }\n                                    }\n                                }\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        i += 1;\n    }\n  \
    \  return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for\
    \ (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n         \
    \   boredoms += 1;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;", "    int count = 0;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredoms += 1;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (auto &c : S) {\n        if (c == delimiters[0]) {\n            boredoms +=\
    \ 1;\n        }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n     \
    \   if(word == \".\" || word == \"?\" || word == \"!\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    // Write your code here\n\
    \    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i]\
    \ == 'I'){\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    std::string delimiters = \"\
    .?!\";\n    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n  \
    \      if (word.compare(0, 2, \"I\") == 0) {\n            boredoms += 1;\n   \
    \     }\n    }\n    return boredoms;", "    long boredoms = 0;\n    for(int i\
    \ = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1] == '.') {\n    \
    \        boredoms++;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    int boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == 'I' && S[i + 1] == '.') {\n            boredoms++;\n     \
    \   }\n    }\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n     \
    \   word = S[i];\n        if(word == \"I\") {\n            boredoms++;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n     \
    \   if(word == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    int n = S.size();\n    for (int i =\
    \ 0; i < n; i++) {\n        if (S[i] == 'I') {\n            boredoms += 1;\n \
    \       }\n    }\n    return boredoms;", "    int boredoms = 0;\n    int i = 0;\n\
    \    while(i < S.size()) {\n        if(S[i] == 'I')\n            boredoms++;\n\
    \        i++;\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if(word == \".\" || word == \"?\" || word\
    \ == \"!\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    std::stringstream ss;\n    ss\
    \ << S;\n    while(ss >> word) {\n        if(word == \"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    int boredoms = 0;\n   \
    \ int i = 0;\n    while (i < S.size()) {\n        if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            boredoms++;\n        }\n        i++;\n    }\n\
    \    return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(auto\
    \ &c: S) {\n        if(c == '.' || c == '?' || c == '!') {\n            boredoms\
    \ += 1;\n        }\n        word+=c;\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.length(); i++)\
    \ {\n        word = S[i];\n        if(word == \".\" || word == \"?\" || word ==\
    \ \"!\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if\
    \ (S[i] == 'I' && S[i + 1] == '.') {\n            i++;\n            while (i <\
    \ S.size() && S[i] != '.') {\n                i++;\n            }\n          \
    \  if (i == S.size()) {\n                boredoms += 1;\n            }\n     \
    \   }\n        i++;\n    }\n    return boredoms;", "    // Write your code here\n\
    \    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i]\
    \ == 'I'){\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n   \
    \ }\n    return boredoms;", "    int count = 0;\n    for(int i = 0; i < S.length();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  count++;\n        }\n    }\n    return count;", "    // Write your code here\n\
    \    long count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i]\
    \ == 'I'){\n            count++;\n        }\n    }\n    return count;", "    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;", "    long boredoms = 0;\n    // Your code here\n\
    \    return boredoms;", "    // Write your code here\n    long boredoms = 0;\n\
    \    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n          \
    \  boredoms += 1;\n        }\n    }\n    return boredoms;", "    int boredoms\
    \ = 0;\n    int i = 0;\n    while(i < S.length()) {\n        if(S[i] == 'I') {\n\
    \            boredoms++;\n        }\n        i++;\n    }\n    return boredoms;",
  "    // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n   \
    \ }\n    return boredoms;", "    int boredoms = 0;\n    int i = 0;\n    while(i\
    \ < S.length()){\n        if(S[i] == 'I'){\n            boredoms++;\n        }\n\
    \        i++;\n    }\n    return boredoms;", "    int count = 0;\n    for(int\
    \ i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            count++;\n        }\n    }\n    return count;", "    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for\
    \ (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n         \
    \   boredoms += 1;\n        }\n    }\n    return boredoms;", "    int boredoms\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;", "    // Write\
    \ your code here\n    long count = 0;\n    for(int i = 0; i < S.length(); i++){\n\
    \        if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return\
    \ count;", "    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == 'I') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(auto &c\
    \ : S) {\n        if(c == '.' || c == '?' || c == '!') {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    long boredoms = 0;\n  \
    \  std::string word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?'\
    \ || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i]\
    \ == 'I' && S[i+1] == '.') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        word = S[i];\n        if(word == \".\" || word\
    \ == \"?\" || word == \"!\") {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for\
    \ (auto &c: S) {\n        if (c == '.' || c == '?' || c == '!') {\n          \
    \  boredoms += 1;\n        }\n    }\n    return boredoms;", "    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == 'I' && S[i + 1] == '.') {\n            boredoms++;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    // Write your\
    \ code here\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.') {\n        \
    \    boredoms += 1;\n        }\n        if(S[i] == '?') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == '!') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;", " \
    \   // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n   \
    \ }\n    return boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == 'I' && S[i+1] == '.') {\n            boredoms +=\
    \ 1;\n        }\n    }\n    return boredoms;", "    // Write your code here\n\
    \    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i]\
    \ == 'I'){\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            count++;\n        }\n    }\n  \
    \  return count;", "    long boredoms = 0;\n    std::string word;\n    std::stringstream\
    \ ss(S);\n    while(std::getline(ss, word, ','))\n    {\n        if(word == \"\
    I\")\n        {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "    int boredoms = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == 'I' && S[i + 1] == '.') {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n          \
    \  boredoms += 1;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (auto &c : S) {\n        if (c == delimiters[0]) {\n            boredoms +=\
    \ 1;\n        }\n        if (c == delimiters[1]) {\n            boredoms += 1;\n\
    \        }\n        if (c == delimiters[2]) {\n            boredoms += 1;\n  \
    \      }\n        if (c == delimiters[3]) {\n            boredoms += 1;\n    \
    \    }\n        if (c == delimiters[4]) {\n            boredoms += 1;\n      \
    \  }\n        if (c == delimiters[5]) {\n            boredoms += 1;\n        }\n\
    \        if (c == delimiters[6]) {\n            boredoms += 1;\n        }\n  \
    \      if (c == delimiters[7]) {\n            boredoms += 1;\n        }\n    \
    \    if (c == delimiters[8]) {\n            boredoms += 1;\n        }\n      \
    \  if (c == delimiters[9]) {\n            boredoms += 1;\n        }\n        if\
    \ (c == delimiters[10]) {\n            boredoms += 1;\n        }\n        if (c\
    \ == delimiters[11]) {\n            boredoms += 1;\n        }\n        if (c ==\
    \ delimiters[12]) {\n            boredoms += 1;\n        }\n        if (c == delimiters[13])\
    \ {\n            boredoms += 1;\n        }\n        if (c == delimiters[14]) {\n\
    \            boredoms += 1;\n        }\n        if (c == delimiters[15]) {\n \
    \           boredoms += 1;\n        }\n        if (c == delimiters[16]) {\n  \
    \          boredoms += 1;\n        }\n        if (c == delimiters[17]) {\n   \
    \         boredoms += 1;\n        }\n        if (c == delimiters[18]) {\n    \
    \        boredoms += 1;\n        }\n        if (c == delimiters[19]) {\n     \
    \       boredoms += 1;\n        }\n        if (c == delimiters[20]) {\n      \
    \      boredoms += 1;\n        }\n        if (c == delimiters[21]) {\n       \
    \     boredoms += 1;\n        }\n        if (c == delimiters[22]) {\n        \
    \    boredoms += 1;\n        }\n        if (c == delimiters[23]) {\n         \
    \   boredoms += 1;\n        }\n        if (c == delimiters[24]) {\n          \
    \  boredoms += 1;\n        }\n        if (c == delimiters[25]) {\n           \
    \ boredoms += 1;\n        }\n        if (c == delimiters[26]) {\n            boredoms\
    \ += 1;\n        }\n        if (c == delimiters[27]) {\n            boredoms +=\
    \ 1;\n        }\n        if (c == delimiters[28]) {\n            bo", "    long\
    \ boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c\
    \ == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n \
    \   }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n        if(word\
    \ == \".\" || word == \"?\" || word == \"!\") {\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for(auto &c: S) {\n        if(c == '.' || c == '?' || c == '!') {\n\
    \            boredoms += 1;\n        }\n        else {\n            word = c;\n\
    \        }\n    }\n    return boredoms;", "    // Write your code here\n    long\
    \ count = 0;\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I'){\n     \
    \       count++;\n        }\n    }\n    return count;", "    long boredoms = 0;\n\
    \    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n        word\
    \ = S[i];\n        if(word == \".\" || word == \"?\" || word == \"!\") {\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;", "    int boredoms\
    \ = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I' &&\
    \ S[i + 1] == '.') {\n            i++;\n            while (i < S.size() && S[i]\
    \ != '.') {\n                i++;\n            }\n            if (i < S.size()\
    \ && S[i] == '.') {\n                i++;\n                while (i < S.size()\
    \ && S[i] != '.') {\n                    i++;\n                }\n           \
    \     if (i < S.size() && S[i] == '.') {\n                    i++;\n         \
    \           while (i < S.size() && S[i] != '.') {\n                        i++;\n\
    \                    }\n                    if (i < S.size() && S[i] == '.') {\n\
    \                        i++;\n                        while (i < S.size() &&\
    \ S[i] != '.') {\n                            i++;\n                        }\n\
    \                        if (i < S.size() && S[i] == '.') {\n                \
    \            i++;\n                            while (i < S.size() && S[i] !=\
    \ '.') {\n                                i++;\n                            }\n\
    \                            if (i < S.size() && S[i] == '.') {\n            \
    \                    i++;\n                                while (i < S.size()\
    \ && S[i] != '.') {\n                                    i++;\n              \
    \                  }\n                                if (i < S.size() && S[i]\
    \ == '.') {\n                                    i++;\n                      \
    \              while (i < S.size() && S[i] != '.') {\n                       \
    \                 i++;\n                                    }\n              \
    \                      if (i < S.size() && S[i] == '.') {\n                  \
    \                      i++;\n                                        while (i\
    \ < S.size() && S[i] != '.') {\n                                            i++;\n\
    \                                        }\n                                 \
    \       if (i < S.size() && S[i] == '.') {\n                                 \
    \           i++;\n                                            while (i < S.size()\
    \ && S[i] != '.') {\n                                                i++;\n  \
    \                                          }\n                               \
    \             if (i < S.size() && S[i] == '.') {\n                           \
    \                     i++;\n                                                while\
    \ (i < S.size() && S[i] != '.') {\n                                          \
    \          i++;\n                                                }\n         \
    \                                       if (i < S.size() && S[i] == '.') {\n \
    \                                                   i++;\n                   \
    \                                 while (i < S.size() && S[i] != '.') {\n    \
    \                                                    i++;\n                  \
    \                                  }\n                                       \
    \             if (i < S.size() && S[i] == '.') {\n                           \
    \                             i++;\n                                         \
    \               while (i < S.size() && S[i] != '.') {\n                      \
    \                                      i++;\n                                \
    \                        }\n                                                 \
    \       if (i < S.size() && S[i] == '.') {\n                                 \
    \                           i++;\n                                           \
    \                 while (i < S.size() && S[i] != '.') {\n                    \
    \                                            i++;\n                          \
    \                                  }\n                                       \
    \                     if (i < S.size() && S[i] == '.') {\n                   \
    \                                             i++;\n                         \
    \                                       while (i < S.size() && S[i] != '.') {\n\
    \                                                                    i++;\n  \
    \                                                              }\n           \
    \                                                     if (i < S.size() && S[i]\
    \ == '.') {\n                                                                \
    \    i++", "    long boredoms = 0;\n    std::string word;\n    for(auto &c: S)\
    \ {\n        if(c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;", "    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I'\
    \ && S[i+1] == '.') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms += 1;\n        }\n        word = S[i];\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    std::string\
    \ delimiters = \".?!\";\n    for (size_t i = 0; i < S.size(); i++) {\n       \
    \ word = S[i];\n        if (word.find(delimiters) != std::string::npos) {\n  \
    \          word = word.substr(0, word.find(delimiters));\n        }\n        if\
    \ (word == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    std::string delimiters = \"\
    .?!\";\n    size_t pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n\
    \        word = S.substr(pos, 1);\n        if (word == \"I\") {\n            boredoms\
    \ += 1;\n        }\n        pos = pos + 1;\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c\
    \ == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n \
    \   }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i]\
    \ == 'I' && S[i + 1] == '.') {\n            boredoms += 1;\n            i += 2;\n\
    \        } else if (S[i] == 'I' && S[i + 1] == '?') {\n            boredoms +=\
    \ 1;\n            i += 2;\n        } else if (S[i] == 'I' && S[i + 1] == '!')\
    \ {\n            boredoms += 1;\n            i += 2;\n        } else if (S[i]\
    \ == '.') {\n            i += 1;\n        } else if (S[i] == '?') {\n        \
    \    i += 1;\n        } else if (S[i] == '!') {\n            i += 1;\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    return boredoms;", "  \
    \  // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n   \
    \ }\n    return boredoms;", "    int count = 0;\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n         \
    \   count++;\n        }\n    }\n    return count;", "    // Write your code here\n\
    \    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i]\
    \ == 'I'){\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c\
    \ == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n \
    \       else {\n            word = c;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            word = c;\n        }\n\
    \        else if (word == \"I\") {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;", "    // Write your code here\n    long boredoms =\
    \ 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n     \
    \       boredoms += 1;\n        }\n    }\n    return boredoms;", "    // Write\
    \ your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.length(); i++)\n\
    \    {\n        if(S[i] == 'I')\n        {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    int i = 0;\n    while(i < S.size()) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n        i +=\
    \ 1;\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if(word == \".\" || word == \"?\" || word ==\
    \ \"!\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == '?') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == '!') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n        word = c;\n    }\n    return boredoms;", "    long boredoms = 0;\n\
    \    std::string word;\n    std::string delimiters = \".?!\";\n    for (size_t\
    \ i = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word.compare(0,\
    \ 2, \"I\") == 0) {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == 'I' && S[i+1] == '.') {\n            boredoms += 1;\n    \
    \    }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n      \
    \  }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n        word = c;\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ len = S.length();\n    while (pos < len) {\n        word = S.substr(pos, 1);\n\
    \        if (delimiters.find(word) != std::string::npos) {\n            boredoms\
    \ += 1;\n        }\n        pos += 1;\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c\
    \ == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n \
    \   }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n        if(word\
    \ == \".\" || word == \"?\" || word == \"!\") {\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c: S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    // Write your code here\n    long boredom\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredom++;\n        }\n    }\n    return boredom;", "    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    int n = S.size();\n    for(int i =\
    \ 0; i < n; i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;", "    // Write\
    \ your code here\n    long count = 0;\n    for(int i = 0; i < S.length(); i++){\n\
    \        if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return\
    \ count;", "    long boredoms = 0;\n    std::string word;\n    for (auto &c :\
    \ S) {\n        if (c == '.' || c == '?' || c == '!') {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    long boredoms = 0;\n  \
    \  for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    int i = 0;\n    while (i < S.size())\
    \ {\n        if (S[i] == '.') {\n            i++;\n        } else if (S[i] ==\
    \ '?') {\n            i++;\n        } else if (S[i] == '!') {\n            i++;\n\
    \        } else if (S[i] == 'I') {\n            i++;\n            while (i < S.size()\
    \ && S[i] != 'I') {\n                i++;\n            }\n        } else {\n \
    \           i++;\n        }\n        boredoms++;\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    int i = 0;\n    while (i < S.length()) {\n        if\
    \ (S[i] == 'I') {\n            boredoms++;\n        }\n        i++;\n    }\n \
    \   return boredoms;", "    // Write your code here\n    long count = 0;\n   \
    \ for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n            count++;\n\
    \        }\n    }\n    return count;", "    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n\
    \            count++;\n        }\n    }\n    return count;", "    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(int\
    \ i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            word = S[i];\n            for(int j = i; j < S.size(); j++)\
    \ {\n                if(S[j] == word) {\n                    boredoms += 1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return boredoms;", "    int boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == 'I')\n            boredoms++;\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    // Write your code here\n\
    \    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i]\
    \ == 'I'){\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    // Write your\
    \ code here\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I'){\n      \
    \      boredoms++;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c\
    \ == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n \
    \   }\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n \
    \           boredoms++;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;", "    long boredoms = 0;\n    for(int\
    \ i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms++;\n        }\n    }\n    return boredoms;", " \
    \   long boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.size();\
    \ i++) {\n        if(S[i] == '.') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == '?') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == '!') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n \
    \       if(S[i] == 'I') {\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == 'I') {\n            boredoms += 1;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  int boredoms = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i]\
    \ == 'I' && S[i + 1] == '.') {\n            boredoms++;\n            i += 2;\n\
    \        } else if (S[i] == 'I' && S[i + 1] == '?') {\n            boredoms++;\n\
    \            i += 2;\n        } else if (S[i] == 'I' && S[i + 1] == '!') {\n \
    \           boredoms++;\n            i += 2;\n        } else if (S[i] == '.' &&\
    \ S[i + 1] == '.') {\n            boredoms++;\n            i += 2;\n        }\
    \ else if (S[i] == '.' && S[i + 1] == '?') {\n            boredoms++;\n      \
    \      i += 2;\n        } else if (S[i] == '.' && S[i + 1] == '!') {\n       \
    \     boredoms++;\n            i += 2;\n        } else if (S[i] == '?' && S[i\
    \ + 1] == '.') {\n            boredoms++;\n            i += 2;\n        } else\
    \ if (S[i] == '?' && S[i + 1] == '?') {\n            boredoms++;\n           \
    \ i += 2;\n        } else if (S[i] == '?' && S[i + 1] == '!') {\n            boredoms++;\n\
    \            i += 2;\n        } else if (S[i] == '!' && S[i + 1] == '.') {\n \
    \           boredoms++;\n            i += 2;\n        } else if (S[i] == '!' &&\
    \ S[i + 1] == '?') {\n            boredoms++;\n            i += 2;\n        }\
    \ else if (S[i] == '!' && S[i + 1] == '!') {\n            boredoms++;\n      \
    \      i += 2;\n        } else if (S[i] == '.' && S[i + 1] == '.' && S[i + 2]\
    \ == '.') {\n            boredoms++;\n            i += 3;\n        } else if (S[i]\
    \ == '.' && S[i + 1] == '.' && S[i + 2] == '?') {\n            boredoms++;\n \
    \           i += 3;\n        } else if (S[i] == '.' && S[i + 1] == '.' && S[i\
    \ + 2] == '!') {\n            boredoms++;\n            i += 3;\n        } else\
    \ if (S[i] == '.' && S[i + 1] == '?' && S[i + 2] == '.') {\n            boredoms++;\n\
    \            i += 3;\n        } else if (S[i] == '.' && S[i + 1] == '?' && S[i\
    \ + 2] == '?') {\n            boredoms++;\n            i += 3;\n        } else\
    \ if (S[i] == '.' && S[i + 1] == '?' && S[i + 2] == '!') {\n            boredoms++;\n\
    \            i += 3;\n        } else if (S[i] == '.' && S[i + 1] == '!' && S[i\
    \ + 2] == '.') {\n            boredoms++;\n            i += 3;\n        } else\
    \ if (S[i] == '.' && S[i + 1] == '!' && S[i + 2] == '?') {\n", "    long boredoms\
    \ = 0;\n    std::string word;\n    std::string::size_type pos;\n    for (pos =\
    \ S.find_first_of(\".?!\"); pos != std::string::npos; pos = S.find_first_of(\"\
    .?!\", pos + 1)) {\n        word = S.substr(0, pos);\n        if (word == \"I\"\
    ) {\n            boredoms++;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I'\
    \ && S[i+1] == '.') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    std::string\
    \ delimiters = \".?!\";\n    for (auto &c : S) {\n        if (c == delimiters[0])\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    std::string word;\n    for(auto &c : S) {\n       \
    \ if(c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n       \
    \ }\n    }\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;", "    // Write\
    \ your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == 'I') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;", "    int count = 0;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count++;\n\
    \        }\n    }\n    return count;", "    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    for(auto &c : S) {\n        if(c ==\
    \ '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;", "    long boredoms = 0;\n    std::string word;\n    std::string\
    \ delimiters = \".?!\";\n    size_t pos = 0;\n    size_t len = S.length();\n \
    \   while (pos < len) {\n        word = S.substr(pos, 1);\n        if (delimiters.find(word)\
    \ != std::string::npos) {\n            boredoms += 1;\n        }\n        pos\
    \ += 1;\n    }\n    return boredoms;", "    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if(word == \".\" || word == \"?\" || word ==\
    \ \"!\") {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    // Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.length();\
    \ i++) {\n        if(S[i] == 'I')\n            boredoms += 1;\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    for (auto &c\
    \ : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    long boredoms = 0;\n  \
    \  std::string word;\n    std::string delimiters = \".?!\";\n    size_t pos =\
    \ 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ 1);\n        if (word == \"I\") {\n            boredoms++;\n        }\n    \
    \    pos = pos + 1;\n    }\n    return boredoms;", "    int count = 0;\n    for(int\
    \ i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            count++;\n        }\n    }\n    return count;", "    //\
    \ Write your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n   \
    \ }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n \
    \   std::string delimiters = \".?!\";\n    for (auto &c : S) {\n        if (c\
    \ == delimiters[0]) {\n            boredoms += 1;\n        } else if (c == delimiters[1])\
    \ {\n            boredoms += 1;\n        } else if (c == delimiters[2]) {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;", "    // Write\
    \ your code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        word = S[i];\n        if(word == \".\" || word\
    \ == \"?\" || word == \"!\") {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for\
    \ (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n         \
    \   boredoms += 1;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    for(auto &i : S) {\n        if(i == '.' ||\
    \ i == '?' || i == '!') {\n            boredoms += 1;\n        }\n        word\
    \ = i;\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n      \
    \  }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(int\
    \ i = 0; i < S.size(); i++) {\n        word = S[i];\n        if(word == \".\"\
    \ || word == \"?\" || word == \"!\") {\n            boredoms += 1;\n        }\n\
    \    }\n    return boredoms;", "    long boredoms = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    for(auto &c : S) {\n        if(c ==\
    \ '.' || c == '?' || c == '!') {\n            word = c;\n            boredoms\
    \ += 1;\n        }\n    }\n    return boredoms;", "    long boredoms = 0;\n  \
    \  std::string word;\n    std::string delimiters = \".?!\";\n    size_t pos =\
    \ 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos,\
    \ delimiters.size());\n        if (word == \"I\") {\n            boredoms += 1;\n\
    \        }\n        pos = pos + delimiters.size();\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    // Write your code here\n    long count\
    \ = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n \
    \           count++;\n        }\n    }\n    return count;", "    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I' && S[i+1]\
    \ == '.') {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for(auto &c: S) {\n        if(c\
    \ == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n        }\n \
    \       word+=c;\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;", "  \
    \  long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos, 1);\n   \
    \     if (word == \"I\") {\n            pos = pos + 1;\n            while (pos\
    \ < S.size() && delimiters.find(S[pos]) == std::string::npos) {\n            \
    \    pos = pos + 1;\n            }\n            if (pos == S.size()) {\n     \
    \           boredoms += 1;\n            }\n        }\n        pos = pos + 1;\n\
    \    }\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         boredoms += 1;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n    for\
    \ (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n        for (size_t\
    \ j = 0; j < delimiters.size(); j++) {\n            if (word.find(delimiters[j])\
    \ != std::string::npos) {\n                boredoms += 1;\n                break;\n\
    \            }\n        }\n    }\n    return boredoms;", "    long boredoms =\
    \ 0;\n    for(int i = 0; i < S.size(); i++)\n    {\n        if(S[i] == 'I')\n\
    \        {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    std::stringstream ss(S);\n \
    \   while(std::getline(ss, word, ','))\n    {\n        if(word == \"I\")\n   \
    \     {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n      \
    \  if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n     \
    \   }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    for(auto &c: S) {\n        if(c == '.' || c == '?' || c == '!') {\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;", "    long\
    \ boredoms = 0;\n    std::string word;\n    std::string delimiters = \".?!\";\n\
    \    size_t pos = 0;\n    while ((pos = S.find(delimiters, pos)) != std::string::npos)\
    \ {\n        word = S.substr(0, pos);\n        if (word == \"I\") {\n        \
    \    boredoms += 1;\n        }\n        pos = pos + 1;\n    }\n    return boredoms;",
  "    long boredoms = 0;\n    std::string word;\n    std::string delimiters = \"\
    .?!\";\n    for (auto &c : S) {\n        if (c == delimiters[0]) {\n         \
    \   boredoms += 1;\n        }\n    }\n    return boredoms;", "    // Write your\
    \ code here\n    long boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == 'I'){\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    int boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;", "    int count = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n    }\n   \
    \ return boredoms;", "    long boredoms = 0;\n    std::string word;\n    for(int\
    \ i = 0; i < S.size(); i++) {\n        word = S[i];\n        if(word == \".\"\
    \ || word == \"?\" || word == \"!\") {\n            boredoms += 1;\n        }\n\
    \    }\n    return boredoms;"]
stop_tokens:
- "\n}"
