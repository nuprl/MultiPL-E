name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a list\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty list.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\nstd::vector<std::string> select_words(std::string\
  \ s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
  })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
  Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
  ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
  ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
  Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n \
  \   assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
  a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
  c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
completions: ["    std::vector<std::string> res;\n    // Write your code here\n  \
    \  return res;", "    // Your code here\n    std::vector<std::string> v;\n   \
    \ v.push_back(\"\");\n    v.push_back(s);\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u'){\n\
    \            v.push_back(s[i]);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::vector<std::string>\
    \ temp;\n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n            temp.push_back(c);\n    \n    for(auto &c:\
    \ temp)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            res.push_back(c);\n    \n    for(auto &c: temp)\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            select_words(s,\
    \ n, res);\n    \n    return res;", "    std::vector<std::string> res;\n    \n\
    \    // Your code goes here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    long cnt = 0;\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n\
    \    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n \
    \   }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt != n)\
    \ {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n      \
    \  }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt !=\
    \ n) {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n   \
    \     }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt !=\
    \ n) {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n   \
    \     }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || ", "    std::vector<std::string> res;\n    \n \
    \   // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Your code goes here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    if (s.empty()) {\n        return v;\n    }\n\
    \    \n    long start = 0;\n    long end = 0;\n    long count = 0;\n    \n   \
    \ for (long i = 0; i < s.size(); i++) {\n        if (s[i] == 'a') {\n        \
    \    start = i;\n        }\n        if (s[i] == 'z') {\n            end = i;\n\
    \        }\n        if (s[i] == 'A') {\n            start = i;\n        }\n  \
    \      if (s[i] == 'Z') {\n            end = i;\n        }\n    }\n    \n    for\
    \ (long i = start; i <= end; i++) {\n        if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n\
    \        }\n    }\n    \n    if (count == n) {\n        v.push_back(s.substr(start,\
    \ end - start + 1));\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty())\n        return res;\n    \n    for(long i = 0;\
    \ i < s.size(); i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i]\
    \ == ' ')\n                break;\n            else if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n       \
    \         res.push_back(s.substr(i, 1));\n                i = i + 1;\n       \
    \         break;\n            }\n        }\n    }\n    \n    return res;", " \
    \   std::vector<std::string> res;\n    if (s.empty()) {\n        return res;\n\
    \    }\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    if (s.empty()) {\n        return v;\n    }\n\
    \    \n    long start = 0;\n    long end = 0;\n    long count = 0;\n    \n   \
    \ for (long i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n\
    \            if (count == n) {\n                v.push_back(s.substr(start, i\
    \ - start));\n                start = i + 1;\n                count = 0;\n   \
    \         }\n        }\n    }\n    v.push_back(s.substr(start, s.length() - start));\n\
    \    return v;", "    std::vector<std::string> v;\n    v.push_back(s);\n    \n\
    \    for(long i = 0; i <= s.size(); i++) {\n        if(s.at(i) == ' ') {\n   \
    \         v.push_back(s.substr(0, i));\n            v.push_back(s.substr(i+1));\n\
    \            break;\n        }\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    long count = 0;\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n\
    \    }\n    if(count == n) {\n        res.push_back(\"a\");\n        res.push_back(\"\
    e\");\n        res.push_back(\"i\");\n        res.push_back(\"o\");\n        res.push_back(\"\
    u\");\n    }\n    return res;", "    std::vector<std::string> v;\n    v.push_back(\"\
    \");\n    if (s.empty()) {\n        return v;\n    }\n    \n    long count = 0;\n\
    \    for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    if (count\
    \ != n) {\n        return v;\n    }\n    \n    for (auto &c: s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(\"\
    \");\n        }\n    }\n    \n    return v;", "    // Your code here\n    std::vector<std::string>\
    \ res;\n    std::string temp;\n    long count = 0;\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            count++;\n        }\n    }\n    if(count == n)\
    \ {\n        for(long i = 0; i < s.size(); i++) {\n            if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n           \
    \     res.push_back(s.substr(i, i + 1));\n            }\n        }\n    }\n  \
    \  return res;", "    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;", "    std::vector<std::string> v;\n    v.push_back(s);\n\
    \    v.push_back(\"\");\n    v.push_back(\"a\");\n    v.push_back(\"ab\");\n \
    \   v.push_back(\"abc\");\n    v.push_back(\"abcd\");\n    v.push_back(\"abcde\"\
    );\n    v.push_back(\"abcdef\");\n    v.push_back(\"abcdefg\");\n    v.push_back(\"\
    abcdefgh\");\n    v.push_back(\"abcdefghi\");\n    v.push_back(\"abcdefghij\"\
    );\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"abcdefghijkl\");\n  \
    \  v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\");\n   \
    \ v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\");\n\
    \    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    long count\
    \ = 0;\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    if\
    \ (count != n) {\n        return res;\n    }\n    \n    std::string word = \"\"\
    ;\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    \n    for\
    \ (char c : word) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            res.push_back(word);\n        }\n    }\n    \n \
    \   return res;", "    std::vector<std::string> res;\n    \n    // Write your\
    \ code here\n    \n    return res;", "    std::vector<std::string> v;\n    v.push_back(\"\
    \");\n    if (s.empty())\n        return v;\n    \n    long start = 0;\n    long\
    \ end = 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n      \
    \      start = i;\n        if (s[i] == 'y' || s[i] == 'o' || s[i] == 'u')\n  \
    \          end = i;\n    }\n    \n    if (end - start == n)\n        v.push_back(s.substr(start,\
    \ end - start));\n    \n    return v;", "    std::vector<std::string> res;\n \
    \   \n    // Write your code here\n    \n    return res;", "    // your code goes\
    \ here\n    std::vector<std::string> v;\n    std::string temp;\n    for(long i\
    \ = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u'){\n            v.push_back(s.substr(i, 1));\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> res;\n    \n\
    \    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    // Your\
    \ code here\n    std::vector<std::string> v;\n    \n    for(auto &c: s) {\n  \
    \      if(c != ' ') {\n            v.push_back(c);\n        }\n    }\n    \n \
    \   for(auto &c: v) {\n        if(c == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'y') {\n       \
    \     v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n   \
    \     if(c == 'o') {\n            v.erase(v.begin());\n        }\n    }\n    \n\
    \    for(auto &c: v) {\n        if(c == 'r') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 't') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'h') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'n') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'd') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'c') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'm') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'f') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'p') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 's') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(c == 'y') {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    \n    for(auto &c: v) {\n \
    \       if(c == 'k') {\n            v.erase(v.begin());\n        }\n    }\n  \
    \  \n    for(auto &c: v) {\n        if(c == 'e') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    ", "    std::vector<std::string> res;\n    \n   \
    \ // Your code here\n    \n    return res;", "    std::vector<std::string> v;\n\
    \    if(s.empty())\n        return v;\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \     v.push_back(s);\n    \n    for(auto &c: s)\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n    \n\
    \    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           \
    \ v.push_back(s);\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n    \n  \
    \  for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \     v.push_back(s);\n    \n    for(auto &c: s)\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            v.push_back(s);\n    \n\
    \    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            v.push_back(s);\n    \n    for(auto &c: s)\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n", "    // Your\
    \ code here\n    std::vector<std::string> v;\n    std::string word;\n    long\
    \ count = 0;\n    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y') {\n            count++;\n        }\n  \
    \  }\n    if(count == n) {\n        for(char c: s) {\n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n           \
    \     v.push_back(word);\n                word = \"\";\n            }\n      \
    \      else {\n                word += c;\n            }\n        }\n        v.push_back(word);\n\
    \    }\n    return v;", "    std::vector<std::string> v;\n    v.push_back(s);\n\
    \    v.push_back(\"\");\n    v.push_back(\"a\");\n    v.push_back(\"ab\");\n \
    \   v.push_back(\"abc\");\n    v.push_back(\"abcd\");\n    v.push_back(\"abcde\"\
    );\n    v.push_back(\"abcdef\");\n    v.push_back(\"abcdefg\");\n    v.push_back(\"\
    abcdefgh\");\n    v.push_back(\"abcdefghi\");\n    v.push_back(\"abcdefghij\"\
    );\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"abcdefghijkl\");\n  \
    \  v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\");\n   \
    \ v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\");\n\
    \    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh", "    // Your code here\n\
    \    std::vector<std::string> v;\n    v.push_back(\"\");\n    for(auto &c: s)\
    \ {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            v.push_back(\"\");\n        }\n        else if(c == 'b' || c == 'c'\
    \ || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c\
    \ == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n\
    \            v.push_back(\"\");\n        }\n        else if(c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            v.push_back(\"\");\n   \
    \     }\n        else if(c == 'B' || c == 'C' || c == 'D' || c == 'F' || c ==\
    \ 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N'\
    \ || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c\
    \ == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n            v.push_back(\"\"\
    );\n        }\n        else if(c == '0' || c == '1' || c == '2' || c == '3' ||\
    \ c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9') {\n  \
    \          v.push_back(\"\");\n        }\n        else {\n            v.push_back(c);\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> v;\n    \n  \
    \  // Write your code here\n    \n    return v;", '    // Your code here', " \
    \   std::vector<std::string> res;\n    if (s.empty()) {\n        return res;\n\
    \    }\n    \n    long start = 0;\n    long end = 0;\n    long count = 0;\n  \
    \  \n    for (long i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            start =\
    \ i;\n            count++;\n        }\n        if (s[i] == 'y' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            end = i;\n            count++;\n        }\n \
    \       if (count == n) {\n            res.push_back(s.substr(start, end - start\
    \ + 1));\n            count = 0;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty()) return res;\n    \n    long cnt = 0;\n    for(char c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') cnt++;\n\
    \    }\n    \n    if(cnt < n) return res;\n    \n    for(char c: s) {\n      \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  if(cnt - 1 < n) res.push_back(\"a\");\n            if(cnt - 2 < n) res.push_back(\"\
    e\");\n            if(cnt - 3 < n) res.push_back(\"i\");\n            if(cnt -\
    \ 4 < n) res.push_back(\"o\");\n            if(cnt - 5 < n) res.push_back(\"u\"\
    );\n            cnt -= 6;\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i <\
    \ s.size(); i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i]\
    \ == ' ')\n                break;\n            else if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n       \
    \         res.push_back(s.substr(i, 1));\n                break;\n           \
    \ }\n        }\n    }\n    return res;", "    std::vector<std::string> res;\n\
    \    \n    // Your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    // Your code\
    \ goes here\n    \n    return res;", "    std::vector<std::string> res;\n    \n\
    \    // Your code goes here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    long start = 0;\n  \
    \  long end = 0;\n    long count = 0;\n    \n    while(end < s.size()) {\n   \
    \     end = s.find_first_of(\"aeiouy\", start, end);\n        if(end == std::string::npos)\n\
    \            break;\n        \n        start = end;\n        end = s.find_first_of(\"\
    aeiouy\", start, end);\n        if(end == std::string::npos)\n            break;\n\
    \        \n        ++count;\n    }\n    \n    if(count == n)\n        res.push_back(s.substr(start,\
    \ end));\n    \n    return res;", "    std::vector<std::string> res;\n    \n \
    \   // Your code here\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    \n    // your code goes here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::vector<std::string>\
    \ temp;\n    for(long i=0; i<s.length(); i++) {\n        long count = 0;\n   \
    \     for(char c: s) {\n            if(c == s[i]) {\n                count++;\n\
    \            }\n        }\n        if(count == n) {\n            temp.push_back(s.substr(i,\
    \ 1));\n        }\n    }\n    \n    for(auto it: temp) {\n        res.push_back(it);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    // Write your\
    \ code here\n    return res;", "    std::vector<std::string> v;\n    if(s.empty())\n\
    \        return v;\n    \n    for(long i = 0; i < s.size(); i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            if(s[i] == ' ')\n                break;\n\
    \            else if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u')\n                continue;\n            else if(s[i] == 'y'\
    \ || s[i] == 'a')\n                continue;\n            else if(s[i] == 'o'\
    \ || s[i] == 'u')\n                continue;\n            else if(s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'a')\n                continue;\n            else\
    \ if(s[i] == 'y' || s[i] == 'o' || s[i] == 'u')\n                continue;\n \
    \           else if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n\
    \                continue;\n            else if(s[i] == 'y' || s[i] == 'a')\n\
    \                continue;\n            else if(s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u')\n                continue;\n            else if(s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n         \
    \   else if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n      \
    \          continue;\n            else if(s[i] == 'y' || s[i] == 'o' || s[i] ==\
    \ 'u')\n                continue;\n            else if(s[i] == 'o' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'a')\n                continue;\n            else\
    \ if(s[i] == 'y' || s[i] == 'a')\n                continue;\n            else\
    \ if(s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n             \
    \   continue;\n            else if(s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \                continue;\n            else if(s[i] == 'o' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'a')\n                continue;\n            else if(s[i]\
    \ == 'y' || s[i] == 'o' || s[i] == 'u')\n                continue;\n         \
    \   else if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n      \
    \          continue;\n            else if(s[i] == 'y' || s[i] == 'a')\n      \
    \          continue;\n            else if(s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u')\n                continue;\n            else if(s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n            else\
    \ if(s[i] == 'o' || s[i] == 'e' || s[i] == 'i' || s[i] == 'a')\n             \
    \   continue;\n            else if(s[i] == 'y' || s[i] == 'o' || s[i] == 'u')\n\
    \                continue;\n            else if(s[i] == 'o' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'a')\n                continue;\n            else if(s[i]\
    \ == 'y' || s[i] == 'a')\n                continue;\n            else if(s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::vector<std::string>\
    \ words;\n    for(char c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'y' || c == 'o')\n            words.push_back(c);\n\
    \    \n    for(auto &w: words)\n        if(w.size() == n)\n            res.push_back(w);\n\
    \    \n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ {\n        return res;\n    }\n    \n    // Your code here\n    \n    return\
    \ res;", "    std::vector<std::string> res;\n    if(s.empty())\n        return\
    \ res;\n    \n    for(long i = 0; i < s.size(); i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(s[i] == ' ')\n                break;\n       \
    \     else if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u')\n                res.push_back(s.substr(i, 1));\n        }\n    }\n\
    \    return res;", "    std::vector<std::string> v;\n    \n    // Your code here\n\
    \    \n    return v;", "    std::vector<std::string> res;\n    \n    // Your code\
    \ here\n    \n    return res;", "    std::vector<std::string> res;\n    \n   \
    \ // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // your code goes here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::vector<std::string>\
    \ words;\n    \n    for(char c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            words.push_back(c);\n    \n    for(auto\
    \ &w: words)\n        if(n == 0)\n            res.push_back(w);\n        else\n\
    \            select_words(w, n-1);\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    long start\
    \ = 0;\n    long end = 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n \
    \       if (s[i] == 'a') {\n            start = i;\n        }\n        if (s[i]\
    \ == 'z') {\n            end = i;\n        }\n    }\n    \n    long mid = start\
    \ + (end - start) / 2;\n    \n    long count = 0;\n    \n    for (long i = mid;\
    \ i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n    \
    \    }\n    }\n    \n    if (count == n) {\n        res.push_back(s.substr(start,\
    \ end - start + 1));\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n  \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \    if(n == 1)\n                res.push_back(c);\n            else\n       \
    \         res.push_back(\"aeiou\");\n        else\n            if(n == 1)\n  \
    \              res.push_back(c);\n            else\n                res.push_back(\"\
    bcdfghjklmnpqrstvwxyz\");\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::vector<std::string>\
    \ words;\n    \n    // Split s into words\n    for(auto &c: s)\n        if(c ==\
    \ ' ' || c == '\\t' || c == '\\n')\n            words.push_back(c);\n    \n  \
    \  // Sort the words\n    std::sort(words.begin(), words.end());\n    \n    //\
    \ Filter the words by counting consonants\n    for(auto &c: words)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            words.erase(std::remove(words.begin(),\
    \ words.end(), c), words.end());\n    \n    // Add the words that contains exactly\
    \ n consonants\n    for(auto &c: words)\n        if(c == n)\n            res.push_back(c);\n\
    \    \n    return res;", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    long count = 0;\n    for (auto &c: s) {\n   \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \      count++;\n        }\n    }\n    if (count == n) {\n        v.push_back(s);\n\
    \    }\n    return v;", "    std::vector<std::string> res;\n    \n    // Your\
    \ code goes here\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    if (s.empty()) {\n        return res;\n    }\n    \n    long start = 0;\n\
    \    long end = 0;\n    long count = 0;\n    \n    for (long i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'a') {\n            start = i;\n        }\n    \
    \    if (s[i] == 'z') {\n            end = i;\n        }\n        if (s[i] ==\
    \ 'a' || s[i] == 'z') {\n            count++;\n        }\n    }\n    \n    if\
    \ (n == count) {\n        for (long i = start; i <= end; i++) {\n            res.push_back(s.substr(start,\
    \ end - start));\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n  \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \    if(n == 1)\n                res.push_back(c);\n            else\n       \
    \         res.push_back(c+c);\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    for(long i = 0; i < s.length(); i++) {\n        for(long j = 0; j <\
    \ n; j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n           \
    \     v.push_back(s.substr(i, 1));\n                break;\n            }\n  \
    \      }\n    }\n    return v;", "    std::vector<std::string> res;\n    // Write\
    \ your code here\n    return res;", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    for(long i = 0; i < s.length(); i++) {\n   \
    \     if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\
    \ {\n            v.push_back(s.substr(0, i));\n            v.push_back(s.substr(i,\
    \ s.length()));\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Your code goes here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Your code goes here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::vector<std::string>\
    \ words;\n    \n    // Split s into words\n    for(auto &w : s)\n        words.push_back(w);\n\
    \    \n    // Sort the words\n    std::sort(words.begin(), words.end());\n   \
    \ \n    // Count the number of consonants\n    long num_consonants = 0;\n    for(auto\
    \ &w : words)\n        num_consonants += w.size();\n    \n    // If there are\
    \ enough consonants, return them\n    if(num_consonants >= n)\n        return\
    \ words;\n    \n    // Otherwise, return an empty list\n    return res;", "  \
    \  std::vector<std::string> res;\n    \n    // Write your code here\n    \n  \
    \  return res;", '    // Your code here', "    std::vector<std::string> res;\n\
    \    if (s.empty()) {\n        return res;\n    }\n    \n    std::string word;\n\
    \    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    \n  \
    \  if (word.size() == n) {\n        res.push_back(word);\n    }\n    \n    for\
    \ (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            word += c;\n        }\n    }\n    \n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         word += c;\n        }\n    }\n    \n    if (word.size() == n) {\n  \
    \      res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word\
    \ += c;\n        }\n    }\n    \n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n \
    \   \n    if (word.size() == n) {\n        res.push_back(word);\n    }\n    \n\
    \    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    \n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         word += c;\n        }\n    }\n    \n    if (word.size() == n) {\n  \
    \      res.push_back(word);\n    }\n    \n    for (auto &c : s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word\
    \ += c;\n        }\n    }\n    \n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n \
    \   \n", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    std::vector<std::string> res;\n    // Write your\
    \ code here\n    return res;", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i'\
    \ || i == 'o' || i == 'u')\n        {\n            v.push_back(i);\n        }\n\
    \    }\n    return v;", "    std::vector<std::string> res;\n    long count = 0;\n\
    \    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            count++;\n        }\n    }\n    if(count == n) {\n\
    \        res.push_back(\"a\");\n        res.push_back(\"e\");\n        res.push_back(\"\
    i\");\n        res.push_back(\"o\");\n        res.push_back(\"u\");\n    }\n \
    \   return res;", "    std::vector<std::string> res;\n    \n    // Write your\
    \ code here\n    \n    return res;", "    std::vector<std::string> res;\n    //\
    \ Write your code here\n    return res;", "    std::vector<std::string> res;\n\
    \    \n    // Your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // TODO: Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n \
    \   v.push_back(\"ab\");\n    v.push_back(\"abc\");\n    v.push_back(\"abcd\"\
    );\n    v.push_back(\"abcde\");\n    v.push_back(\"abcdef\");\n    v.push_back(\"\
    abcdefg\");\n    v.push_back(\"abcdefgh\");\n    v.push_back(\"abcdefghi\");\n\
    \    v.push_back(\"abcdefghij\");\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"\
    abcdefghijkl\");\n    v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\"\
    );\n    v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\"\
    );\n    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty())\n        return res;\n    \n    std::string word =\
    \ \"\";\n    \n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n        else\
    \ if (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o'\
    \ || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n\
    \        }\n        else if (c == 'y') {\n            word += c;\n        }\n\
    \        else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n\
    \            word += c;\n        }\n        else if (c == 'y') {\n           \
    \ word += c;\n        }\n        else if (c == 'o' || c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n  \
    \      }\n        else if (c == 'y') {\n            word += c;\n        }\n  \
    \      else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n\
    \            word += c;\n        }\n        else if (c == 'y') {\n           \
    \ word += c;\n        }\n        else if (c == 'o' || c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n  \
    \      }\n        else if (c == 'y') {\n            word += c;\n        }\n  \
    \      else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n\
    \            word += c;\n        }\n        else if (c == 'y') {\n           \
    \ word += c;\n        }\n        else if (c == 'o' || c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'u') {\n            word += c;\n        }\n        else if\
    \ (c == 'y') {\n            word += c;\n        }\n        else if (c == 'o' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n            word += c;\n  \
    \      }\n        else if (c == 'y') {\n            word += c;\n        }\n  \
    \      else if (c == 'o' || c == 'a' || c == 'e' || c == 'i' || c == 'u') {\n",
  "    std::vector<std::string> res;\n    \n    if(s.empty())\n        return res;\n\
    \    \n    for(long i = 0; i < s.size(); i++) {\n        long count = 0;\n   \
    \     for(long j = 0; j < s.size(); j++) {\n            if(s[i] == s[j])\n   \
    \             count++;\n        }\n        if(count == n)\n            res.push_back(s.substr(0,\
    \ i));\n    }\n    \n    return res;", "    std::vector<std::string> res;\n  \
    \  // Write your code here\n    return res;", "    // Your code here\n    std::vector<std::string>\
    \ res;\n    long cnt = 0;\n    for (auto &c : s) {\n        if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n\
    \    }\n    if (cnt == n) {\n        res.push_back(\"a\");\n        res.push_back(\"\
    e\");\n        res.push_back(\"i\");\n        res.push_back(\"o\");\n        res.push_back(\"\
    u\");\n    }\n    return res;", "    std::vector<std::string> res;\n    \n   \
    \ // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;", "    std::vector<std::string> res;\n\
    \    // Your code goes here\n    return res;", "    std::vector<std::string> result;\n\
    \    \n    // Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n  \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \      res.push_back(\"aeiou\");\n            else\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(\"aeiou\");\n            else\n\
    \                res.push_back(c);\n    \n    for(auto &c: s)\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"\
    aeiou\");\n            else\n                res.push_back(c);\n    \n    for(auto\
    \ &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              res.push_back(\"aeiou\");\n            else\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(\"aeiou\");\n            else\n\
    \                res.push_back(c);\n    \n    for(auto &c: s)\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"\
    aeiou\");\n            else\n                res.push_back(c);\n    \n    for(auto\
    \ &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              res.push_back(\"aeiou\");\n            else\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n", "    std::vector<std::string> res;\n    \n    //\
    \ Your code here\n    \n    return res;", "    std::vector<std::string> result;\n\
    \    // Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i <\
    \ s.size(); i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i]\
    \ == ' ')\n                break;\n            else if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n\
    \            else\n                res.push_back(s.substr(i, 1));\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> v;\n    // Your code here\n\
    \    return v;", "    std::vector<std::string> res;\n    \n    if(s.empty())\n\
    \        return res;\n    \n    for(long i = 0; i < s.size(); i++) {\n       \
    \ for(long j = i; j < s.size(); j++) {\n            if(s[i] == s[j] && s[i] !=\
    \ 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u' && s[i] != 'A'\
    \ && s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U') {\n           \
    \     res.push_back(s.substr(i, j));\n                i = j;\n               \
    \ break;\n            }\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::string word = \"\
    \";\n    for(char c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            word += c;\n    \n    for(long i = 0; i < word.length();\
    \ i++)\n        if(n == word.at(i))\n            res.push_back(word);\n    \n\
    \    return res;", "    std::vector<std::string> res;\n    if(s.empty())\n   \
    \     return res;\n    \n    for(long i=0; i<s.length(); i++) {\n        for(long\
    \ j=0; j<s.length(); j++) {\n            if(s[i] == s[j]) {\n                res.push_back(s.substr(i,\
    \ j+1));\n                i = j;\n            }\n        }\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) {\n        return\
    \ res;\n    }\n    \n    long cur = 0;\n    \n    for (auto &c: s) {\n       \
    \ if (cur == n) {\n            res.push_back(std::string(&c, 1));\n        }\n\
    \        cur++;\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    for(long i = 0; i < s.size(); i++) {\n        v.push_back(s.substr(i,\
    \ 1));\n    }\n    return v;", "    std::vector<std::string> result;\n    if (s.empty())\
    \ {\n        return result;\n    }\n    \n    long start = 0;\n    long end =\
    \ s.size();\n    \n    while (start < end) {\n        long mid = (start + end)\
    \ / 2;\n        \n        if (mid > end - n) {\n            end = mid;\n     \
    \   } else {\n            start = mid + 1;\n        }\n        \n        if (s[mid]\
    \ != 'a' && s[mid] != 'e' && s[mid] != 'i' && s[mid] != 'o' && s[mid] != 'u')\
    \ {\n            result.push_back(s.substr(start, mid - start));\n        }\n\
    \    }\n    \n    return result;", "    std::vector<std::string> res;\n    if(s.empty())\n\
    \        return res;\n    \n    for(long i = 0; i < s.size(); i++) {\n       \
    \ for(long j = 0; j < n; j++) {\n            if(s[i] == ' ')\n               \
    \ res.emplace_back(s.substr(0, i));\n            else if(s[i] == 'a')\n      \
    \          res.emplace_back(s.substr(0, i) + s.substr(i + 1, i + 1) + s.substr(i\
    \ + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n          \
    \  else if(s[i] == 'e')\n                res.emplace_back(s.substr(0, i) + s.substr(i\
    \ + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i +\
    \ 4, i + 4));\n            else if(s[i] == 'i')\n                res.emplace_back(s.substr(0,\
    \ i) + s.substr(i + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3)\
    \ + s.substr(i + 4, i + 4));\n            else if(s[i] == 'o')\n             \
    \   res.emplace_back(s.substr(0, i) + s.substr(i + 1, i + 1) + s.substr(i + 2,\
    \ i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n            else\
    \ if(s[i] == 'u')\n                res.emplace_back(s.substr(0, i) + s.substr(i\
    \ + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i +\
    \ 4, i + 4));\n            else if(s[i] == 'y')\n                res.emplace_back(s.substr(0,\
    \ i) + s.substr(i + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3)\
    \ + s.substr(i + 4, i + 4));\n            else if(s[i] == 'h')\n             \
    \   res.emplace_back(s.substr(0, i) + s.substr(i + 1, i + 1) + s.substr(i + 2,\
    \ i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n            else\
    \ if(s[i] == 't')\n                res.emplace_back(s.substr(0, i) + s.substr(i\
    \ + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3) + s.substr(i +\
    \ 4, i + 4));\n            else if(s[i] == 's')\n                res.emplace_back(s.substr(0,\
    \ i) + s.substr(i + 1, i + 1) + s.substr(i + 2, i + 2) + s.substr(i + 3, i + 3)\
    \ + s.substr(i + 4, i + 4));\n            else if(s[i] == 'r')\n             \
    \   res.emplace_back(s.substr(0, i) + s.substr(i + 1, i + 1) + s.substr(i + 2,\
    \ i + 2) + s.substr(i + 3, i + 3) + s.substr(i + 4, i + 4));\n            else\
    \ if(s[i] == 'n')\n                res.emplace_back(s.substr(0, i) + ", "    //\
    \ your code goes here\n    std::vector<std::string> res;\n    long start = 0;\n\
    \    long end = 0;\n    long count = 0;\n    long index = 0;\n    while(index\
    \ < s.size()) {\n        if(s[index] == ' ') {\n            end = index;\n   \
    \         while(end < s.size() && s[end] == ' ') {\n                end++;\n \
    \           }\n            if(end - start == n) {\n                res.push_back(s.substr(start,\
    \ end - start));\n                start = end;\n                count = 0;\n \
    \           }\n        }\n        index++;\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n  \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \    res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n  \
    \  \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    return res;", '    // code here', " \
    \   std::vector<std::string> res;\n    \n    // Write your code here\n    \n \
    \   return res;", "    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;", "    std::vector<std::string> res;\n    \n    //\
    \ Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    // Write your code here\n    return v;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    std::vector<std::string>\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n    \n    for (auto &c : s) {\n\
    \        if (c == ' ') {\n            \n        }\n        else if (vowels.find(c)\
    \ == vowels.end()) {\n            \n        }\n        else {\n            \n\
    \        }\n    }\n    return res;", "    std::vector<std::string> v;\n    //\
    \ Write your code here\n    \n    return v;", "    std::vector<std::string> res;\n\
    \    \n    // Your code goes here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    if (s.empty()) return v;\n    \n    long count\
    \ = 0;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            v.push_back(\"\");\n            count++;\n\
    \        } else if (c == 'y') {\n            v.push_back(\"i\");\n           \
    \ count++;\n        } else if (c == 'o') {\n            v.push_back(\"e\");\n\
    \            count++;\n        } else if (c == 'h') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'r') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'l') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'd') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 's') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 't') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'k') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'p') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'f') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'b') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'm') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'v') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'w') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'c') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'h') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'n') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'x') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'q') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'j') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'u') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'z') {\n            v.push_back(\"\
    e\");\n            count++;\n        } else if (c == 'x') {\n            v.push_back(\"\
    i\");\n            count++;\n        } else if (c == 'y') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 'k') {\n            v.push_back(\"\
    a\");\n            count++;\n        } else if (c == 's') {\n            v.push_back(\"\
    a\");\n            count++;\n", "    std::vector<std::string> res;\n    \n   \
    \ // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            res.push_back(c);\n        }\n    }\n \
    \   return res;", "    std::vector<std::string> res;\n    \n    // Write your\
    \ code here\n    \n    return res;", "    std::vector<std::string> res;\n    \n\
    \    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    for(auto &c: s) {\n        if(std::count(c.begin(), c.end(), 'a')\
    \ > n || std::count(c.begin(), c.end(), 'e') > n || std::count(c.begin(), c.end(),\
    \ 'i') > n || std::count(c.begin(), c.end(), 'o') > n || std::count(c.begin(),\
    \ c.end(), 'u') > n) {\n            res.push_back(c);\n        }\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) {\n        return\
    \ res;\n    }\n    \n    // Your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", '    // Your
    code here', "    std::vector<std::string> res;\n    if(s.empty())\n        return\
    \ res;\n    \n    long start = 0;\n    long end = s.size();\n    long mid = (start\
    \ + end)/2;\n    \n    while(start < end) {\n        while(s[start] == ' ' ||\
    \ s[start] == '\\0')\n            start++;\n        \n        while(s[end] ==\
    \ ' ' || s[end] == '\\0')\n            end--;\n        \n        if(end - start\
    \ == n)\n            res.push_back(s.substr(start, end - start));\n        \n\
    \        while(s[mid] == ' ' || s[mid] == '\\0')\n            mid++;\n       \
    \ \n        if(mid - start == n)\n            res.push_back(s.substr(start, mid\
    \ - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n    \
    \        mid++;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[end] == ' ' || s[end] == '\\0')\n\
    \            end--;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[start] == ' ' || s[start] == '\\0')\n\
    \            start++;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[end] == ' ' || s[end] == '\\0')\n\
    \            end--;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == n)\n            res.push_back(s.substr(start,\
    \ mid - start));\n        \n        while(s[start] == ' ' || s[start] == '\\0')\n\
    \            start++;\n        \n        if(end - mid == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        while(s[mid] == ' ' || s[mid] == '\\0')\n\
    \            mid++;\n        \n        if(mid - start == ", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i <\
    \ s.length(); i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i]\
    \ == ' ')\n                break;\n            else if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n\
    \            else\n                res.push_back(s.substr(i, 1));\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    // Write your\
    \ code here\n    return res;", "    std::vector<std::string> res;\n    \n    if(s.empty())\n\
    \        return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"a\");\n \
    \           else\n                res.push_back(\"e\");\n        else\n      \
    \      if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h'\
    \ || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z')\n                res.push_back(\"b\");\n          \
    \  else\n                res.push_back(\"c\");\n    \n    for(auto &c: s)\n  \
    \      if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h'\
    \ || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z')\n            if(c == 'b' || c == 'c' || c == 'd' ||\
    \ c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c ==\
    \ 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n             \
    \   res.push_back(\"b\");\n            else\n                res.push_back(\"\
    c\");\n    \n    for(auto &c: s)\n        if(c == 'c' || c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v'\
    \ || c == 'w' || c == 'x' || c == 'y' || c == 'z')\n            if(c == 'c' ||\
    \ c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || ", " \
    \   std::vector<std::string> res;\n    if (s.empty()) {\n        return res;\n\
    \    }\n    \n    long start = 0;\n    long end = s.size();\n    long mid = start\
    \ + (end - start) / 2;\n    \n    while (start < end) {\n        long count =\
    \ 0;\n        \n        while (start < end && s[start] == s[mid]) {\n        \
    \    ++start;\n            ++count;\n        }\n        \n        if (count ==\
    \ n) {\n            res.push_back(s.substr(start, mid - start));\n           \
    \ start = mid + 1;\n        }\n        \n        while (start < end && s[end]\
    \ == s[mid]) {\n            --end;\n            ++count;\n        }\n        \n\
    \        if (count == n) {\n            res.push_back(s.substr(start, end - start));\n\
    \            end = mid - 1;\n        }\n        \n        mid = start + (end -\
    \ start) / 2;\n    }\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                res.push_back(\"aeiou\");\n       \
    \     }\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n                res.push_back(\"aeiou\");\n            }\n        }\n   \
    \     if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h'\
    \ || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z') {\n            if(c == 'b' || c == 'c' || c == 'd'\
    \ || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c\
    \ == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n           \
    \     res.push_back(\"bcdfghjklmnpqrstvwxyz\");\n            }\n            if(c\
    \ == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j'\
    \ || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c\
    \ == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y'\
    \ || c == 'z') {\n                res.push_back(\"bcdfghjklmnpqrstvwxyz\");\n\
    \            }\n        }\n        if(c == 'c' || c == 'd' || c == 'f' || c ==\
    \ 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            if(c == 'c' || c\
    \ == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || ", " \
    \   std::vector<std::string> res;\n    \n    // Your code here\n    \n    return\
    \ res;", '    // Your code here', "    std::vector<std::string> v;\n    \n   \
    \ // Your code here\n    \n    return v;", "    std::vector<std::string> v;\n\
    \    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // TODO: Write your code here\n    \n    return res;", "   \
    \ std::vector<std::string> result;\n    \n    // Write your code here\n    \n\
    \    return result;", "    std::vector<std::string> res;\n    \n    // Write your\
    \ code here\n    \n    return res;", "    std::vector<std::string> res;\n    //\
    \ Write your code here\n    return res;", "    std::vector<std::string> res;\n\
    \    if(s.empty())\n        return res;\n    \n    long start = 0;\n    long end\
    \ = 0;\n    long count = 0;\n    \n    while(end < s.size()) {\n        while(end\
    \ < s.size() && s[end] != '\\0')\n            end++;\n        \n        if(end\
    \ >= s.size())\n            break;\n        \n        while(start < end && s[start]\
    \ != '\\0')\n            start++;\n        \n        if(start >= end)\n      \
    \      break;\n        \n        while(count < n && s[start] == s[end])\n    \
    \        count++;\n        \n        if(count == n)\n            res.push_back(s.substr(start,\
    \ end - start));\n        \n        start = end;\n        end++;\n        count++;\n\
    \    }\n    \n    return res;", "    std::vector<std::string> v;\n    \n    //\
    \ Write your code here\n    \n    return v;", "    std::vector<std::string> res;\n\
    \    if(s.empty())\n        return res;\n    \n    for(long i=0; i<s.length();\
    \ i++) {\n        for(long j=0; j<s.length(); j++) {\n            if(s[i]==s[j]\
    \ && s[i]!=' ' && s[j]!=' ') {\n                if(n==1) {\n                 \
    \   res.push_back(s.substr(i,1));\n                }\n                else {\n\
    \                    if(n>1) {\n                        res.push_back(s.substr(i,1));\n\
    \                        res.push_back(s.substr(j,1));\n                    }\n\
    \                    else {\n                        res.push_back(s.substr(i,1));\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return res;", "    // Your code here\n    std::vector<std::string> v;\n  \
    \  v.push_back(\"\");\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y') {\n            v.push_back(s.substr(0, i));\n        }\n    }\n    return\
    \ v;", "    std::vector<std::string> v;\n    if(s.empty())\n        return v;\n\
    \    \n    for(long i = 0; i < s.length(); i++) {\n        for(long j = i; j <\
    \ s.length(); j++) {\n            if(s[j] == ' ') {\n                v.push_back(s.substr(i,\
    \ j));\n                i = j + 1;\n                break;\n            }\n  \
    \      }\n    }\n    \n    return v;", "    std::vector<std::string> res;\n  \
    \  \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    return res;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    return res;", "    std::vector<std::string>\
    \ res;\n    long cnt = 0;\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n        }\n\
    \    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n \
    \   }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt != n)\
    \ {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n      \
    \  }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt !=\
    \ n) {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n   \
    \     }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            cnt++;\n        }\n    }\n    if(cnt !=\
    \ n) {\n        return res;\n    }\n    for(auto &c: s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            cnt++;\n   \
    \     }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c:\
    \ s) {\n        if(c == 'a' || ", "    std::vector<std::string> res;\n    if(s.empty())\n\
    \        return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n                res.push_back(\"a\");\n \
    \           else\n                res.push_back(\"e\");\n        else\n      \
    \      if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h'\
    \ || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z')\n                res.push_back(\"b\");\n          \
    \  else\n                res.push_back(\"c\");\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    for(auto &c: s) {\n        if(c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u') {\n            v.push_back(c);\n        }\n    }\n    return\
    \ v;", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    std::vector<std::string> v;\n    for(long i = 0;\
    \ i < s.length(); i++) {\n        v.push_back(s.substr(i, 1));\n    }\n    return\
    \ v;", "    // Your code here\n    std::vector<std::string> res;\n    \n    for(int\
    \ i=0;i<s.size();i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o'\
    \ || s[i]=='u'){\n            if(i+n<s.size()){\n                res.push_back(s.substr(i,n));\n\
    \            }\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i <\
    \ s.size(); i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i]\
    \ == ' ')\n                break;\n            else if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                continue;\n\
    \            else\n                res.push_back(s.substr(i, 1));\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if(s.empty())\n\
    \        return res;\n    \n    long start = 0;\n    long end = s.size();\n  \
    \  \n    while(start < end) {\n        long mid = (start + end) / 2;\n       \
    \ \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] == 'i' || s[mid] == 'o'\
    \ || s[mid] == 'u') {\n            end = mid;\n        } else {\n            start\
    \ = mid + 1;\n        }\n    }\n    \n    while(start < s.size()) {\n        long\
    \ mid = (start + end) / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e'\
    \ || s[mid] == 'i' || s[mid] == 'o' || s[mid] == 'u') {\n            end = mid;\n\
    \        } else {\n            start = mid + 1;\n        }\n    }\n    \n    while(start\
    \ < s.size()) {\n        long mid = (start + end) / 2;\n        \n        if(s[mid]\
    \ == 'a' || s[mid] == 'e' || s[mid] == 'i' || s[mid] == 'o' || s[mid] == 'u')\
    \ {\n            end = mid;\n        } else {\n            start = mid + 1;\n\
    \        }\n    }\n    \n    while(start < s.size()) {\n        long mid = (start\
    \ + end) / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] ==\
    \ 'i' || s[mid] == 'o' || s[mid] == 'u') {\n            end = mid;\n        }\
    \ else {\n            start = mid + 1;\n        }\n    }\n    \n    while(start\
    \ < s.size()) {\n        long mid = (start + end) / 2;\n        \n        if(s[mid]\
    \ == 'a' || s[mid] == 'e' || s[mid] == 'i' || s[mid] == 'o' || s[mid] == 'u')\
    \ {\n            end = mid;\n        } else {\n            start = mid + 1;\n\
    \        }\n    }\n    \n    while(start < s.size()) {\n        long mid = (start\
    \ + end) / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] ==\
    \ 'i' || s[mid] == 'o' || s[mid] == 'u') {\n            end = mid;\n        }\
    \ else {\n            start = mid + 1;\n        }\n    }\n    \n    while(start\
    \ < s.size()) {\n        long mid = (start + end) / 2;\n        \n        if(s[mid]\
    \ == 'a' || s[mid] == 'e' || s[mid] == 'i' || s[mid] == 'o' || s[mid] == 'u')\
    \ {\n            end = mid;\n        } else {\n            start = mid + 1;\n\
    \        }\n    }\n    \n    while(start < s.size()) {\n        long mid = (start\
    \ + end) / 2;\n        \n        if(s[mid] == 'a' || s[mid] == 'e' || s[mid] ==\
    \ 'i' || s[mid", "    std::vector<std::string> v;\n    if (s.empty())\n      \
    \  return v;\n    \n    long start = 0;\n    long end = 0;\n    \n    for (long\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            if (end\
    \ - start == n) {\n                v.push_back(s.substr(start, end - start));\n\
    \                start = i + 1;\n                end = i + 1;\n            }\n\
    \        }\n        else if (s[i] == 'y') {\n            if (end - start == n)\
    \ {\n                v.push_back(s.substr(start, end - start));\n            \
    \    start = i + 1;\n                end = i + 1;\n            }\n        }\n\
    \        else if (s[i] == 'e') {\n            if (end - start == n) {\n      \
    \          v.push_back(s.substr(start, end - start));\n                start =\
    \ i + 1;\n                end = i + 1;\n            }\n        }\n        else\
    \ if (s[i] == 'o') {\n            if (end - start == n) {\n                v.push_back(s.substr(start,\
    \ end - start));\n                start = i + 1;\n                end = i + 1;\n\
    \            }\n        }\n        else if (s[i] == 'i') {\n            if (end\
    \ - start == n) {\n                v.push_back(s.substr(start, end - start));\n\
    \                start = i + 1;\n                end = i + 1;\n            }\n\
    \        }\n        else if (s[i] == 'u') {\n            if (end - start == n)\
    \ {\n                v.push_back(s.substr(start, end - start));\n            \
    \    start = i + 1;\n                end = i + 1;\n            }\n        }\n\
    \        else if (s[i] == 'a') {\n            if (end - start == n) {\n      \
    \          v.push_back(s.substr(start, end - start));\n                start =\
    \ i + 1;\n                end = i + 1;\n            }\n        }\n        else\
    \ if (s[i] == 'y') {\n            if (end - start == n) {\n                v.push_back(s.substr(start,\
    \ end - start));\n                start = i + 1;\n                end = i + 1;\n\
    \            }\n        }\n        else if (s[i] == 's') {\n            if (end\
    \ - start == n) {\n                v.push_back(s.substr(start, end - start));\n\
    \                start = i + 1;\n                end = i + 1;\n            }\n\
    \        }\n        else if (s[i] == 't') {\n            if (end - start == n)\
    \ {\n                v.push_back(s.substr(start, end - start));\n            \
    \    start = i + 1;\n                end = i + 1;\n            }\n        }\n\
    \        else if (s[i] == 'h') {\n            if (end - start == n) {\n      \
    \          v.push_back(s.substr(start, end - start));\n                start =\
    \ i + 1;\n                end = i + 1;\n            }\n        }\n        else\
    \ if (s[i] == 'c') {\n            if (end - start == n) {\n                v.push_back(s.substr(start,\
    \ end - start));\n                start = i + 1;\n                end = i + 1;\n\
    \            }\n        }\n        else if (s[i] == 'k') {\n            if (end\
    \ - start == n) {\n                v.push_back(s.substr(start, end - start));\n\
    \                start = i + 1;\n", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    for(auto &c: s) {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(\"\"\
    );\n        }\n        if(c == 'b' || c == 'c' || c == 'd' || c == 'f' || c ==\
    \ 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            v.push_back(\"\"\
    );\n        }\n        if(c == 'p' || c == 'q' || c == 'r' || c == 't' || c ==\
    \ 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            v.push_back(\"\
    \");\n        }\n        if(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c\
    \ == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k'\
    \ || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c\
    \ == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z') {\n            v.push_back(\"\");\n        }\n    \
    \    if(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' ||\
    \ c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c ==\
    \ 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c\
    \ == 'z') {\n            v.push_back(\"\");\n        }\n        if(c == 'a' ||\
    \ c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c ==\
    \ 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c\
    \ == 'u' || c == 'v' || c == 'w' || c == 'x' || ", "    std::vector<std::string>\
    \ result;\n    // Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    if (s.empty()) return v;\n    \n    long start\
    \ = 0;\n    long end = 0;\n    long count = 0;\n    \n    for (long i = 0; i <\
    \ s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u') {\n            v.push_back(s.substr(start, i - start));\n\
    \            start = i + 1;\n            end = i;\n            count++;\n    \
    \    }\n    }\n    \n    if (count == n) v.push_back(s.substr(start, s.size()\
    \ - start));\n    \n    return v;", "    std::vector<std::string> v;\n    v.push_back(s);\n\
    \    \n    for(long i = 0; i < s.size(); i++) {\n        for(long j = 0; j < n;\
    \ j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(0,\
    \ i));\n                break;\n            }\n            else if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n           \
    \     v.push_back(s.substr(0, i));\n                break;\n            }\n  \
    \      }\n    }\n    return v;", "    std::vector<std::string> res;\n    // Write\
    \ your code here\n    return res;", "    std::vector<std::string> res;\n    \n\
    \    // Write your code here\n    \n    return res;", "    // Your code here\n\
    \    std::vector<std::string> v;\n    for(auto &i : s)\n    {\n        if(i ==\
    \ 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'A' || i == 'E'\
    \ || i == 'I' || i == 'O' || i == 'U')\n        {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> res;\n    \n\
    \    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    long start\
    \ = 0;\n    long end = s.size();\n    \n    while (start < end) {\n        long\
    \ mid = (start + end) / 2;\n        \n        // Find the first consonant in the\
    \ middle of the word\n        long consonant_index = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_2 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_3 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_4 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_5 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_6 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_7 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_8 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_9 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_10 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_11 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_12 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_13 = s.find_first_not_of(s.begin()\
    \ + mid, s.end());\n        \n        // Find the first consonant in the middle\
    \ of the word\n        long consonant_index_14 = s.find_first_not_", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(long i = 0; i <\
    \ s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u')\n            continue;\n        \n        for(long\
    \ j = i; j < s.length(); j++) {\n            if(s[j] == 'a' || s[j] == 'e' ||\
    \ s[j] == 'i' || s[j] == 'o' || s[j] == 'u')\n                continue;\n    \
    \        \n            if(s[j] == s[i]) {\n                res.push_back(s.substr(i,\
    \ j));\n                i = j + 1;\n                \n                if(res.size()\
    \ == n)\n                    break;\n            }\n        }\n    }\n    \n \
    \   return res;", "    // Your code here\n    std::vector<std::string> v;\n  \
    \  for(auto &i : s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i' || i ==\
    \ 'o' || i == 'u')\n        {\n            v.push_back(i);\n        }\n    }\n\
    \    return v;", "    std::vector<std::string> res;\n    // Write your code here\n\
    \    return res;", "    std::vector<std::string> res;\n    // Write your code\
    \ here\n    return res;", "    std::vector<std::string> res;\n    long cnt = 0;\n\
    \    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt++;\n\
    \        }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto\
    \ &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt--;\n        }\n\
    \    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n         \
    \   cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n    }\n\
    \    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt--;\n\
    \        }\n    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n\
    \            cnt++;\n        }\n    }\n    if(cnt != n) {\n        return res;\n\
    \    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n         \
    \   cnt--;\n        }\n    }\n    for(auto &c : s) {\n        if(c != ' ' && c\
    \ != '-') {\n            cnt++;\n        }\n    }\n    if(cnt != n) {\n      \
    \  return res;\n    }\n    for(auto &c : s) {\n        if(c != ' ' && c != '-')\
    \ {\n            cnt--;\n        }\n    }\n    for(auto &c : s) {\n        if(c\
    \ != ' ' && c != '-') {\n            cnt++;\n        }\n    }\n    if(cnt != n)\
    \ {\n        return res;\n    }\n    for(auto &c : s) {\n        if(c != ' ' &&\
    \ c != '-') {\n            cnt--;\n        }\n    }\n    for(auto &c : s) {\n\
    \        if(c != ' ' && c != '-') {\n            cnt++;\n        }\n    }\n  \
    \  if(cnt != n) {\n        return res;\n    }\n    for(auto &c : s) {\n      \
    \  if(c != ' ' && c != '-') {\n            cnt--;\n        }\n    }\n    for(auto\
    \ &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt++;\n        }\n\
    \    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto &c : s) {\n\
    \        if(c != ' ' && c != '-') {\n            cnt--;\n        }\n    }\n  \
    \  for(auto &c : s) {\n        if(c != ' ' && c != '-') {\n            cnt++;\n\
    \        }\n    }\n    if(cnt != n) {\n        return res;\n    }\n    for(auto\
    \ &c : s) {\n        if(c != ' ' && c != '-", "    std::vector<std::string> res;\n\
    \    if (s.empty()) {\n        return res;\n    }\n    \n    // Your code goes\
    \ here\n    \n    return res;", "    std::vector<std::string> res;\n    if(s.empty())\n\
    \        return res;\n    \n    long start = 0;\n    long end = s.size();\n  \
    \  long mid = end / 2;\n    \n    while(start < end) {\n        while(start <\
    \ mid && s[start] != s[mid])\n            start++;\n        \n        while(end\
    \ > mid && s[end] != s[mid])\n            end--;\n        \n        if(end - start\
    \ == n)\n            res.push_back(s.substr(start, end - start));\n        \n\
    \        mid = (end - start) / 2;\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    long start = 0;\n  \
    \  long end = 0;\n    \n    for(long i = 0; i < s.size(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y') {\n            start = i;\n        }\n        if(s[i] == 'n') {\n     \
    \       end = i;\n            break;\n        }\n    }\n    \n    if(end == s.size())\n\
    \        end = s.size() - 1;\n    \n    for(long i = start; i <= end; i++) {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') {\n            if(n == 1)\n                res.push_back(s.substr(start,\
    \ i - start + 1));\n            else\n                res.push_back(s.substr(start,\
    \ i - start + 1));\n            \n            start = i + 1;\n        }\n    }\n\
    \    \n    return res;", "    // your code here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    for(auto &c: s)\n    {\n        if(isalpha(c))\n\
    \        {\n            temp = temp + c;\n        }\n    }\n    for(auto &c: temp)\n\
    \    {\n        if(isalpha(c))\n        {\n            v.push_back(temp);\n  \
    \          temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n  \
    \      if(isalpha(c))\n        {\n            v.push_back(temp);\n           \
    \ temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n\
    \        {\n            v.push_back(temp);\n            temp.clear();\n      \
    \  }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n\
    \            v.push_back(temp);\n            temp.clear();\n        }\n    }\n\
    \    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n          \
    \  v.push_back(temp);\n            temp.clear();\n        }\n    }\n    for(auto\
    \ &c: temp)\n    {\n        if(isalpha(c))\n        {\n            v.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n\
    \        if(isalpha(c))\n        {\n            v.push_back(temp);\n         \
    \   temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n\
    \        {\n            v.push_back(temp);\n            temp.clear();\n      \
    \  }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n\
    \            v.push_back(temp);\n            temp.clear();\n        }\n    }\n\
    \    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n          \
    \  v.push_back(temp);\n            temp.clear();\n        }\n    }\n    for(auto\
    \ &c: temp)\n    {\n        if(isalpha(c))\n        {\n            v.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n\
    \        if(isalpha(c))\n        {\n            v.push_back(temp);\n         \
    \   temp.clear();\n        }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n\
    \        {\n            v.push_back(temp);\n            temp.clear();\n      \
    \  }\n    }\n    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n\
    \            v.push_back(temp);\n            temp.clear();\n        }\n    }\n\
    \    for(auto &c: temp)\n    {\n        if(isalpha(c))\n        {\n          \
    \  v.push_back(temp);\n            temp.clear();\n        }\n    }\n    for(auto\
    \ &c: temp)", "    std::vector<std::string> res;\n    // Your code here\n    return\
    \ res;", "    // Your code here\n    std::vector<std::string> res;\n    std::string\
    \ temp;\n    long count = 0;\n    for(auto &c: s){\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n\
    \    }\n    if(count == n){\n        for(auto &c: s){\n            if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                res.push_back(temp);\n\
    \                temp = \"\";\n                count = 0;\n            }\n   \
    \         else{\n                temp += c;\n            }\n        }\n      \
    \  res.push_back(temp);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n \
    \   v.push_back(\"ab\");\n    v.push_back(\"abc\");\n    v.push_back(\"abcd\"\
    );\n    v.push_back(\"abcde\");\n    v.push_back(\"abcdef\");\n    v.push_back(\"\
    abcdefg\");\n    v.push_back(\"abcdefgh\");\n    v.push_back(\"abcdefghi\");\n\
    \    v.push_back(\"abcdefghij\");\n    v.push_back(\"abcdefghijk\");\n    v.push_back(\"\
    abcdefghijkl\");\n    v.push_back(\"abcdefghijklm\");\n    v.push_back(\"abcdefghijklmn\"\
    );\n    v.push_back(\"abcdefghijklmno\");\n    v.push_back(\"abcdefghijklmnop\"\
    );\n    v.push_back(\"abcdefghijklmnopq\");\n    v.push_back(\"abcdefghijklmnopqr\"\
    );\n    v.push_back(\"abcdefghijklmnopqrs\");\n    v.push_back(\"abcdefghijklmnopqrst\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstu\");\n    v.push_back(\"abcdefghijklmnopqrstuv\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvw\");\n    v.push_back(\"abcdefghijklmnopqrstuvwx\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxy\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyz\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyza\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzab\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabc\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcd\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcde\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdef\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh\");\n    v.push_back(\"\
    abcdefghijklmnopqrstuvwxyzabcdefghi\");\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"\
    );\n    v.push_back(\"abcdefghijklmnopqrstuvwxyzabcdefgh", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Your code goes here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Your code goes here\n    \n    return res;", "    // Your\
    \ code here\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(count\
    \ == n){\n        for(char c : s){\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'){\n                v.push_back(temp);\n        \
    \        temp = \"\";\n            }\n            else{\n                temp\
    \ += c;\n            }\n        }\n        v.push_back(temp);\n    }\n    return\
    \ v;", "    std::vector<std::string> res;\n    \n    // Your code here\n    \n\
    \    return res;", "    std::vector<std::string> res;\n    if(s.empty())\n   \
    \     return res;\n    \n    long start = 0;\n    long end = 0;\n    long count\
    \ = 0;\n    \n    while(end < s.size()) {\n        while(s[end] != '\\0' && s[end]\
    \ != '\\1' && s[end] != '\\2' && s[end] != '\\3' && s[end] != '\\4' && s[end]\
    \ != '\\5' && s[end] != '\\6' && s[end] != '\\7' && s[end] != '\\8' && s[end]\
    \ != '\\9') {\n            end++;\n        }\n        \n        if(s[end] == '\\\
    0')\n            break;\n        \n        while(s[end] != '\\0' && s[end] !=\
    \ '\\1' && s[end] != '\\2' && s[end] != '\\3' && s[end] != '\\4' && s[end] !=\
    \ '\\5' && s[end] != '\\6' && s[end] != '\\7' && s[end] != '\\8' && s[end] !=\
    \ '\\9') {\n            end++;\n        }\n        \n        if(s[end] == '\\\
    0')\n            break;\n        \n        if(s[end] == '\\0' && s[end+1] == '\\\
    0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1] !=\
    \ '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ == '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ != '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ == '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ != '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ == '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ != '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ == '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ != '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ == '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ != '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ == '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ != '\\0')\n            count++;\n        \n        if(s[end] == '\\0' && s[end+1]\
    \ == '\\0')\n            count++;\n        \n", "    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"a\");\n \
    \   v.push_back(\"b\");\n    v.push_back(\"c\");\n    v.push_back(\"d\");\n  \
    \  v.push_back(\"e\");\n    v.push_back(\"f\");\n    v.push_back(\"g\");\n   \
    \ v.push_back(\"h\");\n    v.push_back(\"i\");\n    v.push_back(\"j\");\n    v.push_back(\"\
    k\");\n    v.push_back(\"l\");\n    v.push_back(\"m\");\n    v.push_back(\"n\"\
    );\n    v.push_back(\"o\");\n    v.push_back(\"p\");\n    v.push_back(\"q\");\n\
    \    v.push_back(\"r\");\n    v.push_back(\"s\");\n    v.push_back(\"t\");\n \
    \   v.push_back(\"u\");\n    v.push_back(\"v\");\n    v.push_back(\"w\");\n  \
    \  v.push_back(\"x\");\n    v.push_back(\"y\");\n    v.push_back(\"z\");\n   \
    \ v.push_back(\"A\");\n    v.push_back(\"B\");\n    v.push_back(\"C\");\n    v.push_back(\"\
    D\");\n    v.push_back(\"E\");\n    v.push_back(\"F\");\n    v.push_back(\"G\"\
    );\n    v.push_back(\"H\");\n    v.push_back(\"I\");\n    v.push_back(\"J\");\n\
    \    v.push_back(\"K\");\n    v.push_back(\"L\");\n    v.push_back(\"M\");\n \
    \   v.push_back(\"N\");\n    v.push_back(\"O\");\n    v.push_back(\"P\");\n  \
    \  v.push_back(\"Q\");\n    v.push_back(\"R\");\n    v.push_back(\"S\");\n   \
    \ v.push_back(\"T\");\n    v.push_back(\"U\");\n    v.push_back(\"V\");\n    v.push_back(\"\
    W\");\n    v.push_back(\"X\");\n    v.push_back(\"Y\");\n    v.push_back(\"Z\"\
    );\n    v.push_back(\"0\");\n    v.push_back(\"1\");\n    v.push_back(\"2\");\n\
    \    v.push_back(\"3\");\n    v.push_back(\"4\");\n    v.push_back(\"5\");\n \
    \   v.push_back(\"6\");\n    v.push_back(\"7\");\n    v.push_back(\"8\");\n  \
    \  v.push_back(\"9\");\n    v.push_back(\"!\");\n    v.push_back(\"?\");\n   \
    \ v.push_back(\",\");\n    v.push_back(\";\");\n    v.push_back(\":\");\n    v.push_back(\"\
    ;\");\n    v.push_back(\"(\");\n    v.push_back(\")\");\n    v.push_back(\"{\"\
    );\n    v.push_back(\"", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;"]
stop_tokens:
- "\n}"
